0 <- (0, 0) (prog -> .-CGPROGRAM- cg_prog -ENDCG-  | __End, __Begin -> .prog __End  | *, )
1 <- (0, '-CGPROGRAM-') (preprocessing_stm -> .pp_if_stm  | -long-, dec -> .dec_specifier init_dec_list Semicolon  | -half3-, pp_if_stm -> .Pound -ifndef- ID  | -void-, cg_stm -> .function_definition  | -uniform-, dec -> .dec_specifier init_dec_list Semicolon  | -fixed3-, pp_cmd -> .Pound -include- String  | -struct-, cg_stm -> .dec  | ID, cg_stm -> .function_definition  | -short-, function_definition -> .dec_specifier declarator compound_stm  | ID, function_definition -> .dec_specifier declarator compound_stm  | -int-, preprocessing_stm -> .pp_cmd  | -short-, pp_if_stm -> .Pound if ID  | -char-, preprocessing_stm -> .pp_if_stm  | -fixed2-, cg_stms ->.  | -ENDCG-, cg_stm -> .function_definition  | -float2-, cg_prog -> .cg_stms  | -ENDCG-, pp_if_stm -> .Pound -ifdef- ID  | -fixed2-, pp_if_stm -> .Pound -endif-  | -fixed2-, dec -> .dec_specifier init_dec_list Semicolon  | -struct-, pp_if_stm -> .Pound -endif-  | -struct-, pp_if_stm -> .Pound -elif- ID  | -struct-, pp_cmd -> .Pound -pragma- ids Enter  | -fixed2-, cg_stm -> .preprocessing_stm  | -float4-, pp_cmd -> .Pound -pragma- ids Enter  | -int-, preprocessing_stm -> .pp_if_stm  | -uniform-, pp_if_stm -> .Pound if ID  | -float-, dec -> .dec_specifier init_dec_list Semicolon  | -char-, cg_stm -> .function_definition  | -fixed4-, type_specifier -> .-half2-  | LParen, pp_if_stm -> .Pound -elif- ID  | -double-, type_qualifier -> .-uniform-  | -half4-, pp_if_stm -> .Pound -endif-  | -half3-, preprocessing_stm -> .pp_if_stm  | -float3-, cg_stm -> .preprocessing_stm  | -fixed3-, preprocessing_stm -> .pp_if_stm  | -fixed4-, pp_if_stm -> .Pound -ifdef- ID  | ID, type_specifier -> .-char-  | ID, pp_cmd -> .Pound -include- String  | -void-, dec -> .dec_specifier init_dec_list Semicolon  | -half4-, type_qualifier -> .-uniform-  | -int-, cg_stm -> .dec  | -float-, dec_specifier -> .type_specifier  | LParen, pp_if_stm -> .Pound -ifndef- ID  | -ENDCG-, cg_stm -> .function_definition  | -ENDCG-, function_definition -> .dec_specifier declarator compound_stm  | -fixed2-, cg_stm -> .function_definition  | Pound, preprocessing_stm -> .pp_if_stm  | -half2-, function_definition -> .dec_specifier declarator compound_stm  | -half2-, pp_cmd -> .Pound -pragma- ids Enter  | Pound, pp_cmd -> .Pound -pragma- ids Enter  | -char-, pp_if_stm -> .Pound -endif-  | -double-, cg_stm -> .preprocessing_stm  | -char-, dec -> .dec_specifier init_dec_list Semicolon  | -fixed4-, cg_stm -> .dec  | -long-, pp_if_stm -> .Pound else  | -half4-, pp_cmd -> .Pound -include- String  | Pound, pp_if_stm -> .Pound -ifndef- ID  | -sampler2D-, pp_cmd -> .Pound -include- String  | ID, function_definition -> .dec_specifier declarator compound_stm  | -long-, type_qualifier -> .-uniform-  | -char-, cg_stm -> .preprocessing_stm  | -fixed4-, pp_cmd -> .Pound -include- String  | -short-, pp_cmd -> .Pound -include- String  | -int-, dec -> .struct_specifier Semicolon  | -double-, type_qualifier -> .-uniform-  | -fixed3-, cg_stm -> .preprocessing_stm  | -void-, pp_if_stm -> .Pound -elif- ID  | Pound, cg_stm -> .preprocessing_stm  | -float-, pp_cmd -> .Pound -pragma- ids Enter  | -sampler2D-, pp_cmd -> .Pound -include- String  | -double-, pp_if_stm -> .Pound -ifndef- ID  | -fixed4-, function_definition -> .dec_specifier declarator compound_stm  | -fixed3-, pp_if_stm -> .Pound -elif- ID  | -half3-, preprocessing_stm -> .pp_cmd  | -void-, cg_stm -> .dec  | -void-, type_specifier -> .-double-  | ID, pp_if_stm -> .Pound else  | -half3-, pp_if_stm -> .Pound else  | -sampler2D-, pp_if_stm -> .Pound -elif- ID  | -short-, dec -> .struct_specifier Semicolon  | -float2-, dec -> .dec_specifier init_dec_list Semicolon  | -int-, dec -> .dec_specifier init_dec_list Semicolon  | -half2-, pp_if_stm -> .Pound -ifndef- ID  | -fixed2-, cg_stm -> .preprocessing_stm  | -float2-, dec -> .struct_specifier Semicolon  | -float3-, preprocessing_stm -> .pp_if_stm  | -void-, pp_if_stm -> .Pound else  | -float4-, preprocessing_stm -> .pp_cmd  | -float3-, pp_if_stm -> .Pound -elif- ID  | -void-, preprocessing_stm -> .pp_cmd  | -long-, cg_stm -> .function_definition  | -fixed2-, pp_cmd -> .Pound -pragma- ids Enter  | -short-, pp_if_stm -> .Pound -endif-  | -short-, pp_if_stm -> .Pound if ID  | -double-, dec -> .dec_specifier init_dec_list Semicolon  | -uniform-, type_specifier -> .-half4-  | ID, pp_if_stm -> .Pound if ID  | -int-, cg_stm -> .function_definition  | -half3-, function_definition -> .dec_specifier declarator compound_stm  | -float-, pp_if_stm -> .Pound if ID  | -struct-, cg_stm -> .dec  | -fixed2-, dec -> .dec_specifier init_dec_list Semicolon  | -double-, pp_if_stm -> .Pound if ID  | -half2-, preprocessing_stm -> .pp_cmd  | -ENDCG-, pp_if_stm -> .Pound else  | -half2-, cg_stms -> .cg_stm cg_stms  | -ENDCG-, type_specifier -> .typedef_name  | LParen, type_specifier -> .-float2-  | ID, function_definition -> .dec_specifier declarator compound_stm  | Pound, pp_if_stm -> .Pound -elif- ID  | -sampler2D-, pp_cmd -> .Pound -pragma- ids Enter  | -struct-, cg_stm -> .preprocessing_stm  | -long-, pp_cmd -> .Pound -include- String  | -float4-, dec -> .struct_specifier Semicolon  | -int-, cg_stm -> .dec  | -uniform-, cg_stm -> .preprocessing_stm  | -fixed2-, pp_if_stm -> .Pound if ID  | -uniform-, preprocessing_stm -> .pp_cmd  | -double-, pp_cmd -> .Pound -include- String  | -sampler2D-, preprocessing_stm -> .pp_if_stm  | Pound, preprocessing_stm -> .pp_if_stm  | -half3-, dec -> .struct_specifier Semicolon  | ID, pp_if_stm -> .Pound -elif- ID  | -ENDCG-, pp_if_stm -> .Pound -ifdef- ID  | -int-, preprocessing_stm -> .pp_cmd  | -fixed4-, preprocessing_stm -> .pp_if_stm  | -double-, cg_stm -> .function_definition  | -sampler2D-, pp_if_stm -> .Pound -ifdef- ID  | -float-, pp_if_stm -> .Pound if ID  | -sampler2D-, cg_stm -> .dec  | -int-, type_specifier -> .-half4-  | LParen, dec -> .struct_specifier Semicolon  | -float-, pp_if_stm -> .Pound -endif-  | -ENDCG-, type_qualifier -> .-uniform-  | -fixed4-, pp_if_stm -> .Pound -ifndef- ID  | -half3-, pp_if_stm -> .Pound -elif- ID  | ID, dec -> .dec_specifier init_dec_list Semicolon  | -void-, cg_stm -> .dec  | -half4-, cg_stm -> .dec  | -half3-, dec -> .dec_specifier init_dec_list Semicolon  | Pound, preprocessing_stm -> .pp_cmd  | -float2-, cg_stm -> .dec  | -struct-, function_definition -> .dec_specifier declarator compound_stm  | -uniform-, pp_if_stm -> .Pound -ifndef- ID  | -float-, type_qualifier -> .-uniform-  | -short-, pp_if_stm -> .Pound if ID  | -fixed2-, preprocessing_stm -> .pp_if_stm  | -struct-, type_qualifier -> .-uniform-  | ID, pp_if_stm -> .Pound if ID  | -ENDCG-, type_specifier -> .-float-  | ID, cg_stm -> .preprocessing_stm  | -sampler2D-, type_specifier -> .-fixed3-  | ID, pp_cmd -> .Pound -pragma- ids Enter  | -long-, pp_cmd -> .Pound -pragma- ids Enter  | -half4-, dec -> .struct_specifier Semicolon  | -short-, pp_if_stm -> .Pound -ifdef- ID  | -half3-, pp_if_stm -> .Pound if ID  | -float4-, pp_if_stm -> .Pound -elif- ID  | -fixed3-, type_specifier -> .typedef_name  | ID, dec -> .struct_specifier Semicolon  | -fixed4-, pp_cmd -> .Pound -pragma- ids Enter  | -void-, type_qualifier -> .-uniform-  | -double-, function_definition -> .dec_specifier declarator compound_stm  | -double-, type_specifier -> .-float-  | LParen, dec -> .struct_specifier Semicolon  | -uniform-, pp_cmd -> .Pound -include- String  | -half2-, cg_stm -> .dec  | -float4-, pp_if_stm -> .Pound -elif- ID  | -half4-, function_definition -> .dec_specifier declarator compound_stm  | -ENDCG-, pp_if_stm -> .Pound -ifndef- ID  | -fixed3-, type_qualifier -> .-uniform-  | -fixed2-, cg_stm -> .function_definition  | -float-, type_specifier -> .-short-  | ID, pp_if_stm -> .Pound -endif-  | -fixed3-, cg_stm -> .preprocessing_stm  | -half4-, pp_if_stm -> .Pound -ifdef- ID  | -double-, cg_stm -> .dec  | -float3-, dec -> .struct_specifier Semicolon  | -sampler2D-, pp_if_stm -> .Pound -ifdef- ID  | -char-, preprocessing_stm -> .pp_cmd  | -fixed3-, function_definition -> .dec_specifier declarator compound_stm  | -float3-, cg_stm -> .dec  | -half2-, preprocessing_stm -> .pp_cmd  | -half2-, pp_if_stm -> .Pound -elif- ID  | -fixed2-, cg_stm -> .preprocessing_stm  | -half2-, dec -> .struct_specifier Semicolon  | -long-, cg_stm -> .function_definition  | ID, type_specifier -> .-half3-  | ID, cg_stm -> .preprocessing_stm  | -double-, dec_specifier -> .type_qualifier type_specifier  | ID, pp_cmd -> .Pound -pragma- ids Enter  | -double-, cg_stm -> .preprocessing_stm  | -half3-, pp_if_stm -> .Pound if ID  | -half3-, preprocessing_stm -> .pp_if_stm  | -int-, type_specifier -> .-sampler2D-  | ID, dec_specifier -> .type_specifier  | ID, preprocessing_stm -> .pp_if_stm  | -fixed3-, dec -> .dec_specifier init_dec_list Semicolon  | -sampler2D-, preprocessing_stm -> .pp_if_stm  | -short-, pp_if_stm -> .Pound if ID  | ID, pp_if_stm -> .Pound -endif-  | -uniform-, dec -> .dec_specifier init_dec_list Semicolon  | -float2-, cg_stm -> .preprocessing_stm  | -int-, pp_cmd -> .Pound -include- String  | -fixed3-, cg_stm -> .function_definition  | -void-, cg_stm -> .function_definition  | -float4-, preprocessing_stm -> .pp_if_stm  | -float4-, pp_if_stm -> .Pound else  | -float2-, type_specifier -> .-double-  | LParen, pp_cmd -> .Pound -include- String  | -float2-, function_definition -> .dec_specifier declarator compound_stm  | -float2-, dec -> .struct_specifier Semicolon  | -ENDCG-, pp_if_stm -> .Pound else  | -void-, cg_stm -> .preprocessing_stm  | -ENDCG-, pp_if_stm -> .Pound else  | -fixed2-, dec -> .struct_specifier Semicolon  | -float4-, cg_stm -> .dec  | -fixed4-, pp_if_stm -> .Pound -endif-  | -half2-, pp_if_stm -> .Pound -endif-  | -fixed4-, pp_cmd -> .Pound -pragma- ids Enter  | -fixed3-, prog -> -CGPROGRAM- .cg_prog -ENDCG-  | __End, dec -> .dec_specifier init_dec_list Semicolon  | -fixed2-, dec -> .struct_specifier Semicolon  | -struct-, pp_if_stm -> .Pound -ifndef- ID  | ID, pp_if_stm -> .Pound -elif- ID  | -float-, type_qualifier -> .-uniform-  | -float-, cg_stm -> .preprocessing_stm  | -struct-, pp_if_stm -> .Pound -ifdef- ID  | -struct-, cg_stm -> .dec  | -short-, dec -> .struct_specifier Semicolon  | -fixed2-, pp_if_stm -> .Pound -ifndef- ID  | -short-, preprocessing_stm -> .pp_if_stm  | -char-, pp_if_stm -> .Pound else  | -float-, pp_if_stm -> .Pound -elif- ID  | -fixed4-, pp_if_stm -> .Pound -ifndef- ID  | -half2-, pp_if_stm -> .Pound if ID  | -void-, pp_if_stm -> .Pound -endif-  | -float2-, pp_if_stm -> .Pound -endif-  | ID, pp_if_stm -> .Pound -endif-  | -sampler2D-, type_specifier -> .-half2-  | ID, pp_if_stm -> .Pound else  | -double-, dec -> .struct_specifier Semicolon  | -half3-, pp_if_stm -> .Pound -elif- ID  | -float2-, pp_if_stm -> .Pound else  | -uniform-, pp_if_stm -> .Pound -ifdef- ID  | -float3-, preprocessing_stm -> .pp_cmd  | -half4-, struct_specifier -> .-struct- ID LBrace struct_dec_list RBrace  | Semicolon, cg_stm -> .dec  | -ENDCG-, pp_cmd -> .Pound -pragma- ids Enter  | -float3-, pp_cmd -> .Pound -include- String  | -long-, type_specifier -> .-fixed2-  | ID, pp_if_stm -> .Pound -ifdef- ID  | Pound, cg_stm -> .preprocessing_stm  | -short-, pp_if_stm -> .Pound -ifndef- ID  | -half4-, pp_if_stm -> .Pound else  | -int-, dec -> .dec_specifier init_dec_list Semicolon  | -short-, pp_if_stm -> .Pound -ifdef- ID  | -ENDCG-, pp_if_stm -> .Pound else  | -short-, type_qualifier -> .-uniform-  | -sampler2D-, cg_stm -> .dec  | -double-, pp_if_stm -> .Pound -endif-  | -void-, pp_cmd -> .Pound -pragma- ids Enter  | -half3-, dec -> .dec_specifier init_dec_list Semicolon  | -float-, preprocessing_stm -> .pp_cmd  | -float-, type_specifier -> .-short-  | LParen, preprocessing_stm -> .pp_if_stm  | ID, pp_if_stm -> .Pound -elif- ID  | -float3-, cg_stm -> .dec  | -fixed3-, type_qualifier -> .-uniform-  | -long-, pp_if_stm -> .Pound -elif- ID  | -float4-, pp_if_stm -> .Pound -ifndef- ID  | -float3-, pp_if_stm -> .Pound -ifdef- ID  | -uniform-, pp_if_stm -> .Pound if ID  | -half4-, pp_cmd -> .Pound -pragma- ids Enter  | -fixed4-, cg_stm -> .function_definition  | -long-, pp_if_stm -> .Pound -ifndef- ID  | -long-, function_definition -> .dec_specifier declarator compound_stm  | -short-, cg_stm -> .preprocessing_stm  | Pound, pp_if_stm -> .Pound -ifndef- ID  | -struct-, preprocessing_stm -> .pp_if_stm  | -ENDCG-, preprocessing_stm -> .pp_cmd  | -char-, type_qualifier -> .-uniform-  | -void-, pp_if_stm -> .Pound -ifndef- ID  | -double-, pp_if_stm -> .Pound -endif-  | Pound, preprocessing_stm -> .pp_cmd  | Pound, cg_stm -> .function_definition  | -half2-, pp_if_stm -> .Pound else  | ID, pp_if_stm -> .Pound -ifdef- ID  | -half2-, cg_stm -> .function_definition  | -float3-, pp_cmd -> .Pound -pragma- ids Enter  | -uniform-, type_specifier -> .-float3-  | ID, type_specifier -> .-fixed4-  | ID, cg_stm -> .function_definition  | -half4-, pp_cmd -> .Pound -pragma- ids Enter  | -half2-, pp_if_stm -> .Pound else  | -ENDCG-, pp_if_stm -> .Pound -ifndef- ID  | -float4-, pp_if_stm -> .Pound -ifdef- ID  | -fixed3-, dec -> .dec_specifier init_dec_list Semicolon  | ID, cg_stm -> .dec  | Pound, function_definition -> .dec_specifier declarator compound_stm  | -float4-, pp_if_stm -> .Pound if ID  | -float2-, cg_stm -> .preprocessing_stm  | -uniform-, dec -> .struct_specifier Semicolon  | -half4-, dec -> .dec_specifier init_dec_list Semicolon  | -long-, cg_stm -> .function_definition  | -char-, pp_if_stm -> .Pound -ifndef- ID  | -int-, type_qualifier -> .-uniform-  | -half3-, pp_if_stm -> .Pound -endif-  | -float3-, pp_if_stm -> .Pound -elif- ID  | -long-, pp_if_stm -> .Pound -endif-  | -float4-, pp_if_stm -> .Pound -ifdef- ID  | -half4-, cg_stm -> .function_definition  | -fixed3-, pp_cmd -> .Pound -pragma- ids Enter  | ID, type_specifier -> .-long-  | LParen, dec -> .dec_specifier init_dec_list Semicolon  | -ENDCG-, pp_cmd -> .Pound -include- String  | -float3-, type_specifier -> .-half3-  | LParen, dec -> .dec_specifier init_dec_list Semicolon  | -float4-, dec -> .dec_specifier init_dec_list Semicolon  | -float3-, pp_if_stm -> .Pound if ID  | -short-, type_specifier -> .-long-  | ID, pp_cmd -> .Pound -include- String  | -fixed4-, preprocessing_stm -> .pp_if_stm  | -sampler2D-, pp_if_stm -> .Pound -ifdef- ID  | -long-, type_specifier -> .-fixed3-  | LParen, dec_specifier -> .type_qualifier type_specifier  | LParen, pp_if_stm -> .Pound -elif- ID  | -char-, type_specifier -> .-float2-  | LParen, type_specifier -> .-sampler2D-  | LParen, preprocessing_stm -> .pp_cmd  | -half3-, cg_stm -> .function_definition  | -double-, pp_cmd -> .Pound -include- String  | -half4-, function_definition -> .dec_specifier declarator compound_stm  | -void-, pp_if_stm -> .Pound else  | -struct-, preprocessing_stm -> .pp_if_stm  | -float2-, pp_cmd -> .Pound -include- String  | -fixed2-, function_definition -> .dec_specifier declarator compound_stm  | -char-, pp_if_stm -> .Pound if ID  | -long-, preprocessing_stm -> .pp_cmd  | -uniform-, pp_if_stm -> .Pound if ID  | Pound, cg_stm -> .function_definition  | -int-, pp_if_stm -> .Pound -elif- ID  | -half2-, pp_if_stm -> .Pound -elif- ID  | -int-, dec -> .struct_specifier Semicolon  | -half2-, pp_if_stm -> .Pound else  | -fixed4-, pp_if_stm -> .Pound -elif- ID  | -uniform-, preprocessing_stm -> .pp_cmd  | -struct-, type_qualifier -> .-uniform-  | -half2-, pp_cmd -> .Pound -pragma- ids Enter  | -float2-, cg_stm -> .dec  | -char-, function_definition -> .dec_specifier declarator compound_stm  | -half4-, pp_cmd -> .Pound -pragma- ids Enter  | -float-, function_definition -> .dec_specifier declarator compound_stm  | -sampler2D-, dec -> .struct_specifier Semicolon  | Pound, pp_if_stm -> .Pound -endif-  | -half4-, preprocessing_stm -> .pp_if_stm  | -half4-, cg_stm -> .function_definition  | -struct-, type_specifier -> .-fixed2-  | LParen, pp_if_stm -> .Pound -ifndef- ID  | -char-, preprocessing_stm -> .pp_cmd  | -fixed2-, pp_if_stm -> .Pound -endif-  | -long-, type_specifier -> .-float4-  | LParen, cg_stm -> .dec  | -sampler2D-, pp_if_stm -> .Pound -ifndef- ID  | -uniform-, pp_if_stm -> .Pound -ifdef- ID  | -short-, dec -> .struct_specifier Semicolon  | -fixed3-, pp_if_stm -> .Pound -ifdef- ID  | -void-, type_specifier -> .-fixed4-  | LParen, preprocessing_stm -> .pp_cmd  | -int-, type_specifier -> .-int-  | LParen, pp_cmd -> .Pound -include- String  | -char-, preprocessing_stm -> .pp_cmd  | -float4-, pp_cmd -> .Pound -include- String  | -float-, pp_if_stm -> .Pound -ifdef- ID  | -sampler2D-, pp_if_stm -> .Pound if ID  | -float3-, pp_if_stm -> .Pound -ifndef- ID  | Pound, preprocessing_stm -> .pp_if_stm  | -float-, pp_cmd -> .Pound -include- String  | -uniform-, function_definition -> .dec_specifier declarator compound_stm  | -struct-, type_specifier -> .-float4-  | ID, type_specifier -> .-char-  | LParen, pp_if_stm -> .Pound else  | -long-, type_specifier -> .-void-  | LParen, pp_if_stm -> .Pound if ID  | -fixed4-, type_qualifier -> .-uniform-  | -float2-, struct_specifier -> .-struct- ID  | Semicolon, cg_stm -> .preprocessing_stm  | ID, pp_if_stm -> .Pound else  | -fixed3-, pp_if_stm -> .Pound if ID  | -fixed3-, pp_if_stm -> .Pound else  | -float3-, function_definition -> .dec_specifier declarator compound_stm  | -half3-, pp_if_stm -> .Pound -ifndef- ID  | -float2-, dec -> .struct_specifier Semicolon  | -void-, pp_cmd -> .Pound -include- String  | -half3-, pp_if_stm -> .Pound -endif-  | -float-, dec -> .struct_specifier Semicolon  | -char-, type_specifier -> .-void-  | ID, pp_if_stm -> .Pound -endif-  | -char-, cg_stm -> .preprocessing_stm  | -float3-, preprocessing_stm -> .pp_cmd  | ID, function_definition -> .dec_specifier declarator compound_stm  | -fixed4-, pp_if_stm -> .Pound -endif-  | -int-, pp_if_stm -> .Pound -ifdef- ID  | -fixed4-, typedef_name -> .ID  | ID, cg_stm -> .dec  | -float2-, typedef_name -> .ID  | LParen, pp_if_stm -> .Pound else  | Pound, pp_cmd -> .Pound -pragma- ids Enter  | -float4-, type_qualifier -> .-uniform-  | -float3-, pp_cmd -> .Pound -include- String  | -ENDCG-, type_specifier -> .-int-  | ID, preprocessing_stm -> .pp_cmd  | -sampler2D-, type_qualifier -> .-uniform-  | -float4-, pp_if_stm -> .Pound else  | -char-, type_specifier -> .-float3-  | LParen, pp_if_stm -> .Pound -ifdef- ID  | -float2-, pp_cmd -> .Pound -pragma- ids Enter  | -ENDCG-, pp_if_stm -> .Pound -ifdef- ID  | -float4-, )
2 <- (0, 'prog') (__Begin -> prog .__End  | *, )
3 <- (1, '-char-') (type_specifier -> -char-.  | ID, type_specifier -> -char-.  | LParen, )
4 <- (1, '-double-') (type_specifier -> -double-.  | ID, type_specifier -> -double-.  | LParen, )
5 <- (1, '-fixed2-') (type_specifier -> -fixed2-.  | LParen, type_specifier -> -fixed2-.  | ID, )
6 <- (1, '-fixed3-') (type_specifier -> -fixed3-.  | LParen, type_specifier -> -fixed3-.  | ID, )
7 <- (1, '-fixed4-') (type_specifier -> -fixed4-.  | LParen, type_specifier -> -fixed4-.  | ID, )
8 <- (1, '-float-') (type_specifier -> -float-.  | LParen, type_specifier -> -float-.  | ID, )
9 <- (1, '-float2-') (type_specifier -> -float2-.  | ID, type_specifier -> -float2-.  | LParen, )
10 <- (1, '-float3-') (type_specifier -> -float3-.  | ID, type_specifier -> -float3-.  | LParen, )
11 <- (1, '-float4-') (type_specifier -> -float4-.  | LParen, type_specifier -> -float4-.  | ID, )
12 <- (1, '-half2-') (type_specifier -> -half2-.  | ID, type_specifier -> -half2-.  | LParen, )
13 <- (1, '-half3-') (type_specifier -> -half3-.  | ID, type_specifier -> -half3-.  | LParen, )
14 <- (1, '-half4-') (type_specifier -> -half4-.  | ID, type_specifier -> -half4-.  | LParen, )
15 <- (1, '-int-') (type_specifier -> -int-.  | ID, type_specifier -> -int-.  | LParen, )
16 <- (1, '-long-') (type_specifier -> -long-.  | ID, type_specifier -> -long-.  | LParen, )
17 <- (1, '-sampler2D-') (type_specifier -> -sampler2D-.  | LParen, type_specifier -> -sampler2D-.  | ID, )
18 <- (1, '-short-') (type_specifier -> -short-.  | ID, type_specifier -> -short-.  | LParen, )
19 <- (1, '-struct-') (struct_specifier -> -struct- .ID LBrace struct_dec_list RBrace  | Semicolon, struct_specifier -> -struct- .ID  | Semicolon, )
20 <- (1, '-uniform-') (type_qualifier -> -uniform-.  | -half4-, type_qualifier -> -uniform-.  | -fixed3-, type_qualifier -> -uniform-.  | -float-, type_qualifier -> -uniform-.  | -char-, type_qualifier -> -uniform-.  | -fixed2-, type_qualifier -> -uniform-.  | -long-, type_qualifier -> -uniform-.  | -double-, type_qualifier -> -uniform-.  | -sampler2D-, type_qualifier -> -uniform-.  | -short-, type_qualifier -> -uniform-.  | -half3-, type_qualifier -> -uniform-.  | -float3-, type_qualifier -> -uniform-.  | -fixed4-, type_qualifier -> -uniform-.  | -float4-, type_qualifier -> -uniform-.  | -void-, type_qualifier -> -uniform-.  | ID, type_qualifier -> -uniform-.  | -float2-, type_qualifier -> -uniform-.  | -int-, type_qualifier -> -uniform-.  | -half2-, )
21 <- (1, '-void-') (type_specifier -> -void-.  | ID, type_specifier -> -void-.  | LParen, )
22 <- (1, 'ID') (typedef_name -> ID.  | LParen, typedef_name -> ID.  | ID, )
23 <- (1, 'Pound') (pp_if_stm -> Pound .-ifndef- ID  | -fixed3-, pp_if_stm -> Pound .if ID  | -half4-, pp_if_stm -> Pound .-ifndef- ID  | -uniform-, pp_cmd -> Pound .-include- String  | -float3-, pp_if_stm -> Pound .-ifndef- ID  | -sampler2D-, pp_if_stm -> Pound .-ifdef- ID  | -void-, pp_if_stm -> Pound .-endif-  | -struct-, pp_if_stm -> Pound .-ifdef- ID  | -fixed4-, pp_if_stm -> Pound .if ID  | -long-, pp_if_stm -> Pound .-ifdef- ID  | -half4-, pp_if_stm -> Pound .-endif-  | -float2-, pp_cmd -> Pound .-pragma- ids Enter  | -fixed2-, pp_cmd -> Pound .-pragma- ids Enter  | -float3-, pp_if_stm -> Pound .-ifdef- ID  | -int-, pp_cmd -> Pound .-pragma- ids Enter  | -fixed4-, pp_if_stm -> Pound .-ifdef- ID  | -double-, pp_if_stm -> Pound .if ID  | -void-, pp_if_stm -> Pound .-ifndef- ID  | -half4-, pp_if_stm -> Pound .-endif-  | -half4-, pp_if_stm -> Pound .if ID  | -int-, pp_cmd -> Pound .-pragma- ids Enter  | -float2-, pp_if_stm -> Pound .-endif-  | -long-, pp_if_stm -> Pound .else  | ID, pp_if_stm -> Pound .-endif-  | -double-, pp_if_stm -> Pound .if ID  | -float2-, pp_cmd -> Pound .-include- String  | -long-, pp_if_stm -> Pound .-ifndef- ID  | -float-, pp_if_stm -> Pound .else  | -float4-, pp_if_stm -> Pound .else  | -int-, pp_if_stm -> Pound .-endif-  | -int-, pp_if_stm -> Pound .-elif- ID  | -fixed3-, pp_if_stm -> Pound .-endif-  | -float4-, pp_if_stm -> Pound .-ifndef- ID  | -double-, pp_if_stm -> Pound .-elif- ID  | -short-, pp_if_stm -> Pound .-ifndef- ID  | -float2-, pp_if_stm -> Pound .-endif-  | Pound, pp_cmd -> Pound .-include- String  | Pound, pp_if_stm -> Pound .-endif-  | -short-, pp_if_stm -> Pound .if ID  | -float3-, pp_cmd -> Pound .-pragma- ids Enter  | -fixed3-, pp_cmd -> Pound .-include- String  | -half2-, pp_cmd -> Pound .-include- String  | -ENDCG-, pp_if_stm -> Pound .-elif- ID  | -double-, pp_cmd -> Pound .-pragma- ids Enter  | ID, pp_if_stm -> Pound .-ifdef- ID  | ID, pp_if_stm -> Pound .if ID  | -uniform-, pp_if_stm -> Pound .-ifdef- ID  | -sampler2D-, pp_cmd -> Pound .-pragma- ids Enter  | -long-, pp_if_stm -> Pound .else  | -half4-, pp_if_stm -> Pound .-ifdef- ID  | -struct-, pp_if_stm -> Pound .-elif- ID  | -fixed2-, pp_if_stm -> Pound .-elif- ID  | -struct-, pp_cmd -> Pound .-include- String  | -void-, pp_if_stm -> Pound .-ifndef- ID  | ID, pp_if_stm -> Pound .-ifdef- ID  | -half3-, pp_cmd -> Pound .-pragma- ids Enter  | -short-, pp_cmd -> Pound .-pragma- ids Enter  | -ENDCG-, pp_if_stm -> Pound .-ifdef- ID  | -ENDCG-, pp_if_stm -> Pound .-elif- ID  | -float4-, pp_if_stm -> Pound .-endif-  | -float3-, pp_if_stm -> Pound .-ifdef- ID  | -float3-, pp_cmd -> Pound .-include- String  | -int-, pp_if_stm -> Pound .-ifdef- ID  | -short-, pp_cmd -> Pound .-pragma- ids Enter  | -double-, pp_if_stm -> Pound .-endif-  | -half3-, pp_if_stm -> Pound .if ID  | -float-, pp_cmd -> Pound .-pragma- ids Enter  | -sampler2D-, pp_cmd -> Pound .-pragma- ids Enter  | -float-, pp_if_stm -> Pound .-endif-  | -ENDCG-, pp_if_stm -> Pound .-elif- ID  | Pound, pp_cmd -> Pound .-pragma- ids Enter  | -half3-, pp_if_stm -> Pound .-ifdef- ID  | -fixed2-, pp_if_stm -> Pound .if ID  | -sampler2D-, pp_if_stm -> Pound .-ifndef- ID  | -half2-, pp_if_stm -> Pound .-ifndef- ID  | -void-, pp_cmd -> Pound .-include- String  | -sampler2D-, pp_cmd -> Pound .-include- String  | -double-, pp_cmd -> Pound .-include- String  | -half3-, pp_if_stm -> Pound .if ID  | -half2-, pp_if_stm -> Pound .if ID  | -float4-, pp_if_stm -> Pound .else  | -char-, pp_if_stm -> Pound .-endif-  | -char-, pp_if_stm -> Pound .-elif- ID  | -char-, pp_if_stm -> Pound .-elif- ID  | -half3-, pp_cmd -> Pound .-include- String  | -float4-, pp_cmd -> Pound .-include- String  | -short-, pp_if_stm -> Pound .-ifndef- ID  | -int-, pp_if_stm -> Pound .if ID  | -half3-, pp_if_stm -> Pound .else  | -half3-, pp_if_stm -> Pound .else  | Pound, pp_if_stm -> Pound .if ID  | -char-, pp_if_stm -> Pound .-ifndef- ID  | -short-, pp_cmd -> Pound .-include- String  | -char-, pp_if_stm -> Pound .-elif- ID  | -ENDCG-, pp_if_stm -> Pound .-endif-  | ID, pp_cmd -> Pound .-pragma- ids Enter  | -half4-, pp_if_stm -> Pound .else  | -ENDCG-, pp_cmd -> Pound .-include- String  | -fixed4-, pp_if_stm -> Pound .-ifndef- ID  | -struct-, pp_if_stm -> Pound .-ifdef- ID  | -float-, pp_cmd -> Pound .-include- String  | ID, pp_if_stm -> Pound .else  | -sampler2D-, pp_if_stm -> Pound .else  | -double-, pp_if_stm -> Pound .-elif- ID  | ID, pp_if_stm -> Pound .if ID  | -short-, pp_if_stm -> Pound .-ifdef- ID  | -long-, pp_if_stm -> Pound .-endif-  | -fixed2-, pp_cmd -> Pound .-include- String  | -float2-, pp_if_stm -> Pound .else  | -void-, pp_cmd -> Pound .-include- String  | -fixed3-, pp_cmd -> Pound .-pragma- ids Enter  | Pound, pp_if_stm -> Pound .else  | -uniform-, pp_if_stm -> Pound .-elif- ID  | -long-, pp_if_stm -> Pound .-endif-  | -fixed3-, pp_if_stm -> Pound .-elif- ID  | -sampler2D-, pp_if_stm -> Pound .-endif-  | -fixed4-, pp_cmd -> Pound .-pragma- ids Enter  | -struct-, pp_if_stm -> Pound .else  | -float-, pp_if_stm -> Pound .-ifndef- ID  | -char-, pp_if_stm -> Pound .-elif- ID  | -float2-, pp_cmd -> Pound .-include- String  | -uniform-, pp_if_stm -> Pound .-elif- ID  | -float3-, pp_if_stm -> Pound .-endif-  | -void-, pp_if_stm -> Pound .-elif- ID  | -int-, pp_cmd -> Pound .-include- String  | -half4-, pp_if_stm -> Pound .if ID  | -fixed2-, pp_if_stm -> Pound .if ID  | Pound, pp_if_stm -> Pound .-elif- ID  | -void-, pp_if_stm -> Pound .else  | -long-, pp_if_stm -> Pound .-endif-  | -float-, pp_if_stm -> Pound .if ID  | -double-, pp_if_stm -> Pound .-ifndef- ID  | -fixed2-, pp_if_stm -> Pound .-ifdef- ID  | -uniform-, pp_if_stm -> Pound .-ifndef- ID  | -fixed4-, pp_if_stm -> Pound .-endif-  | -uniform-, pp_if_stm -> Pound .-ifdef- ID  | -fixed3-, pp_if_stm -> Pound .else  | -half2-, pp_if_stm -> Pound .else  | -fixed4-, pp_if_stm -> Pound .else  | -float3-, pp_if_stm -> Pound .-elif- ID  | -uniform-, pp_if_stm -> Pound .-ifndef- ID  | -long-, pp_if_stm -> Pound .-ifndef- ID  | Pound, pp_if_stm -> Pound .else  | -short-, pp_if_stm -> Pound .-ifndef- ID  | -half3-, pp_cmd -> Pound .-pragma- ids Enter  | -half2-, pp_if_stm -> Pound .if ID  | ID, pp_if_stm -> Pound .-ifdef- ID  | -char-, pp_if_stm -> Pound .else  | -struct-, pp_if_stm -> Pound .-ifdef- ID  | Pound, pp_if_stm -> Pound .if ID  | -fixed4-, pp_if_stm -> Pound .-ifndef- ID  | -float3-, pp_if_stm -> Pound .-endif-  | -sampler2D-, pp_if_stm -> Pound .else  | -fixed3-, pp_cmd -> Pound .-pragma- ids Enter  | -uniform-, pp_cmd -> Pound .-pragma- ids Enter  | -char-, pp_if_stm -> Pound .if ID  | -struct-, pp_if_stm -> Pound .else  | -fixed2-, pp_if_stm -> Pound .-elif- ID  | -fixed4-, pp_if_stm -> Pound .-elif- ID  | -half4-, pp_if_stm -> Pound .-ifdef- ID  | -half2-, pp_if_stm -> Pound .-elif- ID  | -float-, pp_cmd -> Pound .-pragma- ids Enter  | -int-, pp_cmd -> Pound .-pragma- ids Enter  | -float4-, pp_cmd -> Pound .-pragma- ids Enter  | -void-, pp_cmd -> Pound .-include- String  | -fixed2-, pp_cmd -> Pound .-include- String  | -struct-, pp_if_stm -> Pound .-ifndef- ID  | -ENDCG-, pp_if_stm -> Pound .-elif- ID  | -half2-, pp_if_stm -> Pound .else  | -float2-, pp_if_stm -> Pound .-ifndef- ID  | -float4-, pp_if_stm -> Pound .-endif-  | -half2-, pp_if_stm -> Pound .if ID  | -ENDCG-, pp_cmd -> Pound .-include- String  | -float-, pp_if_stm -> Pound .-ifdef- ID  | -float2-, pp_if_stm -> Pound .if ID  | -fixed3-, pp_if_stm -> Pound .-ifdef- ID  | -float4-, )
24 <- (1, 'cg_prog') (prog -> -CGPROGRAM- cg_prog .-ENDCG-  | __End, )
25 <- (1, 'cg_stm') (preprocessing_stm -> .pp_if_stm  | -long-, dec -> .dec_specifier init_dec_list Semicolon  | -half3-, pp_if_stm -> .Pound -ifndef- ID  | -void-, cg_stm -> .function_definition  | -uniform-, pp_if_stm -> .Pound if ID  | -half4-, dec -> .dec_specifier init_dec_list Semicolon  | -fixed3-, pp_cmd -> .Pound -include- String  | -struct-, cg_stm -> .dec  | ID, cg_stm -> .function_definition  | -short-, function_definition -> .dec_specifier declarator compound_stm  | ID, preprocessing_stm -> .pp_cmd  | -short-, pp_if_stm -> .Pound if ID  | -char-, preprocessing_stm -> .pp_if_stm  | -fixed2-, cg_stms ->.  | -ENDCG-, cg_stm -> .function_definition  | -float2-, preprocessing_stm -> .pp_cmd  | -fixed4-, pp_if_stm -> .Pound -ifdef- ID  | -fixed2-, type_qualifier -> .-uniform-  | -fixed4-, pp_if_stm -> .Pound -endif-  | -fixed2-, dec -> .dec_specifier init_dec_list Semicolon  | -struct-, pp_if_stm -> .Pound -endif-  | -struct-, pp_if_stm -> .Pound -ifndef- ID  | -half3-, pp_cmd -> .Pound -pragma- ids Enter  | -fixed2-, cg_stm -> .preprocessing_stm  | -float4-, function_definition -> .dec_specifier declarator compound_stm  | -int-, preprocessing_stm -> .pp_if_stm  | -uniform-, pp_if_stm -> .Pound if ID  | -float-, dec -> .dec_specifier init_dec_list Semicolon  | -char-, cg_stm -> .function_definition  | -fixed4-, type_specifier -> .-half2-  | LParen, pp_if_stm -> .Pound -elif- ID  | -double-, type_qualifier -> .-uniform-  | -half4-, pp_if_stm -> .Pound -endif-  | -half3-, preprocessing_stm -> .pp_if_stm  | -float3-, cg_stm -> .preprocessing_stm  | -fixed3-, preprocessing_stm -> .pp_if_stm  | -fixed4-, pp_if_stm -> .Pound -ifdef- ID  | ID, type_specifier -> .-char-  | ID, pp_cmd -> .Pound -include- String  | -void-, dec -> .dec_specifier init_dec_list Semicolon  | -half4-, type_qualifier -> .-uniform-  | -int-, cg_stm -> .dec  | -float-, dec_specifier -> .type_specifier  | LParen, pp_if_stm -> .Pound -ifndef- ID  | -ENDCG-, cg_stm -> .function_definition  | -ENDCG-, function_definition -> .dec_specifier declarator compound_stm  | -fixed2-, cg_stm -> .function_definition  | Pound, function_definition -> .dec_specifier declarator compound_stm  | -half2-, pp_cmd -> .Pound -pragma- ids Enter  | Pound, pp_cmd -> .Pound -pragma- ids Enter  | -char-, pp_if_stm -> .Pound -endif-  | -double-, cg_stm -> .preprocessing_stm  | -char-, dec -> .dec_specifier init_dec_list Semicolon  | -fixed4-, cg_stm -> .dec  | -long-, pp_if_stm -> .Pound else  | -half4-, pp_cmd -> .Pound -include- String  | Pound, pp_if_stm -> .Pound -ifndef- ID  | -sampler2D-, pp_cmd -> .Pound -include- String  | ID, function_definition -> .dec_specifier declarator compound_stm  | -long-, type_qualifier -> .-uniform-  | -char-, cg_stm -> .preprocessing_stm  | -fixed4-, pp_cmd -> .Pound -include- String  | -short-, pp_cmd -> .Pound -include- String  | -int-, function_definition -> .dec_specifier declarator compound_stm  | -ENDCG-, cg_stm -> .function_definition  | -half2-, cg_stm -> .preprocessing_stm  | -void-, pp_if_stm -> .Pound -elif- ID  | Pound, cg_stm -> .preprocessing_stm  | -float-, pp_if_stm -> .Pound else  | -float3-, pp_cmd -> .Pound -pragma- ids Enter  | -sampler2D-, pp_cmd -> .Pound -include- String  | -double-, pp_if_stm -> .Pound -ifndef- ID  | -fixed4-, function_definition -> .dec_specifier declarator compound_stm  | -fixed3-, pp_if_stm -> .Pound -elif- ID  | -half3-, preprocessing_stm -> .pp_cmd  | -void-, cg_stm -> .dec  | -void-, type_specifier -> .-double-  | ID, pp_if_stm -> .Pound else  | -half3-, pp_if_stm -> .Pound else  | -sampler2D-, pp_if_stm -> .Pound -elif- ID  | -short-, dec -> .struct_specifier Semicolon  | -float2-, dec -> .dec_specifier init_dec_list Semicolon  | -int-, dec -> .dec_specifier init_dec_list Semicolon  | -half2-, pp_if_stm -> .Pound -ifndef- ID  | -fixed2-, cg_stm -> .preprocessing_stm  | -float2-, dec -> .struct_specifier Semicolon  | -float3-, preprocessing_stm -> .pp_if_stm  | -void-, pp_if_stm -> .Pound else  | -float4-, preprocessing_stm -> .pp_cmd  | -float3-, pp_if_stm -> .Pound -ifndef- ID  | -fixed3-, dec -> .struct_specifier Semicolon  | -struct-, preprocessing_stm -> .pp_cmd  | -long-, cg_stm -> .function_definition  | -float4-, pp_cmd -> .Pound -pragma- ids Enter  | -short-, pp_if_stm -> .Pound -endif-  | -short-, pp_if_stm -> .Pound if ID  | -double-, dec -> .dec_specifier init_dec_list Semicolon  | -uniform-, type_specifier -> .-half4-  | ID, pp_if_stm -> .Pound if ID  | -int-, cg_stm -> .function_definition  | -half3-, function_definition -> .dec_specifier declarator compound_stm  | -float-, pp_if_stm -> .Pound if ID  | -struct-, cg_stm -> .dec  | -fixed2-, dec -> .dec_specifier init_dec_list Semicolon  | -double-, pp_if_stm -> .Pound if ID  | -half2-, preprocessing_stm -> .pp_cmd  | -ENDCG-, pp_if_stm -> .Pound else  | -half2-, cg_stm -> .function_definition  | -long-, type_specifier -> .typedef_name  | LParen, type_specifier -> .-float2-  | ID, function_definition -> .dec_specifier declarator compound_stm  | Pound, pp_if_stm -> .Pound -elif- ID  | -sampler2D-, cg_stm -> .preprocessing_stm  | -long-, pp_cmd -> .Pound -pragma- ids Enter  | -half4-, dec -> .struct_specifier Semicolon  | -int-, cg_stm -> .dec  | -uniform-, pp_if_stm -> .Pound -elif- ID  | -char-, pp_if_stm -> .Pound if ID  | -uniform-, pp_cmd -> .Pound -pragma- ids Enter  | -struct-, pp_cmd -> .Pound -include- String  | -sampler2D-, preprocessing_stm -> .pp_if_stm  | Pound, preprocessing_stm -> .pp_if_stm  | -half3-, dec -> .struct_specifier Semicolon  | ID, pp_if_stm -> .Pound -elif- ID  | -ENDCG-, pp_if_stm -> .Pound -ifdef- ID  | -int-, preprocessing_stm -> .pp_if_stm  | -double-, cg_stm -> .function_definition  | -sampler2D-, pp_if_stm -> .Pound -ifdef- ID  | -float-, pp_if_stm -> .Pound if ID  | -sampler2D-, cg_stm -> .dec  | -int-, type_specifier -> .-half4-  | LParen, dec -> .struct_specifier Semicolon  | -float-, pp_if_stm -> .Pound -endif-  | -ENDCG-, dec -> .struct_specifier Semicolon  | -double-, pp_if_stm -> .Pound -elif- ID  | -struct-, pp_if_stm -> .Pound -elif- ID  | ID, dec -> .dec_specifier init_dec_list Semicolon  | -void-, cg_stm -> .dec  | -half4-, cg_stm -> .dec  | -half3-, dec -> .dec_specifier init_dec_list Semicolon  | Pound, preprocessing_stm -> .pp_if_stm  | -char-, cg_stm -> .dec  | -struct-, function_definition -> .dec_specifier declarator compound_stm  | -uniform-, pp_if_stm -> .Pound -ifndef- ID  | -float-, type_qualifier -> .-uniform-  | -short-, pp_if_stm -> .Pound if ID  | -fixed2-, preprocessing_stm -> .pp_if_stm  | -struct-, type_qualifier -> .-uniform-  | ID, pp_if_stm -> .Pound if ID  | -ENDCG-, type_specifier -> .-float-  | ID, cg_stm -> .preprocessing_stm  | -sampler2D-, type_specifier -> .-fixed3-  | ID, pp_cmd -> .Pound -pragma- ids Enter  | -long-, pp_cmd -> .Pound -include- String  | -float4-, type_specifier -> .-short-  | LParen, pp_if_stm -> .Pound -ifdef- ID  | -half3-, pp_if_stm -> .Pound if ID  | -float4-, pp_if_stm -> .Pound -elif- ID  | -fixed3-, type_specifier -> .-fixed3-  | LParen, type_specifier -> .typedef_name  | ID, dec -> .struct_specifier Semicolon  | -fixed4-, pp_cmd -> .Pound -pragma- ids Enter  | -void-, function_definition -> .dec_specifier declarator compound_stm  | -float4-, type_qualifier -> .-uniform-  | -double-, type_qualifier -> .-uniform-  | -float2-, function_definition -> .dec_specifier declarator compound_stm  | -double-, type_specifier -> .-float-  | LParen, dec -> .struct_specifier Semicolon  | -uniform-, pp_cmd -> .Pound -include- String  | -half2-, cg_stm -> .dec  | -float4-, pp_if_stm -> .Pound -elif- ID  | -half4-, pp_if_stm -> .Pound -ifdef- ID  | -float4-, cg_stm -> .function_definition  | -float-, type_specifier -> .-short-  | ID, pp_if_stm -> .Pound -endif-  | -fixed3-, cg_stm -> .preprocessing_stm  | -half4-, pp_cmd -> .Pound -pragma- ids Enter  | -int-, preprocessing_stm -> .pp_if_stm  | ID, dec -> .struct_specifier Semicolon  | -sampler2D-, pp_if_stm -> .Pound -ifdef- ID  | -char-, preprocessing_stm -> .pp_cmd  | -fixed3-, function_definition -> .dec_specifier declarator compound_stm  | -float3-, cg_stm -> .dec  | -half2-, preprocessing_stm -> .pp_cmd  | -half2-, pp_if_stm -> .Pound -elif- ID  | -fixed2-, cg_stm -> .preprocessing_stm  | -half2-, dec -> .struct_specifier Semicolon  | -long-, cg_stm -> .function_definition  | ID, pp_if_stm -> .Pound -ifndef- ID  | ID, cg_stm -> .preprocessing_stm  | -double-, pp_if_stm -> .Pound -ifndef- ID  | -uniform-, pp_if_stm -> .Pound -endif-  | ID, pp_cmd -> .Pound -pragma- ids Enter  | -double-, cg_stm -> .preprocessing_stm  | -half3-, pp_if_stm -> .Pound if ID  | -half3-, preprocessing_stm -> .pp_if_stm  | -int-, dec_specifier -> .type_specifier  | ID, preprocessing_stm -> .pp_if_stm  | -fixed3-, dec -> .dec_specifier init_dec_list Semicolon  | -sampler2D-, preprocessing_stm -> .pp_if_stm  | -short-, pp_if_stm -> .Pound if ID  | ID, pp_if_stm -> .Pound -endif-  | -uniform-, dec -> .dec_specifier init_dec_list Semicolon  | -float2-, cg_stm -> .preprocessing_stm  | -int-, pp_cmd -> .Pound -include- String  | -fixed3-, cg_stm -> .function_definition  | -void-, cg_stm -> .function_definition  | -fixed2-, preprocessing_stm -> .pp_if_stm  | -float4-, pp_if_stm -> .Pound else  | -float2-, pp_cmd -> .Pound -include- String  | -float2-, function_definition -> .dec_specifier declarator compound_stm  | -float2-, dec -> .struct_specifier Semicolon  | -ENDCG-, pp_if_stm -> .Pound else  | -void-, cg_stm -> .preprocessing_stm  | -ENDCG-, pp_if_stm -> .Pound else  | -fixed2-, dec -> .struct_specifier Semicolon  | -float4-, cg_stm -> .dec  | -fixed4-, pp_if_stm -> .Pound -endif-  | -half2-, pp_if_stm -> .Pound -endif-  | -fixed4-, pp_cmd -> .Pound -pragma- ids Enter  | -fixed3-, dec -> .dec_specifier init_dec_list Semicolon  | -fixed2-, pp_if_stm -> .Pound -elif- ID  | -void-, pp_if_stm -> .Pound -elif- ID  | -float-, type_qualifier -> .-uniform-  | -float-, pp_if_stm -> .Pound -ifdef- ID  | -double-, cg_stm -> .preprocessing_stm  | -struct-, pp_if_stm -> .Pound -ifdef- ID  | -struct-, cg_stm -> .dec  | -short-, dec -> .struct_specifier Semicolon  | -fixed2-, pp_if_stm -> .Pound -ifndef- ID  | -short-, preprocessing_stm -> .pp_cmd  | -float2-, pp_if_stm -> .Pound else  | -float-, pp_if_stm -> .Pound -elif- ID  | -fixed4-, pp_if_stm -> .Pound -ifndef- ID  | -half2-, pp_if_stm -> .Pound if ID  | -void-, pp_if_stm -> .Pound -endif-  | -float2-, dec_specifier -> .type_qualifier type_specifier  | ID, pp_if_stm -> .Pound -endif-  | -sampler2D-, type_specifier -> .-half2-  | ID, pp_if_stm -> .Pound else  | -double-, dec -> .struct_specifier Semicolon  | -half3-, pp_if_stm -> .Pound -elif- ID  | -float2-, pp_if_stm -> .Pound -ifdef- ID  | -half4-, pp_if_stm -> .Pound -ifdef- ID  | -float3-, preprocessing_stm -> .pp_cmd  | -half4-, cg_stm -> .dec  | -ENDCG-, pp_cmd -> .Pound -pragma- ids Enter  | -float3-, pp_cmd -> .Pound -include- String  | -long-, type_specifier -> .-fixed2-  | ID, pp_if_stm -> .Pound -ifdef- ID  | Pound, cg_stm -> .preprocessing_stm  | -short-, pp_if_stm -> .Pound -ifndef- ID  | -half4-, pp_if_stm -> .Pound else  | -int-, dec -> .dec_specifier init_dec_list Semicolon  | -short-, pp_if_stm -> .Pound -ifdef- ID  | -ENDCG-, pp_if_stm -> .Pound else  | -short-, type_qualifier -> .-uniform-  | -sampler2D-, cg_stm -> .dec  | -double-, pp_if_stm -> .Pound -endif-  | -void-, pp_cmd -> .Pound -pragma- ids Enter  | -half3-, dec -> .dec_specifier init_dec_list Semicolon  | -float-, preprocessing_stm -> .pp_cmd  | -float-, dec -> .struct_specifier Semicolon  | -short-, cg_stm -> .dec  | -float3-, pp_if_stm -> .Pound -elif- ID  | -float3-, cg_stm -> .dec  | -fixed3-, type_qualifier -> .-uniform-  | -long-, pp_if_stm -> .Pound -elif- ID  | -float4-, pp_if_stm -> .Pound -ifndef- ID  | -float3-, pp_if_stm -> .Pound -ifdef- ID  | -uniform-, type_specifier -> .-void-  | LParen, pp_cmd -> .Pound -pragma- ids Enter  | -fixed4-, pp_if_stm -> .Pound -ifndef- ID  | -long-, function_definition -> .dec_specifier declarator compound_stm  | -short-, cg_stm -> .preprocessing_stm  | Pound, pp_if_stm -> .Pound -ifndef- ID  | -struct-, preprocessing_stm -> .pp_if_stm  | -ENDCG-, preprocessing_stm -> .pp_cmd  | -char-, type_qualifier -> .-uniform-  | -void-, pp_if_stm -> .Pound -ifndef- ID  | -double-, pp_if_stm -> .Pound -endif-  | Pound, preprocessing_stm -> .pp_cmd  | Pound, preprocessing_stm -> .pp_cmd  | -double-, type_qualifier -> .-uniform-  | -fixed3-, pp_if_stm -> .Pound else  | ID, pp_if_stm -> .Pound -ifdef- ID  | -half2-, cg_stm -> .function_definition  | -float3-, pp_cmd -> .Pound -pragma- ids Enter  | -uniform-, type_specifier -> .-float3-  | ID, type_specifier -> .-fixed4-  | ID, cg_stm -> .function_definition  | -half4-, pp_cmd -> .Pound -pragma- ids Enter  | -half2-, pp_if_stm -> .Pound else  | -ENDCG-, pp_if_stm -> .Pound -ifndef- ID  | -float4-, pp_if_stm -> .Pound -ifdef- ID  | -fixed3-, dec -> .dec_specifier init_dec_list Semicolon  | ID, cg_stm -> .dec  | Pound, type_specifier -> .-long-  | ID, pp_if_stm -> .Pound if ID  | -float2-, cg_stm -> .preprocessing_stm  | -uniform-, dec -> .struct_specifier Semicolon  | -half4-, dec -> .dec_specifier init_dec_list Semicolon  | -long-, cg_stm -> .function_definition  | -char-, pp_if_stm -> .Pound -ifdef- ID  | -fixed4-, pp_if_stm -> .Pound -ifndef- ID  | -int-, type_qualifier -> .-uniform-  | -half3-, pp_if_stm -> .Pound -endif-  | -float3-, pp_if_stm -> .Pound -elif- ID  | -long-, pp_if_stm -> .Pound -endif-  | -float4-, pp_if_stm -> .Pound else  | -uniform-, cg_stm -> .function_definition  | -fixed3-, pp_cmd -> .Pound -pragma- ids Enter  | ID, type_specifier -> .-long-  | LParen, dec -> .dec_specifier init_dec_list Semicolon  | -ENDCG-, pp_cmd -> .Pound -include- String  | -float3-, type_specifier -> .-half3-  | LParen, dec -> .dec_specifier init_dec_list Semicolon  | -float4-, dec -> .dec_specifier init_dec_list Semicolon  | -float3-, pp_if_stm -> .Pound if ID  | -short-, type_qualifier -> .-uniform-  | -fixed2-, pp_cmd -> .Pound -include- String  | -fixed4-, preprocessing_stm -> .pp_if_stm  | -sampler2D-, pp_if_stm -> .Pound -ifdef- ID  | -long-, preprocessing_stm -> .pp_if_stm  | -half2-, dec_specifier -> .type_qualifier type_specifier  | LParen, cg_stm -> .preprocessing_stm  | -fixed2-, type_specifier -> .-float2-  | LParen, type_specifier -> .-sampler2D-  | LParen, preprocessing_stm -> .pp_cmd  | -half3-, cg_stm -> .function_definition  | -double-, pp_cmd -> .Pound -include- String  | -half4-, function_definition -> .dec_specifier declarator compound_stm  | -void-, pp_if_stm -> .Pound else  | -struct-, preprocessing_stm -> .pp_if_stm  | -half4-, preprocessing_stm -> .pp_if_stm  | -float2-, pp_cmd -> .Pound -include- String  | -fixed2-, dec -> .struct_specifier Semicolon  | -char-, pp_if_stm -> .Pound if ID  | -long-, type_specifier -> .-double-  | LParen, pp_if_stm -> .Pound if ID  | Pound, cg_stm -> .function_definition  | -int-, pp_if_stm -> .Pound -elif- ID  | -half2-, pp_if_stm -> .Pound -elif- ID  | -int-, dec -> .struct_specifier Semicolon  | -half2-, pp_if_stm -> .Pound else  | -fixed4-, pp_if_stm -> .Pound -elif- ID  | -uniform-, preprocessing_stm -> .pp_cmd  | -struct-, pp_cmd -> .Pound -pragma- ids Enter  | -float2-, cg_stm -> .dec  | -char-, function_definition -> .dec_specifier declarator compound_stm  | -half4-, pp_cmd -> .Pound -pragma- ids Enter  | -float-, function_definition -> .dec_specifier declarator compound_stm  | -sampler2D-, dec -> .struct_specifier Semicolon  | Pound, pp_if_stm -> .Pound -endif-  | -half4-, type_specifier -> .-sampler2D-  | ID, cg_stm -> .function_definition  | -struct-, type_specifier -> .-fixed2-  | LParen, pp_if_stm -> .Pound -ifndef- ID  | -char-, preprocessing_stm -> .pp_cmd  | -fixed2-, pp_if_stm -> .Pound -endif-  | -long-, type_specifier -> .-float4-  | LParen, cg_stm -> .dec  | -sampler2D-, type_specifier -> .-half3-  | ID, pp_if_stm -> .Pound -ifdef- ID  | -short-, dec -> .struct_specifier Semicolon  | -fixed3-, pp_if_stm -> .Pound -ifdef- ID  | -void-, type_specifier -> .-fixed4-  | LParen, preprocessing_stm -> .pp_cmd  | -int-, type_specifier -> .-int-  | LParen, pp_cmd -> .Pound -include- String  | -char-, preprocessing_stm -> .pp_cmd  | -float4-, pp_cmd -> .Pound -include- String  | -float-, pp_if_stm -> .Pound -ifdef- ID  | -sampler2D-, pp_if_stm -> .Pound if ID  | -float3-, pp_if_stm -> .Pound -ifndef- ID  | Pound, preprocessing_stm -> .pp_if_stm  | -float-, pp_cmd -> .Pound -include- String  | -uniform-, function_definition -> .dec_specifier declarator compound_stm  | -struct-, type_specifier -> .-float4-  | ID, type_specifier -> .-char-  | LParen, type_specifier -> .-float3-  | LParen, pp_if_stm -> .Pound if ID  | -fixed4-, type_qualifier -> .-uniform-  | -half2-, struct_specifier -> .-struct- ID  | Semicolon, cg_stm -> .preprocessing_stm  | ID, pp_if_stm -> .Pound else  | -fixed3-, pp_if_stm -> .Pound if ID  | -fixed3-, struct_specifier -> .-struct- ID LBrace struct_dec_list RBrace  | Semicolon, function_definition -> .dec_specifier declarator compound_stm  | -half3-, pp_if_stm -> .Pound -ifndef- ID  | -float2-, dec -> .struct_specifier Semicolon  | -void-, pp_cmd -> .Pound -include- String  | -half3-, pp_if_stm -> .Pound -endif-  | -float-, function_definition -> .dec_specifier declarator compound_stm  | -char-, type_specifier -> .-void-  | ID, pp_if_stm -> .Pound -endif-  | -char-, cg_stm -> .preprocessing_stm  | -float3-, preprocessing_stm -> .pp_cmd  | ID, function_definition -> .dec_specifier declarator compound_stm  | -fixed4-, pp_if_stm -> .Pound -endif-  | -int-, preprocessing_stm -> .pp_cmd  | -uniform-, typedef_name -> .ID  | ID, cg_stm -> .dec  | -float2-, typedef_name -> .ID  | LParen, pp_if_stm -> .Pound else  | Pound, pp_cmd -> .Pound -pragma- ids Enter  | -float4-, type_qualifier -> .-uniform-  | -float3-, pp_cmd -> .Pound -include- String  | -ENDCG-, type_specifier -> .-int-  | ID, cg_stms -> cg_stm .cg_stms  | -ENDCG-, preprocessing_stm -> .pp_cmd  | -sampler2D-, type_qualifier -> .-uniform-  | -float4-, pp_if_stm -> .Pound else  | -char-, pp_if_stm -> .Pound else  | -long-, cg_stms -> .cg_stm cg_stms  | -ENDCG-, pp_if_stm -> .Pound -ifdef- ID  | -float2-, pp_cmd -> .Pound -pragma- ids Enter  | -ENDCG-, )
26 <- (1, 'cg_stms') (cg_prog -> cg_stms.  | -ENDCG-, )
27 <- (1, 'dec') (cg_stm -> dec.  | -ENDCG-, cg_stm -> dec.  | -struct-, cg_stm -> dec.  | -float3-, cg_stm -> dec.  | ID, cg_stm -> dec.  | -long-, cg_stm -> dec.  | -fixed2-, cg_stm -> dec.  | -float4-, cg_stm -> dec.  | -float2-, cg_stm -> dec.  | -short-, cg_stm -> dec.  | Pound, cg_stm -> dec.  | -fixed3-, cg_stm -> dec.  | -half2-, cg_stm -> dec.  | -sampler2D-, cg_stm -> dec.  | -char-, cg_stm -> dec.  | -float-, cg_stm -> dec.  | -void-, cg_stm -> dec.  | -uniform-, cg_stm -> dec.  | -int-, cg_stm -> dec.  | -fixed4-, cg_stm -> dec.  | -half4-, cg_stm -> dec.  | -double-, cg_stm -> dec.  | -half3-, )
28 <- (1, 'dec_specifier') (dec -> dec_specifier .init_dec_list Semicolon  | -fixed2-, function_definition -> dec_specifier .declarator compound_stm  | -fixed2-, function_definition -> dec_specifier .declarator compound_stm  | -float4-, declarator -> .declarator LParen parameter_list RParen  | LBrace, function_definition -> dec_specifier .declarator compound_stm  | -char-, dec -> dec_specifier .init_dec_list Semicolon  | -short-, dec -> dec_specifier .init_dec_list Semicolon  | -struct-, function_definition -> dec_specifier .declarator compound_stm  | -void-, function_definition -> dec_specifier .declarator compound_stm  | -sampler2D-, function_definition -> dec_specifier .declarator compound_stm  | -short-, declarator -> .ID  | LBrace, function_definition -> dec_specifier .declarator compound_stm  | -fixed4-, declarator -> .declarator LParen parameter_list RParen  | LParen, dec -> dec_specifier .init_dec_list Semicolon  | -uniform-, dec -> dec_specifier .init_dec_list Semicolon  | -char-, declarator -> .LParen declarator RParen  | LParen, dec -> dec_specifier .init_dec_list Semicolon  | -void-, dec -> dec_specifier .init_dec_list Semicolon  | -half3-, function_definition -> dec_specifier .declarator compound_stm  | -uniform-, dec -> dec_specifier .init_dec_list Semicolon  | -float-, function_definition -> dec_specifier .declarator compound_stm  | -ENDCG-, function_definition -> dec_specifier .declarator compound_stm  | -struct-, dec -> dec_specifier .init_dec_list Semicolon  | Pound, dec -> dec_specifier .init_dec_list Semicolon  | -long-, dec -> dec_specifier .init_dec_list Semicolon  | -float4-, dec -> dec_specifier .init_dec_list Semicolon  | -float3-, function_definition -> dec_specifier .declarator compound_stm  | -half2-, function_definition -> dec_specifier .declarator compound_stm  | -half4-, function_definition -> dec_specifier .declarator compound_stm  | -double-, function_definition -> dec_specifier .declarator compound_stm  | -fixed3-, dec -> dec_specifier .init_dec_list Semicolon  | -half2-, function_definition -> dec_specifier .declarator compound_stm  | -half3-, dec -> dec_specifier .init_dec_list Semicolon  | -fixed3-, function_definition -> dec_specifier .declarator compound_stm  | ID, dec -> dec_specifier .init_dec_list Semicolon  | -int-, dec -> dec_specifier .init_dec_list Semicolon  | ID, function_definition -> dec_specifier .declarator compound_stm  | -int-, dec -> dec_specifier .init_dec_list Semicolon  | -double-, dec -> dec_specifier .init_dec_list Semicolon  | -sampler2D-, declarator -> .LParen declarator RParen  | LBrace, function_definition -> dec_specifier .declarator compound_stm  | -float2-, dec -> dec_specifier .init_dec_list Semicolon  | -fixed4-, function_definition -> dec_specifier .declarator compound_stm  | -float3-, function_definition -> dec_specifier .declarator compound_stm  | -long-, function_definition -> dec_specifier .declarator compound_stm  | Pound, init_dec_list -> .ID  | Semicolon, dec -> dec_specifier .init_dec_list Semicolon  | -float2-, dec -> dec_specifier .init_dec_list Semicolon  | -ENDCG-, function_definition -> dec_specifier .declarator compound_stm  | -float-, declarator -> .ID  | LParen, dec -> dec_specifier .init_dec_list Semicolon  | -half4-, )
29 <- (1, 'function_definition') (cg_stm -> function_definition.  | -short-, cg_stm -> function_definition.  | -sampler2D-, cg_stm -> function_definition.  | -fixed3-, cg_stm -> function_definition.  | -long-, cg_stm -> function_definition.  | Pound, cg_stm -> function_definition.  | -float-, cg_stm -> function_definition.  | -struct-, cg_stm -> function_definition.  | -fixed2-, cg_stm -> function_definition.  | -void-, cg_stm -> function_definition.  | -half3-, cg_stm -> function_definition.  | -half4-, cg_stm -> function_definition.  | -float2-, cg_stm -> function_definition.  | -uniform-, cg_stm -> function_definition.  | -float4-, cg_stm -> function_definition.  | -double-, cg_stm -> function_definition.  | -char-, cg_stm -> function_definition.  | -fixed4-, cg_stm -> function_definition.  | -ENDCG-, cg_stm -> function_definition.  | ID, cg_stm -> function_definition.  | -float3-, cg_stm -> function_definition.  | -int-, cg_stm -> function_definition.  | -half2-, )
30 <- (1, 'pp_cmd') (preprocessing_stm -> pp_cmd.  | -long-, preprocessing_stm -> pp_cmd.  | -float4-, preprocessing_stm -> pp_cmd.  | -uniform-, preprocessing_stm -> pp_cmd.  | ID, preprocessing_stm -> pp_cmd.  | -sampler2D-, preprocessing_stm -> pp_cmd.  | -float2-, preprocessing_stm -> pp_cmd.  | -struct-, preprocessing_stm -> pp_cmd.  | Pound, preprocessing_stm -> pp_cmd.  | -half4-, preprocessing_stm -> pp_cmd.  | -char-, preprocessing_stm -> pp_cmd.  | -fixed2-, preprocessing_stm -> pp_cmd.  | -short-, preprocessing_stm -> pp_cmd.  | -fixed3-, preprocessing_stm -> pp_cmd.  | -ENDCG-, preprocessing_stm -> pp_cmd.  | -double-, preprocessing_stm -> pp_cmd.  | -float-, preprocessing_stm -> pp_cmd.  | -float3-, preprocessing_stm -> pp_cmd.  | -half2-, preprocessing_stm -> pp_cmd.  | -fixed4-, preprocessing_stm -> pp_cmd.  | -int-, preprocessing_stm -> pp_cmd.  | -void-, preprocessing_stm -> pp_cmd.  | -half3-, )
31 <- (1, 'pp_if_stm') (preprocessing_stm -> pp_if_stm.  | -short-, preprocessing_stm -> pp_if_stm.  | -half4-, preprocessing_stm -> pp_if_stm.  | -struct-, preprocessing_stm -> pp_if_stm.  | -fixed2-, preprocessing_stm -> pp_if_stm.  | -void-, preprocessing_stm -> pp_if_stm.  | -float2-, preprocessing_stm -> pp_if_stm.  | -uniform-, preprocessing_stm -> pp_if_stm.  | Pound, preprocessing_stm -> pp_if_stm.  | -ENDCG-, preprocessing_stm -> pp_if_stm.  | -half3-, preprocessing_stm -> pp_if_stm.  | -fixed3-, preprocessing_stm -> pp_if_stm.  | -char-, preprocessing_stm -> pp_if_stm.  | -double-, preprocessing_stm -> pp_if_stm.  | -int-, preprocessing_stm -> pp_if_stm.  | -sampler2D-, preprocessing_stm -> pp_if_stm.  | ID, preprocessing_stm -> pp_if_stm.  | -float3-, preprocessing_stm -> pp_if_stm.  | -long-, preprocessing_stm -> pp_if_stm.  | -fixed4-, preprocessing_stm -> pp_if_stm.  | -half2-, preprocessing_stm -> pp_if_stm.  | -float-, preprocessing_stm -> pp_if_stm.  | -float4-, )
32 <- (1, 'preprocessing_stm') (cg_stm -> preprocessing_stm.  | -long-, cg_stm -> preprocessing_stm.  | -int-, cg_stm -> preprocessing_stm.  | -void-, cg_stm -> preprocessing_stm.  | -sampler2D-, cg_stm -> preprocessing_stm.  | -struct-, cg_stm -> preprocessing_stm.  | -half3-, cg_stm -> preprocessing_stm.  | -fixed2-, cg_stm -> preprocessing_stm.  | ID, cg_stm -> preprocessing_stm.  | -char-, cg_stm -> preprocessing_stm.  | -ENDCG-, cg_stm -> preprocessing_stm.  | -fixed3-, cg_stm -> preprocessing_stm.  | -float4-, cg_stm -> preprocessing_stm.  | -float2-, cg_stm -> preprocessing_stm.  | -fixed4-, cg_stm -> preprocessing_stm.  | -half4-, cg_stm -> preprocessing_stm.  | -float3-, cg_stm -> preprocessing_stm.  | -short-, cg_stm -> preprocessing_stm.  | Pound, cg_stm -> preprocessing_stm.  | -double-, cg_stm -> preprocessing_stm.  | -half2-, cg_stm -> preprocessing_stm.  | -uniform-, cg_stm -> preprocessing_stm.  | -float-, )
33 <- (1, 'struct_specifier') (dec -> struct_specifier .Semicolon  | -double-, dec -> struct_specifier .Semicolon  | -sampler2D-, dec -> struct_specifier .Semicolon  | -float3-, dec -> struct_specifier .Semicolon  | -long-, dec -> struct_specifier .Semicolon  | -int-, dec -> struct_specifier .Semicolon  | -void-, dec -> struct_specifier .Semicolon  | -float-, dec -> struct_specifier .Semicolon  | Pound, dec -> struct_specifier .Semicolon  | ID, dec -> struct_specifier .Semicolon  | -fixed3-, dec -> struct_specifier .Semicolon  | -char-, dec -> struct_specifier .Semicolon  | -fixed4-, dec -> struct_specifier .Semicolon  | -half3-, dec -> struct_specifier .Semicolon  | -uniform-, dec -> struct_specifier .Semicolon  | -struct-, dec -> struct_specifier .Semicolon  | -half4-, dec -> struct_specifier .Semicolon  | -half2-, dec -> struct_specifier .Semicolon  | -float4-, dec -> struct_specifier .Semicolon  | -float2-, dec -> struct_specifier .Semicolon  | -ENDCG-, dec -> struct_specifier .Semicolon  | -short-, dec -> struct_specifier .Semicolon  | -fixed2-, )
34 <- (1, 'type_qualifier') (type_specifier -> .-half2-  | ID, type_specifier -> .-fixed3-  | ID, type_specifier -> .-fixed4-  | LParen, type_specifier -> .-void-  | ID, type_specifier -> .-half4-  | ID, type_specifier -> .-fixed3-  | LParen, type_specifier -> .-int-  | LParen, type_specifier -> .-short-  | LParen, dec_specifier -> type_qualifier .type_specifier  | ID, type_specifier -> .-double-  | LParen, type_specifier -> .-double-  | ID, type_specifier -> .typedef_name  | ID, type_specifier -> .-float-  | ID, type_specifier -> .-half2-  | LParen, typedef_name -> .ID  | ID, type_specifier -> .-long-  | LParen, type_specifier -> .-float4-  | ID, type_specifier -> .-half3-  | ID, type_specifier -> .-half4-  | LParen, type_specifier -> .-fixed4-  | ID, type_specifier -> .-float3-  | ID, type_specifier -> .typedef_name  | LParen, type_specifier -> .-float-  | LParen, type_specifier -> .-char-  | LParen, type_specifier -> .-long-  | ID, typedef_name -> .ID  | LParen, type_specifier -> .-int-  | ID, type_specifier -> .-void-  | LParen, type_specifier -> .-half3-  | LParen, type_specifier -> .-sampler2D-  | ID, type_specifier -> .-fixed2-  | LParen, type_specifier -> .-short-  | ID, type_specifier -> .-float2-  | LParen, type_specifier -> .-char-  | ID, type_specifier -> .-fixed2-  | ID, type_specifier -> .-float2-  | ID, type_specifier -> .-float3-  | LParen, type_specifier -> .-sampler2D-  | LParen, type_specifier -> .-float4-  | LParen, dec_specifier -> type_qualifier .type_specifier  | LParen, )
35 <- (1, 'type_specifier') (dec_specifier -> type_specifier.  | LParen, dec_specifier -> type_specifier.  | ID, )
36 <- (1, 'typedef_name') (type_specifier -> typedef_name.  | LParen, type_specifier -> typedef_name.  | ID, )
37 <- (19, 'ID') (struct_specifier -> -struct- ID .LBrace struct_dec_list RBrace  | Semicolon, struct_specifier -> -struct- ID.  | Semicolon, )
38 <- (23, '-elif-') (pp_if_stm -> Pound -elif- .ID  | -half2-, pp_if_stm -> Pound -elif- .ID  | -fixed2-, pp_if_stm -> Pound -elif- .ID  | -ENDCG-, pp_if_stm -> Pound -elif- .ID  | -long-, pp_if_stm -> Pound -elif- .ID  | -half3-, pp_if_stm -> Pound -elif- .ID  | -half4-, pp_if_stm -> Pound -elif- .ID  | -fixed4-, pp_if_stm -> Pound -elif- .ID  | -fixed3-, pp_if_stm -> Pound -elif- .ID  | Pound, pp_if_stm -> Pound -elif- .ID  | -int-, pp_if_stm -> Pound -elif- .ID  | -void-, pp_if_stm -> Pound -elif- .ID  | -short-, pp_if_stm -> Pound -elif- .ID  | -float4-, pp_if_stm -> Pound -elif- .ID  | -float2-, pp_if_stm -> Pound -elif- .ID  | -double-, pp_if_stm -> Pound -elif- .ID  | ID, pp_if_stm -> Pound -elif- .ID  | -float-, pp_if_stm -> Pound -elif- .ID  | -float3-, pp_if_stm -> Pound -elif- .ID  | -sampler2D-, pp_if_stm -> Pound -elif- .ID  | -struct-, pp_if_stm -> Pound -elif- .ID  | -uniform-, pp_if_stm -> Pound -elif- .ID  | -char-, )
39 <- (23, '-endif-') (pp_if_stm -> Pound -endif-.  | -half4-, pp_if_stm -> Pound -endif-.  | -void-, pp_if_stm -> Pound -endif-.  | -fixed4-, pp_if_stm -> Pound -endif-.  | -float-, pp_if_stm -> Pound -endif-.  | -sampler2D-, pp_if_stm -> Pound -endif-.  | -double-, pp_if_stm -> Pound -endif-.  | ID, pp_if_stm -> Pound -endif-.  | -struct-, pp_if_stm -> Pound -endif-.  | -float2-, pp_if_stm -> Pound -endif-.  | -half2-, pp_if_stm -> Pound -endif-.  | -short-, pp_if_stm -> Pound -endif-.  | -long-, pp_if_stm -> Pound -endif-.  | -fixed2-, pp_if_stm -> Pound -endif-.  | -fixed3-, pp_if_stm -> Pound -endif-.  | -float3-, pp_if_stm -> Pound -endif-.  | -ENDCG-, pp_if_stm -> Pound -endif-.  | -int-, pp_if_stm -> Pound -endif-.  | -char-, pp_if_stm -> Pound -endif-.  | -float4-, pp_if_stm -> Pound -endif-.  | -half3-, pp_if_stm -> Pound -endif-.  | -uniform-, pp_if_stm -> Pound -endif-.  | Pound, )
40 <- (23, '-ifdef-') (pp_if_stm -> Pound -ifdef- .ID  | -float3-, pp_if_stm -> Pound -ifdef- .ID  | -int-, pp_if_stm -> Pound -ifdef- .ID  | -ENDCG-, pp_if_stm -> Pound -ifdef- .ID  | ID, pp_if_stm -> Pound -ifdef- .ID  | -half3-, pp_if_stm -> Pound -ifdef- .ID  | -double-, pp_if_stm -> Pound -ifdef- .ID  | -long-, pp_if_stm -> Pound -ifdef- .ID  | -fixed2-, pp_if_stm -> Pound -ifdef- .ID  | -uniform-, pp_if_stm -> Pound -ifdef- .ID  | -struct-, pp_if_stm -> Pound -ifdef- .ID  | -short-, pp_if_stm -> Pound -ifdef- .ID  | -fixed3-, pp_if_stm -> Pound -ifdef- .ID  | -float-, pp_if_stm -> Pound -ifdef- .ID  | Pound, pp_if_stm -> Pound -ifdef- .ID  | -char-, pp_if_stm -> Pound -ifdef- .ID  | -sampler2D-, pp_if_stm -> Pound -ifdef- .ID  | -fixed4-, pp_if_stm -> Pound -ifdef- .ID  | -float2-, pp_if_stm -> Pound -ifdef- .ID  | -half2-, pp_if_stm -> Pound -ifdef- .ID  | -half4-, pp_if_stm -> Pound -ifdef- .ID  | -void-, pp_if_stm -> Pound -ifdef- .ID  | -float4-, )
41 <- (23, '-ifndef-') (pp_if_stm -> Pound -ifndef- .ID  | -uniform-, pp_if_stm -> Pound -ifndef- .ID  | ID, pp_if_stm -> Pound -ifndef- .ID  | -fixed3-, pp_if_stm -> Pound -ifndef- .ID  | -int-, pp_if_stm -> Pound -ifndef- .ID  | -struct-, pp_if_stm -> Pound -ifndef- .ID  | -fixed4-, pp_if_stm -> Pound -ifndef- .ID  | -fixed2-, pp_if_stm -> Pound -ifndef- .ID  | -float2-, pp_if_stm -> Pound -ifndef- .ID  | -long-, pp_if_stm -> Pound -ifndef- .ID  | -sampler2D-, pp_if_stm -> Pound -ifndef- .ID  | -double-, pp_if_stm -> Pound -ifndef- .ID  | -float-, pp_if_stm -> Pound -ifndef- .ID  | -half2-, pp_if_stm -> Pound -ifndef- .ID  | -ENDCG-, pp_if_stm -> Pound -ifndef- .ID  | -char-, pp_if_stm -> Pound -ifndef- .ID  | Pound, pp_if_stm -> Pound -ifndef- .ID  | -short-, pp_if_stm -> Pound -ifndef- .ID  | -half4-, pp_if_stm -> Pound -ifndef- .ID  | -float4-, pp_if_stm -> Pound -ifndef- .ID  | -float3-, pp_if_stm -> Pound -ifndef- .ID  | -half3-, pp_if_stm -> Pound -ifndef- .ID  | -void-, )
42 <- (23, '-include-') (pp_cmd -> Pound -include- .String  | -double-, pp_cmd -> Pound -include- .String  | -uniform-, pp_cmd -> Pound -include- .String  | -half2-, pp_cmd -> Pound -include- .String  | -fixed2-, pp_cmd -> Pound -include- .String  | -float-, pp_cmd -> Pound -include- .String  | -ENDCG-, pp_cmd -> Pound -include- .String  | -half3-, pp_cmd -> Pound -include- .String  | -float2-, pp_cmd -> Pound -include- .String  | -struct-, pp_cmd -> Pound -include- .String  | -float3-, pp_cmd -> Pound -include- .String  | -fixed4-, pp_cmd -> Pound -include- .String  | -void-, pp_cmd -> Pound -include- .String  | -int-, pp_cmd -> Pound -include- .String  | -sampler2D-, pp_cmd -> Pound -include- .String  | -float4-, pp_cmd -> Pound -include- .String  | -fixed3-, pp_cmd -> Pound -include- .String  | -short-, pp_cmd -> Pound -include- .String  | Pound, pp_cmd -> Pound -include- .String  | -long-, pp_cmd -> Pound -include- .String  | -half4-, pp_cmd -> Pound -include- .String  | ID, pp_cmd -> Pound -include- .String  | -char-, )
43 <- (23, '-pragma-') (pp_cmd -> Pound -pragma- .ids Enter  | -sampler2D-, pp_cmd -> Pound -pragma- .ids Enter  | -double-, pp_cmd -> Pound -pragma- .ids Enter  | -float4-, pp_cmd -> Pound -pragma- .ids Enter  | -half4-, pp_cmd -> Pound -pragma- .ids Enter  | -struct-, pp_cmd -> Pound -pragma- .ids Enter  | -fixed3-, pp_cmd -> Pound -pragma- .ids Enter  | -long-, pp_cmd -> Pound -pragma- .ids Enter  | -half2-, pp_cmd -> Pound -pragma- .ids Enter  | -fixed2-, pp_cmd -> Pound -pragma- .ids Enter  | -fixed4-, pp_cmd -> Pound -pragma- .ids Enter  | -ENDCG-, pp_cmd -> Pound -pragma- .ids Enter  | -void-, pp_cmd -> Pound -pragma- .ids Enter  | -short-, ids ->.  | Enter, pp_cmd -> Pound -pragma- .ids Enter  | -char-, pp_cmd -> Pound -pragma- .ids Enter  | -half3-, pp_cmd -> Pound -pragma- .ids Enter  | -uniform-, pp_cmd -> Pound -pragma- .ids Enter  | -float2-, pp_cmd -> Pound -pragma- .ids Enter  | -int-, pp_cmd -> Pound -pragma- .ids Enter  | -float-, pp_cmd -> Pound -pragma- .ids Enter  | Pound, pp_cmd -> Pound -pragma- .ids Enter  | -float3-, ids -> .ID ids  | Enter, pp_cmd -> Pound -pragma- .ids Enter  | ID, )
44 <- (23, 'else') (pp_if_stm -> Pound else.  | -fixed4-, pp_if_stm -> Pound else.  | -float4-, pp_if_stm -> Pound else.  | -float3-, pp_if_stm -> Pound else.  | -fixed2-, pp_if_stm -> Pound else.  | -double-, pp_if_stm -> Pound else.  | -ENDCG-, pp_if_stm -> Pound else.  | -half4-, pp_if_stm -> Pound else.  | -half3-, pp_if_stm -> Pound else.  | -sampler2D-, pp_if_stm -> Pound else.  | -short-, pp_if_stm -> Pound else.  | -fixed3-, pp_if_stm -> Pound else.  | -float2-, pp_if_stm -> Pound else.  | ID, pp_if_stm -> Pound else.  | -half2-, pp_if_stm -> Pound else.  | -void-, pp_if_stm -> Pound else.  | Pound, pp_if_stm -> Pound else.  | -long-, pp_if_stm -> Pound else.  | -char-, pp_if_stm -> Pound else.  | -struct-, pp_if_stm -> Pound else.  | -int-, pp_if_stm -> Pound else.  | -uniform-, pp_if_stm -> Pound else.  | -float-, )
45 <- (23, 'if') (pp_if_stm -> Pound if .ID  | -half4-, pp_if_stm -> Pound if .ID  | -float4-, pp_if_stm -> Pound if .ID  | -sampler2D-, pp_if_stm -> Pound if .ID  | -short-, pp_if_stm -> Pound if .ID  | -int-, pp_if_stm -> Pound if .ID  | -char-, pp_if_stm -> Pound if .ID  | Pound, pp_if_stm -> Pound if .ID  | -float2-, pp_if_stm -> Pound if .ID  | -float-, pp_if_stm -> Pound if .ID  | -float3-, pp_if_stm -> Pound if .ID  | -half3-, pp_if_stm -> Pound if .ID  | -struct-, pp_if_stm -> Pound if .ID  | -void-, pp_if_stm -> Pound if .ID  | -half2-, pp_if_stm -> Pound if .ID  | -long-, pp_if_stm -> Pound if .ID  | -fixed4-, pp_if_stm -> Pound if .ID  | -uniform-, pp_if_stm -> Pound if .ID  | ID, pp_if_stm -> Pound if .ID  | -fixed2-, pp_if_stm -> Pound if .ID  | -ENDCG-, pp_if_stm -> Pound if .ID  | -fixed3-, pp_if_stm -> Pound if .ID  | -double-, )
46 <- (24, '-ENDCG-') (prog -> -CGPROGRAM- cg_prog -ENDCG-.  | __End, )
47 <- (25, 'cg_stms') (cg_stms -> cg_stm cg_stms.  | -ENDCG-, )
48 <- (28, 'ID') (init_dec_list -> ID.  | Semicolon, declarator -> ID.  | LBrace, declarator -> ID.  | LParen, )
49 <- (28, 'LParen') (declarator -> .LParen declarator RParen  | LParen, declarator -> LParen .declarator RParen  | LBrace, declarator -> LParen .declarator RParen  | LParen, declarator -> .ID  | RParen, declarator -> .LParen declarator RParen  | RParen, declarator -> .declarator LParen parameter_list RParen  | RParen, declarator -> .ID  | LParen, declarator -> .declarator LParen parameter_list RParen  | LParen, )
50 <- (28, 'declarator') (compound_stm -> .LBrace RBrace  | -fixed4-, compound_stm -> .LBrace block_item_list RBrace  | -char-, function_definition -> dec_specifier declarator .compound_stm  | -short-, function_definition -> dec_specifier declarator .compound_stm  | -half2-, compound_stm -> .LBrace RBrace  | -float3-, function_definition -> dec_specifier declarator .compound_stm  | -float3-, compound_stm -> .LBrace RBrace  | -float2-, compound_stm -> .LBrace RBrace  | -uniform-, function_definition -> dec_specifier declarator .compound_stm  | -fixed2-, function_definition -> dec_specifier declarator .compound_stm  | -half3-, compound_stm -> .LBrace block_item_list RBrace  | -float2-, compound_stm -> .LBrace block_item_list RBrace  | Pound, compound_stm -> .LBrace block_item_list RBrace  | -int-, function_definition -> dec_specifier declarator .compound_stm  | -struct-, compound_stm -> .LBrace RBrace  | -int-, declarator -> declarator .LParen parameter_list RParen  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -uniform-, function_definition -> dec_specifier declarator .compound_stm  | -long-, compound_stm -> .LBrace block_item_list RBrace  | ID, compound_stm -> .LBrace RBrace  | -float4-, compound_stm -> .LBrace RBrace  | Pound, function_definition -> dec_specifier declarator .compound_stm  | -fixed3-, compound_stm -> .LBrace RBrace  | -sampler2D-, compound_stm -> .LBrace RBrace  | -fixed2-, function_definition -> dec_specifier declarator .compound_stm  | -sampler2D-, compound_stm -> .LBrace RBrace  | -double-, compound_stm -> .LBrace block_item_list RBrace  | -sampler2D-, compound_stm -> .LBrace block_item_list RBrace  | -void-, compound_stm -> .LBrace block_item_list RBrace  | -fixed2-, compound_stm -> .LBrace block_item_list RBrace  | -half3-, compound_stm -> .LBrace RBrace  | -half4-, function_definition -> dec_specifier declarator .compound_stm  | -half4-, compound_stm -> .LBrace block_item_list RBrace  | -float4-, function_definition -> dec_specifier declarator .compound_stm  | -float-, compound_stm -> .LBrace RBrace  | -struct-, compound_stm -> .LBrace block_item_list RBrace  | -struct-, function_definition -> dec_specifier declarator .compound_stm  | -fixed4-, compound_stm -> .LBrace RBrace  | ID, compound_stm -> .LBrace block_item_list RBrace  | -ENDCG-, compound_stm -> .LBrace block_item_list RBrace  | -float3-, function_definition -> dec_specifier declarator .compound_stm  | -void-, compound_stm -> .LBrace block_item_list RBrace  | -float-, compound_stm -> .LBrace block_item_list RBrace  | -fixed4-, function_definition -> dec_specifier declarator .compound_stm  | ID, compound_stm -> .LBrace RBrace  | -void-, function_definition -> dec_specifier declarator .compound_stm  | -ENDCG-, compound_stm -> .LBrace RBrace  | -short-, compound_stm -> .LBrace RBrace  | -half2-, declarator -> declarator .LParen parameter_list RParen  | LBrace, compound_stm -> .LBrace block_item_list RBrace  | -half2-, compound_stm -> .LBrace block_item_list RBrace  | -double-, function_definition -> dec_specifier declarator .compound_stm  | Pound, compound_stm -> .LBrace block_item_list RBrace  | -fixed3-, function_definition -> dec_specifier declarator .compound_stm  | -char-, compound_stm -> .LBrace RBrace  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | -half4-, function_definition -> dec_specifier declarator .compound_stm  | -float4-, function_definition -> dec_specifier declarator .compound_stm  | -float2-, function_definition -> dec_specifier declarator .compound_stm  | -double-, function_definition -> dec_specifier declarator .compound_stm  | -uniform-, compound_stm -> .LBrace block_item_list RBrace  | -short-, compound_stm -> .LBrace RBrace  | -float-, compound_stm -> .LBrace RBrace  | -half3-, compound_stm -> .LBrace RBrace  | -ENDCG-, compound_stm -> .LBrace RBrace  | -long-, compound_stm -> .LBrace RBrace  | -char-, function_definition -> dec_specifier declarator .compound_stm  | -int-, compound_stm -> .LBrace block_item_list RBrace  | -long-, )
51 <- (28, 'init_dec_list') (dec -> dec_specifier init_dec_list .Semicolon  | -float3-, dec -> dec_specifier init_dec_list .Semicolon  | -half4-, dec -> dec_specifier init_dec_list .Semicolon  | -int-, dec -> dec_specifier init_dec_list .Semicolon  | -fixed3-, dec -> dec_specifier init_dec_list .Semicolon  | -float-, dec -> dec_specifier init_dec_list .Semicolon  | -double-, dec -> dec_specifier init_dec_list .Semicolon  | -float2-, dec -> dec_specifier init_dec_list .Semicolon  | -void-, dec -> dec_specifier init_dec_list .Semicolon  | -struct-, dec -> dec_specifier init_dec_list .Semicolon  | -half2-, dec -> dec_specifier init_dec_list .Semicolon  | -fixed4-, dec -> dec_specifier init_dec_list .Semicolon  | ID, dec -> dec_specifier init_dec_list .Semicolon  | -fixed2-, dec -> dec_specifier init_dec_list .Semicolon  | -sampler2D-, dec -> dec_specifier init_dec_list .Semicolon  | -char-, dec -> dec_specifier init_dec_list .Semicolon  | -uniform-, dec -> dec_specifier init_dec_list .Semicolon  | -float4-, dec -> dec_specifier init_dec_list .Semicolon  | -half3-, dec -> dec_specifier init_dec_list .Semicolon  | -long-, dec -> dec_specifier init_dec_list .Semicolon  | Pound, dec -> dec_specifier init_dec_list .Semicolon  | -ENDCG-, dec -> dec_specifier init_dec_list .Semicolon  | -short-, )
52 <- (33, 'Semicolon') (dec -> struct_specifier Semicolon.  | -float3-, dec -> struct_specifier Semicolon.  | -int-, dec -> struct_specifier Semicolon.  | -char-, dec -> struct_specifier Semicolon.  | ID, dec -> struct_specifier Semicolon.  | -void-, dec -> struct_specifier Semicolon.  | -struct-, dec -> struct_specifier Semicolon.  | -short-, dec -> struct_specifier Semicolon.  | -fixed3-, dec -> struct_specifier Semicolon.  | -float2-, dec -> struct_specifier Semicolon.  | -half2-, dec -> struct_specifier Semicolon.  | Pound, dec -> struct_specifier Semicolon.  | -float4-, dec -> struct_specifier Semicolon.  | -fixed4-, dec -> struct_specifier Semicolon.  | -half3-, dec -> struct_specifier Semicolon.  | -half4-, dec -> struct_specifier Semicolon.  | -double-, dec -> struct_specifier Semicolon.  | -sampler2D-, dec -> struct_specifier Semicolon.  | -long-, dec -> struct_specifier Semicolon.  | -ENDCG-, dec -> struct_specifier Semicolon.  | -uniform-, dec -> struct_specifier Semicolon.  | -float-, dec -> struct_specifier Semicolon.  | -fixed2-, )
53 <- (34, 'type_specifier') (dec_specifier -> type_qualifier type_specifier.  | LParen, dec_specifier -> type_qualifier type_specifier.  | ID, )
54 <- (37, 'LBrace') (struct_dec_list -> .struct_dec_list struct_dec  | -half2-, struct_dec_list -> .struct_dec_list struct_dec  | -char-, type_specifier -> .-half4-  | ID, type_specifier -> .-float-  | ID, struct_dec_list -> .struct_dec_list struct_dec  | -long-, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -half2-, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -fixed3-, type_specifier -> .-long-  | LParen, type_specifier -> .-half3-  | LParen, struct_dec_list -> .struct_dec_list struct_dec  | -double-, type_specifier -> .-float2-  | ID, struct_dec_list -> .struct_dec  | -short-, struct_dec_list -> .struct_dec  | -int-, type_specifier -> .-long-  | ID, struct_dec_list -> .struct_dec_list struct_dec  | -fixed3-, struct_dec_list -> .struct_dec  | -half2-, struct_dec_list -> .struct_dec_list struct_dec  | -float3-, type_specifier -> .-float2-  | LParen, type_specifier -> .-sampler2D-  | LParen, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -half3-, type_specifier -> .-int-  | LParen, struct_dec_list -> .struct_dec  | -void-, struct_specifier -> -struct- ID LBrace .struct_dec_list RBrace  | Semicolon, struct_dec_list -> .struct_dec  | -double-, struct_dec_list -> .struct_dec  | -sampler2D-, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -void-, type_specifier -> .-double-  | LParen, struct_dec_list -> .struct_dec_list struct_dec  | -int-, struct_dec_list -> .struct_dec_list struct_dec  | ID, struct_dec_list -> .struct_dec_list struct_dec  | -short-, type_specifier -> .-half2-  | LParen, type_specifier -> .-half4-  | LParen, type_specifier -> .-half2-  | ID, type_specifier -> .-sampler2D-  | ID, type_specifier -> .-fixed2-  | LParen, struct_dec_list -> .struct_dec  | -long-, type_specifier -> .-char-  | ID, type_specifier -> .-fixed2-  | ID, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -short-, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -float-, struct_dec_list -> .struct_dec  | -fixed2-, struct_dec_list -> .struct_dec  | -fixed3-, type_specifier -> .-int-  | ID, struct_dec_list -> .struct_dec_list struct_dec  | -float-, type_specifier -> .-half3-  | ID, type_specifier -> .-fixed3-  | ID, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -float3-, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -long-, struct_dec_list -> .struct_dec_list struct_dec  | -float2-, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -sampler2D-, type_specifier -> .-short-  | LParen, struct_dec_list -> .struct_dec  | -float2-, struct_dec_list -> .struct_dec  | -half3-, type_specifier -> .typedef_name  | ID, struct_dec -> .type_specifier struct_declarator_list Semicolon  | ID, type_specifier -> .-fixed4-  | LParen, type_specifier -> .-float4-  | ID, type_specifier -> .-char-  | LParen, struct_dec_list -> .struct_dec_list struct_dec  | -fixed2-, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -char-, type_specifier -> .-float-  | LParen, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -float2-, struct_dec_list -> .struct_dec_list struct_dec  | -float4-, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -half4-, struct_dec_list -> .struct_dec  | -float3-, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -int-, struct_dec_list -> .struct_dec  | -fixed4-, type_specifier -> .-void-  | LParen, type_specifier -> .-short-  | ID, struct_dec -> .type_specifier struct_declarator_list Semicolon  | RBrace, type_specifier -> .typedef_name  | LParen, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -double-, struct_dec_list -> .struct_dec  | ID, struct_dec_list -> .struct_dec  | -float4-, struct_dec_list -> .struct_dec  | -float-, type_specifier -> .-void-  | ID, struct_dec_list -> .struct_dec  | -char-, struct_dec_list -> .struct_dec  | -half4-, struct_dec_list -> .struct_dec_list struct_dec  | -half4-, type_specifier -> .-double-  | ID, struct_dec_list -> .struct_dec_list struct_dec  | -half3-, typedef_name -> .ID  | ID, type_specifier -> .-float3-  | ID, type_specifier -> .-fixed4-  | ID, typedef_name -> .ID  | LParen, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -fixed2-, struct_dec_list -> .struct_dec_list struct_dec  | -fixed4-, struct_dec_list -> .struct_dec  | RBrace, type_specifier -> .-float4-  | LParen, type_specifier -> .-fixed3-  | LParen, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -float4-, struct_dec_list -> .struct_dec_list struct_dec  | -sampler2D-, type_specifier -> .-float3-  | LParen, struct_dec_list -> .struct_dec_list struct_dec  | -void-, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -fixed4-, struct_dec_list -> .struct_dec_list struct_dec  | RBrace, )
55 <- (38, 'ID') (pp_if_stm -> Pound -elif- ID.  | -fixed4-, pp_if_stm -> Pound -elif- ID.  | -uniform-, pp_if_stm -> Pound -elif- ID.  | -struct-, pp_if_stm -> Pound -elif- ID.  | -half3-, pp_if_stm -> Pound -elif- ID.  | -half2-, pp_if_stm -> Pound -elif- ID.  | -int-, pp_if_stm -> Pound -elif- ID.  | -float2-, pp_if_stm -> Pound -elif- ID.  | Pound, pp_if_stm -> Pound -elif- ID.  | -long-, pp_if_stm -> Pound -elif- ID.  | -float4-, pp_if_stm -> Pound -elif- ID.  | -double-, pp_if_stm -> Pound -elif- ID.  | -float-, pp_if_stm -> Pound -elif- ID.  | -fixed2-, pp_if_stm -> Pound -elif- ID.  | -short-, pp_if_stm -> Pound -elif- ID.  | -void-, pp_if_stm -> Pound -elif- ID.  | -float3-, pp_if_stm -> Pound -elif- ID.  | -ENDCG-, pp_if_stm -> Pound -elif- ID.  | -char-, pp_if_stm -> Pound -elif- ID.  | ID, pp_if_stm -> Pound -elif- ID.  | -sampler2D-, pp_if_stm -> Pound -elif- ID.  | -half4-, pp_if_stm -> Pound -elif- ID.  | -fixed3-, )
56 <- (40, 'ID') (pp_if_stm -> Pound -ifdef- ID.  | -float-, pp_if_stm -> Pound -ifdef- ID.  | -half4-, pp_if_stm -> Pound -ifdef- ID.  | ID, pp_if_stm -> Pound -ifdef- ID.  | -char-, pp_if_stm -> Pound -ifdef- ID.  | -long-, pp_if_stm -> Pound -ifdef- ID.  | -double-, pp_if_stm -> Pound -ifdef- ID.  | -void-, pp_if_stm -> Pound -ifdef- ID.  | -half3-, pp_if_stm -> Pound -ifdef- ID.  | -fixed4-, pp_if_stm -> Pound -ifdef- ID.  | -float4-, pp_if_stm -> Pound -ifdef- ID.  | -struct-, pp_if_stm -> Pound -ifdef- ID.  | -fixed2-, pp_if_stm -> Pound -ifdef- ID.  | -int-, pp_if_stm -> Pound -ifdef- ID.  | -fixed3-, pp_if_stm -> Pound -ifdef- ID.  | -ENDCG-, pp_if_stm -> Pound -ifdef- ID.  | -sampler2D-, pp_if_stm -> Pound -ifdef- ID.  | -half2-, pp_if_stm -> Pound -ifdef- ID.  | -float3-, pp_if_stm -> Pound -ifdef- ID.  | Pound, pp_if_stm -> Pound -ifdef- ID.  | -float2-, pp_if_stm -> Pound -ifdef- ID.  | -uniform-, pp_if_stm -> Pound -ifdef- ID.  | -short-, )
57 <- (41, 'ID') (pp_if_stm -> Pound -ifndef- ID.  | -char-, pp_if_stm -> Pound -ifndef- ID.  | -half2-, pp_if_stm -> Pound -ifndef- ID.  | -fixed3-, pp_if_stm -> Pound -ifndef- ID.  | -float3-, pp_if_stm -> Pound -ifndef- ID.  | -half4-, pp_if_stm -> Pound -ifndef- ID.  | -fixed2-, pp_if_stm -> Pound -ifndef- ID.  | -long-, pp_if_stm -> Pound -ifndef- ID.  | -ENDCG-, pp_if_stm -> Pound -ifndef- ID.  | -fixed4-, pp_if_stm -> Pound -ifndef- ID.  | -float-, pp_if_stm -> Pound -ifndef- ID.  | -int-, pp_if_stm -> Pound -ifndef- ID.  | Pound, pp_if_stm -> Pound -ifndef- ID.  | -float4-, pp_if_stm -> Pound -ifndef- ID.  | -double-, pp_if_stm -> Pound -ifndef- ID.  | -void-, pp_if_stm -> Pound -ifndef- ID.  | -uniform-, pp_if_stm -> Pound -ifndef- ID.  | ID, pp_if_stm -> Pound -ifndef- ID.  | -short-, pp_if_stm -> Pound -ifndef- ID.  | -float2-, pp_if_stm -> Pound -ifndef- ID.  | -struct-, pp_if_stm -> Pound -ifndef- ID.  | -sampler2D-, pp_if_stm -> Pound -ifndef- ID.  | -half3-, )
58 <- (42, 'String') (pp_cmd -> Pound -include- String.  | -struct-, pp_cmd -> Pound -include- String.  | -long-, pp_cmd -> Pound -include- String.  | -float-, pp_cmd -> Pound -include- String.  | -half2-, pp_cmd -> Pound -include- String.  | -half4-, pp_cmd -> Pound -include- String.  | -float4-, pp_cmd -> Pound -include- String.  | -fixed4-, pp_cmd -> Pound -include- String.  | -int-, pp_cmd -> Pound -include- String.  | -double-, pp_cmd -> Pound -include- String.  | -uniform-, pp_cmd -> Pound -include- String.  | -fixed3-, pp_cmd -> Pound -include- String.  | -fixed2-, pp_cmd -> Pound -include- String.  | -short-, pp_cmd -> Pound -include- String.  | -float2-, pp_cmd -> Pound -include- String.  | ID, pp_cmd -> Pound -include- String.  | -char-, pp_cmd -> Pound -include- String.  | -sampler2D-, pp_cmd -> Pound -include- String.  | -half3-, pp_cmd -> Pound -include- String.  | -ENDCG-, pp_cmd -> Pound -include- String.  | -void-, pp_cmd -> Pound -include- String.  | -float3-, pp_cmd -> Pound -include- String.  | Pound, )
59 <- (43, 'ID') (ids -> .ID ids  | Enter, ids ->.  | Enter, ids -> ID .ids  | Enter, )
60 <- (43, 'ids') (pp_cmd -> Pound -pragma- ids .Enter  | -char-, pp_cmd -> Pound -pragma- ids .Enter  | -struct-, pp_cmd -> Pound -pragma- ids .Enter  | -uniform-, pp_cmd -> Pound -pragma- ids .Enter  | -sampler2D-, pp_cmd -> Pound -pragma- ids .Enter  | -half2-, pp_cmd -> Pound -pragma- ids .Enter  | -float-, pp_cmd -> Pound -pragma- ids .Enter  | -short-, pp_cmd -> Pound -pragma- ids .Enter  | -fixed4-, pp_cmd -> Pound -pragma- ids .Enter  | -double-, pp_cmd -> Pound -pragma- ids .Enter  | -float2-, pp_cmd -> Pound -pragma- ids .Enter  | -ENDCG-, pp_cmd -> Pound -pragma- ids .Enter  | -float4-, pp_cmd -> Pound -pragma- ids .Enter  | -float3-, pp_cmd -> Pound -pragma- ids .Enter  | -fixed2-, pp_cmd -> Pound -pragma- ids .Enter  | -void-, pp_cmd -> Pound -pragma- ids .Enter  | -int-, pp_cmd -> Pound -pragma- ids .Enter  | Pound, pp_cmd -> Pound -pragma- ids .Enter  | ID, pp_cmd -> Pound -pragma- ids .Enter  | -half4-, pp_cmd -> Pound -pragma- ids .Enter  | -half3-, pp_cmd -> Pound -pragma- ids .Enter  | -fixed3-, pp_cmd -> Pound -pragma- ids .Enter  | -long-, )
61 <- (45, 'ID') (pp_if_stm -> Pound if ID.  | -float4-, pp_if_stm -> Pound if ID.  | -sampler2D-, pp_if_stm -> Pound if ID.  | -short-, pp_if_stm -> Pound if ID.  | -char-, pp_if_stm -> Pound if ID.  | -fixed3-, pp_if_stm -> Pound if ID.  | -fixed2-, pp_if_stm -> Pound if ID.  | -half2-, pp_if_stm -> Pound if ID.  | ID, pp_if_stm -> Pound if ID.  | -ENDCG-, pp_if_stm -> Pound if ID.  | -long-, pp_if_stm -> Pound if ID.  | -float2-, pp_if_stm -> Pound if ID.  | -void-, pp_if_stm -> Pound if ID.  | -float-, pp_if_stm -> Pound if ID.  | -fixed4-, pp_if_stm -> Pound if ID.  | -uniform-, pp_if_stm -> Pound if ID.  | -double-, pp_if_stm -> Pound if ID.  | -float3-, pp_if_stm -> Pound if ID.  | -half4-, pp_if_stm -> Pound if ID.  | -half3-, pp_if_stm -> Pound if ID.  | -int-, pp_if_stm -> Pound if ID.  | Pound, pp_if_stm -> Pound if ID.  | -struct-, )
62 <- (49, 'ID') (declarator -> ID.  | RParen, declarator -> ID.  | LParen, )
63 <- (49, 'LParen') (declarator -> .LParen declarator RParen  | LParen, declarator -> LParen .declarator RParen  | LParen, declarator -> .ID  | LParen, declarator -> .LParen declarator RParen  | RParen, declarator -> .declarator LParen parameter_list RParen  | RParen, declarator -> .ID  | RParen, declarator -> .declarator LParen parameter_list RParen  | LParen, declarator -> LParen .declarator RParen  | RParen, )
64 <- (49, 'declarator') (declarator -> LParen declarator .RParen  | LBrace, declarator -> LParen declarator .RParen  | LParen, declarator -> declarator .LParen parameter_list RParen  | LParen, declarator -> declarator .LParen parameter_list RParen  | RParen, )
65 <- (50, 'LBrace') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, iteration_stm -> .while LParen exp RParen stm  | -fixed3-, jump_stm -> .-return- exp Semicolon  | Decrement, exp_stm -> .Semicolon  | -half2-, block_item_list -> .block_item  | -long-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -char-, jump_stm -> .break  | -continue-, exp_stm -> .exp Semicolon  | -float4-, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, stm -> .iteration_stm  | Number, unary_exp -> .postfix_exp  | Ampersand, dec -> .dec_specifier init_dec_list Semicolon  | -fixed3-, compound_stm -> .LBrace RBrace  | -do-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float3-, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, exp_stm -> .Semicolon  | -struct-, unary_exp -> .postfix_exp  | Assign, unary_exp -> .Increment unary_exp  | Percent, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -long-, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .unary_op unary_exp  | LT, unary_exp -> .Decrement unary_exp  | Minus, stm -> .iteration_stm  | String, jump_stm -> .-goto- ID  | LParen, block_item_list -> .block_item_list block_item  | -half4-, postfix_exp -> .postfix_exp Increment  | GT, block_item_list -> .block_item_list block_item  | Minus, block_item_list -> .block_item  | -void-, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, unary_exp -> .postfix_exp  | GT, compound_stm -> .LBrace RBrace  | ID, jump_stm -> .-goto- ID  | -float4-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | for, selection_stm -> .if LParen exp RParen stm else stm  | while, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -struct-, block_item_list -> .block_item_list block_item  | Number, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LParen, compound_stm -> .LBrace block_item_list RBrace  | Number, compound_stm -> LBrace .block_item_list RBrace  | -short-, postfix_exp -> .postfix_exp Increment  | OR, exp_stm -> .Semicolon  | -long-, iteration_stm -> .while LParen exp RParen stm  | -fixed4-, block_item -> .dec  | while, unary_op -> .NOT  | Tilde, dec -> .struct_specifier Semicolon  | for, binary_exp -> .unary_exp  | Divide, compound_stm -> LBrace .block_item_list RBrace  | -void-, compound_stm -> LBrace .block_item_list RBrace  | -double-, unary_op -> .Tilde  | LParen, selection_stm -> .if LParen exp RParen stm else stm  | -int-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | break, compound_stm -> .LBrace block_item_list RBrace  | Tilde, block_item_list -> .block_item  | break, block_item -> .stm  | -return-, compound_stm -> .LBrace RBrace  | -float2-, exp_stm -> .exp Semicolon  | -do-, unary_op -> .Plus  | ID, selection_stm -> .if LParen exp RParen stm else stm  | RBrace, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Dot ID  | Divide, postfix_exp -> .postfix_exp Decrement  | Dot, jump_stm -> .-return- exp Semicolon  | Minus, block_item -> .stm  | Decrement, compound_stm -> LBrace .RBrace  | -struct-, selection_stm -> .if LParen exp RParen stm else stm  | LBrace, postfix_exp -> .primary_exp  | Semicolon, jump_stm -> .-continue-  | -fixed4-, block_item_list -> .block_item_list block_item  | -fixed3-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, exp_stm -> .Semicolon  | while, dec -> .struct_specifier Semicolon  | -double-, type_qualifier -> .-uniform-  | -fixed3-, selection_stm -> .if LParen exp RParen stm  | -float-, jump_stm -> .-return- exp Semicolon  | while, dec -> .struct_specifier Semicolon  | LBrace, iteration_stm -> .while LParen exp RParen stm  | -sampler2D-, compound_stm -> LBrace .block_item_list RBrace  | -long-, exp_stm -> .exp Semicolon  | -float3-, block_item -> .stm  | NOT, primary_exp -> .String  | Semicolon, compound_stm -> LBrace .RBrace  | -fixed4-, stm -> .jump_stm  | -long-, jump_stm -> .-continue-  | ID, jump_stm -> .-return- exp Semicolon  | -struct-, compound_stm -> .LBrace block_item_list RBrace  | -double-, stm -> .iteration_stm  | -float4-, dec -> .dec_specifier init_dec_list Semicolon  | -int-, unary_exp -> .postfix_exp  | Times, compound_stm -> .LBrace RBrace  | -fixed3-, primary_exp -> .Number  | AND, dec -> .struct_specifier Semicolon  | String, selection_stm -> .if LParen exp RParen stm  | -half2-, postfix_exp -> .primary_exp  | RightShift, block_item_list -> .block_item_list block_item  | if, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | if, compound_stm -> .LBrace block_item_list RBrace  | for, type_specifier -> .-half4-  | ID, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, dec -> .dec_specifier init_dec_list Semicolon  | -short-, block_item_list -> .block_item_list block_item  | RBrace, exp_stm -> .exp Semicolon  | -struct-, block_item -> .dec  | -float2-, selection_stm -> .if LParen exp RParen stm  | String, type_qualifier -> .-uniform-  | -long-, selection_stm -> .if LParen exp RParen stm  | -int-, type_specifier -> .-float2-  | ID, stm -> .jump_stm  | String, dec -> .struct_specifier Semicolon  | Number, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_exp -> .Increment unary_exp  | Plus, exp_stm -> .Semicolon  | if, selection_stm -> .if LParen exp RParen stm else stm  | -do-, stm -> .iteration_stm  | -void-, postfix_exp -> .primary_exp  | LE, compound_stm -> .LBrace block_item_list RBrace  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -float-, compound_stm -> LBrace .RBrace  | -short-, block_item -> .dec  | -uniform-, stm -> .jump_stm  | -half4-, block_item_list -> .block_item_list block_item  | -float2-, jump_stm -> .-return- exp Semicolon  | -do-, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, dec -> .struct_specifier Semicolon  | -float-, stm -> .compound_stm  | NOT, compound_stm -> LBrace .block_item_list RBrace  | -fixed2-, unary_exp -> .postfix_exp  | AND, stm -> .compound_stm  | -float-, postfix_exp -> .postfix_exp Dot ID  | AND, stm -> .jump_stm  | Decrement, primary_exp -> .String  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, stm -> .selection_stm  | -continue-, iteration_stm -> .while LParen exp RParen stm  | Tilde, exp -> .exp Comma assignment_exp  | Semicolon, jump_stm -> .-goto- ID  | -int-, exp_stm -> .Semicolon  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -short-, type_specifier -> .-float-  | ID, block_item -> .stm  | for, selection_stm -> .if LParen exp RParen stm  | -float4-, type_specifier -> .-fixed3-  | ID, block_item_list -> .block_item_list block_item  | Semicolon, jump_stm -> .-return- exp Semicolon  | -return-, iteration_stm -> .while LParen exp RParen stm  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Tilde, compound_stm -> .LBrace RBrace  | break, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed3-, postfix_exp -> .primary_exp  | Minus, selection_stm -> .if LParen exp RParen stm  | RBrace, jump_stm -> .break  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | -half2-, stm -> .iteration_stm  | LBrace, compound_stm -> LBrace .block_item_list RBrace  | -fixed3-, selection_stm -> .if LParen exp RParen stm else stm  | Number, primary_exp -> .LParen exp RParen  | LE, primary_exp -> .LParen exp RParen  | Caret, compound_stm -> .LBrace block_item_list RBrace  | -float4-, block_item -> .stm  | Semicolon, binary_exp -> .unary_exp  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float-, unary_exp -> .Decrement unary_exp  | GT, selection_stm -> .if LParen exp RParen stm else stm  | -float3-, jump_stm -> .-return- exp Semicolon  | NOT, postfix_exp -> .postfix_exp Increment  | Times, selection_stm -> .if LParen exp RParen stm else stm  | Decrement, stm -> .selection_stm  | -fixed3-, postfix_exp -> .postfix_exp Increment  | AND, iteration_stm -> .while LParen exp RParen stm  | -half2-, unary_exp -> .Increment unary_exp  | OR, exp_stm -> .Semicolon  | -continue-, selection_stm -> .if LParen exp RParen stm  | Minus, block_item_list -> .block_item_list block_item  | -goto-, jump_stm -> .-continue-  | while, selection_stm -> .if LParen exp RParen stm else stm  | Tilde, primary_exp -> .ID  | Decrement, stm -> .selection_stm  | Number, dec_specifier -> .type_specifier  | ID, unary_op -> .Minus  | ID, stm -> .exp_stm  | String, compound_stm -> .LBrace RBrace  | while, jump_stm -> .-continue-  | -float-, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | EQ, stm -> .exp_stm  | -double-, stm -> .selection_stm  | Minus, jump_stm -> .-continue-  | -return-, postfix_exp -> .postfix_exp Decrement  | Semicolon, unary_op -> .Tilde  | Number, exp_stm -> .exp Semicolon  | -goto-, stm -> .jump_stm  | while, binary_exp -> .unary_exp  | Plus, stm -> .exp_stm  | -float4-, unary_exp -> .unary_op unary_exp  | Ampersand, compound_stm -> .LBrace block_item_list RBrace  | if, postfix_exp -> .postfix_exp Dot ID  | LT, dec -> .dec_specifier init_dec_list Semicolon  | -fixed2-, unary_exp -> .unary_op unary_exp  | Assign, compound_stm -> LBrace .block_item_list RBrace  | -ENDCG-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, stm -> .iteration_stm  | -continue-, selection_stm -> .if LParen exp RParen stm else stm  | -float-, block_item -> .stm  | -float2-, dec -> .struct_specifier Semicolon  | -fixed2-, compound_stm -> .LBrace block_item_list RBrace  | String, block_item -> .dec  | Semicolon, unary_op -> .NOT  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | String, primary_exp -> .Number  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float4-, jump_stm -> .break  | -uniform-, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, compound_stm -> LBrace .RBrace  | -float4-, dec -> .struct_specifier Semicolon  | NOT, dec -> .struct_specifier Semicolon  | Plus, dec -> .struct_specifier Semicolon  | -half3-, dec -> .struct_specifier Semicolon  | -half4-, jump_stm -> .-return- exp Semicolon  | -long-, compound_stm -> .LBrace RBrace  | -return-, stm -> .exp_stm  | NOT, stm -> .iteration_stm  | Increment, jump_stm -> .-return- exp Semicolon  | LParen, iteration_stm -> .while LParen exp RParen stm  | if, postfix_exp -> .primary_exp  | Plus, stm -> .jump_stm  | -float4-, block_item_list -> .block_item  | -int-, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, stm -> .compound_stm  | Tilde, stm -> .exp_stm  | -float2-, unary_op -> .Plus  | Increment, iteration_stm -> .while LParen exp RParen stm  | -goto-, block_item_list -> .block_item_list block_item  | -continue-, selection_stm -> .if LParen exp RParen stm  | NOT, compound_stm -> LBrace .RBrace  | -float-, primary_exp -> .String  | Times, stm -> .selection_stm  | while, stm -> .exp_stm  | -int-, stm -> .iteration_stm  | break, iteration_stm -> .while LParen exp RParen stm  | -half3-, stm -> .iteration_stm  | -double-, block_item_list -> .block_item_list block_item  | -float3-, stm -> .iteration_stm  | -float3-, selection_stm -> .if LParen exp RParen stm  | -half4-, primary_exp -> .String  | Increment, compound_stm -> LBrace .RBrace  | -int-, exp_stm -> .exp Semicolon  | ID, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -uniform-, block_item -> .dec  | -sampler2D-, stm -> .compound_stm  | if, jump_stm -> .-return- exp Semicolon  | ID, jump_stm -> .-return- exp Semicolon  | -char-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed3-, primary_exp -> .Number  | Dot, exp_stm -> .Semicolon  | -do-, primary_exp -> .LParen exp RParen  | Ampersand, block_item -> .dec  | -continue-, stm -> .jump_stm  | -struct-, postfix_exp -> .primary_exp  | Comma, block_item -> .dec  | Increment, primary_exp -> .ID  | LBrack, unary_exp -> .postfix_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LBrack, block_item -> .dec  | NOT, selection_stm -> .if LParen exp RParen stm  | LParen, jump_stm -> .-continue-  | -int-, block_item_list -> .block_item_list block_item  | while, jump_stm -> .break  | -fixed2-, type_specifier -> .-fixed4-  | ID, compound_stm -> .LBrace RBrace  | Plus, unary_exp -> .unary_op unary_exp  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, stm -> .selection_stm  | -short-, postfix_exp -> .postfix_exp Dot ID  | Semicolon, type_qualifier -> .-uniform-  | -fixed2-, compound_stm -> LBrace .block_item_list RBrace  | -float3-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, stm -> .selection_stm  | -fixed4-, jump_stm -> .-goto- ID  | -void-, compound_stm -> .LBrace block_item_list RBrace  | -fixed2-, dec -> .dec_specifier init_dec_list Semicolon  | -long-, unary_op -> .Minus  | Tilde, primary_exp -> .LParen exp RParen  | LT, compound_stm -> .LBrace RBrace  | -char-, primary_exp -> .String  | LT, block_item -> .stm  | -int-, unary_exp -> .postfix_exp  | NEQ, stm -> .compound_stm  | Increment, selection_stm -> .if LParen exp RParen stm  | Semicolon, primary_exp -> .LParen exp RParen  | AND, stm -> .compound_stm  | -void-, stm -> .jump_stm  | -float2-, unary_exp -> .Increment unary_exp  | NEQ, exp_stm -> .exp Semicolon  | -int-, stm -> .iteration_stm  | -fixed3-, block_item -> .stm  | -float3-, compound_stm -> .LBrace RBrace  | Semicolon, unary_op -> .Minus  | NOT, block_item -> .dec  | ID, iteration_stm -> .while LParen exp RParen stm  | LParen, stm -> .iteration_stm  | -float2-, type_specifier -> .-long-  | ID, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | NOT, primary_exp -> .ID  | Semicolon, stm -> .selection_stm  | -return-, postfix_exp -> .postfix_exp Decrement  | AND, unary_op -> .Tilde  | Increment, stm -> .iteration_stm  | -fixed4-, postfix_exp -> .postfix_exp LParen RParen  | EQ, stm -> .selection_stm  | Decrement, jump_stm -> .-continue-  | -do-, block_item -> .dec  | -void-, unary_exp -> .Decrement unary_exp  | LeftShift, block_item_list -> .block_item  | -half2-, jump_stm -> .-continue-  | Tilde, stm -> .exp_stm  | LBrace, jump_stm -> .-continue-  | -half4-, dec -> .struct_specifier Semicolon  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | OR, stm -> .jump_stm  | -float3-, jump_stm -> .break  | for, jump_stm -> .-continue-  | -goto-, compound_stm -> .LBrace RBrace  | -void-, exp_stm -> .Semicolon  | -fixed2-, selection_stm -> .if LParen exp RParen stm else stm  | -void-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -void-, block_item_list -> .block_item_list block_item  | Plus, exp_stm -> .Semicolon  | -fixed4-, exp_stm -> .exp Semicolon  | Minus, stm -> .iteration_stm  | -char-, block_item_list -> .block_item  | LBrace, jump_stm -> .break  | -float4-, iteration_stm -> .while LParen exp RParen stm  | LBrace, primary_exp -> .Number  | VerticalBar, block_item -> .dec  | Decrement, compound_stm -> LBrace .block_item_list RBrace  | -float4-, postfix_exp -> .primary_exp  | Divide, compound_stm -> .LBrace RBrace  | -fixed4-, dec -> .struct_specifier Semicolon  | -fixed3-, exp_stm -> .exp Semicolon  | -sampler2D-, binary_exp -> .unary_exp  | Times, exp_stm -> .Semicolon  | String, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float3-, stm -> .jump_stm  | Minus, postfix_exp -> .postfix_exp Increment  | VerticalBar, struct_specifier -> .-struct- ID  | Semicolon, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, jump_stm -> .break  | if, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half4-, jump_stm -> .-return- exp Semicolon  | -goto-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float-, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, stm -> .compound_stm  | -fixed4-, exp_stm -> .exp Semicolon  | -half2-, postfix_exp -> .postfix_exp LParen RParen  | Decrement, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | Minus, postfix_exp -> .postfix_exp Dot ID  | RightShift, stm -> .compound_stm  | -short-, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, iteration_stm -> .while LParen exp RParen stm  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -float2-, jump_stm -> .break  | -char-, binary_exp -> .unary_exp  | OR, stm -> .compound_stm  | -fixed2-, compound_stm -> .LBrace block_item_list RBrace  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | LParen, compound_stm -> LBrace .RBrace  | -sampler2D-, stm -> .selection_stm  | RBrace, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, compound_stm -> LBrace .block_item_list RBrace  | -sampler2D-, stm -> .compound_stm  | -char-, type_specifier -> .-int-  | ID, compound_stm -> .LBrace RBrace  | -long-, jump_stm -> .break  | -long-, jump_stm -> .-continue-  | -uniform-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LBrace, stm -> .compound_stm  | -goto-, jump_stm -> .break  | -return-, stm -> .compound_stm  | -float4-, block_item_list -> .block_item_list block_item  | -int-, compound_stm -> LBrace .block_item_list RBrace  | Pound, iteration_stm -> .while LParen exp RParen stm  | -uniform-, jump_stm -> .-continue-  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -short-, postfix_exp -> .postfix_exp LParen RParen  | NEQ, block_item_list -> .block_item  | while, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, jump_stm -> .-return- exp Semicolon  | -half3-, primary_exp -> .LParen exp RParen  | NEQ, compound_stm -> .LBrace RBrace  | Increment, compound_stm -> .LBrace block_item_list RBrace  | -continue-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Plus, dec -> .dec_specifier init_dec_list Semicolon  | RBrace, block_item_list -> .block_item  | -float4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, postfix_exp -> .postfix_exp Decrement  | Times, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -int-, unary_op -> .NOT  | LParen, exp_stm -> .exp Semicolon  | String, block_item -> .stm  | -fixed2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .String  | Dot, postfix_exp -> .primary_exp  | AND, jump_stm -> .-return- exp Semicolon  | -short-, dec -> .dec_specifier init_dec_list Semicolon  | LParen, unary_exp -> .unary_op unary_exp  | Plus, dec -> .dec_specifier init_dec_list Semicolon  | -struct-, stm -> .compound_stm  | -float3-, stm -> .selection_stm  | -float4-, block_item -> .dec  | -float4-, dec -> .dec_specifier init_dec_list Semicolon  | -char-, binary_exp -> .unary_exp  | Percent, compound_stm -> .LBrace block_item_list RBrace  | while, stm -> .iteration_stm  | Minus, block_item -> .stm  | -half3-, postfix_exp -> .postfix_exp Increment  | GE, block_item_list -> .block_item_list block_item  | -fixed2-, primary_exp -> .ID  | LParen, unary_exp -> .Increment unary_exp  | Divide, exp_stm -> .Semicolon  | ID, unary_op -> .NOT  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed2-, jump_stm -> .-goto- ID  | -struct-, jump_stm -> .break  | Minus, compound_stm -> .LBrace RBrace  | if, jump_stm -> .break  | -void-, block_item_list -> .block_item_list block_item  | for, iteration_stm -> .while LParen exp RParen stm  | -float-, compound_stm -> LBrace .block_item_list RBrace  | -float-, compound_stm -> LBrace .block_item_list RBrace  | -float2-, primary_exp -> .String  | Ampersand, block_item -> .stm  | Plus, type_qualifier -> .-uniform-  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | NOT, primary_exp -> .ID  | Times, stm -> .compound_stm  | -sampler2D-, stm -> .selection_stm  | LParen, dec -> .dec_specifier init_dec_list Semicolon  | for, selection_stm -> .if LParen exp RParen stm else stm  | Increment, stm -> .jump_stm  | -void-, dec -> .dec_specifier init_dec_list Semicolon  | String, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, binary_exp -> .binary_exp binary_op unary_exp  | Caret, primary_exp -> .LParen exp RParen  | Divide, unary_op -> .Tilde  | Tilde, jump_stm -> .-continue-  | -void-, type_qualifier -> .-uniform-  | -char-, unary_exp -> .Decrement unary_exp  | Comma, stm -> .exp_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -return-, unary_exp -> .Decrement unary_exp  | Divide, stm -> .compound_stm  | -do-, jump_stm -> .-return- exp Semicolon  | -fixed3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half3-, stm -> .exp_stm  | -return-, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -long-, compound_stm -> LBrace .block_item_list RBrace  | -struct-, postfix_exp -> .postfix_exp Decrement  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, iteration_stm -> .while LParen exp RParen stm  | for, stm -> .selection_stm  | if, stm -> .compound_stm  | -uniform-, compound_stm -> .LBrace RBrace  | -float4-, type_qualifier -> .-uniform-  | -float-, jump_stm -> .-continue-  | RBrace, binary_exp -> .unary_exp  | LE, jump_stm -> .-return- exp Semicolon  | -float4-, stm -> .exp_stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, stm -> .exp_stm  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -long-, selection_stm -> .if LParen exp RParen stm else stm  | -fixed3-, block_item_list -> .block_item_list block_item  | -struct-, primary_exp -> .String  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | if, postfix_exp -> .postfix_exp Dot ID  | Plus, stm -> .compound_stm  | -float2-, block_item_list -> .block_item_list block_item  | -fixed4-, primary_exp -> .Number  | LeftShift, exp_stm -> .exp Semicolon  | Tilde, jump_stm -> .break  | while, jump_stm -> .-continue-  | -char-, jump_stm -> .break  | LParen, compound_stm -> .LBrace RBrace  | LBrace, jump_stm -> .-goto- ID  | -float-, block_item -> .stm  | -do-, dec -> .dec_specifier init_dec_list Semicolon  | Number, unary_op -> .Tilde  | NOT, postfix_exp -> .postfix_exp Decrement  | Percent, jump_stm -> .break  | -float-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, selection_stm -> .if LParen exp RParen stm  | -fixed2-, primary_exp -> .LParen exp RParen  | Times, stm -> .selection_stm  | ID, selection_stm -> .if LParen exp RParen stm  | -double-, exp_stm -> .Semicolon  | LParen, block_item_list -> .block_item_list block_item  | -half2-, stm -> .exp_stm  | Minus, exp_stm -> .exp Semicolon  | -uniform-, dec -> .struct_specifier Semicolon  | -float2-, primary_exp -> .ID  | OR, selection_stm -> .if LParen exp RParen stm  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, jump_stm -> .break  | Decrement, stm -> .jump_stm  | Semicolon, iteration_stm -> .while LParen exp RParen stm  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | Times, exp_stm -> .Semicolon  | -half4-, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, compound_stm -> .LBrace RBrace  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, compound_stm -> LBrace .block_item_list RBrace  | -int-, unary_exp -> .unary_op unary_exp  | Question, selection_stm -> .if LParen exp RParen stm else stm  | -double-, unary_exp -> .unary_op unary_exp  | Times, stm -> .iteration_stm  | -int-, dec -> .struct_specifier Semicolon  | -float3-, exp_stm -> .exp Semicolon  | Plus, stm -> .exp_stm  | -void-, block_item -> .stm  | -double-, block_item_list -> .block_item  | Increment, iteration_stm -> .while LParen exp RParen stm  | while, compound_stm -> LBrace .RBrace  | -float2-, block_item_list -> .block_item_list block_item  | -long-, dec -> .dec_specifier init_dec_list Semicolon  | Minus, stm -> .iteration_stm  | -do-, block_item_list -> .block_item  | NOT, binary_exp -> .unary_exp  | LT, block_item -> .stm  | -float-, primary_exp -> .ID  | LE, block_item_list -> .block_item_list block_item  | -char-, stm -> .exp_stm  | -float-, compound_stm -> .LBrace block_item_list RBrace  | -sampler2D-, primary_exp -> .LParen exp RParen  | GE, block_item -> .stm  | -sampler2D-, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | LeftShift, jump_stm -> .-return- exp Semicolon  | Number, exp_stm -> .exp Semicolon  | Number, primary_exp -> .String  | Minus, block_item_list -> .block_item_list block_item  | Decrement, selection_stm -> .if LParen exp RParen stm  | -uniform-, compound_stm -> LBrace .RBrace  | -half3-, jump_stm -> .-continue-  | -sampler2D-, dec -> .dec_specifier init_dec_list Semicolon  | ID, iteration_stm -> .while LParen exp RParen stm  | -int-, block_item_list -> .block_item  | -half3-, dec -> .struct_specifier Semicolon  | -long-, type_qualifier -> .-uniform-  | -half2-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Semicolon, dec -> .dec_specifier init_dec_list Semicolon  | Semicolon, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | for, postfix_exp -> .postfix_exp Decrement  | Increment, block_item -> .stm  | -goto-, binary_exp -> .binary_exp binary_op unary_exp  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | -fixed2-, postfix_exp -> .primary_exp  | Question, block_item -> .stm  | -char-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, jump_stm -> .break  | -fixed4-, dec -> .dec_specifier init_dec_list Semicolon  | -sampler2D-, postfix_exp -> .postfix_exp Increment  | Increment, stm -> .compound_stm  | -half2-, selection_stm -> .if LParen exp RParen stm else stm  | -fixed4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, stm -> .iteration_stm  | -short-, selection_stm -> .if LParen exp RParen stm  | Tilde, postfix_exp -> .postfix_exp Increment  | LeftShift, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> .postfix_exp  | Caret, stm -> .jump_stm  | Increment, selection_stm -> .if LParen exp RParen stm  | Number, primary_exp -> .ID  | LT, postfix_exp -> .postfix_exp Dot ID  | Caret, iteration_stm -> .while LParen exp RParen stm  | NOT, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -return-, dec -> .struct_specifier Semicolon  | Decrement, primary_exp -> .Number  | Percent, iteration_stm -> .while LParen exp RParen stm  | -return-, primary_exp -> .LParen exp RParen  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -double-, primary_exp -> .Number  | Assign, block_item_list -> .block_item  | RBrace, block_item -> .dec  | -float3-, compound_stm -> .LBrace block_item_list RBrace  | -void-, jump_stm -> .break  | -goto-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Increment, stm -> .compound_stm  | RBrace, jump_stm -> .-goto- ID  | -goto-, stm -> .exp_stm  | -continue-, stm -> .iteration_stm  | Plus, unary_exp -> .Decrement unary_exp  | Caret, selection_stm -> .if LParen exp RParen stm  | -fixed4-, exp_stm -> .Semicolon  | -uniform-, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, block_item_list -> .block_item  | -do-, block_item_list -> .block_item  | ID, block_item_list -> .block_item  | -uniform-, stm -> .exp_stm  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Minus, postfix_exp -> .postfix_exp Decrement  | Divide, block_item_list -> .block_item_list block_item  | -void-, exp_stm -> .Semicolon  | Minus, stm -> .exp_stm  | ID, primary_exp -> .String  | Divide, block_item -> .dec  | -float-, unary_exp -> .postfix_exp  | EQ, unary_exp -> .postfix_exp  | VerticalBar, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, primary_exp -> .String  | LParen, postfix_exp -> .postfix_exp Increment  | Minus, binary_exp -> .unary_exp  | LeftShift, iteration_stm -> .while LParen exp RParen stm  | -double-, jump_stm -> .-goto- ID  | LBrace, primary_exp -> .ID  | RightShift, selection_stm -> .if LParen exp RParen stm else stm  | -char-, jump_stm -> .-return- exp Semicolon  | -continue-, postfix_exp -> .postfix_exp Increment  | LE, jump_stm -> .-continue-  | -continue-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Tilde, primary_exp -> .ID  | NEQ, compound_stm -> LBrace .RBrace  | -char-, block_item_list -> .block_item_list block_item  | LParen, stm -> .selection_stm  | -struct-, stm -> .compound_stm  | -half4-, unary_exp -> .unary_op unary_exp  | NEQ, block_item -> .dec  | -goto-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half3-, jump_stm -> .-continue-  | -float3-, selection_stm -> .if LParen exp RParen stm  | for, selection_stm -> .if LParen exp RParen stm  | ID, compound_stm -> LBrace .block_item_list RBrace  | -half2-, block_item -> .stm  | Tilde, stm -> .jump_stm  | ID, jump_stm -> .-return- exp Semicolon  | -half4-, block_item -> .dec  | for, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, dec -> .struct_specifier Semicolon  | RBrace, type_qualifier -> .-uniform-  | -void-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | RBrace, compound_stm -> .LBrace RBrace  | -struct-, unary_exp -> .postfix_exp  | Question, primary_exp -> .String  | LBrack, stm -> .jump_stm  | for, jump_stm -> .-return- exp Semicolon  | Plus, stm -> .exp_stm  | -float3-, unary_exp -> .Increment unary_exp  | Comma, block_item_list -> .block_item_list block_item  | LBrace, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -uniform-, jump_stm -> .-return- exp Semicolon  | if, jump_stm -> .-goto- ID  | -fixed3-, dec -> .struct_specifier Semicolon  | -do-, binary_exp -> .binary_exp binary_op unary_exp  | LT, block_item -> .stm  | LBrace, stm -> .selection_stm  | -fixed2-, jump_stm -> .-goto- ID  | if, compound_stm -> .LBrace RBrace  | LParen, block_item -> .stm  | while, stm -> .iteration_stm  | -long-, stm -> .selection_stm  | -int-, stm -> .exp_stm  | -fixed4-, jump_stm -> .-goto- ID  | -float3-, postfix_exp -> .primary_exp  | GT, block_item -> .stm  | break, stm -> .selection_stm  | -do-, postfix_exp -> .primary_exp  | VerticalBar, primary_exp -> .Number  | RightShift, jump_stm -> .-goto- ID  | Increment, stm -> .selection_stm  | -half3-, stm -> .jump_stm  | -short-, stm -> .exp_stm  | break, binary_exp -> .unary_exp  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -struct-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -char-, block_item_list -> .block_item  | LParen, compound_stm -> .LBrace RBrace  | -sampler2D-, jump_stm -> .-continue-  | Plus, unary_exp -> .Increment unary_exp  | GE, jump_stm -> .-continue-  | -half2-, unary_exp -> .Increment unary_exp  | EQ, compound_stm -> .LBrace RBrace  | Tilde, exp_stm -> .exp Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | ID, stm -> .jump_stm  | -char-, block_item_list -> .block_item  | Decrement, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | Comma, jump_stm -> .-goto- ID  | -half3-, unary_exp -> .Increment unary_exp  | Question, stm -> .jump_stm  | break, conditional_exp -> .binary_exp  | Semicolon, block_item_list -> .block_item  | -char-, exp_stm -> .Semicolon  | RBrace, postfix_exp -> .postfix_exp Dot ID  | Minus, stm -> .jump_stm  | -continue-, dec -> .struct_specifier Semicolon  | break, selection_stm -> .if LParen exp RParen stm else stm  | -half2-, stm -> .compound_stm  | -struct-, stm -> .selection_stm  | NOT, jump_stm -> .-return- exp Semicolon  | -float2-, postfix_exp -> .postfix_exp Dot ID  | LParen, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, jump_stm -> .-return- exp Semicolon  | -float3-, iteration_stm -> .while LParen exp RParen stm  | -struct-, postfix_exp -> .postfix_exp Increment  | Dot, type_qualifier -> .-uniform-  | -float4-, stm -> .compound_stm  | break, compound_stm -> LBrace .RBrace  | -fixed2-, compound_stm -> .LBrace block_item_list RBrace  | -do-, block_item -> .stm  | -float4-, postfix_exp -> .postfix_exp Increment  | Divide, stm -> .selection_stm  | -float2-, stm -> .jump_stm  | -return-, exp_stm -> .Semicolon  | break, unary_exp -> .postfix_exp  | OR, exp_stm -> .Semicolon  | -double-, block_item -> .dec  | LBrace, jump_stm -> .-goto- ID  | RBrace, postfix_exp -> .postfix_exp Decrement  | LE, selection_stm -> .if LParen exp RParen stm  | -short-, block_item -> .dec  | if, binary_exp -> .unary_exp  | AND, block_item -> .dec  | LParen, compound_stm -> LBrace .block_item_list RBrace  | -fixed4-, exp_stm -> .exp Semicolon  | Semicolon, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, compound_stm -> LBrace .RBrace  | -long-, primary_exp -> .ID  | Dot, stm -> .selection_stm  | -double-, stm -> .iteration_stm  | NOT, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Comma, jump_stm -> .-continue-  | -double-, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, jump_stm -> .-goto- ID  | -half2-, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Increment  | EQ, exp_stm -> .exp Semicolon  | NOT, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -double-, unary_exp -> .postfix_exp  | Percent, block_item_list -> .block_item_list block_item  | Increment, binary_exp -> .unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, exp_stm -> .exp Semicolon  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -char-, exp_stm -> .Semicolon  | Plus, compound_stm -> .LBrace RBrace  | -float3-, stm -> .jump_stm  | -double-, dec -> .dec_specifier init_dec_list Semicolon  | -half3-, compound_stm -> .LBrace block_item_list RBrace  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | -half4-, jump_stm -> .break  | LBrace, jump_stm -> .break  | -short-, jump_stm -> .-continue-  | Minus, jump_stm -> .-continue-  | String, primary_exp -> .String  | OR, dec -> .struct_specifier Semicolon  | Semicolon, stm -> .selection_stm  | for, postfix_exp -> .postfix_exp Decrement  | EQ, exp_stm -> .exp Semicolon  | -continue-, compound_stm -> LBrace .block_item_list RBrace  | -uniform-, compound_stm -> .LBrace block_item_list RBrace  | Increment, type_qualifier -> .-uniform-  | -fixed4-, stm -> .jump_stm  | Tilde, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, block_item_list -> .block_item  | String, block_item -> .stm  | -struct-, stm -> .jump_stm  | -goto-, postfix_exp -> .primary_exp  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -float3-, block_item -> .stm  | Number, unary_exp -> .Decrement unary_exp  | GE, selection_stm -> .if LParen exp RParen stm else stm  | for, jump_stm -> .break  | Plus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float4-, type_qualifier -> .-uniform-  | -half4-, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, exp_stm -> .exp Semicolon  | Increment, exp_stm -> .exp Semicolon  | -return-, dec -> .dec_specifier init_dec_list Semicolon  | while, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, stm -> .jump_stm  | -fixed2-, stm -> .compound_stm  | -return-, type_qualifier -> .-uniform-  | -int-, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, postfix_exp -> .primary_exp  | LT, selection_stm -> .if LParen exp RParen stm else stm  | break, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -do-, selection_stm -> .if LParen exp RParen stm else stm  | NOT, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, block_item -> .stm  | -half4-, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, dec -> .dec_specifier init_dec_list Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | -return-, jump_stm -> .-continue-  | Number, stm -> .jump_stm  | -fixed4-, unary_exp -> .unary_op unary_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | -struct-, primary_exp -> .LParen exp RParen  | VerticalBar, jump_stm -> .break  | break, compound_stm -> .LBrace RBrace  | -double-, postfix_exp -> .postfix_exp Decrement  | OR, compound_stm -> .LBrace block_item_list RBrace  | -half3-, block_item -> .dec  | RBrace, stm -> .jump_stm  | -sampler2D-, jump_stm -> .break  | String, block_item -> .dec  | Number, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .primary_exp  | LeftShift, primary_exp -> .ID  | Plus, stm -> .exp_stm  | -half2-, primary_exp -> .ID  | GT, selection_stm -> .if LParen exp RParen stm else stm  | -long-, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | break, dec -> .dec_specifier init_dec_list Semicolon  | -half2-, stm -> .compound_stm  | -half3-, selection_stm -> .if LParen exp RParen stm  | if, jump_stm -> .-continue-  | if, compound_stm -> .LBrace block_item_list RBrace  | Decrement, unary_op -> .Minus  | LParen, jump_stm -> .-goto- ID  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -goto-, block_item_list -> .block_item  | Tilde, primary_exp -> .Number  | Question, jump_stm -> .-goto- ID  | -long-, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, jump_stm -> .-continue-  | -struct-, jump_stm -> .-return- exp Semicolon  | -int-, block_item_list -> .block_item_list block_item  | NOT, stm -> .iteration_stm  | -half2-, primary_exp -> .Number  | LBrack, stm -> .exp_stm  | -long-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, iteration_stm -> .while LParen exp RParen stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Comma, exp_stm -> .Semicolon  | -int-, dec -> .struct_specifier Semicolon  | ID, dec -> .struct_specifier Semicolon  | -short-, struct_specifier -> .-struct- ID LBrace struct_dec_list RBrace  | Semicolon, jump_stm -> .-goto- ID  | -fixed2-, stm -> .exp_stm  | Tilde, exp_stm -> .exp Semicolon  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | String, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, selection_stm -> .if LParen exp RParen stm  | -void-, stm -> .exp_stm  | -do-, jump_stm -> .-continue-  | Increment, stm -> .exp_stm  | while, postfix_exp -> .postfix_exp Increment  | Question, compound_stm -> LBrace .RBrace  | -ENDCG-, unary_exp -> .Decrement unary_exp  | Ampersand, primary_exp -> .ID  | VerticalBar, block_item_list -> .block_item  | Plus, compound_stm -> .LBrace block_item_list RBrace  | Plus, iteration_stm -> .while LParen exp RParen stm  | -do-, dec -> .dec_specifier init_dec_list Semicolon  | -void-, primary_exp -> .LParen exp RParen  | EQ, block_item -> .dec  | String, block_item -> .stm  | String, primary_exp -> .LParen exp RParen  | OR, selection_stm -> .if LParen exp RParen stm else stm  | Plus, postfix_exp -> .primary_exp  | Times, block_item -> .stm  | LParen, block_item -> .stm  | -continue-, block_item -> .dec  | -long-, jump_stm -> .-continue-  | break, exp_stm -> .Semicolon  | -short-, block_item -> .stm  | if, stm -> .jump_stm  | -int-, type_specifier -> .typedef_name  | ID, dec -> .struct_specifier Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | -float4-, selection_stm -> .if LParen exp RParen stm  | -sampler2D-, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp Decrement  | NEQ, dec -> .struct_specifier Semicolon  | -uniform-, dec -> .dec_specifier init_dec_list Semicolon  | NOT, selection_stm -> .if LParen exp RParen stm else stm  | -short-, primary_exp -> .ID  | LeftShift, selection_stm -> .if LParen exp RParen stm  | -float2-, block_item_list -> .block_item  | for, primary_exp -> .LParen exp RParen  | GT, jump_stm -> .break  | -fixed3-, jump_stm -> .-goto- ID  | while, type_specifier -> .-short-  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | NEQ, stm -> .jump_stm  | -do-, postfix_exp -> .postfix_exp Decrement  | Plus, exp_stm -> .exp Semicolon  | -half4-, block_item_list -> .block_item  | -fixed4-, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, primary_exp -> .Number  | OR, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -half3-, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, jump_stm -> .-goto- ID  | String, stm -> .exp_stm  | if, exp_stm -> .Semicolon  | for, block_item_list -> .block_item  | -fixed3-, postfix_exp -> .postfix_exp Increment  | LT, compound_stm -> .LBrace block_item_list RBrace  | -return-, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, block_item_list -> .block_item  | -short-, exp_stm -> .Semicolon  | -void-, dec -> .dec_specifier init_dec_list Semicolon  | LBrace, jump_stm -> .-return- exp Semicolon  | -double-, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp Increment  | NEQ, dec -> .dec_specifier init_dec_list Semicolon  | Decrement, exp_stm -> .Semicolon  | Increment, stm -> .selection_stm  | -half2-, stm -> .exp_stm  | -struct-, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, stm -> .iteration_stm  | Semicolon, postfix_exp -> .primary_exp  | Increment, primary_exp -> .LParen exp RParen  | Percent, dec -> .dec_specifier init_dec_list Semicolon  | -continue-, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, jump_stm -> .-return- exp Semicolon  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | Semicolon, primary_exp -> .ID  | GE, unary_op -> .Plus  | Plus, stm -> .exp_stm  | Semicolon, exp_stm -> .Semicolon  | Number, selection_stm -> .if LParen exp RParen stm else stm  | -sampler2D-, block_item_list -> .block_item_list block_item  | -double-, exp_stm -> .Semicolon  | -float-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, dec -> .struct_specifier Semicolon  | LParen, jump_stm -> .-goto- ID  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | String, stm -> .jump_stm  | LBrace, primary_exp -> .ID  | Assign, stm -> .iteration_stm  | -half4-, block_item_list -> .block_item  | Minus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed4-, dec -> .dec_specifier init_dec_list Semicolon  | Plus, type_specifier -> .-half2-  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, stm -> .compound_stm  | String, dec -> .dec_specifier init_dec_list Semicolon  | if, jump_stm -> .break  | Number, postfix_exp -> .postfix_exp LParen RParen  | LE, type_specifier -> .-fixed2-  | ID, jump_stm -> .-goto- ID  | -fixed4-, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, stm -> .jump_stm  | NOT, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, type_qualifier -> .-uniform-  | -sampler2D-, exp_stm -> .Semicolon  | -float4-, binary_exp -> .binary_exp binary_op unary_exp  | LE, block_item -> .dec  | -fixed3-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, dec -> .dec_specifier init_dec_list Semicolon  | -float3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed2-, stm -> .selection_stm  | Increment, jump_stm -> .-continue-  | Semicolon, block_item -> .dec  | -return-, binary_exp -> .unary_exp  | NEQ, primary_exp -> .LParen exp RParen  | Minus, compound_stm -> .LBrace RBrace  | Number, block_item_list -> .block_item  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | -float2-, dec -> .struct_specifier Semicolon  | -sampler2D-, primary_exp -> .Number  | Plus, dec -> .struct_specifier Semicolon  | Minus, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, stm -> .jump_stm  | -half3-, exp_stm -> .exp Semicolon  | -fixed3-, jump_stm -> .-goto- ID  | -double-, postfix_exp -> .postfix_exp LParen RParen  | Question, jump_stm -> .-return- exp Semicolon  | Semicolon, selection_stm -> .if LParen exp RParen stm  | Decrement, unary_exp -> .postfix_exp  | LE, compound_stm -> LBrace .RBrace  | -half4-, exp_stm -> .exp Semicolon  | -short-, primary_exp -> .String  | Assign, block_item -> .dec  | -struct-, stm -> .exp_stm  | for, exp_stm -> .Semicolon  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | String, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, stm -> .selection_stm  | -half4-, primary_exp -> .LParen exp RParen  | Semicolon, compound_stm -> LBrace .RBrace  | -fixed3-, selection_stm -> .if LParen exp RParen stm else stm  | if, stm -> .iteration_stm  | -uniform-, unary_exp -> .unary_op unary_exp  | GT, compound_stm -> .LBrace block_item_list RBrace  | NOT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, block_item -> .dec  | break, primary_exp -> .LParen exp RParen  | LParen, compound_stm -> LBrace .block_item_list RBrace  | -half3-, stm -> .jump_stm  | Number, exp_stm -> .exp Semicolon  | RBrace, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half4-, jump_stm -> .break  | -do-, unary_exp -> .unary_op unary_exp  | AND, stm -> .jump_stm  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Number, postfix_exp -> .primary_exp  | Assign, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -continue-, exp_stm -> .Semicolon  | LBrace, jump_stm -> .-goto- ID  | -short-, stm -> .exp_stm  | -half4-, compound_stm -> .LBrace RBrace  | -fixed2-, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_exp -> .unary_op unary_exp  | Percent, exp_stm -> .exp Semicolon  | if, dec -> .struct_specifier Semicolon  | while, stm -> .exp_stm  | Increment, block_item -> .dec  | -char-, postfix_exp -> .postfix_exp LParen RParen  | Increment, stm -> .compound_stm  | ID, selection_stm -> .if LParen exp RParen stm  | while, block_item -> .dec  | -double-, block_item_list -> .block_item_list block_item  | -return-, iteration_stm -> .while LParen exp RParen stm  | -continue-, block_item -> .dec  | -fixed4-, postfix_exp -> .primary_exp  | LBrack, dec -> .struct_specifier Semicolon  | -half2-, jump_stm -> .break  | -int-, exp_stm -> .Semicolon  | -goto-, jump_stm -> .break  | -float3-, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, unary_exp -> .Decrement unary_exp  | OR, block_item_list -> .block_item  | -struct-, jump_stm -> .-return- exp Semicolon  | -void-, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, binary_exp -> .unary_exp  | EQ, jump_stm -> .-continue-  | -float2-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, jump_stm -> .-continue-  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -float3-, primary_exp -> .ID  | Divide, selection_stm -> .if LParen exp RParen stm else stm  | -uniform-, stm -> .compound_stm  | Decrement, type_qualifier -> .-uniform-  | -float2-, jump_stm -> .-goto- ID  | ID, stm -> .exp_stm  | -fixed3-, postfix_exp -> .postfix_exp Dot ID  | EQ, stm -> .selection_stm  | -float3-, unary_exp -> .unary_op unary_exp  | Comma, jump_stm -> .-return- exp Semicolon  | -float-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Semicolon, binary_exp -> .unary_exp  | GE, compound_stm -> .LBrace block_item_list RBrace  | -goto-, iteration_stm -> .while LParen exp RParen stm  | break, stm -> .selection_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -int-, stm -> .compound_stm  | for, dec -> .dec_specifier init_dec_list Semicolon  | -return-, stm -> .jump_stm  | if, jump_stm -> .-goto- ID  | -float2-, stm -> .selection_stm  | Tilde, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, stm -> .compound_stm  | -long-, assignment_exp -> .conditional_exp  | Comma, unary_op -> .Plus  | Decrement, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | Assign, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half2-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LBrace, exp_stm -> .Semicolon  | -fixed3-, stm -> .iteration_stm  | -half3-, primary_exp -> .String  | Decrement, exp_stm -> .Semicolon  | Tilde, block_item_list -> .block_item  | -half4-, selection_stm -> .if LParen exp RParen stm else stm  | Semicolon, stm -> .iteration_stm  | while, stm -> .selection_stm  | LBrace, postfix_exp -> .postfix_exp LParen RParen  | Assign, compound_stm -> .LBrace RBrace  | -half3-, jump_stm -> .break  | -half4-, primary_exp -> .Number  | Increment, stm -> .iteration_stm  | -float-, exp_stm -> .Semicolon  | -float3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Number, stm -> .compound_stm  | -continue-, stm -> .exp_stm  | Plus, postfix_exp -> .postfix_exp Decrement  | Minus, stm -> .selection_stm  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, stm -> .iteration_stm  | ID, stm -> .compound_stm  | Plus, unary_exp -> .Increment unary_exp  | LeftShift, block_item_list -> .block_item_list block_item  | String, primary_exp -> .Number  | EQ, exp_stm -> .exp Semicolon  | -float2-, exp_stm -> .exp Semicolon  | -long-, compound_stm -> .LBrace RBrace  | String, selection_stm -> .if LParen exp RParen stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -void-, stm -> .selection_stm  | -void-, primary_exp -> .ID  | Comma, dec -> .dec_specifier init_dec_list Semicolon  | -goto-, primary_exp -> .String  | LeftShift, block_item -> .dec  | -int-, jump_stm -> .-continue-  | -fixed3-, postfix_exp -> .postfix_exp LParen RParen  | GE, postfix_exp -> .primary_exp  | OR, compound_stm -> LBrace .RBrace  | Pound, iteration_stm -> .while LParen exp RParen stm  | RBrace, unary_exp -> .postfix_exp  | RightShift, compound_stm -> .LBrace block_item_list RBrace  | -fixed4-, block_item_list -> .block_item  | -continue-, block_item_list -> .block_item  | -double-, unary_op -> .Tilde  | Decrement, compound_stm -> LBrace .block_item_list RBrace  | ID, exp_stm -> .exp Semicolon  | -half3-, iteration_stm -> .while LParen exp RParen stm  | Plus, block_item_list -> .block_item  | -return-, selection_stm -> .if LParen exp RParen stm  | -do-, stm -> .selection_stm  | Plus, compound_stm -> .LBrace RBrace  | NOT, exp_stm -> .Semicolon  | Decrement, type_specifier -> .-char-  | ID, block_item_list -> .block_item_list block_item  | -uniform-, exp_stm -> .Semicolon  | -float2-, dec -> .dec_specifier init_dec_list Semicolon  | -half4-, iteration_stm -> .while LParen exp RParen stm  | Number, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, exp_stm -> .exp Semicolon  | Decrement, block_item -> .dec  | -half3-, dec -> .struct_specifier Semicolon  | -float4-, stm -> .jump_stm  | -half2-, selection_stm -> .if LParen exp RParen stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Percent, jump_stm -> .break  | ID, jump_stm -> .-goto- ID  | Semicolon, block_item -> .stm  | -half2-, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, jump_stm -> .break  | Increment, stm -> .iteration_stm  | Tilde, block_item_list -> .block_item  | Number, compound_stm -> .LBrace block_item_list RBrace  | LBrace, postfix_exp -> .postfix_exp Increment  | Semicolon, jump_stm -> .break  | -sampler2D-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, block_item_list -> .block_item  | -float-, type_specifier -> .-double-  | ID, exp_stm -> .exp Semicolon  | -double-, stm -> .selection_stm  | -sampler2D-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, stm -> .exp_stm  | -char-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LParen, compound_stm -> .LBrace RBrace  | -half2-, jump_stm -> .-goto- ID  | -do-, exp_stm -> .exp Semicolon  | -float-, stm -> .jump_stm  | -float-, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, jump_stm -> .-continue-  | for, unary_op -> .Minus  | Decrement, selection_stm -> .if LParen exp RParen stm  | Plus, jump_stm -> .-return- exp Semicolon  | -fixed4-, compound_stm -> LBrace .RBrace  | -double-, exp_stm -> .exp Semicolon  | -char-, jump_stm -> .-return- exp Semicolon  | -half2-, dec -> .dec_specifier init_dec_list Semicolon  | -double-, postfix_exp -> .postfix_exp Increment  | Comma, block_item_list -> .block_item_list block_item  | -sampler2D-, jump_stm -> .-continue-  | -fixed2-, stm -> .compound_stm  | LBrace, exp_stm -> .exp Semicolon  | while, exp_stm -> .exp Semicolon  | LBrace, jump_stm -> .-continue-  | -short-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, block_item_list -> .block_item_list block_item  | break, binary_exp -> .binary_exp binary_op unary_exp  | EQ, exp_stm -> .exp Semicolon  | for, block_item -> .dec  | Tilde, postfix_exp -> .primary_exp  | Percent, primary_exp -> .String  | Comma, stm -> .iteration_stm  | -fixed2-, binary_exp -> .binary_exp binary_op unary_exp  | Question, exp_stm -> .Semicolon  | -char-, block_item -> .stm  | ID, jump_stm -> .-return- exp Semicolon  | LBrace, block_item_list -> .block_item  | -sampler2D-, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | Plus, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, jump_stm -> .-return- exp Semicolon  | Increment, jump_stm -> .break  | -struct-, binary_exp -> .unary_exp  | RightShift, block_item_list -> .block_item_list block_item  | Tilde, compound_stm -> LBrace .RBrace  | -float3-, primary_exp -> .ID  | Minus, type_qualifier -> .-uniform-  | -short-, selection_stm -> .if LParen exp RParen stm  | -continue-, type_qualifier -> .-uniform-  | ID, selection_stm -> .if LParen exp RParen stm else stm  | -half4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, unary_op -> .Plus  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -sampler2D-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed4-, block_item_list -> .block_item_list block_item  | -half3-, jump_stm -> .break  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, stm -> .iteration_stm  | -sampler2D-, primary_exp -> .Number  | Decrement, compound_stm -> .LBrace RBrace  | for, selection_stm -> .if LParen exp RParen stm  | break, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, type_qualifier -> .-uniform-  | -double-, block_item_list -> .block_item_list block_item  | -float-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, stm -> .selection_stm  | -char-, compound_stm -> .LBrace block_item_list RBrace  | ID, dec -> .struct_specifier Semicolon  | Tilde, jump_stm -> .break  | -double-, postfix_exp -> .postfix_exp LParen RParen  | OR, exp_stm -> .exp Semicolon  | -void-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | RBrace, block_item -> .stm  | Increment, stm -> .compound_stm  | -double-, compound_stm -> .LBrace RBrace  | -continue-, stm -> .iteration_stm  | for, postfix_exp -> .postfix_exp Increment  | RightShift, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .primary_exp  | Caret, compound_stm -> .LBrace block_item_list RBrace  | break, selection_stm -> .if LParen exp RParen stm  | -float3-, postfix_exp -> .postfix_exp Increment  | Caret, jump_stm -> .-goto- ID  | Tilde, selection_stm -> .if LParen exp RParen stm else stm  | -continue-, type_specifier -> .-half3-  | ID, jump_stm -> .-goto- ID  | Number, postfix_exp -> .primary_exp  | Decrement, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -continue-, dec -> .dec_specifier init_dec_list Semicolon  | Tilde, jump_stm -> .-goto- ID  | Decrement, postfix_exp -> .primary_exp  | Ampersand, block_item_list -> .block_item_list block_item  | -short-, jump_stm -> .-goto- ID  | -uniform-, compound_stm -> .LBrace RBrace  | -uniform-, dec -> .struct_specifier Semicolon  | if, compound_stm -> .LBrace block_item_list RBrace  | -short-, dec -> .dec_specifier init_dec_list Semicolon  | -float2-, selection_stm -> .if LParen exp RParen stm  | -return-, stm -> .exp_stm  | -fixed2-, exp_stm -> .Semicolon  | -return-, selection_stm -> .if LParen exp RParen stm  | LBrace, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, jump_stm -> .-continue-  | LParen, stm -> .iteration_stm  | -goto-, stm -> .compound_stm  | while, stm -> .exp_stm  | -sampler2D-, jump_stm -> .-goto- ID  | break, postfix_exp -> .postfix_exp LParen RParen  | LT, compound_stm -> .LBrace RBrace  | -int-, binary_exp -> .unary_exp  | Caret, dec -> .dec_specifier init_dec_list Semicolon  | -uniform-, jump_stm -> .-continue-  | LBrace, dec -> .struct_specifier Semicolon  | -struct-, jump_stm -> .-return- exp Semicolon  | break, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, block_item -> .stm  | Minus, stm -> .exp_stm  | Number, unary_exp -> .Increment unary_exp  | Caret, block_item_list -> .block_item  | -float2-, block_item -> .dec  | Minus, block_item -> .dec  | -short-, primary_exp -> .String  | AND, unary_exp -> .unary_op unary_exp  | Divide, block_item_list -> .block_item_list block_item  | -do-, dec_specifier -> .type_qualifier type_specifier  | ID, unary_exp -> .unary_op unary_exp  | Caret, stm -> .compound_stm  | -int-, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, block_item -> .stm  | -uniform-, postfix_exp -> .postfix_exp Dot ID  | Percent, compound_stm -> LBrace .RBrace  | -half2-, exp_stm -> .exp Semicolon  | break, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, iteration_stm -> .while LParen exp RParen stm  | -fixed2-, stm -> .selection_stm  | -float-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -do-, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Plus, jump_stm -> .break  | -half2-, jump_stm -> .-continue-  | -long-, block_item -> .dec  | -half4-, compound_stm -> .LBrace block_item_list RBrace  | -float2-, stm -> .compound_stm  | -fixed3-, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -sampler2D-, block_item -> .stm  | -fixed3-, jump_stm -> .-return- exp Semicolon  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -short-, primary_exp -> .ID  | Percent, stm -> .compound_stm  | Number, primary_exp -> .Number  | Comma, stm -> .compound_stm  | LParen, compound_stm -> .LBrace RBrace  | -short-, stm -> .compound_stm  | Semicolon, stm -> .selection_stm  | break, dec -> .dec_specifier init_dec_list Semicolon  | -float-, block_item -> .dec  | -half2-, compound_stm -> .LBrace block_item_list RBrace  | -struct-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Decrement, unary_exp -> .postfix_exp  | Divide, dec -> .struct_specifier Semicolon  | -continue-, jump_stm -> .-return- exp Semicolon  | -sampler2D-, unary_exp -> .postfix_exp  | GE, dec -> .dec_specifier init_dec_list Semicolon  | Increment, compound_stm -> LBrace .RBrace  | ID, selection_stm -> .if LParen exp RParen stm  | -half3-, block_item -> .dec  | Plus, compound_stm -> .LBrace RBrace  | -half4-, dec -> .struct_specifier Semicolon  | -goto-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float2-, stm -> .jump_stm  | RBrace, jump_stm -> .-goto- ID  | -half4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, compound_stm -> .LBrace RBrace  | -goto-, postfix_exp -> .postfix_exp LParen RParen  | Divide, block_item -> .stm  | -fixed4-, stm -> .jump_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half2-, primary_exp -> .LParen exp RParen  | Assign, unary_exp -> .Increment unary_exp  | Assign, jump_stm -> .-goto- ID  | -return-, postfix_exp -> .postfix_exp Increment  | Assign, jump_stm -> .break  | Tilde, block_item -> .dec  | -do-, type_specifier -> .-float3-  | ID, compound_stm -> LBrace .block_item_list RBrace  | -char-, jump_stm -> .-continue-  | -half3-, block_item_list -> .block_item  | if, primary_exp -> .Number  | Minus, iteration_stm -> .while LParen exp RParen stm  | -half4-, stm -> .jump_stm  | LParen, jump_stm -> .-goto- ID  | for, stm -> .iteration_stm  | Decrement, block_item_list -> .block_item_list block_item  | -float4-, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, selection_stm -> .if LParen exp RParen stm else stm  | -struct-, stm -> .exp_stm  | -goto-, block_item_list -> .block_item  | -goto-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | ID, unary_exp -> .Increment unary_exp  | VerticalBar, dec -> .struct_specifier Semicolon  | -return-, block_item -> .stm  | -short-, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, stm -> .selection_stm  | String, postfix_exp -> .postfix_exp LParen RParen  | Caret, primary_exp -> .ID  | AND, postfix_exp -> .postfix_exp LParen RParen  | Dot, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | String, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, exp_stm -> .Semicolon  | NOT, jump_stm -> .-goto- ID  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | Tilde, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, block_item_list -> .block_item_list block_item  | ID, selection_stm -> .if LParen exp RParen stm  | -fixed3-, dec -> .dec_specifier init_dec_list Semicolon  | -float4-, dec -> .struct_specifier Semicolon  | -int-, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Decrement  | LBrack, primary_exp -> .ID  | Ampersand, compound_stm -> LBrace .RBrace  | -uniform-, stm -> .exp_stm  | RBrace, unary_exp -> .Increment unary_exp  | Semicolon, stm -> .exp_stm  | Decrement, block_item -> .dec  | -fixed2-, compound_stm -> .LBrace RBrace  | RBrace, primary_exp -> .LParen exp RParen  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, stm -> .selection_stm  | -long-, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_op -> .NOT  | NOT, unary_op -> .NOT  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -goto-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | ID, binary_exp -> .binary_exp binary_op unary_exp  | GT, jump_stm -> .-goto- ID  | -continue-, stm -> .selection_stm  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Assign, stm -> .iteration_stm  | RBrace, stm -> .iteration_stm  | -struct-, dec -> .dec_specifier init_dec_list Semicolon  | break, jump_stm -> .break  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | RBrace, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Increment, iteration_stm -> .while LParen exp RParen stm  | -float4-, exp_stm -> .Semicolon  | -half3-, dec -> .struct_specifier Semicolon  | Increment, unary_exp -> .Decrement unary_exp  | Plus, primary_exp -> .LParen exp RParen  | Plus, type_specifier -> .-sampler2D-  | ID, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, compound_stm -> .LBrace RBrace  | -float-, unary_exp -> .unary_op unary_exp  | LeftShift, block_item_list -> .block_item  | -float3-, dec -> .dec_specifier init_dec_list Semicolon  | -do-, compound_stm -> LBrace .RBrace  | -void-, block_item_list -> .block_item  | Semicolon, block_item -> .stm  | -long-, compound_stm -> .LBrace block_item_list RBrace  | -int-, jump_stm -> .-goto- ID  | NOT, jump_stm -> .-continue-  | Decrement, unary_exp -> .postfix_exp  | Plus, type_specifier -> .-float4-  | ID, unary_op -> .Plus  | Tilde, compound_stm -> .LBrace RBrace  | Minus, iteration_stm -> .while LParen exp RParen stm  | -char-, iteration_stm -> .while LParen exp RParen stm  | ID, unary_exp -> .Increment unary_exp  | LE, compound_stm -> LBrace .block_item_list RBrace  | -half4-, jump_stm -> .-return- exp Semicolon  | -uniform-, jump_stm -> .-goto- ID  | -char-, stm -> .iteration_stm  | -return-, jump_stm -> .-return- exp Semicolon  | for, dec -> .struct_specifier Semicolon  | -void-, block_item -> .stm  | -void-, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, stm -> .iteration_stm  | if, type_specifier -> .-void-  | ID, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, jump_stm -> .break  | -float2-, primary_exp -> .Number  | LParen, postfix_exp -> .postfix_exp LParen RParen  | LBrack, jump_stm -> .break  | -half3-, typedef_name -> .ID  | ID, selection_stm -> .if LParen exp RParen stm  | -char-, stm -> .jump_stm  | -fixed3-, postfix_exp -> .postfix_exp Decrement  | LParen, stm -> .compound_stm  | Minus, type_qualifier -> .-uniform-  | -float3-, stm -> .iteration_stm  | LParen, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -void-, block_item -> .stm  | RBrace, unary_exp -> .postfix_exp  | LeftShift, )
66 <- (50, 'LParen') (type_specifier -> .-fixed3-  | ID, type_specifier -> .-half4-  | ID, type_specifier -> .-fixed3-  | LParen, type_specifier -> .-int-  | LParen, type_specifier -> .-short-  | LParen, type_specifier -> .-float-  | ID, declarator -> declarator LParen .parameter_list RParen  | LBrace, type_specifier -> .typedef_name  | ID, type_specifier -> .-fixed4-  | LParen, type_specifier -> .-long-  | LParen, type_specifier -> .-float4-  | ID, type_specifier -> .-char-  | LParen, type_specifier -> .-float3-  | ID, type_specifier -> .typedef_name  | LParen, type_specifier -> .-float-  | LParen, type_specifier -> .-long-  | ID, parameter_list -> .parameter_list Comma parameter_dec  | RParen, type_specifier -> .-void-  | LParen, type_specifier -> .-half3-  | LParen, type_specifier -> .-short-  | ID, type_specifier -> .-float2-  | LParen, type_specifier -> .-sampler2D-  | LParen, declarator -> declarator LParen .parameter_list RParen  | LParen, type_specifier -> .-float2-  | ID, parameter_list -> .parameter_dec  | Comma, type_specifier -> .-void-  | ID, type_specifier -> .-double-  | LParen, type_specifier -> .-double-  | ID, parameter_list -> .parameter_dec  | RParen, parameter_dec -> .type_specifier declarator  | Comma, type_specifier -> .-half2-  | LParen, typedef_name -> .ID  | ID, type_specifier -> .-half3-  | ID, type_specifier -> .-half4-  | LParen, type_specifier -> .-fixed4-  | ID, typedef_name -> .ID  | LParen, type_specifier -> .-half2-  | ID, type_specifier -> .-int-  | ID, type_specifier -> .-float3-  | LParen, type_specifier -> .-sampler2D-  | ID, parameter_list -> .parameter_list Comma parameter_dec  | Comma, type_specifier -> .-char-  | ID, type_specifier -> .-fixed2-  | ID, parameter_dec -> .type_specifier declarator  | RParen, type_specifier -> .-float4-  | LParen, type_specifier -> .-fixed2-  | LParen, )
67 <- (50, 'compound_stm') (function_definition -> dec_specifier declarator compound_stm.  | -float4-, function_definition -> dec_specifier declarator compound_stm.  | -fixed2-, function_definition -> dec_specifier declarator compound_stm.  | -half2-, function_definition -> dec_specifier declarator compound_stm.  | -uniform-, function_definition -> dec_specifier declarator compound_stm.  | -double-, function_definition -> dec_specifier declarator compound_stm.  | -half4-, function_definition -> dec_specifier declarator compound_stm.  | -long-, function_definition -> dec_specifier declarator compound_stm.  | ID, function_definition -> dec_specifier declarator compound_stm.  | -struct-, function_definition -> dec_specifier declarator compound_stm.  | -float3-, function_definition -> dec_specifier declarator compound_stm.  | -fixed4-, function_definition -> dec_specifier declarator compound_stm.  | -char-, function_definition -> dec_specifier declarator compound_stm.  | Pound, function_definition -> dec_specifier declarator compound_stm.  | -void-, function_definition -> dec_specifier declarator compound_stm.  | -short-, function_definition -> dec_specifier declarator compound_stm.  | -int-, function_definition -> dec_specifier declarator compound_stm.  | -float-, function_definition -> dec_specifier declarator compound_stm.  | -float2-, function_definition -> dec_specifier declarator compound_stm.  | -ENDCG-, function_definition -> dec_specifier declarator compound_stm.  | -sampler2D-, function_definition -> dec_specifier declarator compound_stm.  | -half3-, function_definition -> dec_specifier declarator compound_stm.  | -fixed3-, )
68 <- (51, 'Semicolon') (dec -> dec_specifier init_dec_list Semicolon.  | -short-, dec -> dec_specifier init_dec_list Semicolon.  | -float4-, dec -> dec_specifier init_dec_list Semicolon.  | -uniform-, dec -> dec_specifier init_dec_list Semicolon.  | ID, dec -> dec_specifier init_dec_list Semicolon.  | -fixed4-, dec -> dec_specifier init_dec_list Semicolon.  | -half4-, dec -> dec_specifier init_dec_list Semicolon.  | Pound, dec -> dec_specifier init_dec_list Semicolon.  | -char-, dec -> dec_specifier init_dec_list Semicolon.  | -long-, dec -> dec_specifier init_dec_list Semicolon.  | -fixed2-, dec -> dec_specifier init_dec_list Semicolon.  | -void-, dec -> dec_specifier init_dec_list Semicolon.  | -half2-, dec -> dec_specifier init_dec_list Semicolon.  | -double-, dec -> dec_specifier init_dec_list Semicolon.  | -sampler2D-, dec -> dec_specifier init_dec_list Semicolon.  | -half3-, dec -> dec_specifier init_dec_list Semicolon.  | -struct-, dec -> dec_specifier init_dec_list Semicolon.  | -float2-, dec -> dec_specifier init_dec_list Semicolon.  | -float-, dec -> dec_specifier init_dec_list Semicolon.  | -ENDCG-, dec -> dec_specifier init_dec_list Semicolon.  | -fixed3-, dec -> dec_specifier init_dec_list Semicolon.  | -float3-, dec -> dec_specifier init_dec_list Semicolon.  | -int-, )
69 <- (54, 'struct_dec') (struct_dec_list -> struct_dec.  | -sampler2D-, struct_dec_list -> struct_dec.  | -int-, struct_dec_list -> struct_dec.  | -long-, struct_dec_list -> struct_dec.  | -fixed4-, struct_dec_list -> struct_dec.  | -half4-, struct_dec_list -> struct_dec.  | -double-, struct_dec_list -> struct_dec.  | -float3-, struct_dec_list -> struct_dec.  | RBrace, struct_dec_list -> struct_dec.  | -short-, struct_dec_list -> struct_dec.  | -fixed2-, struct_dec_list -> struct_dec.  | -fixed3-, struct_dec_list -> struct_dec.  | -float4-, struct_dec_list -> struct_dec.  | ID, struct_dec_list -> struct_dec.  | -half3-, struct_dec_list -> struct_dec.  | -float-, struct_dec_list -> struct_dec.  | -void-, struct_dec_list -> struct_dec.  | -float2-, struct_dec_list -> struct_dec.  | -half2-, struct_dec_list -> struct_dec.  | -char-, )
70 <- (54, 'struct_dec_list') (struct_dec_list -> struct_dec_list .struct_dec  | -int-, struct_dec_list -> struct_dec_list .struct_dec  | -char-, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -float3-, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -long-, type_specifier -> .-fixed3-  | LParen, struct_dec_list -> struct_dec_list .struct_dec  | -long-, struct_dec_list -> struct_dec_list .struct_dec  | -float-, type_specifier -> .-short-  | LParen, struct_dec_list -> struct_dec_list .struct_dec  | -fixed4-, struct_dec_list -> struct_dec_list .struct_dec  | -double-, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -half2-, struct_dec -> .type_specifier struct_declarator_list Semicolon  | ID, struct_dec_list -> struct_dec_list .struct_dec  | -half3-, type_specifier -> .-long-  | LParen, type_specifier -> .-float4-  | ID, type_specifier -> .-char-  | LParen, type_specifier -> .-float3-  | LParen, type_specifier -> .-half3-  | LParen, type_specifier -> .typedef_name  | LParen, type_specifier -> .-float-  | LParen, struct_specifier -> -struct- ID LBrace struct_dec_list .RBrace  | Semicolon, struct_dec_list -> struct_dec_list .struct_dec  | -void-, struct_dec_list -> struct_dec_list .struct_dec  | -short-, struct_dec_list -> struct_dec_list .struct_dec  | -float4-, type_specifier -> .-void-  | ID, type_specifier -> .-long-  | ID, typedef_name -> .ID  | LParen, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -int-, type_specifier -> .-fixed2-  | LParen, type_specifier -> .-fixed4-  | LParen, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -char-, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -fixed3-, type_specifier -> .-short-  | ID, type_specifier -> .-float2-  | LParen, struct_dec -> .type_specifier struct_declarator_list Semicolon  | RBrace, struct_dec_list -> struct_dec_list .struct_dec  | -sampler2D-, type_specifier -> .-half4-  | ID, struct_dec_list -> struct_dec_list .struct_dec  | -fixed2-, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -sampler2D-, type_specifier -> .-sampler2D-  | LParen, type_specifier -> .-float2-  | ID, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -half3-, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -half4-, struct_dec_list -> struct_dec_list .struct_dec  | -half4-, struct_dec_list -> struct_dec_list .struct_dec  | RBrace, type_specifier -> .-double-  | LParen, type_specifier -> .-double-  | ID, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -float2-, type_specifier -> .-float3-  | ID, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -fixed2-, type_specifier -> .-half2-  | LParen, typedef_name -> .ID  | ID, struct_dec_list -> struct_dec_list .struct_dec  | -float2-, type_specifier -> .-half3-  | ID, type_specifier -> .-half4-  | LParen, type_specifier -> .-fixed4-  | ID, struct_dec_list -> struct_dec_list .struct_dec  | ID, struct_dec_list -> struct_dec_list .struct_dec  | -half2-, type_specifier -> .-half2-  | ID, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -void-, type_specifier -> .-int-  | ID, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -float4-, type_specifier -> .-fixed3-  | ID, struct_dec_list -> struct_dec_list .struct_dec  | -fixed3-, type_specifier -> .-int-  | LParen, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -double-, type_specifier -> .-sampler2D-  | ID, type_specifier -> .-void-  | LParen, type_specifier -> .typedef_name  | ID, type_specifier -> .-char-  | ID, type_specifier -> .-fixed2-  | ID, struct_dec_list -> struct_dec_list .struct_dec  | -float3-, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -short-, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -float-, type_specifier -> .-float-  | ID, type_specifier -> .-float4-  | LParen, struct_dec -> .type_specifier struct_declarator_list Semicolon  | -fixed4-, )
71 <- (54, 'type_specifier') (struct_dec -> type_specifier .struct_declarator_list Semicolon  | -double-, struct_dec -> type_specifier .struct_declarator_list Semicolon  | -sampler2D-, declarator -> .declarator LParen parameter_list RParen  | Comma, struct_dec -> type_specifier .struct_declarator_list Semicolon  | -half2-, struct_dec -> type_specifier .struct_declarator_list Semicolon  | -long-, struct_dec -> type_specifier .struct_declarator_list Semicolon  | -float2-, struct_dec -> type_specifier .struct_declarator_list Semicolon  | -fixed2-, struct_dec -> type_specifier .struct_declarator_list Semicolon  | -half3-, struct_declarator -> .declarator  | Semicolon, struct_declarator -> .declarator  | Comma, declarator -> .LParen declarator RParen  | Colon, struct_dec -> type_specifier .struct_declarator_list Semicolon  | ID, declarator -> .declarator LParen parameter_list RParen  | LParen, struct_dec -> type_specifier .struct_declarator_list Semicolon  | -float3-, struct_dec -> type_specifier .struct_declarator_list Semicolon  | RBrace, declarator -> .LParen declarator RParen  | Comma, struct_dec -> type_specifier .struct_declarator_list Semicolon  | -half4-, struct_dec -> type_specifier .struct_declarator_list Semicolon  | -char-, struct_dec -> type_specifier .struct_declarator_list Semicolon  | -short-, declarator -> .LParen declarator RParen  | LParen, struct_declarator -> .declarator Colon ID  | Comma, struct_declarator_list -> .struct_declarator  | Comma, declarator -> .ID  | Semicolon, struct_dec -> type_specifier .struct_declarator_list Semicolon  | -fixed3-, struct_declarator_list -> .struct_declarator_list Comma struct_declarator  | Comma, struct_dec -> type_specifier .struct_declarator_list Semicolon  | -int-, struct_declarator_list -> .struct_declarator  | Semicolon, struct_declarator -> .declarator Colon ID  | Semicolon, declarator -> .LParen declarator RParen  | Semicolon, declarator -> .declarator LParen parameter_list RParen  | Semicolon, struct_dec -> type_specifier .struct_declarator_list Semicolon  | -void-, declarator -> .ID  | Colon, declarator -> .ID  | Comma, declarator -> .declarator LParen parameter_list RParen  | Colon, struct_declarator_list -> .struct_declarator_list Comma struct_declarator  | Semicolon, struct_dec -> type_specifier .struct_declarator_list Semicolon  | -float-, struct_dec -> type_specifier .struct_declarator_list Semicolon  | -float4-, declarator -> .ID  | LParen, struct_dec -> type_specifier .struct_declarator_list Semicolon  | -fixed4-, )
72 <- (59, 'ids') (ids -> ID ids.  | Enter, )
73 <- (60, 'Enter') (pp_cmd -> Pound -pragma- ids Enter.  | ID, pp_cmd -> Pound -pragma- ids Enter.  | Pound, pp_cmd -> Pound -pragma- ids Enter.  | -half3-, pp_cmd -> Pound -pragma- ids Enter.  | -float2-, pp_cmd -> Pound -pragma- ids Enter.  | -fixed4-, pp_cmd -> Pound -pragma- ids Enter.  | -sampler2D-, pp_cmd -> Pound -pragma- ids Enter.  | -float4-, pp_cmd -> Pound -pragma- ids Enter.  | -uniform-, pp_cmd -> Pound -pragma- ids Enter.  | -struct-, pp_cmd -> Pound -pragma- ids Enter.  | -void-, pp_cmd -> Pound -pragma- ids Enter.  | -float-, pp_cmd -> Pound -pragma- ids Enter.  | -half2-, pp_cmd -> Pound -pragma- ids Enter.  | -fixed3-, pp_cmd -> Pound -pragma- ids Enter.  | -short-, pp_cmd -> Pound -pragma- ids Enter.  | -long-, pp_cmd -> Pound -pragma- ids Enter.  | -int-, pp_cmd -> Pound -pragma- ids Enter.  | -char-, pp_cmd -> Pound -pragma- ids Enter.  | -ENDCG-, pp_cmd -> Pound -pragma- ids Enter.  | -half4-, pp_cmd -> Pound -pragma- ids Enter.  | -float3-, pp_cmd -> Pound -pragma- ids Enter.  | -fixed2-, pp_cmd -> Pound -pragma- ids Enter.  | -double-, )
74 <- (63, 'declarator') (declarator -> LParen declarator .RParen  | LParen, declarator -> declarator .LParen parameter_list RParen  | LParen, declarator -> LParen declarator .RParen  | RParen, declarator -> declarator .LParen parameter_list RParen  | RParen, )
75 <- (64, 'LParen') (type_specifier -> .-fixed3-  | ID, type_specifier -> .-half4-  | ID, type_specifier -> .-fixed3-  | LParen, type_specifier -> .-int-  | LParen, type_specifier -> .-short-  | LParen, type_specifier -> .-float-  | ID, type_specifier -> .typedef_name  | ID, type_specifier -> .-fixed4-  | LParen, type_specifier -> .-long-  | LParen, type_specifier -> .-float4-  | ID, type_specifier -> .-char-  | LParen, type_specifier -> .-float3-  | ID, type_specifier -> .typedef_name  | LParen, type_specifier -> .-float-  | LParen, type_specifier -> .-long-  | ID, parameter_list -> .parameter_list Comma parameter_dec  | RParen, parameter_list -> .parameter_list Comma parameter_dec  | Comma, type_specifier -> .-half3-  | LParen, type_specifier -> .-short-  | ID, type_specifier -> .-float2-  | LParen, type_specifier -> .-sampler2D-  | LParen, declarator -> declarator LParen .parameter_list RParen  | RParen, declarator -> declarator LParen .parameter_list RParen  | LParen, type_specifier -> .-float2-  | ID, parameter_list -> .parameter_dec  | Comma, type_specifier -> .-void-  | ID, type_specifier -> .-double-  | LParen, type_specifier -> .-double-  | ID, parameter_list -> .parameter_dec  | RParen, parameter_dec -> .type_specifier declarator  | Comma, type_specifier -> .-half2-  | LParen, typedef_name -> .ID  | ID, type_specifier -> .-half3-  | ID, type_specifier -> .-half4-  | LParen, type_specifier -> .-fixed4-  | ID, typedef_name -> .ID  | LParen, type_specifier -> .-half2-  | ID, type_specifier -> .-int-  | ID, type_specifier -> .-float3-  | LParen, type_specifier -> .-sampler2D-  | ID, type_specifier -> .-void-  | LParen, type_specifier -> .-char-  | ID, type_specifier -> .-fixed2-  | ID, parameter_dec -> .type_specifier declarator  | RParen, type_specifier -> .-float4-  | LParen, type_specifier -> .-fixed2-  | LParen, )
76 <- (64, 'RParen') (declarator -> LParen declarator RParen.  | LParen, declarator -> LParen declarator RParen.  | LBrace, )
77 <- (65, '-char-') (type_specifier -> -char-.  | ID, )
78 <- (65, '-continue-') (jump_stm -> -continue-.  | -half2-, jump_stm -> -continue-.  | Plus, jump_stm -> -continue-.  | ID, jump_stm -> -continue-.  | Number, jump_stm -> -continue-.  | NOT, jump_stm -> -continue-.  | for, jump_stm -> -continue-.  | -float3-, jump_stm -> -continue-.  | String, jump_stm -> -continue-.  | -double-, jump_stm -> -continue-.  | LBrace, jump_stm -> -continue-.  | LParen, jump_stm -> -continue-.  | Increment, jump_stm -> -continue-.  | -fixed4-, jump_stm -> -continue-.  | -goto-, jump_stm -> -continue-.  | -sampler2D-, jump_stm -> -continue-.  | -char-, jump_stm -> -continue-.  | -int-, jump_stm -> -continue-.  | Minus, jump_stm -> -continue-.  | -void-, jump_stm -> -continue-.  | -return-, jump_stm -> -continue-.  | -uniform-, jump_stm -> -continue-.  | Semicolon, jump_stm -> -continue-.  | -fixed2-, jump_stm -> -continue-.  | -float4-, jump_stm -> -continue-.  | RBrace, jump_stm -> -continue-.  | -float-, jump_stm -> -continue-.  | -fixed3-, jump_stm -> -continue-.  | -half3-, jump_stm -> -continue-.  | -short-, jump_stm -> -continue-.  | Decrement, jump_stm -> -continue-.  | Tilde, jump_stm -> -continue-.  | -struct-, jump_stm -> -continue-.  | -do-, jump_stm -> -continue-.  | -long-, jump_stm -> -continue-.  | -continue-, jump_stm -> -continue-.  | while, jump_stm -> -continue-.  | break, jump_stm -> -continue-.  | -half4-, jump_stm -> -continue-.  | -float2-, jump_stm -> -continue-.  | if, )
79 <- (65, '-do-') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen RParen  | NEQ, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -float-, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, unary_exp -> .postfix_exp  | Assign, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -double-, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | Increment, stm -> .exp_stm  | while, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | Number, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, exp_stm -> .Semicolon  | while, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, selection_stm -> .if LParen exp RParen stm else stm  | while, binary_exp -> .unary_exp  | Percent, compound_stm -> .LBrace block_item_list RBrace  | while, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | if, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, postfix_exp -> .postfix_exp LParen RParen  | AND, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -short-, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, unary_exp -> .unary_op unary_exp  | Semicolon, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Increment, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -goto-, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, jump_stm -> .-return- exp Semicolon  | while, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Increment unary_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, primary_exp -> .ID  | GT, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -void-, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, primary_exp -> .Number  | AND, binary_exp -> .unary_exp  | LE, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, unary_exp -> .unary_op unary_exp  | Percent, unary_exp -> .postfix_exp  | LE, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | Minus, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .String  | Question, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -sampler2D-, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -do-, primary_exp -> .String  | Dot, unary_exp -> .Decrement unary_exp  | Question, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -fixed4-, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, jump_stm -> .break  | while, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | Percent, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -half2-, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -int-, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Question, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -fixed2-, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | ID, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, iteration_stm -> .while LParen exp RParen stm  | while, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, postfix_exp -> .postfix_exp Dot ID  | Decrement, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .Number  | Semicolon, postfix_exp -> .primary_exp  | Increment, jump_stm -> .-goto- ID  | while, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -float4-, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, jump_stm -> .-continue-  | while, postfix_exp -> .primary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, compound_stm -> .LBrace RBrace  | while, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp Increment  | EQ, primary_exp -> .ID  | EQ, postfix_exp -> .postfix_exp Decrement  | Comma, stm -> .compound_stm  | while, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | Tilde, unary_op -> .Tilde  | Number, stm -> .jump_stm  | while, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | Decrement, unary_exp -> .unary_op unary_exp  | Ampersand, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, postfix_exp -> .postfix_exp Dot ID  | LBrack, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_op -> .NOT  | Number, unary_exp -> .Decrement unary_exp  | NEQ, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -half4-, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -fixed3-, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, stm -> .selection_stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -half3-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | LBrace, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | while, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp Decrement  | Assign, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, primary_exp -> .Number  | Dot, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, exp_stm -> .exp Semicolon  | while, postfix_exp -> .postfix_exp LParen RParen  | Question, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | String, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, unary_exp -> .postfix_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Assign, unary_exp -> .Decrement unary_exp  | AND, unary_exp -> .Decrement unary_exp  | VerticalBar, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | Plus, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -long-, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, unary_op -> .Plus  | Plus, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -float3-, unary_op -> .NOT  | NOT, postfix_exp -> .primary_exp  | LT, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | for, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, stm -> .iteration_stm  | while, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | GE, postfix_exp -> .postfix_exp Increment  | LT, conditional_exp -> .binary_exp  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -char-, postfix_exp -> .postfix_exp Dot ID  | Minus, primary_exp -> .Number  | OR, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | LParen, primary_exp -> .LParen exp RParen  | Plus, unary_exp -> .Increment unary_exp  | EQ, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -uniform-, unary_exp -> .Decrement unary_exp  | LeftShift, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -struct-, postfix_exp -> .primary_exp  | Ampersand, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | break, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Dot ID  | EQ, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | RBrace, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .primary_exp  | LE, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, primary_exp -> .Number  | NEQ, binary_exp -> .unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | Dot, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .String  | Decrement, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Times, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | NOT, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -float2-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -continue-, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .unary_op unary_exp  | Caret, unary_exp -> .postfix_exp  | LeftShift, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -return-, )
80 <- (65, '-double-') (type_specifier -> -double-.  | ID, )
81 <- (65, '-fixed2-') (type_specifier -> -fixed2-.  | ID, )
82 <- (65, '-fixed3-') (type_specifier -> -fixed3-.  | ID, )
83 <- (65, '-fixed4-') (type_specifier -> -fixed4-.  | ID, )
84 <- (65, '-float-') (type_specifier -> -float-.  | ID, )
85 <- (65, '-float2-') (type_specifier -> -float2-.  | ID, )
86 <- (65, '-float3-') (type_specifier -> -float3-.  | ID, )
87 <- (65, '-float4-') (type_specifier -> -float4-.  | ID, )
88 <- (65, '-goto-') (jump_stm -> -goto- .ID  | -goto-, jump_stm -> -goto- .ID  | Tilde, jump_stm -> -goto- .ID  | ID, jump_stm -> -goto- .ID  | -half2-, jump_stm -> -goto- .ID  | for, jump_stm -> -goto- .ID  | -fixed2-, jump_stm -> -goto- .ID  | Number, jump_stm -> -goto- .ID  | -uniform-, jump_stm -> -goto- .ID  | -void-, jump_stm -> -goto- .ID  | -half3-, jump_stm -> -goto- .ID  | -long-, jump_stm -> -goto- .ID  | -float3-, jump_stm -> -goto- .ID  | -float-, jump_stm -> -goto- .ID  | -half4-, jump_stm -> -goto- .ID  | LBrace, jump_stm -> -goto- .ID  | -float4-, jump_stm -> -goto- .ID  | Plus, jump_stm -> -goto- .ID  | -short-, jump_stm -> -goto- .ID  | Increment, jump_stm -> -goto- .ID  | -int-, jump_stm -> -goto- .ID  | -fixed4-, jump_stm -> -goto- .ID  | Decrement, jump_stm -> -goto- .ID  | -char-, jump_stm -> -goto- .ID  | LParen, jump_stm -> -goto- .ID  | while, jump_stm -> -goto- .ID  | NOT, jump_stm -> -goto- .ID  | if, jump_stm -> -goto- .ID  | -fixed3-, jump_stm -> -goto- .ID  | -return-, jump_stm -> -goto- .ID  | -do-, jump_stm -> -goto- .ID  | -continue-, jump_stm -> -goto- .ID  | -float2-, jump_stm -> -goto- .ID  | -double-, jump_stm -> -goto- .ID  | -sampler2D-, jump_stm -> -goto- .ID  | Minus, jump_stm -> -goto- .ID  | break, jump_stm -> -goto- .ID  | -struct-, jump_stm -> -goto- .ID  | String, jump_stm -> -goto- .ID  | Semicolon, jump_stm -> -goto- .ID  | RBrace, )
89 <- (65, '-half2-') (type_specifier -> -half2-.  | ID, )
90 <- (65, '-half3-') (type_specifier -> -half3-.  | ID, )
91 <- (65, '-half4-') (type_specifier -> -half4-.  | ID, )
92 <- (65, '-int-') (type_specifier -> -int-.  | ID, )
93 <- (65, '-long-') (type_specifier -> -long-.  | ID, )
94 <- (65, '-return-') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, jump_stm -> -return- .exp Semicolon  | -fixed2-, unary_op -> .NOT  | LParen, jump_stm -> -return- .exp Semicolon  | Number, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, jump_stm -> -return- .exp Semicolon  | -float3-, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, jump_stm -> -return- .exp Semicolon  | -float4-, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, jump_stm -> -return- .exp Semicolon  | Minus, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp Increment  | GE, jump_stm -> -return- .exp Semicolon  | -long-, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, jump_stm -> -return- .exp Semicolon  | Decrement, jump_stm -> -return- .exp Semicolon  | -double-, unary_op -> .NOT  | Tilde, jump_stm -> -return- .exp Semicolon  | -struct-, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | RightShift, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, postfix_exp -> .primary_exp  | LT, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, primary_exp -> .ID  | LT, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, conditional_exp -> .binary_exp  | Comma, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, jump_stm -> -return- .exp Semicolon  | -do-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, jump_stm -> -return- .exp Semicolon  | Tilde, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, postfix_exp -> .primary_exp  | Increment, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, jump_stm -> -return- .exp Semicolon  | LBrace, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, postfix_exp -> .primary_exp  | EQ, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .postfix_exp  | Semicolon, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, postfix_exp -> .postfix_exp Increment  | VerticalBar, jump_stm -> -return- .exp Semicolon  | NOT, jump_stm -> -return- .exp Semicolon  | String, primary_exp -> .String  | Question, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, jump_stm -> -return- .exp Semicolon  | -fixed4-, jump_stm -> -return- .exp Semicolon  | -goto-, primary_exp -> .String  | Semicolon, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, binary_exp -> .unary_exp  | Times, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, jump_stm -> -return- .exp Semicolon  | -continue-, primary_exp -> .String  | Comma, jump_stm -> -return- .exp Semicolon  | -float-, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, jump_stm -> -return- .exp Semicolon  | -char-, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, jump_stm -> -return- .exp Semicolon  | -fixed3-, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, jump_stm -> -return- .exp Semicolon  | Increment, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen RParen  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, binary_exp -> .unary_exp  | LE, jump_stm -> -return- .exp Semicolon  | -half4-, primary_exp -> .LParen exp RParen  | GT, jump_stm -> -return- .exp Semicolon  | LParen, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .LParen exp RParen  | GE, jump_stm -> -return- .exp Semicolon  | -uniform-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, jump_stm -> -return- .exp Semicolon  | Semicolon, jump_stm -> -return- .exp Semicolon  | -void-, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, jump_stm -> -return- .exp Semicolon  | -short-, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, jump_stm -> -return- .exp Semicolon  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Semicolon, unary_op -> .Tilde  | Number, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, jump_stm -> -return- .exp Semicolon  | -float2-, primary_exp -> .Number  | Percent, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, unary_exp -> .Increment unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, jump_stm -> -return- .exp Semicolon  | break, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, unary_exp -> .Decrement unary_exp  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | GE, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, jump_stm -> -return- .exp Semicolon  | ID, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, postfix_exp -> .postfix_exp Increment  | Comma, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, jump_stm -> -return- .exp Semicolon  | -int-, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, primary_exp -> .Number  | Dot, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, jump_stm -> -return- .exp Semicolon  | while, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, unary_exp -> .Decrement unary_exp  | AND, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, jump_stm -> -return- .exp Semicolon  | if, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, binary_exp -> .binary_exp binary_op unary_exp  | Comma, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, conditional_exp -> .binary_exp  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, jump_stm -> -return- .exp Semicolon  | -half2-, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Ampersand, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, jump_stm -> -return- .exp Semicolon  | for, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .unary_op unary_exp  | Assign, unary_exp -> .Decrement unary_exp  | Plus, jump_stm -> -return- .exp Semicolon  | -sampler2D-, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, unary_exp -> .unary_op unary_exp  | Semicolon, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .ID  | VerticalBar, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .String  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Times, jump_stm -> -return- .exp Semicolon  | RBrace, jump_stm -> -return- .exp Semicolon  | -return-, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, jump_stm -> -return- .exp Semicolon  | -half3-, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
95 <- (65, '-sampler2D-') (type_specifier -> -sampler2D-.  | ID, )
96 <- (65, '-short-') (type_specifier -> -short-.  | ID, )
97 <- (65, '-void-') (type_specifier -> -void-.  | ID, )
98 <- (65, 'Decrement') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, unary_exp -> Decrement .unary_exp  | Divide, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_exp -> Decrement .unary_exp  | LE, unary_op -> .NOT  | Tilde, unary_exp -> Decrement .unary_exp  | NEQ, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_exp -> Decrement .unary_exp  | VerticalBar, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Caret, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, unary_exp -> Decrement .unary_exp  | Assign, unary_exp -> Decrement .unary_exp  | Plus, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, unary_exp -> Decrement .unary_exp  | EQ, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, primary_exp -> .Number  | AND, unary_exp -> .unary_op unary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Question, unary_exp -> Decrement .unary_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> Decrement .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Increment  | Question, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, primary_exp -> .String  | RightShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, unary_exp -> Decrement .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, primary_exp -> .LParen exp RParen  | LT, primary_exp -> .ID  | LeftShift, unary_exp -> Decrement .unary_exp  | LT, primary_exp -> .Number  | Semicolon, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .LParen exp RParen  | GE, primary_exp -> .LParen exp RParen  | LE, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Decrement, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, unary_exp -> Decrement .unary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> Decrement .unary_exp  | GE, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Ampersand, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Percent, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> Decrement .unary_exp  | Question, unary_exp -> Decrement .unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | Minus, postfix_exp -> .primary_exp  | GT, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, primary_exp -> .Number  | Plus, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, unary_exp -> .postfix_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Increment  | Times, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | Percent, unary_exp -> Decrement .unary_exp  | AND, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, unary_exp -> Decrement .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Dot, unary_exp -> Decrement .unary_exp  | OR, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .ID  | Times, primary_exp -> .ID  | Semicolon, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_op -> .Tilde  | Increment, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, unary_exp -> Decrement .unary_exp  | Caret, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, unary_exp -> Decrement .unary_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Decrement, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | Semicolon, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, unary_exp -> Decrement .unary_exp  | RightShift, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .String  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> Decrement .unary_exp  | GT, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, unary_exp -> .Increment unary_exp  | Question, unary_exp -> .postfix_exp  | LeftShift, )
99 <- (65, 'ID') (primary_exp -> ID.  | Minus, primary_exp -> ID.  | NEQ, primary_exp -> ID.  | LBrack, primary_exp -> ID.  | OR, primary_exp -> ID.  | Decrement, primary_exp -> ID.  | LParen, primary_exp -> ID.  | Comma, primary_exp -> ID.  | Times, primary_exp -> ID.  | Semicolon, primary_exp -> ID.  | RightShift, typedef_name -> ID.  | ID, primary_exp -> ID.  | Question, primary_exp -> ID.  | Percent, primary_exp -> ID.  | LE, primary_exp -> ID.  | LT, primary_exp -> ID.  | EQ, primary_exp -> ID.  | GT, primary_exp -> ID.  | GE, primary_exp -> ID.  | Increment, primary_exp -> ID.  | Divide, primary_exp -> ID.  | AND, primary_exp -> ID.  | VerticalBar, primary_exp -> ID.  | Ampersand, primary_exp -> ID.  | Caret, primary_exp -> ID.  | LeftShift, primary_exp -> ID.  | Plus, primary_exp -> ID.  | Dot, primary_exp -> ID.  | Assign, )
100 <- (65, 'Increment') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, unary_exp -> Increment .unary_exp  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_exp -> Increment .unary_exp  | Minus, unary_op -> .NOT  | Tilde, unary_exp -> Increment .unary_exp  | Question, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | RightShift, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Caret, unary_op -> .Plus  | ID, unary_exp -> Increment .unary_exp  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, unary_exp -> Increment .unary_exp  | EQ, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, unary_exp -> Increment .unary_exp  | Plus, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, unary_exp -> .postfix_exp  | Semicolon, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .ID  | VerticalBar, primary_exp -> .String  | Dot, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, primary_exp -> .ID  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, primary_exp -> .String  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, primary_exp -> .ID  | LeftShift, primary_exp -> .String  | AND, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | LE, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, primary_exp -> .Number  | Plus, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, unary_op -> .Tilde  | Number, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, unary_exp -> .unary_op unary_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, unary_exp -> Increment .unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> Increment .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> Increment .unary_exp  | Assign, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Ampersand, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Percent, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, unary_op -> .Tilde  | NOT, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, unary_op -> .Minus  | LParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, primary_exp -> .String  | Decrement, primary_exp -> .Number  | Semicolon, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, primary_exp -> .ID  | Assign, unary_exp -> Increment .unary_exp  | AND, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> Increment .unary_exp  | LE, unary_exp -> Increment .unary_exp  | RightShift, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, unary_exp -> Increment .unary_exp  | GT, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, unary_exp -> Increment .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, unary_exp -> Increment .unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, unary_exp -> Increment .unary_exp  | LT, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Increment  | Times, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | Percent, unary_exp -> Increment .unary_exp  | Semicolon, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> Increment .unary_exp  | Divide, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp LParen RParen  | Caret, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, unary_exp -> Increment .unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Divide, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .ID  | Times, primary_exp -> .ID  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_op -> .Tilde  | Increment, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, postfix_exp -> .primary_exp  | Decrement, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, unary_op -> .NOT  | NOT, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .Number  | LE, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> Increment .unary_exp  | NEQ, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Decrement, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, unary_exp -> Increment .unary_exp  | Comma, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, unary_exp -> Increment .unary_exp  | Times, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, unary_exp -> .Increment unary_exp  | Question, unary_exp -> .postfix_exp  | LeftShift, )
101 <- (65, 'LBrace') (compound_stm -> LBrace .RBrace  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, iteration_stm -> .while LParen exp RParen stm  | -fixed3-, exp_stm -> .exp Semicolon  | ID, exp_stm -> .exp Semicolon  | LParen, stm -> .iteration_stm  | String, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -char-, jump_stm -> .break  | -continue-, exp_stm -> .exp Semicolon  | -float4-, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, stm -> .iteration_stm  | Number, unary_exp -> .postfix_exp  | Ampersand, block_item -> .stm  | -return-, compound_stm -> .LBrace RBrace  | -do-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float3-, unary_op -> .Minus  | Minus, stm -> .compound_stm  | if, dec -> .struct_specifier Semicolon  | -int-, exp_stm -> .Semicolon  | -struct-, exp_stm -> .Semicolon  | Plus, postfix_exp -> .postfix_exp LParen RParen  | RightShift, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -long-, postfix_exp -> .postfix_exp LParen RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, block_item_list -> .block_item  | -long-, jump_stm -> .-goto- ID  | LParen, block_item_list -> .block_item_list block_item  | -half4-, block_item_list -> .block_item_list block_item  | Minus, block_item_list -> .block_item  | -void-, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, unary_exp -> .postfix_exp  | GT, compound_stm -> .LBrace RBrace  | ID, jump_stm -> .-goto- ID  | -float4-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | for, selection_stm -> .if LParen exp RParen stm else stm  | while, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -struct-, block_item_list -> .block_item_list block_item  | Number, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LParen, compound_stm -> .LBrace block_item_list RBrace  | Number, compound_stm -> LBrace .block_item_list RBrace  | -short-, postfix_exp -> .postfix_exp Increment  | OR, exp_stm -> .Semicolon  | -long-, iteration_stm -> .while LParen exp RParen stm  | -fixed4-, block_item -> .dec  | while, unary_op -> .NOT  | Tilde, dec -> .struct_specifier Semicolon  | for, binary_exp -> .unary_exp  | Divide, compound_stm -> LBrace .block_item_list RBrace  | -void-, compound_stm -> LBrace .block_item_list RBrace  | -double-, unary_op -> .Tilde  | LParen, selection_stm -> .if LParen exp RParen stm else stm  | -int-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | break, compound_stm -> .LBrace block_item_list RBrace  | Tilde, block_item_list -> .block_item  | break, dec -> .dec_specifier init_dec_list Semicolon  | -fixed3-, compound_stm -> .LBrace RBrace  | -float2-, exp_stm -> .exp Semicolon  | -do-, unary_op -> .Plus  | ID, compound_stm -> .LBrace RBrace  | -goto-, selection_stm -> .if LParen exp RParen stm else stm  | RBrace, primary_exp -> .String  | EQ, compound_stm -> LBrace .block_item_list RBrace  | -do-, postfix_exp -> .postfix_exp Dot ID  | Divide, postfix_exp -> .postfix_exp Decrement  | Dot, jump_stm -> .-return- exp Semicolon  | Minus, jump_stm -> .-continue-  | Minus, compound_stm -> LBrace .RBrace  | -struct-, selection_stm -> .if LParen exp RParen stm else stm  | LBrace, postfix_exp -> .primary_exp  | Semicolon, jump_stm -> .-continue-  | -fixed4-, block_item_list -> .block_item_list block_item  | -fixed3-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, exp_stm -> .Semicolon  | while, dec -> .struct_specifier Semicolon  | -double-, stm -> .jump_stm  | -struct-, selection_stm -> .if LParen exp RParen stm  | -float-, jump_stm -> .-return- exp Semicolon  | while, dec -> .struct_specifier Semicolon  | LBrace, iteration_stm -> .while LParen exp RParen stm  | -sampler2D-, compound_stm -> LBrace .block_item_list RBrace  | -long-, exp_stm -> .exp Semicolon  | -float3-, block_item -> .stm  | NOT, primary_exp -> .String  | Semicolon, compound_stm -> LBrace .RBrace  | -fixed4-, stm -> .jump_stm  | -long-, jump_stm -> .-continue-  | ID, jump_stm -> .-return- exp Semicolon  | -struct-, compound_stm -> .LBrace block_item_list RBrace  | -double-, jump_stm -> .break  | Decrement, dec -> .dec_specifier init_dec_list Semicolon  | -int-, unary_exp -> .postfix_exp  | Times, compound_stm -> .LBrace RBrace  | -fixed3-, unary_exp -> .postfix_exp  | Semicolon, dec -> .struct_specifier Semicolon  | String, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed4-, postfix_exp -> .primary_exp  | RightShift, block_item_list -> .block_item_list block_item  | if, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | if, jump_stm -> .-continue-  | -int-, type_specifier -> .-half4-  | ID, block_item_list -> .block_item_list block_item  | -half2-, dec -> .dec_specifier init_dec_list Semicolon  | -short-, block_item_list -> .block_item_list block_item  | RBrace, selection_stm -> .if LParen exp RParen stm  | -int-, exp_stm -> .exp Semicolon  | -struct-, block_item -> .dec  | -float2-, selection_stm -> .if LParen exp RParen stm  | String, type_qualifier -> .-uniform-  | -long-, compound_stm -> .LBrace block_item_list RBrace  | -continue-, type_specifier -> .-float2-  | ID, stm -> .jump_stm  | String, dec -> .struct_specifier Semicolon  | Number, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_exp -> .Increment unary_exp  | Plus, exp_stm -> .Semicolon  | if, exp_stm -> .exp Semicolon  | -continue-, stm -> .iteration_stm  | -void-, postfix_exp -> .primary_exp  | LE, exp_stm -> .exp Semicolon  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | -float-, compound_stm -> LBrace .RBrace  | -short-, block_item -> .dec  | -uniform-, stm -> .jump_stm  | -half4-, block_item_list -> .block_item_list block_item  | -float2-, jump_stm -> .-return- exp Semicolon  | -do-, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, block_item_list -> .block_item  | if, dec -> .struct_specifier Semicolon  | -float-, stm -> .compound_stm  | NOT, compound_stm -> LBrace .block_item_list RBrace  | -fixed2-, compound_stm -> .LBrace RBrace  | for, compound_stm -> LBrace .block_item_list RBrace  | RBrace, unary_exp -> .Decrement unary_exp  | Assign, stm -> .jump_stm  | Decrement, primary_exp -> .String  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, block_item -> .stm  | -half4-, block_item -> .stm  | Minus, exp -> .exp Comma assignment_exp  | Semicolon, jump_stm -> .-goto- ID  | -int-, exp_stm -> .Semicolon  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | -uniform-, type_specifier -> .-float-  | ID, block_item -> .stm  | for, selection_stm -> .if LParen exp RParen stm  | -float4-, type_specifier -> .-fixed3-  | ID, block_item_list -> .block_item_list block_item  | Semicolon, jump_stm -> .-return- exp Semicolon  | -return-, iteration_stm -> .while LParen exp RParen stm  | Minus, block_item -> .dec  | for, postfix_exp -> .postfix_exp LParen RParen  | LBrack, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed3-, postfix_exp -> .primary_exp  | Minus, compound_stm -> .LBrace block_item_list RBrace  | -return-, jump_stm -> .break  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | -half2-, stm -> .iteration_stm  | LBrace, compound_stm -> LBrace .block_item_list RBrace  | -fixed3-, selection_stm -> .if LParen exp RParen stm else stm  | Number, primary_exp -> .LParen exp RParen  | LE, primary_exp -> .LParen exp RParen  | Caret, compound_stm -> .LBrace block_item_list RBrace  | -float4-, block_item -> .stm  | Semicolon, binary_exp -> .unary_exp  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float-, unary_exp -> .Decrement unary_exp  | GT, selection_stm -> .if LParen exp RParen stm else stm  | -float3-, jump_stm -> .-return- exp Semicolon  | NOT, postfix_exp -> .postfix_exp Increment  | Times, selection_stm -> .if LParen exp RParen stm else stm  | Decrement, stm -> .selection_stm  | -fixed3-, postfix_exp -> .postfix_exp Increment  | AND, jump_stm -> .break  | -do-, unary_exp -> .Increment unary_exp  | OR, exp_stm -> .Semicolon  | -continue-, selection_stm -> .if LParen exp RParen stm  | Minus, block_item_list -> .block_item_list block_item  | -goto-, jump_stm -> .-continue-  | while, selection_stm -> .if LParen exp RParen stm else stm  | Tilde, primary_exp -> .ID  | Decrement, stm -> .selection_stm  | Number, dec_specifier -> .type_specifier  | ID, unary_op -> .Minus  | ID, dec -> .struct_specifier Semicolon  | Tilde, compound_stm -> .LBrace RBrace  | while, jump_stm -> .-continue-  | -float-, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | EQ, compound_stm -> .LBrace block_item_list RBrace  | -int-, stm -> .exp_stm  | -double-, stm -> .selection_stm  | Minus, exp_stm -> .exp Semicolon  | -half3-, postfix_exp -> .postfix_exp Decrement  | Semicolon, unary_op -> .Tilde  | Number, exp_stm -> .exp Semicolon  | -goto-, stm -> .jump_stm  | while, binary_exp -> .unary_exp  | Plus, stm -> .exp_stm  | -float4-, unary_exp -> .unary_op unary_exp  | Ampersand, compound_stm -> .LBrace block_item_list RBrace  | if, postfix_exp -> .postfix_exp Dot ID  | LT, jump_stm -> .-continue-  | for, unary_exp -> .unary_op unary_exp  | Assign, jump_stm -> .-return- exp Semicolon  | -half2-, compound_stm -> LBrace .block_item_list RBrace  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, stm -> .iteration_stm  | -continue-, selection_stm -> .if LParen exp RParen stm else stm  | -float-, block_item -> .stm  | -float2-, dec -> .struct_specifier Semicolon  | -fixed2-, compound_stm -> .LBrace block_item_list RBrace  | String, block_item -> .dec  | Semicolon, unary_op -> .NOT  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | String, primary_exp -> .Number  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float4-, jump_stm -> .break  | -uniform-, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, compound_stm -> LBrace .RBrace  | -float4-, stm -> .compound_stm  | -void-, dec -> .struct_specifier Semicolon  | Plus, dec -> .struct_specifier Semicolon  | -half3-, dec -> .struct_specifier Semicolon  | -half4-, jump_stm -> .-return- exp Semicolon  | -long-, compound_stm -> .LBrace RBrace  | -return-, stm -> .exp_stm  | NOT, stm -> .iteration_stm  | Increment, jump_stm -> .-return- exp Semicolon  | LParen, iteration_stm -> .while LParen exp RParen stm  | if, postfix_exp -> .primary_exp  | Plus, stm -> .jump_stm  | -float4-, block_item_list -> .block_item  | -int-, compound_stm -> LBrace .RBrace  | Number, stm -> .compound_stm  | Tilde, stm -> .exp_stm  | -float2-, unary_op -> .Plus  | Increment, iteration_stm -> .while LParen exp RParen stm  | -goto-, compound_stm -> LBrace .block_item_list RBrace  | Decrement, selection_stm -> .if LParen exp RParen stm  | NOT, compound_stm -> LBrace .RBrace  | -float-, primary_exp -> .String  | Times, stm -> .selection_stm  | while, stm -> .exp_stm  | -int-, stm -> .iteration_stm  | break, iteration_stm -> .while LParen exp RParen stm  | -half3-, stm -> .iteration_stm  | -double-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -short-, stm -> .iteration_stm  | -float3-, selection_stm -> .if LParen exp RParen stm  | -half4-, primary_exp -> .String  | Increment, jump_stm -> .-return- exp Semicolon  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -uniform-, block_item -> .dec  | -sampler2D-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, jump_stm -> .-return- exp Semicolon  | ID, dec -> .struct_specifier Semicolon  | -continue-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed3-, primary_exp -> .Number  | Dot, exp_stm -> .Semicolon  | -do-, primary_exp -> .LParen exp RParen  | Ampersand, block_item -> .dec  | -continue-, type_qualifier -> .-uniform-  | -fixed3-, postfix_exp -> .primary_exp  | Comma, block_item -> .dec  | Increment, primary_exp -> .ID  | LBrack, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, block_item -> .dec  | NOT, selection_stm -> .if LParen exp RParen stm  | LParen, compound_stm -> .LBrace block_item_list RBrace  | for, block_item_list -> .block_item_list block_item  | while, jump_stm -> .break  | -fixed2-, type_specifier -> .-fixed4-  | ID, compound_stm -> .LBrace RBrace  | Plus, unary_exp -> .unary_op unary_exp  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, dec -> .dec_specifier init_dec_list Semicolon  | ID, postfix_exp -> .postfix_exp Dot ID  | Semicolon, type_specifier -> .-long-  | ID, compound_stm -> LBrace .block_item_list RBrace  | -float3-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, stm -> .selection_stm  | -fixed4-, jump_stm -> .-goto- ID  | -void-, compound_stm -> .LBrace block_item_list RBrace  | -fixed2-, dec -> .dec_specifier init_dec_list Semicolon  | -long-, unary_op -> .Minus  | Plus, primary_exp -> .LParen exp RParen  | LT, compound_stm -> .LBrace RBrace  | -char-, primary_exp -> .String  | LT, block_item -> .stm  | -int-, unary_exp -> .postfix_exp  | NEQ, stm -> .compound_stm  | Increment, selection_stm -> .if LParen exp RParen stm  | Semicolon, primary_exp -> .LParen exp RParen  | AND, compound_stm -> LBrace .RBrace  | if, stm -> .jump_stm  | -float2-, unary_exp -> .Increment unary_exp  | NEQ, stm -> .selection_stm  | -return-, stm -> .iteration_stm  | -fixed3-, block_item -> .stm  | -float3-, compound_stm -> .LBrace RBrace  | Semicolon, unary_op -> .Minus  | NOT, block_item -> .dec  | ID, iteration_stm -> .while LParen exp RParen stm  | LParen, stm -> .iteration_stm  | -float2-, type_qualifier -> .-uniform-  | -fixed2-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | NOT, primary_exp -> .ID  | Semicolon, exp_stm -> .exp Semicolon  | -int-, postfix_exp -> .postfix_exp Decrement  | AND, unary_op -> .Tilde  | Increment, stm -> .iteration_stm  | -fixed4-, postfix_exp -> .postfix_exp LParen RParen  | EQ, stm -> .selection_stm  | Decrement, jump_stm -> .-continue-  | -do-, block_item -> .dec  | Tilde, unary_exp -> .Decrement unary_exp  | LeftShift, block_item_list -> .block_item  | -half2-, compound_stm -> .LBrace RBrace  | break, jump_stm -> .-continue-  | Tilde, stm -> .exp_stm  | LBrace, jump_stm -> .-continue-  | -half4-, dec -> .struct_specifier Semicolon  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | OR, compound_stm -> .LBrace block_item_list RBrace  | Minus, jump_stm -> .break  | for, jump_stm -> .-continue-  | -goto-, compound_stm -> .LBrace RBrace  | -void-, exp_stm -> .Semicolon  | -fixed2-, selection_stm -> .if LParen exp RParen stm else stm  | -void-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Plus, block_item_list -> .block_item_list block_item  | Plus, exp_stm -> .Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | NOT, iteration_stm -> .while LParen exp RParen stm  | -void-, stm -> .iteration_stm  | -char-, block_item_list -> .block_item  | LBrace, jump_stm -> .break  | -float4-, stm -> .jump_stm  | -void-, primary_exp -> .Number  | VerticalBar, block_item -> .dec  | Decrement, compound_stm -> LBrace .block_item_list RBrace  | -float4-, compound_stm -> LBrace .block_item_list RBrace  | -goto-, postfix_exp -> .primary_exp  | Divide, compound_stm -> .LBrace RBrace  | -fixed4-, dec -> .struct_specifier Semicolon  | -fixed3-, exp_stm -> .exp Semicolon  | -sampler2D-, binary_exp -> .unary_exp  | Times, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float3-, stm -> .jump_stm  | Minus, type_specifier -> .-int-  | ID, compound_stm -> LBrace .RBrace  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half3-, postfix_exp -> .postfix_exp Increment  | VerticalBar, struct_specifier -> .-struct- ID  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | -fixed2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, jump_stm -> .break  | if, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half4-, jump_stm -> .-return- exp Semicolon  | -goto-, stm -> .compound_stm  | RBrace, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, stm -> .compound_stm  | -fixed4-, exp_stm -> .exp Semicolon  | -half2-, block_item_list -> .block_item_list block_item  | -void-, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | Minus, postfix_exp -> .postfix_exp Dot ID  | RightShift, compound_stm -> LBrace .block_item_list RBrace  | if, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, compound_stm -> .LBrace block_item_list RBrace  | -short-, selection_stm -> .if LParen exp RParen stm else stm  | -float2-, jump_stm -> .break  | -char-, binary_exp -> .unary_exp  | OR, stm -> .compound_stm  | -fixed2-, stm -> .jump_stm  | -float3-, selection_stm -> .if LParen exp RParen stm else stm  | LParen, compound_stm -> LBrace .RBrace  | -sampler2D-, stm -> .selection_stm  | RBrace, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, compound_stm -> LBrace .block_item_list RBrace  | -sampler2D-, stm -> .compound_stm  | -char-, compound_stm -> LBrace .RBrace  | -int-, compound_stm -> LBrace .block_item_list RBrace  | while, compound_stm -> .LBrace RBrace  | -long-, jump_stm -> .break  | -long-, jump_stm -> .-continue-  | -uniform-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LBrace, stm -> .compound_stm  | -goto-, jump_stm -> .break  | -return-, stm -> .compound_stm  | -float4-, block_item_list -> .block_item_list block_item  | -int-, iteration_stm -> .while LParen exp RParen stm  | -uniform-, jump_stm -> .-continue-  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -short-, postfix_exp -> .postfix_exp LParen RParen  | NEQ, block_item_list -> .block_item  | while, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, selection_stm -> .if LParen exp RParen stm else stm  | for, primary_exp -> .LParen exp RParen  | NEQ, compound_stm -> .LBrace RBrace  | Increment, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Plus, dec -> .dec_specifier init_dec_list Semicolon  | RBrace, block_item_list -> .block_item  | -float4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, postfix_exp -> .postfix_exp Decrement  | Times, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -int-, unary_op -> .NOT  | LParen, exp_stm -> .exp Semicolon  | String, block_item -> .stm  | -fixed2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .String  | Dot, postfix_exp -> .primary_exp  | AND, jump_stm -> .-return- exp Semicolon  | -short-, dec -> .dec_specifier init_dec_list Semicolon  | LParen, unary_exp -> .unary_op unary_exp  | Plus, dec -> .dec_specifier init_dec_list Semicolon  | -struct-, stm -> .compound_stm  | -float3-, unary_op -> .NOT  | String, stm -> .selection_stm  | -float4-, block_item -> .dec  | -float4-, binary_exp -> .unary_exp  | LeftShift, dec -> .dec_specifier init_dec_list Semicolon  | -char-, binary_exp -> .unary_exp  | Percent, compound_stm -> .LBrace block_item_list RBrace  | while, stm -> .iteration_stm  | Minus, block_item -> .stm  | -half3-, postfix_exp -> .postfix_exp Increment  | GE, block_item_list -> .block_item_list block_item  | -fixed2-, primary_exp -> .ID  | LParen, unary_exp -> .Increment unary_exp  | Divide, exp_stm -> .Semicolon  | ID, unary_op -> .NOT  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed2-, jump_stm -> .-goto- ID  | -struct-, compound_stm -> LBrace .RBrace  | LBrace, jump_stm -> .break  | Minus, compound_stm -> .LBrace RBrace  | if, jump_stm -> .break  | -void-, block_item_list -> .block_item_list block_item  | for, iteration_stm -> .while LParen exp RParen stm  | -float-, compound_stm -> LBrace .block_item_list RBrace  | -float-, compound_stm -> LBrace .block_item_list RBrace  | -float2-, primary_exp -> .String  | Ampersand, block_item -> .stm  | Plus, type_qualifier -> .-uniform-  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | NOT, primary_exp -> .ID  | Times, stm -> .compound_stm  | -sampler2D-, stm -> .selection_stm  | LParen, dec -> .dec_specifier init_dec_list Semicolon  | for, selection_stm -> .if LParen exp RParen stm else stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | LBrace, binary_exp -> .unary_exp  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, binary_exp -> .binary_exp binary_op unary_exp  | Caret, primary_exp -> .LParen exp RParen  | Divide, unary_op -> .Tilde  | Tilde, exp_stm -> .Semicolon  | -fixed3-, type_qualifier -> .-uniform-  | -char-, stm -> .exp_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -return-, unary_exp -> .Decrement unary_exp  | Divide, stm -> .compound_stm  | -do-, jump_stm -> .-return- exp Semicolon  | -fixed3-, stm -> .selection_stm  | -struct-, stm -> .exp_stm  | -return-, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, stm -> .exp_stm  | -char-, compound_stm -> LBrace .block_item_list RBrace  | -struct-, postfix_exp -> .postfix_exp Decrement  | Ampersand, compound_stm -> LBrace .RBrace  | -return-, iteration_stm -> .while LParen exp RParen stm  | for, stm -> .selection_stm  | if, postfix_exp -> .postfix_exp Dot ID  | Increment, compound_stm -> LBrace .RBrace  | Minus, compound_stm -> .LBrace RBrace  | -float4-, type_qualifier -> .-uniform-  | -float-, jump_stm -> .-continue-  | RBrace, binary_exp -> .unary_exp  | LE, jump_stm -> .-return- exp Semicolon  | -float4-, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, stm -> .exp_stm  | LParen, postfix_exp -> .primary_exp  | LeftShift, selection_stm -> .if LParen exp RParen stm else stm  | -fixed3-, block_item_list -> .block_item_list block_item  | -struct-, unary_op -> .Minus  | Number, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | if, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -void-, stm -> .compound_stm  | -float2-, block_item_list -> .block_item_list block_item  | -fixed4-, primary_exp -> .Number  | LeftShift, exp_stm -> .exp Semicolon  | Tilde, jump_stm -> .break  | while, jump_stm -> .-continue-  | -char-, jump_stm -> .break  | LParen, block_item -> .stm  | -sampler2D-, jump_stm -> .-goto- ID  | -float-, dec -> .dec_specifier init_dec_list Semicolon  | Number, unary_op -> .Tilde  | NOT, postfix_exp -> .postfix_exp Decrement  | Percent, compound_stm -> .LBrace block_item_list RBrace  | -void-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, selection_stm -> .if LParen exp RParen stm  | -fixed2-, primary_exp -> .LParen exp RParen  | Times, stm -> .selection_stm  | ID, selection_stm -> .if LParen exp RParen stm  | -double-, exp_stm -> .Semicolon  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, stm -> .exp_stm  | Minus, exp_stm -> .exp Semicolon  | -uniform-, dec -> .struct_specifier Semicolon  | -float2-, primary_exp -> .ID  | OR, stm -> .exp_stm  | -void-, compound_stm -> LBrace .RBrace  | String, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, postfix_exp -> .postfix_exp Increment  | GT, stm -> .jump_stm  | Semicolon, iteration_stm -> .while LParen exp RParen stm  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | Times, exp_stm -> .Semicolon  | -half4-, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, compound_stm -> .LBrace RBrace  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, compound_stm -> LBrace .block_item_list RBrace  | -int-, unary_exp -> .unary_op unary_exp  | Question, selection_stm -> .if LParen exp RParen stm else stm  | -double-, unary_exp -> .unary_op unary_exp  | Times, stm -> .iteration_stm  | -int-, selection_stm -> .if LParen exp RParen stm  | if, exp_stm -> .exp Semicolon  | Plus, jump_stm -> .-continue-  | -float2-, block_item -> .stm  | -double-, block_item_list -> .block_item  | Increment, primary_exp -> .String  | Question, iteration_stm -> .while LParen exp RParen stm  | while, compound_stm -> LBrace .RBrace  | -float2-, block_item_list -> .block_item_list block_item  | -long-, dec -> .dec_specifier init_dec_list Semicolon  | Minus, stm -> .iteration_stm  | -do-, block_item_list -> .block_item  | NOT, binary_exp -> .unary_exp  | LT, block_item -> .stm  | -float-, primary_exp -> .ID  | LE, block_item_list -> .block_item_list block_item  | -char-, stm -> .exp_stm  | -float-, compound_stm -> LBrace .block_item_list RBrace  | Tilde, unary_exp -> .Decrement unary_exp  | Caret, compound_stm -> .LBrace block_item_list RBrace  | -sampler2D-, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | LeftShift, jump_stm -> .-return- exp Semicolon  | Number, exp_stm -> .exp Semicolon  | Number, primary_exp -> .String  | Minus, block_item_list -> .block_item_list block_item  | Decrement, selection_stm -> .if LParen exp RParen stm  | -uniform-, compound_stm -> LBrace .RBrace  | -half3-, jump_stm -> .-continue-  | -sampler2D-, postfix_exp -> .postfix_exp Decrement  | EQ, iteration_stm -> .while LParen exp RParen stm  | -int-, block_item_list -> .block_item  | -half3-, dec -> .struct_specifier Semicolon  | -long-, type_qualifier -> .-uniform-  | -half2-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Semicolon, dec -> .dec_specifier init_dec_list Semicolon  | Semicolon, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | for, postfix_exp -> .postfix_exp Decrement  | Increment, block_item -> .stm  | -goto-, binary_exp -> .binary_exp binary_op unary_exp  | Minus, primary_exp -> .LParen exp RParen  | OR, primary_exp -> .Number  | GT, postfix_exp -> .primary_exp  | Question, block_item -> .stm  | -char-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, jump_stm -> .break  | -fixed4-, dec -> .dec_specifier init_dec_list Semicolon  | -sampler2D-, postfix_exp -> .postfix_exp Increment  | Increment, unary_exp -> .unary_op unary_exp  | OR, selection_stm -> .if LParen exp RParen stm else stm  | -fixed4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, stm -> .iteration_stm  | -short-, selection_stm -> .if LParen exp RParen stm  | Tilde, postfix_exp -> .postfix_exp Increment  | LeftShift, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> .postfix_exp  | Caret, stm -> .jump_stm  | Increment, selection_stm -> .if LParen exp RParen stm  | Number, primary_exp -> .ID  | LT, postfix_exp -> .postfix_exp Dot ID  | Caret, iteration_stm -> .while LParen exp RParen stm  | NOT, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -return-, dec -> .struct_specifier Semicolon  | Decrement, primary_exp -> .Number  | Percent, iteration_stm -> .while LParen exp RParen stm  | -return-, primary_exp -> .LParen exp RParen  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -double-, primary_exp -> .Number  | Assign, block_item_list -> .block_item  | RBrace, block_item -> .dec  | -float3-, iteration_stm -> .while LParen exp RParen stm  | Tilde, jump_stm -> .break  | -float-, jump_stm -> .break  | -goto-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float-, jump_stm -> .-goto- ID  | -goto-, stm -> .exp_stm  | -continue-, stm -> .iteration_stm  | Plus, compound_stm -> LBrace .block_item_list RBrace  | NOT, selection_stm -> .if LParen exp RParen stm  | -fixed4-, exp_stm -> .Semicolon  | -uniform-, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, block_item_list -> .block_item  | ID, block_item_list -> .block_item  | -uniform-, stm -> .exp_stm  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Minus, postfix_exp -> .postfix_exp Decrement  | Divide, exp_stm -> .Semicolon  | Minus, unary_exp -> .postfix_exp  | VerticalBar, primary_exp -> .String  | Divide, compound_stm -> LBrace .block_item_list RBrace  | LBrace, unary_exp -> .postfix_exp  | EQ, stm -> .exp_stm  | ID, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, primary_exp -> .String  | LParen, postfix_exp -> .postfix_exp Increment  | Minus, block_item -> .dec  | -float-, iteration_stm -> .while LParen exp RParen stm  | -double-, jump_stm -> .-goto- ID  | LBrace, primary_exp -> .ID  | RightShift, selection_stm -> .if LParen exp RParen stm else stm  | -char-, stm -> .iteration_stm  | -long-, postfix_exp -> .postfix_exp Increment  | LE, jump_stm -> .-continue-  | -continue-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Tilde, primary_exp -> .ID  | NEQ, compound_stm -> LBrace .RBrace  | -char-, block_item_list -> .block_item_list block_item  | LParen, stm -> .compound_stm  | -half4-, stm -> .compound_stm  | -short-, unary_exp -> .unary_op unary_exp  | NEQ, block_item -> .dec  | -goto-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -double-, selection_stm -> .if LParen exp RParen stm  | for, selection_stm -> .if LParen exp RParen stm  | ID, compound_stm -> LBrace .block_item_list RBrace  | -half2-, block_item -> .stm  | Tilde, stm -> .jump_stm  | ID, jump_stm -> .-return- exp Semicolon  | -half4-, block_item -> .stm  | -struct-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, dec -> .struct_specifier Semicolon  | RBrace, type_qualifier -> .-uniform-  | -void-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | RBrace, postfix_exp -> .primary_exp  | LT, unary_exp -> .postfix_exp  | Question, primary_exp -> .String  | LBrack, stm -> .jump_stm  | for, jump_stm -> .-return- exp Semicolon  | Plus, stm -> .exp_stm  | -float3-, unary_exp -> .Increment unary_exp  | Comma, block_item_list -> .block_item_list block_item  | LBrace, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -uniform-, jump_stm -> .-return- exp Semicolon  | if, compound_stm -> LBrace .RBrace  | while, jump_stm -> .-goto- ID  | -fixed3-, dec -> .struct_specifier Semicolon  | -do-, compound_stm -> LBrace .RBrace  | -goto-, block_item -> .stm  | LBrace, stm -> .selection_stm  | -fixed2-, block_item -> .stm  | LParen, compound_stm -> .LBrace RBrace  | LParen, block_item -> .stm  | while, jump_stm -> .-return- exp Semicolon  | -continue-, stm -> .selection_stm  | -int-, stm -> .exp_stm  | -fixed4-, jump_stm -> .-goto- ID  | -float3-, postfix_exp -> .primary_exp  | GT, block_item -> .stm  | break, stm -> .selection_stm  | -do-, unary_op -> .Minus  | Tilde, postfix_exp -> .primary_exp  | VerticalBar, primary_exp -> .Number  | RightShift, unary_op -> .Plus  | Decrement, stm -> .selection_stm  | -half3-, stm -> .jump_stm  | -short-, primary_exp -> .ID  | Percent, jump_stm -> .-continue-  | Semicolon, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -struct-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -char-, block_item_list -> .block_item  | LParen, jump_stm -> .-goto- ID  | RBrace, compound_stm -> .LBrace RBrace  | -sampler2D-, compound_stm -> LBrace .RBrace  | RBrace, jump_stm -> .-continue-  | Plus, unary_exp -> .Increment unary_exp  | GE, jump_stm -> .-continue-  | -half2-, unary_exp -> .Increment unary_exp  | EQ, compound_stm -> .LBrace RBrace  | Tilde, exp_stm -> .exp Semicolon  | -fixed4-, primary_exp -> .Number  | Comma, selection_stm -> .if LParen exp RParen stm else stm  | ID, stm -> .jump_stm  | -char-, block_item_list -> .block_item  | Decrement, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | Comma, jump_stm -> .-goto- ID  | -half3-, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, conditional_exp -> .binary_exp  | Semicolon, stm -> .compound_stm  | -float-, exp_stm -> .Semicolon  | RBrace, selection_stm -> .if LParen exp RParen stm  | -do-, stm -> .jump_stm  | -continue-, dec -> .struct_specifier Semicolon  | break, selection_stm -> .if LParen exp RParen stm else stm  | -half2-, stm -> .compound_stm  | -struct-, stm -> .selection_stm  | NOT, jump_stm -> .-return- exp Semicolon  | -float2-, postfix_exp -> .postfix_exp Dot ID  | LParen, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, jump_stm -> .-return- exp Semicolon  | -float3-, compound_stm -> LBrace .block_item_list RBrace  | break, iteration_stm -> .while LParen exp RParen stm  | -struct-, postfix_exp -> .postfix_exp Increment  | Dot, type_qualifier -> .-uniform-  | -float4-, stm -> .compound_stm  | break, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, compound_stm -> LBrace .RBrace  | Tilde, compound_stm -> .LBrace block_item_list RBrace  | -do-, block_item -> .stm  | -float4-, postfix_exp -> .postfix_exp Increment  | Divide, stm -> .selection_stm  | -float2-, stm -> .jump_stm  | -return-, exp_stm -> .Semicolon  | break, unary_exp -> .postfix_exp  | OR, exp_stm -> .Semicolon  | -double-, block_item -> .dec  | LBrace, jump_stm -> .-goto- ID  | break, postfix_exp -> .postfix_exp Decrement  | LE, exp_stm -> .Semicolon  | Number, block_item -> .dec  | if, binary_exp -> .unary_exp  | AND, block_item -> .dec  | LParen, compound_stm -> LBrace .block_item_list RBrace  | -fixed4-, compound_stm -> .LBrace block_item_list RBrace  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, compound_stm -> LBrace .RBrace  | -long-, primary_exp -> .ID  | Dot, stm -> .selection_stm  | -double-, stm -> .iteration_stm  | NOT, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Comma, jump_stm -> .-continue-  | -double-, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, jump_stm -> .-goto- ID  | -half2-, compound_stm -> LBrace .block_item_list RBrace  | LParen, exp_stm -> .Semicolon  | String, postfix_exp -> .postfix_exp Increment  | EQ, compound_stm -> LBrace .block_item_list RBrace  | Number, jump_stm -> .-continue-  | -float3-, unary_exp -> .postfix_exp  | Percent, unary_exp -> .postfix_exp  | GE, binary_exp -> .unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, jump_stm -> .-continue-  | Increment, exp_stm -> .Semicolon  | -half2-, compound_stm -> .LBrace block_item_list RBrace  | -char-, unary_exp -> .postfix_exp  | Assign, compound_stm -> .LBrace RBrace  | -float3-, stm -> .jump_stm  | -double-, dec -> .dec_specifier init_dec_list Semicolon  | -half3-, compound_stm -> .LBrace block_item_list RBrace  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | -half4-, jump_stm -> .break  | LBrace, compound_stm -> LBrace .block_item_list RBrace  | for, jump_stm -> .break  | -short-, block_item -> .dec  | -void-, block_item -> .stm  | Decrement, jump_stm -> .-continue-  | String, primary_exp -> .String  | OR, dec -> .struct_specifier Semicolon  | Semicolon, stm -> .selection_stm  | for, selection_stm -> .if LParen exp RParen stm else stm  | -do-, compound_stm -> LBrace .block_item_list RBrace  | -uniform-, compound_stm -> .LBrace block_item_list RBrace  | Increment, unary_exp -> .Decrement unary_exp  | Ampersand, stm -> .jump_stm  | Tilde, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, block_item_list -> .block_item  | String, selection_stm -> .if LParen exp RParen stm  | -half3-, stm -> .jump_stm  | -goto-, postfix_exp -> .primary_exp  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -float3-, block_item -> .stm  | Number, unary_exp -> .Decrement unary_exp  | GE, jump_stm -> .-return- exp Semicolon  | -half3-, jump_stm -> .break  | Plus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float4-, type_qualifier -> .-uniform-  | -half4-, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, exp_stm -> .exp Semicolon  | Increment, exp_stm -> .exp Semicolon  | -return-, dec -> .dec_specifier init_dec_list Semicolon  | while, stm -> .selection_stm  | -short-, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, stm -> .jump_stm  | -fixed2-, stm -> .compound_stm  | -return-, type_qualifier -> .-uniform-  | -int-, unary_exp -> .Decrement unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | Minus, compound_stm -> .LBrace RBrace  | -struct-, selection_stm -> .if LParen exp RParen stm else stm  | break, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -do-, exp_stm -> .exp Semicolon  | Minus, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, stm -> .selection_stm  | -continue-, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, dec -> .dec_specifier init_dec_list Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | -return-, jump_stm -> .-continue-  | Number, stm -> .jump_stm  | -fixed4-, unary_exp -> .unary_op unary_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | -struct-, block_item -> .dec  | String, primary_exp -> .LParen exp RParen  | VerticalBar, jump_stm -> .break  | break, compound_stm -> .LBrace RBrace  | -double-, postfix_exp -> .postfix_exp Decrement  | OR, compound_stm -> .LBrace block_item_list RBrace  | -half3-, block_item -> .dec  | RBrace, stm -> .jump_stm  | -sampler2D-, block_item -> .dec  | Number, stm -> .compound_stm  | -uniform-, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, compound_stm -> LBrace .block_item_list RBrace  | Increment, compound_stm -> LBrace .RBrace  | Decrement, primary_exp -> .ID  | Plus, stm -> .exp_stm  | -half2-, primary_exp -> .ID  | GT, selection_stm -> .if LParen exp RParen stm else stm  | -long-, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | break, dec -> .dec_specifier init_dec_list Semicolon  | -half2-, stm -> .compound_stm  | -half3-, dec -> .struct_specifier Semicolon  | -float3-, jump_stm -> .-continue-  | if, jump_stm -> .-goto- ID  | -return-, compound_stm -> .LBrace block_item_list RBrace  | Decrement, unary_op -> .Minus  | LParen, jump_stm -> .-goto- ID  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -goto-, block_item -> .stm  | -uniform-, block_item_list -> .block_item  | Tilde, primary_exp -> .Number  | Question, jump_stm -> .-goto- ID  | -long-, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, jump_stm -> .-continue-  | -struct-, jump_stm -> .-return- exp Semicolon  | -int-, block_item_list -> .block_item_list block_item  | NOT, stm -> .iteration_stm  | -half2-, primary_exp -> .Number  | LBrack, stm -> .exp_stm  | -long-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, iteration_stm -> .while LParen exp RParen stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Comma, exp_stm -> .Semicolon  | -int-, dec -> .struct_specifier Semicolon  | ID, exp_stm -> .Semicolon  | -short-, struct_specifier -> .-struct- ID LBrace struct_dec_list RBrace  | Semicolon, jump_stm -> .-goto- ID  | -fixed2-, stm -> .exp_stm  | Tilde, exp_stm -> .exp Semicolon  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | String, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, selection_stm -> .if LParen exp RParen stm  | -void-, stm -> .exp_stm  | -do-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Tilde, stm -> .exp_stm  | while, postfix_exp -> .postfix_exp Increment  | Question, type_qualifier -> .-uniform-  | -fixed4-, primary_exp -> .ID  | VerticalBar, block_item_list -> .block_item  | Plus, compound_stm -> .LBrace block_item_list RBrace  | Plus, iteration_stm -> .while LParen exp RParen stm  | -do-, dec -> .dec_specifier init_dec_list Semicolon  | -void-, primary_exp -> .LParen exp RParen  | EQ, compound_stm -> LBrace .RBrace  | -continue-, block_item -> .stm  | String, postfix_exp -> .postfix_exp LParen RParen  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | Plus, postfix_exp -> .primary_exp  | Times, jump_stm -> .-goto- ID  | if, block_item -> .stm  | -continue-, block_item -> .dec  | -long-, jump_stm -> .-continue-  | break, dec -> .struct_specifier Semicolon  | -short-, block_item -> .stm  | if, stm -> .jump_stm  | -int-, type_specifier -> .typedef_name  | ID, dec -> .struct_specifier Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm  | -sampler2D-, selection_stm -> .if LParen exp RParen stm else stm  | -float4-, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp Decrement  | NEQ, dec -> .struct_specifier Semicolon  | -uniform-, dec -> .dec_specifier init_dec_list Semicolon  | NOT, selection_stm -> .if LParen exp RParen stm else stm  | -short-, primary_exp -> .ID  | LeftShift, selection_stm -> .if LParen exp RParen stm  | -float2-, jump_stm -> .-return- exp Semicolon  | -double-, primary_exp -> .LParen exp RParen  | GT, jump_stm -> .break  | -fixed3-, jump_stm -> .-goto- ID  | while, type_specifier -> .-short-  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | NEQ, stm -> .jump_stm  | -do-, postfix_exp -> .postfix_exp Decrement  | Plus, exp_stm -> .exp Semicolon  | -half4-, block_item_list -> .block_item  | -fixed4-, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, primary_exp -> .Number  | OR, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -half3-, compound_stm -> LBrace .block_item_list RBrace  | Semicolon, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, jump_stm -> .-goto- ID  | String, stm -> .exp_stm  | if, exp_stm -> .Semicolon  | for, block_item_list -> .block_item  | -fixed3-, postfix_exp -> .postfix_exp Increment  | LT, selection_stm -> .if LParen exp RParen stm  | RBrace, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, block_item_list -> .block_item  | -short-, exp_stm -> .Semicolon  | -void-, dec -> .dec_specifier init_dec_list Semicolon  | LBrace, block_item_list -> .block_item  | for, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp Increment  | NEQ, dec -> .dec_specifier init_dec_list Semicolon  | Decrement, stm -> .selection_stm  | -void-, stm -> .selection_stm  | -half2-, compound_stm -> LBrace .RBrace  | for, stm -> .exp_stm  | -struct-, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, stm -> .iteration_stm  | Semicolon, postfix_exp -> .primary_exp  | Increment, primary_exp -> .LParen exp RParen  | Percent, dec -> .dec_specifier init_dec_list Semicolon  | -continue-, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, jump_stm -> .-return- exp Semicolon  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | Semicolon, primary_exp -> .ID  | GE, unary_op -> .Plus  | Plus, stm -> .exp_stm  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | -sampler2D-, block_item_list -> .block_item_list block_item  | -double-, exp_stm -> .Semicolon  | -float-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, dec -> .struct_specifier Semicolon  | LParen, jump_stm -> .-goto- ID  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | String, stm -> .jump_stm  | LBrace, primary_exp -> .ID  | Assign, stm -> .iteration_stm  | -half4-, stm -> .compound_stm  | -half2-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed4-, dec -> .dec_specifier init_dec_list Semicolon  | Plus, type_specifier -> .-half2-  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, stm -> .compound_stm  | String, dec -> .dec_specifier init_dec_list Semicolon  | if, jump_stm -> .break  | Number, postfix_exp -> .postfix_exp LParen RParen  | LE, type_specifier -> .-fixed2-  | ID, jump_stm -> .break  | -float3-, jump_stm -> .-goto- ID  | -fixed4-, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, stm -> .jump_stm  | NOT, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, type_qualifier -> .-uniform-  | -sampler2D-, exp_stm -> .Semicolon  | -float4-, binary_exp -> .binary_exp binary_op unary_exp  | LE, block_item -> .dec  | -fixed3-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed2-, stm -> .selection_stm  | Increment, binary_exp -> .unary_exp  | VerticalBar, block_item -> .dec  | -return-, binary_exp -> .unary_exp  | NEQ, primary_exp -> .LParen exp RParen  | Minus, compound_stm -> .LBrace RBrace  | Number, block_item_list -> .block_item  | -fixed2-, dec -> .struct_specifier Semicolon  | -sampler2D-, primary_exp -> .Number  | Plus, dec -> .struct_specifier Semicolon  | Minus, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, compound_stm -> LBrace .RBrace  | -do-, stm -> .jump_stm  | -half3-, exp_stm -> .exp Semicolon  | -fixed3-, jump_stm -> .-goto- ID  | -double-, postfix_exp -> .postfix_exp LParen RParen  | Question, jump_stm -> .-return- exp Semicolon  | Semicolon, selection_stm -> .if LParen exp RParen stm  | Decrement, unary_exp -> .postfix_exp  | LE, compound_stm -> LBrace .RBrace  | -half4-, exp_stm -> .exp Semicolon  | -short-, primary_exp -> .String  | Assign, block_item -> .dec  | -struct-, stm -> .exp_stm  | for, exp_stm -> .Semicolon  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | String, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, stm -> .selection_stm  | -half4-, primary_exp -> .LParen exp RParen  | Semicolon, compound_stm -> LBrace .RBrace  | -fixed3-, selection_stm -> .if LParen exp RParen stm else stm  | if, stm -> .iteration_stm  | -uniform-, unary_exp -> .unary_op unary_exp  | GT, compound_stm -> .LBrace block_item_list RBrace  | NOT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, stm -> .exp_stm  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, block_item -> .dec  | break, primary_exp -> .LParen exp RParen  | LParen, compound_stm -> LBrace .block_item_list RBrace  | -half3-, stm -> .jump_stm  | Number, exp_stm -> .exp Semicolon  | RBrace, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half4-, jump_stm -> .break  | String, unary_exp -> .unary_op unary_exp  | AND, stm -> .jump_stm  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Number, postfix_exp -> .primary_exp  | Assign, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -continue-, exp_stm -> .Semicolon  | LBrace, jump_stm -> .-goto- ID  | -short-, stm -> .exp_stm  | -half4-, compound_stm -> .LBrace RBrace  | -fixed2-, compound_stm -> LBrace .block_item_list RBrace  | -continue-, unary_exp -> .unary_op unary_exp  | Percent, exp_stm -> .exp Semicolon  | if, dec -> .struct_specifier Semicolon  | while, stm -> .exp_stm  | Increment, block_item -> .dec  | -char-, postfix_exp -> .postfix_exp LParen RParen  | Increment, stm -> .compound_stm  | ID, selection_stm -> .if LParen exp RParen stm  | while, block_item -> .dec  | -double-, block_item_list -> .block_item_list block_item  | -return-, iteration_stm -> .while LParen exp RParen stm  | -continue-, block_item -> .dec  | -fixed4-, postfix_exp -> .primary_exp  | LBrack, dec -> .struct_specifier Semicolon  | -half2-, jump_stm -> .break  | -int-, exp_stm -> .Semicolon  | -goto-, iteration_stm -> .while LParen exp RParen stm  | -float2-, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, unary_exp -> .Decrement unary_exp  | OR, block_item_list -> .block_item  | -struct-, jump_stm -> .-return- exp Semicolon  | -void-, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, dec -> .dec_specifier init_dec_list Semicolon  | String, selection_stm -> .if LParen exp RParen stm  | -goto-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, jump_stm -> .-continue-  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -float3-, primary_exp -> .ID  | Divide, selection_stm -> .if LParen exp RParen stm else stm  | -uniform-, stm -> .compound_stm  | Decrement, type_qualifier -> .-uniform-  | -float2-, jump_stm -> .-goto- ID  | ID, stm -> .exp_stm  | -fixed3-, postfix_exp -> .postfix_exp Dot ID  | EQ, unary_exp -> .unary_op unary_exp  | Comma, jump_stm -> .-return- exp Semicolon  | -float-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Semicolon, binary_exp -> .unary_exp  | GE, compound_stm -> .LBrace block_item_list RBrace  | -goto-, iteration_stm -> .while LParen exp RParen stm  | break, stm -> .selection_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -int-, stm -> .compound_stm  | for, dec -> .dec_specifier init_dec_list Semicolon  | -return-, stm -> .jump_stm  | if, jump_stm -> .-goto- ID  | -float2-, stm -> .selection_stm  | Tilde, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, stm -> .compound_stm  | -long-, assignment_exp -> .conditional_exp  | Comma, jump_stm -> .-goto- ID  | Increment, postfix_exp -> .postfix_exp Dot ID  | Assign, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half2-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LBrace, jump_stm -> .-continue-  | -void-, stm -> .iteration_stm  | -half3-, primary_exp -> .String  | Decrement, exp_stm -> .Semicolon  | Tilde, block_item_list -> .block_item  | -half4-, selection_stm -> .if LParen exp RParen stm else stm  | Semicolon, stm -> .iteration_stm  | while, stm -> .selection_stm  | LBrace, postfix_exp -> .postfix_exp LParen RParen  | Assign, compound_stm -> .LBrace RBrace  | -half3-, jump_stm -> .break  | -half4-, stm -> .jump_stm  | break, stm -> .iteration_stm  | -float-, exp_stm -> .Semicolon  | -float3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Number, stm -> .compound_stm  | -continue-, stm -> .exp_stm  | Plus, postfix_exp -> .postfix_exp Decrement  | Minus, stm -> .selection_stm  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, stm -> .iteration_stm  | ID, stm -> .compound_stm  | Plus, unary_exp -> .Increment unary_exp  | LeftShift, block_item_list -> .block_item_list block_item  | String, primary_exp -> .Number  | EQ, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Increment, exp_stm -> .exp Semicolon  | -long-, compound_stm -> .LBrace RBrace  | String, selection_stm -> .if LParen exp RParen stm  | Increment, block_item_list -> .block_item  | -char-, exp_stm -> .Semicolon  | Increment, dec -> .dec_specifier init_dec_list Semicolon  | -goto-, primary_exp -> .String  | LeftShift, block_item -> .dec  | -int-, jump_stm -> .-continue-  | -fixed3-, postfix_exp -> .postfix_exp LParen RParen  | GE, postfix_exp -> .primary_exp  | OR, iteration_stm -> .while LParen exp RParen stm  | RBrace, unary_exp -> .postfix_exp  | RightShift, compound_stm -> .LBrace block_item_list RBrace  | -fixed4-, block_item_list -> .block_item  | -continue-, block_item_list -> .block_item  | -double-, unary_op -> .Tilde  | Decrement, compound_stm -> LBrace .block_item_list RBrace  | ID, jump_stm -> .-continue-  | -return-, iteration_stm -> .while LParen exp RParen stm  | Plus, block_item_list -> .block_item  | -return-, postfix_exp -> .postfix_exp Dot ID  | Minus, stm -> .selection_stm  | Plus, compound_stm -> .LBrace RBrace  | NOT, exp_stm -> .Semicolon  | Decrement, type_specifier -> .-char-  | ID, block_item_list -> .block_item_list block_item  | -uniform-, exp_stm -> .Semicolon  | -float2-, dec -> .dec_specifier init_dec_list Semicolon  | -half4-, iteration_stm -> .while LParen exp RParen stm  | Number, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, exp_stm -> .exp Semicolon  | Decrement, block_item -> .dec  | -half3-, dec -> .dec_specifier init_dec_list Semicolon  | -float2-, dec -> .struct_specifier Semicolon  | -float4-, stm -> .jump_stm  | -half2-, selection_stm -> .if LParen exp RParen stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Percent, jump_stm -> .break  | ID, jump_stm -> .-goto- ID  | Semicolon, block_item -> .stm  | -half2-, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, jump_stm -> .break  | Increment, stm -> .iteration_stm  | Tilde, block_item_list -> .block_item  | Number, compound_stm -> .LBrace block_item_list RBrace  | LBrace, postfix_exp -> .postfix_exp Increment  | Semicolon, jump_stm -> .break  | -sampler2D-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, block_item_list -> .block_item  | -float-, type_specifier -> .-double-  | ID, exp_stm -> .exp Semicolon  | -double-, stm -> .selection_stm  | -sampler2D-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -long-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LParen, compound_stm -> .LBrace RBrace  | -half2-, jump_stm -> .-goto- ID  | -do-, exp_stm -> .exp Semicolon  | -float-, stm -> .jump_stm  | -float-, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, dec -> .dec_specifier init_dec_list Semicolon  | -fixed2-, unary_op -> .Minus  | Decrement, selection_stm -> .if LParen exp RParen stm  | Plus, jump_stm -> .-return- exp Semicolon  | -fixed4-, compound_stm -> LBrace .RBrace  | -double-, exp_stm -> .exp Semicolon  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | LT, dec -> .dec_specifier init_dec_list Semicolon  | -double-, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, jump_stm -> .-continue-  | -fixed2-, stm -> .compound_stm  | LBrace, selection_stm -> .if LParen exp RParen stm  | -short-, block_item -> .stm  | -fixed4-, exp_stm -> .exp Semicolon  | LBrace, jump_stm -> .-continue-  | -short-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, block_item_list -> .block_item_list block_item  | break, binary_exp -> .binary_exp binary_op unary_exp  | EQ, exp_stm -> .exp Semicolon  | for, compound_stm -> LBrace .RBrace  | NOT, postfix_exp -> .primary_exp  | Percent, primary_exp -> .String  | Comma, stm -> .iteration_stm  | -fixed2-, compound_stm -> LBrace .RBrace  | break, binary_exp -> .binary_exp binary_op unary_exp  | Question, exp_stm -> .Semicolon  | -char-, block_item -> .stm  | ID, jump_stm -> .-return- exp Semicolon  | LBrace, block_item_list -> .block_item  | -sampler2D-, unary_exp -> .Increment unary_exp  | Percent, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, jump_stm -> .-return- exp Semicolon  | Increment, jump_stm -> .break  | -struct-, binary_exp -> .unary_exp  | RightShift, block_item_list -> .block_item_list block_item  | Tilde, compound_stm -> LBrace .RBrace  | -float3-, primary_exp -> .ID  | Minus, type_qualifier -> .-uniform-  | -short-, selection_stm -> .if LParen exp RParen stm  | -continue-, type_qualifier -> .-uniform-  | ID, selection_stm -> .if LParen exp RParen stm else stm  | -half4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, unary_op -> .Plus  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -sampler2D-, selection_stm -> .if LParen exp RParen stm  | -half2-, block_item_list -> .block_item_list block_item  | -half3-, jump_stm -> .break  | NOT, compound_stm -> LBrace .RBrace  | -fixed2-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, unary_exp -> .postfix_exp  | AND, selection_stm -> .if LParen exp RParen stm  | break, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, type_qualifier -> .-uniform-  | -double-, block_item_list -> .block_item_list block_item  | -float-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, stm -> .selection_stm  | -char-, compound_stm -> .LBrace block_item_list RBrace  | ID, stm -> .iteration_stm  | for, stm -> .exp_stm  | String, jump_stm -> .break  | -double-, postfix_exp -> .postfix_exp LParen RParen  | OR, exp_stm -> .exp Semicolon  | -void-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | RBrace, block_item -> .stm  | Increment, stm -> .compound_stm  | -double-, compound_stm -> .LBrace RBrace  | -continue-, jump_stm -> .-goto- ID  | Tilde, postfix_exp -> .postfix_exp Increment  | RightShift, stm -> .exp_stm  | -short-, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .primary_exp  | Caret, compound_stm -> .LBrace block_item_list RBrace  | break, selection_stm -> .if LParen exp RParen stm  | -float3-, postfix_exp -> .postfix_exp Increment  | Caret, type_specifier -> .-half3-  | ID, jump_stm -> .-goto- ID  | Number, postfix_exp -> .primary_exp  | Decrement, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -continue-, dec -> .dec_specifier init_dec_list Semicolon  | Tilde, jump_stm -> .-goto- ID  | Decrement, postfix_exp -> .primary_exp  | Ampersand, block_item_list -> .block_item_list block_item  | -short-, jump_stm -> .-goto- ID  | -uniform-, compound_stm -> .LBrace RBrace  | -uniform-, dec -> .struct_specifier Semicolon  | if, iteration_stm -> .while LParen exp RParen stm  | Decrement, compound_stm -> .LBrace block_item_list RBrace  | -long-, selection_stm -> .if LParen exp RParen stm  | -return-, jump_stm -> .-return- exp Semicolon  | -uniform-, exp_stm -> .Semicolon  | -return-, selection_stm -> .if LParen exp RParen stm  | LBrace, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, jump_stm -> .-continue-  | LParen, stm -> .iteration_stm  | -goto-, stm -> .compound_stm  | while, stm -> .exp_stm  | -sampler2D-, block_item -> .stm  | -do-, postfix_exp -> .postfix_exp LParen RParen  | LT, compound_stm -> .LBrace RBrace  | -int-, binary_exp -> .unary_exp  | Caret, primary_exp -> .LParen exp RParen  | Assign, dec -> .struct_specifier Semicolon  | NOT, dec -> .dec_specifier init_dec_list Semicolon  | -uniform-, compound_stm -> LBrace .RBrace  | Plus, jump_stm -> .-continue-  | LBrace, dec -> .struct_specifier Semicolon  | -struct-, jump_stm -> .-return- exp Semicolon  | break, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, stm -> .exp_stm  | Number, unary_exp -> .Increment unary_exp  | Caret, postfix_exp -> .postfix_exp Dot ID  | LBrack, block_item_list -> .block_item  | -float2-, block_item -> .dec  | Minus, block_item -> .dec  | -short-, primary_exp -> .String  | AND, unary_exp -> .unary_op unary_exp  | Divide, block_item_list -> .block_item_list block_item  | -do-, dec_specifier -> .type_qualifier type_specifier  | ID, unary_exp -> .unary_op unary_exp  | Caret, stm -> .compound_stm  | -int-, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, compound_stm -> LBrace .RBrace  | -half2-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -goto-, exp_stm -> .exp Semicolon  | break, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, iteration_stm -> .while LParen exp RParen stm  | -fixed2-, stm -> .selection_stm  | -float-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -do-, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Plus, jump_stm -> .break  | -half2-, jump_stm -> .-continue-  | -long-, block_item -> .dec  | -half4-, compound_stm -> .LBrace block_item_list RBrace  | -float2-, stm -> .compound_stm  | -fixed3-, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -sampler2D-, block_item -> .stm  | -fixed3-, jump_stm -> .-return- exp Semicolon  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -short-, stm -> .exp_stm  | break, stm -> .compound_stm  | Number, block_item_list -> .block_item_list block_item  | -sampler2D-, stm -> .compound_stm  | LParen, iteration_stm -> .while LParen exp RParen stm  | -half2-, compound_stm -> LBrace .RBrace  | -uniform-, compound_stm -> .LBrace RBrace  | -short-, unary_exp -> .Decrement unary_exp  | Percent, stm -> .selection_stm  | break, dec -> .dec_specifier init_dec_list Semicolon  | -float-, block_item -> .dec  | -half2-, binary_exp -> .binary_exp binary_op unary_exp  | AND, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Decrement, stm -> .iteration_stm  | if, type_specifier -> .-void-  | ID, block_item_list -> .block_item_list block_item  | Increment, dec -> .dec_specifier init_dec_list Semicolon  | Increment, compound_stm -> LBrace .RBrace  | ID, selection_stm -> .if LParen exp RParen stm else stm  | -continue-, block_item -> .dec  | Plus, compound_stm -> .LBrace RBrace  | -half4-, dec -> .struct_specifier Semicolon  | -goto-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float2-, stm -> .jump_stm  | RBrace, jump_stm -> .-goto- ID  | -half4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, stm -> .selection_stm  | -float3-, postfix_exp -> .postfix_exp LParen RParen  | Divide, exp_stm -> .exp Semicolon  | while, stm -> .jump_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half2-, primary_exp -> .ID  | Comma, unary_exp -> .Increment unary_exp  | Assign, compound_stm -> .LBrace RBrace  | LBrace, postfix_exp -> .postfix_exp Increment  | Assign, jump_stm -> .break  | Tilde, block_item -> .dec  | -do-, type_specifier -> .-float3-  | ID, compound_stm -> LBrace .block_item_list RBrace  | -char-, jump_stm -> .-continue-  | -half3-, block_item_list -> .block_item  | Minus, primary_exp -> .Number  | Minus, stm -> .iteration_stm  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -half4-, stm -> .jump_stm  | LParen, jump_stm -> .-goto- ID  | for, stm -> .iteration_stm  | Decrement, block_item_list -> .block_item_list block_item  | -float4-, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, selection_stm -> .if LParen exp RParen stm else stm  | -struct-, stm -> .exp_stm  | -goto-, block_item_list -> .block_item  | -goto-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | ID, unary_exp -> .Increment unary_exp  | VerticalBar, dec -> .struct_specifier Semicolon  | -return-, block_item -> .stm  | -short-, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, stm -> .selection_stm  | String, postfix_exp -> .postfix_exp LParen RParen  | Caret, primary_exp -> .ID  | AND, postfix_exp -> .postfix_exp LParen RParen  | Dot, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | String, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, exp_stm -> .Semicolon  | NOT, jump_stm -> .-goto- ID  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | Tilde, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, block_item_list -> .block_item_list block_item  | ID, selection_stm -> .if LParen exp RParen stm  | -fixed3-, dec -> .dec_specifier init_dec_list Semicolon  | -float4-, dec -> .dec_specifier init_dec_list Semicolon  | -float3-, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Decrement  | LBrack, primary_exp -> .ID  | Ampersand, compound_stm -> LBrace .block_item_list RBrace  | -return-, stm -> .exp_stm  | RBrace, unary_exp -> .Increment unary_exp  | Semicolon, block_item_list -> .block_item_list block_item  | -continue-, block_item -> .dec  | -fixed2-, compound_stm -> .LBrace RBrace  | RBrace, primary_exp -> .LParen exp RParen  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, stm -> .selection_stm  | -long-, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, block_item_list -> .block_item  | -do-, unary_op -> .NOT  | NOT, unary_op -> .NOT  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -goto-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | ID, binary_exp -> .binary_exp binary_op unary_exp  | GT, jump_stm -> .-goto- ID  | -continue-, stm -> .selection_stm  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Assign, stm -> .iteration_stm  | RBrace, stm -> .iteration_stm  | -struct-, dec -> .dec_specifier init_dec_list Semicolon  | break, jump_stm -> .break  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | RBrace, exp_stm -> .exp Semicolon  | -float2-, compound_stm -> LBrace .block_item_list RBrace  | Plus, iteration_stm -> .while LParen exp RParen stm  | -float4-, exp_stm -> .Semicolon  | -half3-, dec -> .struct_specifier Semicolon  | Increment, unary_exp -> .Decrement unary_exp  | Plus, primary_exp -> .LParen exp RParen  | Plus, type_specifier -> .-sampler2D-  | ID, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, compound_stm -> .LBrace RBrace  | -float-, unary_exp -> .unary_op unary_exp  | LeftShift, block_item_list -> .block_item  | -float3-, dec -> .dec_specifier init_dec_list Semicolon  | -do-, compound_stm -> LBrace .RBrace  | -void-, block_item_list -> .block_item  | Semicolon, block_item -> .stm  | -long-, exp_stm -> .exp Semicolon  | NOT, stm -> .iteration_stm  | -sampler2D-, jump_stm -> .-goto- ID  | NOT, jump_stm -> .-continue-  | Decrement, unary_exp -> .postfix_exp  | Plus, type_specifier -> .-float4-  | ID, unary_op -> .Plus  | Tilde, compound_stm -> .LBrace RBrace  | Minus, iteration_stm -> .while LParen exp RParen stm  | -char-, iteration_stm -> .while LParen exp RParen stm  | ID, unary_exp -> .Increment unary_exp  | LE, compound_stm -> LBrace .block_item_list RBrace  | -half4-, stm -> .exp_stm  | -fixed2-, jump_stm -> .-goto- ID  | -char-, jump_stm -> .-return- exp Semicolon  | -char-, stm -> .iteration_stm  | -return-, jump_stm -> .-return- exp Semicolon  | for, dec -> .struct_specifier Semicolon  | -void-, block_item -> .stm  | -void-, primary_exp -> .LParen exp RParen  | Decrement, stm -> .compound_stm  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | -struct-, unary_exp -> .postfix_exp  | Divide, jump_stm -> .-return- exp Semicolon  | -sampler2D-, block_item_list -> .block_item_list block_item  | -float3-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, jump_stm -> .break  | -float2-, primary_exp -> .Number  | LParen, compound_stm -> LBrace .RBrace  | LParen, jump_stm -> .break  | -half3-, typedef_name -> .ID  | ID, compound_stm -> LBrace .block_item_list RBrace  | String, selection_stm -> .if LParen exp RParen stm  | -char-, stm -> .jump_stm  | -fixed3-, postfix_exp -> .postfix_exp Decrement  | LParen, stm -> .compound_stm  | Minus, type_qualifier -> .-uniform-  | -float3-, stm -> .iteration_stm  | LParen, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -void-, block_item -> .stm  | RBrace, unary_exp -> .postfix_exp  | LeftShift, )
102 <- (65, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, primary_exp -> LParen .exp RParen  | Dot, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, primary_exp -> LParen .exp RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, postfix_exp -> .postfix_exp LParen RParen  | RParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .Increment unary_exp  | Ampersand, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, postfix_exp -> .primary_exp  | RParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, primary_exp -> LParen .exp RParen  | Decrement, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, conditional_exp -> .binary_exp  | Comma, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> LParen .exp RParen  | GT, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, primary_exp -> LParen .exp RParen  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, binary_exp -> .unary_exp  | LE, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .String  | Question, primary_exp -> LParen .exp RParen  | Percent, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> LParen .exp RParen  | GE, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, primary_exp -> LParen .exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, exp -> .assignment_exp  | RParen, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> LParen .exp RParen  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, unary_exp -> .Decrement unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, primary_exp -> LParen .exp RParen  | Assign, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, primary_exp -> LParen .exp RParen  | Ampersand, primary_exp -> LParen .exp RParen  | Plus, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen RParen  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, primary_exp -> .Number  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> LParen .exp RParen  | LE, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, primary_exp -> LParen .exp RParen  | Semicolon, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, primary_exp -> LParen .exp RParen  | Increment, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Divide, unary_op -> .Minus  | String, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .binary_exp binary_op unary_exp  | Percent, primary_exp -> LParen .exp RParen  | Divide, postfix_exp -> .primary_exp  | Ampersand, unary_exp -> .unary_op unary_exp  | Ampersand, unary_op -> .Minus  | Number, primary_exp -> .Number  | Percent, assignment_exp -> .conditional_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, primary_exp -> LParen .exp RParen  | Comma, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, primary_exp -> .LParen exp RParen  | GE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, primary_exp -> LParen .exp RParen  | Minus, exp -> .exp Comma assignment_exp  | RParen, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_op -> .NOT  | Number, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, primary_exp -> LParen .exp RParen  | NEQ, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, primary_exp -> LParen .exp RParen  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, primary_exp -> LParen .exp RParen  | OR, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> LParen .exp RParen  | LeftShift, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, postfix_exp -> .postfix_exp Increment  | Percent, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, unary_op -> .Minus  | Tilde, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, binary_exp -> .binary_exp binary_op unary_exp  | RParen, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, primary_exp -> LParen .exp RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .postfix_exp  | RParen, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, primary_exp -> LParen .exp RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, primary_exp -> LParen .exp RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, binary_exp -> .unary_exp  | LT, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> LParen .exp RParen  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, primary_exp -> LParen .exp RParen  | VerticalBar, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .postfix_exp  | Comma, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, primary_exp -> .Number  | GE, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
103 <- (65, 'Minus') (unary_op -> Minus.  | Tilde, unary_op -> Minus.  | ID, unary_op -> Minus.  | LParen, unary_op -> Minus.  | String, unary_op -> Minus.  | Plus, unary_op -> Minus.  | Minus, unary_op -> Minus.  | Decrement, unary_op -> Minus.  | NOT, unary_op -> Minus.  | Increment, unary_op -> Minus.  | Number, )
104 <- (65, 'NOT') (unary_op -> NOT.  | Decrement, unary_op -> NOT.  | LParen, unary_op -> NOT.  | Tilde, unary_op -> NOT.  | Number, unary_op -> NOT.  | NOT, unary_op -> NOT.  | Plus, unary_op -> NOT.  | Increment, unary_op -> NOT.  | String, unary_op -> NOT.  | Minus, unary_op -> NOT.  | ID, )
105 <- (65, 'Number') (primary_exp -> Number.  | Semicolon, primary_exp -> Number.  | Increment, primary_exp -> Number.  | Question, primary_exp -> Number.  | Divide, primary_exp -> Number.  | Ampersand, primary_exp -> Number.  | Plus, primary_exp -> Number.  | Times, primary_exp -> Number.  | LE, primary_exp -> Number.  | Decrement, primary_exp -> Number.  | Caret, primary_exp -> Number.  | Percent, primary_exp -> Number.  | VerticalBar, primary_exp -> Number.  | LParen, primary_exp -> Number.  | Comma, primary_exp -> Number.  | GT, primary_exp -> Number.  | AND, primary_exp -> Number.  | GE, primary_exp -> Number.  | OR, primary_exp -> Number.  | LBrack, primary_exp -> Number.  | RightShift, primary_exp -> Number.  | Dot, primary_exp -> Number.  | LT, primary_exp -> Number.  | LeftShift, primary_exp -> Number.  | Assign, primary_exp -> Number.  | NEQ, primary_exp -> Number.  | Minus, primary_exp -> Number.  | EQ, )
106 <- (65, 'Plus') (unary_op -> Plus.  | ID, unary_op -> Plus.  | Plus, unary_op -> Plus.  | Increment, unary_op -> Plus.  | Decrement, unary_op -> Plus.  | Number, unary_op -> Plus.  | Tilde, unary_op -> Plus.  | String, unary_op -> Plus.  | NOT, unary_op -> Plus.  | Minus, unary_op -> Plus.  | LParen, )
107 <- (65, 'RBrace') (compound_stm -> LBrace RBrace.  | -half3-, compound_stm -> LBrace RBrace.  | Pound, compound_stm -> LBrace RBrace.  | -void-, compound_stm -> LBrace RBrace.  | -uniform-, compound_stm -> LBrace RBrace.  | -int-, compound_stm -> LBrace RBrace.  | -fixed3-, compound_stm -> LBrace RBrace.  | -float4-, compound_stm -> LBrace RBrace.  | -sampler2D-, compound_stm -> LBrace RBrace.  | -float3-, compound_stm -> LBrace RBrace.  | ID, compound_stm -> LBrace RBrace.  | -half2-, compound_stm -> LBrace RBrace.  | -long-, compound_stm -> LBrace RBrace.  | -float-, compound_stm -> LBrace RBrace.  | -struct-, compound_stm -> LBrace RBrace.  | -char-, compound_stm -> LBrace RBrace.  | -fixed4-, compound_stm -> LBrace RBrace.  | -ENDCG-, compound_stm -> LBrace RBrace.  | -double-, compound_stm -> LBrace RBrace.  | -short-, compound_stm -> LBrace RBrace.  | -float2-, compound_stm -> LBrace RBrace.  | -fixed2-, compound_stm -> LBrace RBrace.  | -half4-, )
108 <- (65, 'Semicolon') (exp_stm -> Semicolon.  | Decrement, exp_stm -> Semicolon.  | String, exp_stm -> Semicolon.  | -goto-, exp_stm -> Semicolon.  | -double-, exp_stm -> Semicolon.  | -do-, exp_stm -> Semicolon.  | -short-, exp_stm -> Semicolon.  | break, exp_stm -> Semicolon.  | -float4-, exp_stm -> Semicolon.  | -fixed4-, exp_stm -> Semicolon.  | for, exp_stm -> Semicolon.  | if, exp_stm -> Semicolon.  | -struct-, exp_stm -> Semicolon.  | Minus, exp_stm -> Semicolon.  | RBrace, exp_stm -> Semicolon.  | -uniform-, exp_stm -> Semicolon.  | LBrace, exp_stm -> Semicolon.  | -return-, exp_stm -> Semicolon.  | -fixed2-, exp_stm -> Semicolon.  | -float-, exp_stm -> Semicolon.  | while, exp_stm -> Semicolon.  | ID, exp_stm -> Semicolon.  | -float3-, exp_stm -> Semicolon.  | -char-, exp_stm -> Semicolon.  | Number, exp_stm -> Semicolon.  | -int-, exp_stm -> Semicolon.  | NOT, exp_stm -> Semicolon.  | -half4-, exp_stm -> Semicolon.  | -continue-, exp_stm -> Semicolon.  | -void-, exp_stm -> Semicolon.  | Semicolon, exp_stm -> Semicolon.  | LParen, exp_stm -> Semicolon.  | -float2-, exp_stm -> Semicolon.  | -half2-, exp_stm -> Semicolon.  | Plus, exp_stm -> Semicolon.  | -long-, exp_stm -> Semicolon.  | -half3-, exp_stm -> Semicolon.  | -fixed3-, exp_stm -> Semicolon.  | -sampler2D-, exp_stm -> Semicolon.  | Tilde, exp_stm -> Semicolon.  | Increment, )
109 <- (65, 'String') (primary_exp -> String.  | Ampersand, primary_exp -> String.  | Plus, primary_exp -> String.  | AND, primary_exp -> String.  | Comma, primary_exp -> String.  | LeftShift, primary_exp -> String.  | Dot, primary_exp -> String.  | LE, primary_exp -> String.  | EQ, primary_exp -> String.  | RightShift, primary_exp -> String.  | Increment, primary_exp -> String.  | LParen, primary_exp -> String.  | VerticalBar, primary_exp -> String.  | Minus, primary_exp -> String.  | Question, primary_exp -> String.  | Semicolon, primary_exp -> String.  | GE, primary_exp -> String.  | GT, primary_exp -> String.  | OR, primary_exp -> String.  | Divide, primary_exp -> String.  | Caret, primary_exp -> String.  | NEQ, primary_exp -> String.  | LBrack, primary_exp -> String.  | Percent, primary_exp -> String.  | Assign, primary_exp -> String.  | LT, primary_exp -> String.  | Times, primary_exp -> String.  | Decrement, )
110 <- (65, 'Tilde') (unary_op -> Tilde.  | Decrement, unary_op -> Tilde.  | Number, unary_op -> Tilde.  | NOT, unary_op -> Tilde.  | Plus, unary_op -> Tilde.  | Minus, unary_op -> Tilde.  | Tilde, unary_op -> Tilde.  | LParen, unary_op -> Tilde.  | Increment, unary_op -> Tilde.  | ID, unary_op -> Tilde.  | String, )
111 <- (65, 'assignment_exp') (exp -> assignment_exp.  | Semicolon, exp -> assignment_exp.  | Comma, )
112 <- (65, 'binary_exp') (binary_op -> .GE  | LParen, binary_op -> .LE  | ID, binary_op -> .LeftShift  | Increment, binary_op -> .VerticalBar  | Number, binary_op -> .Caret  | LParen, binary_op -> .Times  | String, binary_op -> .Times  | Decrement, binary_op -> .NEQ  | String, binary_op -> .LE  | Plus, binary_op -> .OR  | Increment, binary_op -> .LeftShift  | Decrement, binary_exp -> binary_exp .binary_op unary_exp  | Ampersand, binary_op -> .RightShift  | Increment, binary_op -> .RightShift  | String, binary_op -> .Minus  | Decrement, binary_op -> .Times  | LParen, binary_op -> .Percent  | Increment, binary_op -> .Divide  | Tilde, binary_exp -> binary_exp .binary_op unary_exp  | Comma, binary_exp -> binary_exp .binary_op unary_exp  | Percent, binary_op -> .Minus  | String, binary_exp -> binary_exp .binary_op unary_exp  | GE, binary_op -> .Caret  | ID, binary_op -> .LeftShift  | Number, binary_op -> .EQ  | Plus, binary_op -> .GE  | NOT, binary_op -> .OR  | Tilde, binary_op -> .GT  | Minus, binary_op -> .LT  | Number, binary_op -> .VerticalBar  | Decrement, binary_op -> .VerticalBar  | String, binary_op -> .Caret  | Plus, binary_op -> .VerticalBar  | LParen, binary_exp -> binary_exp .binary_op unary_exp  | Minus, binary_op -> .VerticalBar  | Plus, binary_op -> .GT  | Increment, binary_op -> .Plus  | LParen, binary_op -> .GE  | Minus, binary_op -> .Plus  | ID, binary_op -> .LT  | Decrement, binary_op -> .Ampersand  | NOT, binary_op -> .Times  | Tilde, binary_op -> .Percent  | Tilde, binary_op -> .Plus  | NOT, binary_op -> .GE  | Decrement, binary_exp -> binary_exp .binary_op unary_exp  | Caret, binary_op -> .GT  | NOT, binary_op -> .EQ  | Tilde, binary_op -> .VerticalBar  | Tilde, binary_op -> .Ampersand  | Increment, binary_op -> .LT  | NOT, binary_op -> .VerticalBar  | Minus, binary_op -> .Caret  | String, binary_op -> .Times  | ID, binary_op -> .RightShift  | Minus, binary_op -> .AND  | Number, binary_op -> .LeftShift  | String, binary_op -> .RightShift  | Decrement, binary_op -> .RightShift  | Plus, binary_op -> .NEQ  | ID, binary_op -> .OR  | NOT, binary_op -> .GT  | Plus, binary_op -> .VerticalBar  | Increment, binary_op -> .EQ  | Number, binary_exp -> binary_exp .binary_op unary_exp  | EQ, binary_op -> .Plus  | Minus, binary_op -> .LE  | LParen, binary_op -> .Minus  | Plus, binary_op -> .LeftShift  | Minus, binary_op -> .GE  | Increment, binary_exp -> binary_exp .binary_op unary_exp  | AND, binary_op -> .Divide  | String, binary_op -> .Divide  | Increment, binary_exp -> binary_exp .binary_op unary_exp  | LE, binary_exp -> binary_exp .binary_op unary_exp  | GT, binary_op -> .GT  | Number, binary_op -> .Caret  | Number, binary_op -> .Times  | Plus, binary_op -> .LE  | String, binary_op -> .GT  | LParen, binary_op -> .NEQ  | Increment, binary_op -> .RightShift  | ID, binary_op -> .LeftShift  | NOT, binary_op -> .OR  | Minus, binary_op -> .Caret  | Minus, binary_op -> .Times  | Number, binary_exp -> binary_exp .binary_op unary_exp  | LT, binary_exp -> binary_exp .binary_op unary_exp  | Divide, binary_op -> .AND  | Minus, binary_op -> .Ampersand  | String, binary_op -> .RightShift  | NOT, binary_op -> .Caret  | Tilde, binary_op -> .OR  | Number, conditional_exp -> binary_exp .Question exp Colon conditional_exp  | Comma, binary_op -> .Divide  | Decrement, binary_op -> .EQ  | NOT, binary_op -> .Ampersand  | Plus, binary_op -> .Divide  | Plus, binary_op -> .Percent  | Number, binary_op -> .EQ  | LParen, binary_op -> .Ampersand  | LParen, binary_op -> .Percent  | String, binary_exp -> binary_exp .binary_op unary_exp  | LeftShift, binary_op -> .OR  | Decrement, binary_op -> .LeftShift  | Tilde, binary_op -> .NEQ  | Minus, binary_op -> .LE  | Minus, binary_op -> .Percent  | ID, binary_op -> .RightShift  | LParen, binary_op -> .Minus  | NOT, binary_exp -> binary_exp .binary_op unary_exp  | Question, binary_op -> .LE  | Decrement, binary_op -> .Plus  | String, binary_op -> .GE  | Tilde, binary_op -> .NEQ  | LParen, binary_op -> .Times  | NOT, binary_op -> .LE  | Tilde, binary_op -> .GT  | ID, binary_op -> .Minus  | Increment, binary_op -> .EQ  | ID, binary_op -> .LE  | Number, binary_op -> .NEQ  | Decrement, binary_op -> .Percent  | Decrement, binary_op -> .Ampersand  | ID, binary_op -> .NEQ  | Plus, binary_op -> .Percent  | NOT, binary_exp -> binary_exp .binary_op unary_exp  | OR, binary_op -> .GT  | Decrement, binary_op -> .LE  | NOT, binary_op -> .LT  | String, binary_op -> .EQ  | Minus, binary_op -> .Minus  | Tilde, binary_exp -> binary_exp .binary_op unary_exp  | VerticalBar, binary_exp -> binary_exp .binary_op unary_exp  | Plus, conditional_exp -> binary_exp.  | Semicolon, binary_op -> .GE  | Plus, binary_op -> .NEQ  | NOT, binary_op -> .Divide  | Minus, binary_op -> .LE  | Increment, conditional_exp -> binary_exp .Question exp Colon conditional_exp  | Semicolon, binary_op -> .GT  | String, binary_exp -> binary_exp .binary_op unary_exp  | Times, binary_op -> .Plus  | Increment, binary_op -> .AND  | ID, binary_op -> .EQ  | Increment, binary_op -> .VerticalBar  | ID, binary_op -> .Minus  | Minus, binary_op -> .Divide  | Number, binary_op -> .NEQ  | Number, binary_op -> .Divide  | NOT, binary_op -> .LT  | Tilde, binary_op -> .Plus  | Plus, binary_op -> .LT  | Plus, binary_op -> .AND  | Plus, binary_op -> .Ampersand  | Minus, binary_op -> .Plus  | Number, binary_op -> .Plus  | Decrement, binary_op -> .Ampersand  | Decrement, binary_op -> .Minus  | ID, binary_op -> .LeftShift  | Plus, binary_op -> .AND  | Decrement, binary_op -> .LT  | Increment, binary_op -> .Ampersand  | Number, binary_op -> .OR  | ID, binary_op -> .LeftShift  | LParen, binary_op -> .GE  | Number, binary_op -> .Divide  | ID, binary_op -> .Minus  | LParen, binary_op -> .Percent  | Minus, binary_op -> .OR  | String, binary_op -> .Divide  | LParen, binary_exp -> binary_exp .binary_op unary_exp  | Semicolon, binary_op -> .LT  | LParen, binary_op -> .Caret  | Increment, binary_op -> .GE  | String, binary_op -> .AND  | Increment, binary_op -> .EQ  | String, binary_op -> .Percent  | Plus, binary_op -> .Caret  | Decrement, binary_op -> .AND  | Tilde, binary_op -> .Times  | Minus, binary_op -> .RightShift  | Tilde, binary_op -> .OR  | Plus, binary_op -> .RightShift  | Number, binary_op -> .GT  | Tilde, binary_op -> .EQ  | Decrement, conditional_exp -> binary_exp.  | Comma, binary_op -> .LeftShift  | ID, binary_op -> .AND  | LParen, binary_op -> .LT  | Minus, binary_op -> .Caret  | NOT, binary_op -> .NEQ  | Tilde, binary_op -> .LT  | ID, binary_exp -> binary_exp .binary_op unary_exp  | NEQ, binary_exp -> binary_exp .binary_op unary_exp  | RightShift, binary_op -> .AND  | NOT, binary_op -> .Minus  | Number, binary_op -> .OR  | LParen, binary_op -> .AND  | String, binary_op -> .GE  | ID, binary_op -> .Ampersand  | Tilde, binary_op -> .Percent  | LParen, binary_op -> .Times  | Increment, binary_op -> .Plus  | Tilde, binary_op -> .VerticalBar  | NOT, )
113 <- (65, 'block_item') (block_item_list -> block_item.  | -long-, block_item_list -> block_item.  | -short-, block_item_list -> block_item.  | -void-, block_item_list -> block_item.  | -fixed4-, block_item_list -> block_item.  | NOT, block_item_list -> block_item.  | Decrement, block_item_list -> block_item.  | -do-, block_item_list -> block_item.  | -continue-, block_item_list -> block_item.  | -float-, block_item_list -> block_item.  | -half2-, block_item_list -> block_item.  | -float2-, block_item_list -> block_item.  | if, block_item_list -> block_item.  | Plus, block_item_list -> block_item.  | -sampler2D-, block_item_list -> block_item.  | while, block_item_list -> block_item.  | -uniform-, block_item_list -> block_item.  | String, block_item_list -> block_item.  | -char-, block_item_list -> block_item.  | -half4-, block_item_list -> block_item.  | -float3-, block_item_list -> block_item.  | LParen, block_item_list -> block_item.  | break, block_item_list -> block_item.  | -double-, block_item_list -> block_item.  | Number, block_item_list -> block_item.  | ID, block_item_list -> block_item.  | -half3-, block_item_list -> block_item.  | LBrace, block_item_list -> block_item.  | -goto-, block_item_list -> block_item.  | -fixed3-, block_item_list -> block_item.  | -return-, block_item_list -> block_item.  | Minus, block_item_list -> block_item.  | -float4-, block_item_list -> block_item.  | -int-, block_item_list -> block_item.  | Tilde, block_item_list -> block_item.  | -struct-, block_item_list -> block_item.  | Semicolon, block_item_list -> block_item.  | for, block_item_list -> block_item.  | RBrace, block_item_list -> block_item.  | -fixed2-, block_item_list -> block_item.  | Increment, )
114 <- (65, 'block_item_list') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, iteration_stm -> .while LParen exp RParen stm  | -fixed3-, block_item_list -> block_item_list .block_item  | -void-, compound_stm -> LBrace block_item_list .RBrace  | -float3-, exp_stm -> .Semicolon  | -half2-, stm -> .iteration_stm  | String, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -char-, jump_stm -> .break  | -continue-, exp_stm -> .exp Semicolon  | -float4-, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, stm -> .iteration_stm  | Number, unary_exp -> .postfix_exp  | Ampersand, dec -> .dec_specifier init_dec_list Semicolon  | -fixed3-, compound_stm -> .LBrace RBrace  | -do-, block_item -> .dec  | -sampler2D-, unary_op -> .Minus  | Minus, stm -> .compound_stm  | if, exp_stm -> .Semicolon  | -struct-, exp_stm -> .Semicolon  | Plus, unary_exp -> .Increment unary_exp  | Percent, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -long-, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .unary_op unary_exp  | LT, unary_exp -> .Decrement unary_exp  | Minus, jump_stm -> .-goto- ID  | LParen, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, unary_exp -> .postfix_exp  | GT, compound_stm -> .LBrace RBrace  | ID, jump_stm -> .-goto- ID  | -float4-, postfix_exp -> .postfix_exp LParen RParen  | GT, selection_stm -> .if LParen exp RParen stm else stm  | while, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -struct-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LParen, compound_stm -> .LBrace block_item_list RBrace  | Number, postfix_exp -> .postfix_exp Increment  | OR, exp_stm -> .Semicolon  | -long-, iteration_stm -> .while LParen exp RParen stm  | -fixed4-, block_item -> .dec  | while, unary_op -> .NOT  | Tilde, dec -> .struct_specifier Semicolon  | for, binary_exp -> .unary_exp  | Divide, dec -> .struct_specifier Semicolon  | -continue-, unary_op -> .Tilde  | LParen, selection_stm -> .if LParen exp RParen stm else stm  | -int-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | break, jump_stm -> .break  | Increment, compound_stm -> .LBrace block_item_list RBrace  | Tilde, block_item -> .stm  | -return-, compound_stm -> .LBrace RBrace  | -float2-, exp_stm -> .exp Semicolon  | -do-, unary_op -> .Plus  | ID, selection_stm -> .if LParen exp RParen stm else stm  | RBrace, primary_exp -> .String  | EQ, iteration_stm -> .while LParen exp RParen stm  | -half2-, postfix_exp -> .postfix_exp Dot ID  | Divide, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, block_item -> .stm  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | LBrace, postfix_exp -> .primary_exp  | Semicolon, jump_stm -> .-continue-  | -fixed4-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, dec -> .struct_specifier Semicolon  | -double-, type_qualifier -> .-uniform-  | -fixed3-, selection_stm -> .if LParen exp RParen stm  | -float-, jump_stm -> .-return- exp Semicolon  | while, type_qualifier -> .-uniform-  | -short-, block_item_list -> block_item_list .block_item  | -uniform-, iteration_stm -> .while LParen exp RParen stm  | -sampler2D-, exp_stm -> .exp Semicolon  | -float3-, primary_exp -> .String  | Semicolon, block_item -> .stm  | -sampler2D-, stm -> .jump_stm  | -long-, jump_stm -> .-continue-  | ID, jump_stm -> .-return- exp Semicolon  | -struct-, dec -> .struct_specifier Semicolon  | -float2-, jump_stm -> .break  | Decrement, dec -> .dec_specifier init_dec_list Semicolon  | -int-, unary_exp -> .postfix_exp  | Times, compound_stm -> .LBrace RBrace  | -fixed3-, primary_exp -> .Number  | AND, block_item_list -> block_item_list .block_item  | Semicolon, dec -> .struct_specifier Semicolon  | String, selection_stm -> .if LParen exp RParen stm  | -half2-, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | if, compound_stm -> .LBrace block_item_list RBrace  | for, type_specifier -> .-half4-  | ID, dec -> .dec_specifier init_dec_list Semicolon  | -short-, selection_stm -> .if LParen exp RParen stm  | -int-, exp_stm -> .exp Semicolon  | -struct-, block_item -> .dec  | -float2-, selection_stm -> .if LParen exp RParen stm  | String, type_qualifier -> .-uniform-  | -long-, compound_stm -> .LBrace block_item_list RBrace  | -continue-, type_specifier -> .-float2-  | ID, stm -> .jump_stm  | String, dec -> .struct_specifier Semicolon  | Number, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_exp -> .Increment unary_exp  | Plus, exp_stm -> .Semicolon  | if, exp_stm -> .exp Semicolon  | -continue-, stm -> .iteration_stm  | -void-, postfix_exp -> .primary_exp  | LE, compound_stm -> .LBrace block_item_list RBrace  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -float-, block_item -> .dec  | -uniform-, stm -> .jump_stm  | -half4-, jump_stm -> .-return- exp Semicolon  | -do-, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, dec -> .struct_specifier Semicolon  | -float-, stm -> .compound_stm  | NOT, unary_exp -> .postfix_exp  | AND, unary_exp -> .Decrement unary_exp  | Assign, stm -> .jump_stm  | Decrement, primary_exp -> .String  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, block_item -> .stm  | -half4-, block_item -> .stm  | Minus, exp -> .exp Comma assignment_exp  | Semicolon, jump_stm -> .-goto- ID  | -int-, exp_stm -> .Semicolon  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | -uniform-, type_specifier -> .-float-  | ID, block_item -> .stm  | for, selection_stm -> .if LParen exp RParen stm  | -float4-, type_specifier -> .-fixed3-  | ID, jump_stm -> .-return- exp Semicolon  | -return-, iteration_stm -> .while LParen exp RParen stm  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Tilde, postfix_exp -> .postfix_exp LParen RParen  | LBrack, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, compound_stm -> LBrace block_item_list .RBrace  | -half3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Decrement, compound_stm -> LBrace block_item_list .RBrace  | -sampler2D-, compound_stm -> .LBrace block_item_list RBrace  | -return-, jump_stm -> .break  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | -half2-, stm -> .iteration_stm  | LBrace, selection_stm -> .if LParen exp RParen stm else stm  | Number, stm -> .iteration_stm  | -uniform-, primary_exp -> .LParen exp RParen  | LE, primary_exp -> .LParen exp RParen  | Caret, compound_stm -> .LBrace block_item_list RBrace  | -float4-, compound_stm -> LBrace block_item_list .RBrace  | -short-, stm -> .exp_stm  | String, binary_exp -> .unary_exp  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float-, binary_exp -> .unary_exp  | LT, selection_stm -> .if LParen exp RParen stm else stm  | -float3-, jump_stm -> .-return- exp Semicolon  | NOT, postfix_exp -> .postfix_exp Increment  | Times, selection_stm -> .if LParen exp RParen stm else stm  | Decrement, stm -> .selection_stm  | -fixed3-, stm -> .compound_stm  | -double-, jump_stm -> .break  | -do-, unary_exp -> .Increment unary_exp  | OR, exp_stm -> .Semicolon  | -continue-, selection_stm -> .if LParen exp RParen stm  | Minus, jump_stm -> .-continue-  | while, selection_stm -> .if LParen exp RParen stm else stm  | Tilde, primary_exp -> .ID  | Decrement, stm -> .selection_stm  | Number, compound_stm -> LBrace block_item_list .RBrace  | -float-, dec_specifier -> .type_specifier  | ID, unary_op -> .Minus  | ID, compound_stm -> LBrace block_item_list .RBrace  | -half4-, compound_stm -> LBrace block_item_list .RBrace  | -ENDCG-, dec -> .struct_specifier Semicolon  | -long-, compound_stm -> .LBrace RBrace  | while, jump_stm -> .-continue-  | -float-, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | EQ, stm -> .exp_stm  | -double-, stm -> .selection_stm  | Minus, exp_stm -> .exp Semicolon  | -half3-, postfix_exp -> .postfix_exp Decrement  | Semicolon, stm -> .exp_stm  | while, unary_op -> .Tilde  | Number, dec -> .struct_specifier Semicolon  | -float4-, stm -> .jump_stm  | while, binary_exp -> .unary_exp  | Plus, stm -> .exp_stm  | -float4-, postfix_exp -> .postfix_exp LParen RParen  | OR, compound_stm -> .LBrace block_item_list RBrace  | if, postfix_exp -> .postfix_exp Dot ID  | LT, dec -> .dec_specifier init_dec_list Semicolon  | -fixed2-, unary_exp -> .unary_op unary_exp  | Assign, jump_stm -> .-return- exp Semicolon  | -half2-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, stm -> .iteration_stm  | -continue-, selection_stm -> .if LParen exp RParen stm else stm  | -float-, block_item -> .stm  | -float2-, dec -> .struct_specifier Semicolon  | -fixed2-, compound_stm -> .LBrace block_item_list RBrace  | String, block_item -> .dec  | Semicolon, unary_op -> .NOT  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | String, primary_exp -> .Number  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float4-, jump_stm -> .break  | -uniform-, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, dec -> .struct_specifier Semicolon  | NOT, dec -> .struct_specifier Semicolon  | Plus, dec -> .struct_specifier Semicolon  | -half3-, jump_stm -> .-return- exp Semicolon  | -long-, unary_exp -> .Increment unary_exp  | Semicolon, compound_stm -> .LBrace RBrace  | -return-, stm -> .exp_stm  | NOT, compound_stm -> LBrace block_item_list .RBrace  | -float4-, stm -> .iteration_stm  | Increment, jump_stm -> .-return- exp Semicolon  | LParen, iteration_stm -> .while LParen exp RParen stm  | if, postfix_exp -> .primary_exp  | Plus, stm -> .jump_stm  | -float4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, stm -> .compound_stm  | Tilde, stm -> .exp_stm  | -float2-, unary_op -> .Plus  | Increment, iteration_stm -> .while LParen exp RParen stm  | -goto-, block_item_list -> block_item_list .block_item  | -half4-, selection_stm -> .if LParen exp RParen stm  | NOT, dec -> .dec_specifier init_dec_list Semicolon  | -float3-, primary_exp -> .String  | Times, stm -> .selection_stm  | while, stm -> .exp_stm  | -int-, stm -> .iteration_stm  | break, iteration_stm -> .while LParen exp RParen stm  | -half3-, stm -> .iteration_stm  | -double-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -short-, stm -> .iteration_stm  | -float3-, selection_stm -> .if LParen exp RParen stm  | -half4-, primary_exp -> .String  | Increment, jump_stm -> .-return- exp Semicolon  | Decrement, compound_stm -> LBrace block_item_list .RBrace  | -uniform-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float3-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, jump_stm -> .-return- exp Semicolon  | ID, jump_stm -> .-return- exp Semicolon  | -char-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed3-, primary_exp -> .Number  | Dot, exp_stm -> .Semicolon  | -do-, primary_exp -> .LParen exp RParen  | Ampersand, block_item -> .dec  | -continue-, stm -> .jump_stm  | -struct-, block_item_list -> block_item_list .block_item  | Tilde, postfix_exp -> .primary_exp  | Comma, block_item -> .dec  | Increment, primary_exp -> .ID  | LBrack, unary_exp -> .postfix_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LBrack, block_item -> .dec  | NOT, selection_stm -> .if LParen exp RParen stm  | LParen, jump_stm -> .-continue-  | -int-, jump_stm -> .break  | -fixed2-, type_specifier -> .-fixed4-  | ID, compound_stm -> .LBrace RBrace  | Plus, block_item_list -> block_item_list .block_item  | -double-, unary_exp -> .unary_op unary_exp  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, stm -> .selection_stm  | -short-, postfix_exp -> .postfix_exp Dot ID  | Semicolon, type_qualifier -> .-uniform-  | -fixed2-, compound_stm -> .LBrace RBrace  | break, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, stm -> .selection_stm  | -fixed4-, jump_stm -> .-goto- ID  | -void-, compound_stm -> .LBrace block_item_list RBrace  | -fixed2-, dec -> .dec_specifier init_dec_list Semicolon  | -long-, unary_op -> .Minus  | Tilde, primary_exp -> .LParen exp RParen  | LT, compound_stm -> .LBrace RBrace  | -char-, primary_exp -> .String  | LT, block_item -> .stm  | -int-, compound_stm -> LBrace block_item_list .RBrace  | -fixed4-, unary_exp -> .postfix_exp  | NEQ, selection_stm -> .if LParen exp RParen stm  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | break, stm -> .compound_stm  | -void-, stm -> .jump_stm  | -float2-, unary_exp -> .Increment unary_exp  | NEQ, stm -> .selection_stm  | -return-, stm -> .iteration_stm  | -fixed3-, block_item -> .stm  | -float3-, compound_stm -> .LBrace RBrace  | Semicolon, unary_op -> .Minus  | NOT, block_item -> .dec  | ID, iteration_stm -> .while LParen exp RParen stm  | LParen, stm -> .iteration_stm  | -float2-, type_specifier -> .-long-  | ID, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | NOT, primary_exp -> .ID  | Semicolon, exp_stm -> .exp Semicolon  | -int-, postfix_exp -> .postfix_exp Decrement  | AND, unary_op -> .Tilde  | Increment, stm -> .iteration_stm  | -fixed4-, postfix_exp -> .postfix_exp LParen RParen  | EQ, stm -> .selection_stm  | Decrement, jump_stm -> .-continue-  | -do-, block_item -> .dec  | -void-, unary_exp -> .Decrement unary_exp  | LeftShift, compound_stm -> LBrace block_item_list .RBrace  | -int-, stm -> .exp_stm  | LBrace, jump_stm -> .-continue-  | -half4-, dec -> .struct_specifier Semicolon  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | OR, stm -> .jump_stm  | -float3-, jump_stm -> .break  | for, jump_stm -> .-continue-  | -goto-, compound_stm -> .LBrace RBrace  | -void-, exp_stm -> .Semicolon  | -fixed2-, selection_stm -> .if LParen exp RParen stm else stm  | -void-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Plus, exp_stm -> .Semicolon  | -fixed4-, exp_stm -> .exp Semicolon  | Minus, stm -> .iteration_stm  | -char-, block_item_list -> block_item_list .block_item  | Decrement, jump_stm -> .break  | -float4-, stm -> .jump_stm  | -void-, primary_exp -> .Number  | VerticalBar, block_item -> .dec  | Decrement, stm -> .exp_stm  | Increment, compound_stm -> .LBrace RBrace  | -fixed4-, dec -> .struct_specifier Semicolon  | -fixed3-, exp_stm -> .exp Semicolon  | -sampler2D-, binary_exp -> .unary_exp  | Times, exp_stm -> .Semicolon  | String, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float3-, stm -> .jump_stm  | Minus, block_item_list -> block_item_list .block_item  | Increment, jump_stm -> .-continue-  | Tilde, postfix_exp -> .postfix_exp Increment  | VerticalBar, struct_specifier -> .-struct- ID  | Semicolon, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, jump_stm -> .break  | if, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half4-, jump_stm -> .-return- exp Semicolon  | -goto-, stm -> .compound_stm  | RBrace, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, stm -> .compound_stm  | -fixed4-, exp_stm -> .exp Semicolon  | -half2-, jump_stm -> .break  | -half2-, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | Minus, jump_stm -> .-continue-  | -continue-, stm -> .compound_stm  | -short-, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, compound_stm -> .LBrace block_item_list RBrace  | -short-, selection_stm -> .if LParen exp RParen stm else stm  | -float2-, jump_stm -> .break  | -char-, binary_exp -> .unary_exp  | OR, stm -> .compound_stm  | -fixed2-, compound_stm -> .LBrace block_item_list RBrace  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | LParen, primary_exp -> .Number  | LBrack, stm -> .selection_stm  | RBrace, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, stm -> .compound_stm  | -char-, type_specifier -> .-int-  | ID, compound_stm -> .LBrace RBrace  | -long-, jump_stm -> .break  | -long-, jump_stm -> .-continue-  | -uniform-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LBrace, stm -> .compound_stm  | -goto-, jump_stm -> .break  | -return-, stm -> .compound_stm  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -uniform-, jump_stm -> .-continue-  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -short-, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, selection_stm -> .if LParen exp RParen stm else stm  | for, primary_exp -> .LParen exp RParen  | NEQ, compound_stm -> .LBrace RBrace  | Increment, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Plus, compound_stm -> LBrace block_item_list .RBrace  | Pound, dec -> .dec_specifier init_dec_list Semicolon  | RBrace, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, postfix_exp -> .postfix_exp Decrement  | Times, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -int-, unary_op -> .NOT  | LParen, exp_stm -> .exp Semicolon  | String, block_item -> .stm  | -fixed2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .String  | Dot, postfix_exp -> .primary_exp  | AND, jump_stm -> .-return- exp Semicolon  | -short-, postfix_exp -> .postfix_exp Decrement  | OR, unary_exp -> .unary_op unary_exp  | Plus, dec -> .dec_specifier init_dec_list Semicolon  | -struct-, stm -> .compound_stm  | -float3-, block_item_list -> block_item_list .block_item  | while, stm -> .selection_stm  | -float4-, block_item -> .dec  | -float4-, dec -> .dec_specifier init_dec_list Semicolon  | -char-, binary_exp -> .unary_exp  | Percent, compound_stm -> .LBrace block_item_list RBrace  | while, stm -> .iteration_stm  | Minus, block_item -> .stm  | -half3-, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_exp -> .Increment unary_exp  | Divide, exp_stm -> .Semicolon  | ID, unary_op -> .NOT  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed2-, jump_stm -> .-goto- ID  | -struct-, jump_stm -> .break  | Minus, compound_stm -> .LBrace RBrace  | if, jump_stm -> .break  | -void-, iteration_stm -> .while LParen exp RParen stm  | -float-, block_item -> .stm  | Plus, type_qualifier -> .-uniform-  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | NOT, primary_exp -> .ID  | Times, stm -> .compound_stm  | -sampler2D-, stm -> .selection_stm  | LParen, dec -> .dec_specifier init_dec_list Semicolon  | for, block_item_list -> block_item_list .block_item  | NOT, selection_stm -> .if LParen exp RParen stm else stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | LBrace, dec -> .dec_specifier init_dec_list Semicolon  | String, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, binary_exp -> .binary_exp binary_op unary_exp  | Caret, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half2-, unary_op -> .Tilde  | Tilde, jump_stm -> .-continue-  | -void-, type_qualifier -> .-uniform-  | -char-, unary_exp -> .Decrement unary_exp  | Comma, dec -> .dec_specifier init_dec_list Semicolon  | ID, stm -> .exp_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -return-, unary_exp -> .Decrement unary_exp  | Divide, stm -> .compound_stm  | -do-, jump_stm -> .-return- exp Semicolon  | -fixed3-, postfix_exp -> .postfix_exp Increment  | AND, stm -> .selection_stm  | -struct-, stm -> .exp_stm  | -return-, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, stm -> .exp_stm  | -char-, postfix_exp -> .postfix_exp Decrement  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, iteration_stm -> .while LParen exp RParen stm  | for, stm -> .selection_stm  | if, stm -> .compound_stm  | -uniform-, jump_stm -> .-continue-  | RBrace, binary_exp -> .unary_exp  | LE, jump_stm -> .-return- exp Semicolon  | -float4-, stm -> .exp_stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, stm -> .exp_stm  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -long-, selection_stm -> .if LParen exp RParen stm else stm  | -fixed3-, primary_exp -> .String  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | if, postfix_exp -> .postfix_exp Dot ID  | Plus, stm -> .compound_stm  | -float2-, compound_stm -> .LBrace block_item_list RBrace  | -float2-, primary_exp -> .Number  | LeftShift, exp_stm -> .exp Semicolon  | Tilde, jump_stm -> .break  | while, jump_stm -> .-continue-  | -char-, jump_stm -> .break  | LParen, compound_stm -> .LBrace RBrace  | LBrace, jump_stm -> .-goto- ID  | -float-, block_item -> .stm  | -do-, dec -> .dec_specifier init_dec_list Semicolon  | Number, postfix_exp -> .postfix_exp Decrement  | Percent, jump_stm -> .break  | -float-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, selection_stm -> .if LParen exp RParen stm  | -fixed2-, primary_exp -> .LParen exp RParen  | Times, stm -> .selection_stm  | ID, selection_stm -> .if LParen exp RParen stm  | -double-, exp_stm -> .Semicolon  | LParen, jump_stm -> .break  | -goto-, stm -> .exp_stm  | Minus, exp_stm -> .exp Semicolon  | -uniform-, compound_stm -> .LBrace block_item_list RBrace  | -double-, primary_exp -> .ID  | OR, selection_stm -> .if LParen exp RParen stm  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, postfix_exp -> .postfix_exp Increment  | GT, stm -> .jump_stm  | Semicolon, iteration_stm -> .while LParen exp RParen stm  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | Times, exp_stm -> .Semicolon  | -half4-, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, compound_stm -> .LBrace RBrace  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, unary_exp -> .unary_op unary_exp  | Question, stm -> .selection_stm  | -half3-, selection_stm -> .if LParen exp RParen stm else stm  | -double-, unary_exp -> .unary_op unary_exp  | Times, stm -> .iteration_stm  | -int-, dec -> .struct_specifier Semicolon  | -float3-, exp_stm -> .exp Semicolon  | Plus, stm -> .exp_stm  | -void-, block_item -> .stm  | -double-, iteration_stm -> .while LParen exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Comma, dec -> .dec_specifier init_dec_list Semicolon  | Minus, stm -> .iteration_stm  | -do-, unary_exp -> .Decrement unary_exp  | GT, block_item -> .stm  | -float-, primary_exp -> .ID  | LE, stm -> .exp_stm  | -float-, compound_stm -> .LBrace block_item_list RBrace  | -sampler2D-, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | LeftShift, jump_stm -> .-return- exp Semicolon  | Number, exp_stm -> .exp Semicolon  | Number, primary_exp -> .String  | Minus, selection_stm -> .if LParen exp RParen stm  | -uniform-, jump_stm -> .-continue-  | -sampler2D-, postfix_exp -> .postfix_exp Decrement  | EQ, iteration_stm -> .while LParen exp RParen stm  | -int-, stm -> .compound_stm  | Increment, block_item_list -> block_item_list .block_item  | -do-, type_qualifier -> .-uniform-  | -float2-, jump_stm -> .-goto- ID  | Minus, dec -> .dec_specifier init_dec_list Semicolon  | Semicolon, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | for, postfix_exp -> .postfix_exp Decrement  | Increment, block_item -> .stm  | -goto-, binary_exp -> .binary_exp binary_op unary_exp  | Minus, primary_exp -> .LParen exp RParen  | OR, selection_stm -> .if LParen exp RParen stm else stm  | -fixed2-, postfix_exp -> .primary_exp  | Question, block_item -> .stm  | -char-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, jump_stm -> .break  | -fixed4-, dec -> .dec_specifier init_dec_list Semicolon  | -sampler2D-, postfix_exp -> .postfix_exp Increment  | Increment, stm -> .compound_stm  | -half2-, selection_stm -> .if LParen exp RParen stm else stm  | -fixed4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, stm -> .iteration_stm  | -short-, selection_stm -> .if LParen exp RParen stm  | Tilde, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> .postfix_exp  | Caret, stm -> .jump_stm  | Increment, selection_stm -> .if LParen exp RParen stm  | Number, primary_exp -> .ID  | LT, postfix_exp -> .postfix_exp Dot ID  | Caret, iteration_stm -> .while LParen exp RParen stm  | NOT, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -return-, dec -> .struct_specifier Semicolon  | Decrement, primary_exp -> .Number  | Percent, iteration_stm -> .while LParen exp RParen stm  | -return-, primary_exp -> .LParen exp RParen  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -double-, primary_exp -> .Number  | Assign, jump_stm -> .-return- exp Semicolon  | for, block_item -> .dec  | -float3-, iteration_stm -> .while LParen exp RParen stm  | Tilde, compound_stm -> .LBrace block_item_list RBrace  | -void-, block_item_list -> block_item_list .block_item  | -fixed3-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float-, jump_stm -> .-goto- ID  | -goto-, stm -> .exp_stm  | -continue-, stm -> .iteration_stm  | Plus, unary_exp -> .Decrement unary_exp  | Caret, selection_stm -> .if LParen exp RParen stm  | -fixed4-, exp_stm -> .Semicolon  | -uniform-, block_item_list -> block_item_list .block_item  | ID, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, stm -> .selection_stm  | String, stm -> .exp_stm  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Minus, postfix_exp -> .postfix_exp Decrement  | Divide, block_item_list -> block_item_list .block_item  | for, exp_stm -> .Semicolon  | Minus, unary_exp -> .postfix_exp  | VerticalBar, primary_exp -> .String  | Divide, block_item -> .dec  | -float-, unary_exp -> .postfix_exp  | EQ, stm -> .exp_stm  | ID, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, primary_exp -> .String  | LParen, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .postfix_exp Increment  | Plus, iteration_stm -> .while LParen exp RParen stm  | -double-, jump_stm -> .-goto- ID  | LBrace, primary_exp -> .ID  | RightShift, selection_stm -> .if LParen exp RParen stm else stm  | -char-, stm -> .iteration_stm  | -long-, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .ID  | NEQ, stm -> .compound_stm  | -half4-, unary_exp -> .unary_op unary_exp  | NEQ, block_item -> .dec  | -goto-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half3-, jump_stm -> .-continue-  | -float3-, block_item_list -> block_item_list .block_item  | Minus, selection_stm -> .if LParen exp RParen stm  | for, selection_stm -> .if LParen exp RParen stm  | ID, block_item -> .stm  | Tilde, stm -> .jump_stm  | ID, jump_stm -> .-return- exp Semicolon  | -half4-, block_item -> .dec  | for, block_item_list -> block_item_list .block_item  | -fixed4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, dec -> .struct_specifier Semicolon  | RBrace, type_qualifier -> .-uniform-  | -void-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | RBrace, postfix_exp -> .primary_exp  | LT, unary_exp -> .postfix_exp  | Question, primary_exp -> .String  | LBrack, stm -> .jump_stm  | for, jump_stm -> .-return- exp Semicolon  | Plus, stm -> .exp_stm  | -float3-, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -uniform-, jump_stm -> .-return- exp Semicolon  | if, jump_stm -> .-goto- ID  | -fixed3-, dec -> .struct_specifier Semicolon  | -do-, stm -> .selection_stm  | -sampler2D-, block_item -> .stm  | LBrace, stm -> .selection_stm  | -fixed2-, jump_stm -> .-goto- ID  | if, compound_stm -> .LBrace RBrace  | LParen, block_item -> .stm  | while, jump_stm -> .-return- exp Semicolon  | -continue-, primary_exp -> .Number  | OR, stm -> .exp_stm  | -fixed4-, jump_stm -> .-goto- ID  | -float3-, postfix_exp -> .primary_exp  | GT, exp_stm -> .Semicolon  | -void-, jump_stm -> .-return- exp Semicolon  | Minus, unary_op -> .Tilde  | NOT, primary_exp -> .Number  | RightShift, jump_stm -> .-goto- ID  | Increment, primary_exp -> .String  | Ampersand, stm -> .jump_stm  | -short-, stm -> .exp_stm  | break, binary_exp -> .unary_exp  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -struct-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -char-, compound_stm -> .LBrace RBrace  | -sampler2D-, jump_stm -> .-continue-  | Plus, unary_exp -> .Increment unary_exp  | GE, jump_stm -> .-continue-  | -half2-, unary_exp -> .Increment unary_exp  | EQ, compound_stm -> .LBrace RBrace  | Tilde, exp_stm -> .exp Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | ID, stm -> .jump_stm  | -char-, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | Comma, block_item_list -> block_item_list .block_item  | -float3-, primary_exp -> .LParen exp RParen  | Divide, compound_stm -> LBrace block_item_list .RBrace  | -void-, unary_exp -> .Increment unary_exp  | Question, stm -> .jump_stm  | break, conditional_exp -> .binary_exp  | Semicolon, stm -> .compound_stm  | -float-, postfix_exp -> .postfix_exp Dot ID  | Minus, stm -> .jump_stm  | -continue-, dec -> .struct_specifier Semicolon  | break, selection_stm -> .if LParen exp RParen stm else stm  | -half2-, stm -> .compound_stm  | -struct-, stm -> .selection_stm  | NOT, jump_stm -> .-return- exp Semicolon  | -float2-, postfix_exp -> .postfix_exp Dot ID  | LParen, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, jump_stm -> .-return- exp Semicolon  | -float3-, block_item_list -> block_item_list .block_item  | String, iteration_stm -> .while LParen exp RParen stm  | -struct-, postfix_exp -> .postfix_exp Increment  | Dot, type_qualifier -> .-uniform-  | -float4-, stm -> .compound_stm  | break, compound_stm -> .LBrace block_item_list RBrace  | -do-, block_item -> .stm  | -float4-, postfix_exp -> .postfix_exp Increment  | Divide, stm -> .selection_stm  | -float2-, stm -> .jump_stm  | -return-, exp_stm -> .Semicolon  | break, unary_exp -> .postfix_exp  | OR, exp_stm -> .Semicolon  | -double-, block_item -> .dec  | LBrace, jump_stm -> .-goto- ID  | break, postfix_exp -> .postfix_exp Decrement  | LE, selection_stm -> .if LParen exp RParen stm  | -short-, block_item -> .dec  | if, binary_exp -> .unary_exp  | AND, block_item -> .dec  | LParen, exp_stm -> .exp Semicolon  | Semicolon, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, primary_exp -> .ID  | Dot, stm -> .selection_stm  | -double-, stm -> .iteration_stm  | NOT, primary_exp -> .Number  | NEQ, jump_stm -> .-continue-  | -double-, block_item_list -> block_item_list .block_item  | -continue-, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, jump_stm -> .-goto- ID  | -half2-, compound_stm -> LBrace block_item_list .RBrace  | -char-, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Increment  | EQ, exp_stm -> .exp Semicolon  | NOT, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -double-, unary_exp -> .postfix_exp  | Percent, binary_exp -> .unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, exp_stm -> .exp Semicolon  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -char-, unary_exp -> .postfix_exp  | Assign, compound_stm -> .LBrace RBrace  | -float3-, stm -> .jump_stm  | -double-, dec -> .dec_specifier init_dec_list Semicolon  | -half3-, compound_stm -> .LBrace block_item_list RBrace  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | -half4-, jump_stm -> .break  | LBrace, jump_stm -> .break  | -short-, jump_stm -> .-continue-  | Minus, jump_stm -> .-continue-  | String, primary_exp -> .String  | OR, dec -> .struct_specifier Semicolon  | Semicolon, stm -> .selection_stm  | for, selection_stm -> .if LParen exp RParen stm else stm  | -do-, compound_stm -> .LBrace block_item_list RBrace  | Increment, unary_exp -> .Decrement unary_exp  | Ampersand, stm -> .jump_stm  | Tilde, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, selection_stm -> .if LParen exp RParen stm  | -half3-, stm -> .jump_stm  | -goto-, postfix_exp -> .primary_exp  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -float3-, block_item -> .stm  | Number, unary_exp -> .Decrement unary_exp  | GE, jump_stm -> .-return- exp Semicolon  | -half3-, jump_stm -> .break  | Plus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float4-, type_qualifier -> .-uniform-  | -half4-, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, compound_stm -> LBrace block_item_list .RBrace  | -fixed2-, exp_stm -> .exp Semicolon  | Increment, dec -> .dec_specifier init_dec_list Semicolon  | while, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, stm -> .jump_stm  | -fixed2-, stm -> .compound_stm  | -return-, type_qualifier -> .-uniform-  | -int-, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, compound_stm -> .LBrace RBrace  | -struct-, primary_exp -> .LParen exp RParen  | AND, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -do-, selection_stm -> .if LParen exp RParen stm else stm  | NOT, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, stm -> .selection_stm  | -continue-, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, dec -> .dec_specifier init_dec_list Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | -return-, jump_stm -> .-continue-  | Number, stm -> .jump_stm  | -fixed4-, unary_exp -> .unary_op unary_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | -struct-, primary_exp -> .LParen exp RParen  | VerticalBar, jump_stm -> .break  | break, compound_stm -> .LBrace RBrace  | -double-, dec -> .dec_specifier init_dec_list Semicolon  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -half3-, block_item -> .dec  | RBrace, block_item_list -> block_item_list .block_item  | -struct-, stm -> .jump_stm  | -sampler2D-, block_item -> .dec  | Number, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .primary_exp  | LeftShift, primary_exp -> .ID  | Plus, stm -> .exp_stm  | -half2-, primary_exp -> .ID  | GT, selection_stm -> .if LParen exp RParen stm else stm  | -long-, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | break, dec -> .dec_specifier init_dec_list Semicolon  | -half2-, stm -> .compound_stm  | -half3-, selection_stm -> .if LParen exp RParen stm  | if, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed3-, jump_stm -> .-continue-  | if, compound_stm -> .LBrace block_item_list RBrace  | Decrement, unary_op -> .Minus  | LParen, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -goto-, primary_exp -> .Number  | Question, jump_stm -> .-goto- ID  | -long-, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, jump_stm -> .-continue-  | -struct-, jump_stm -> .-return- exp Semicolon  | -int-, stm -> .iteration_stm  | -half2-, compound_stm -> .LBrace RBrace  | -float4-, stm -> .exp_stm  | -long-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, iteration_stm -> .while LParen exp RParen stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Comma, exp_stm -> .Semicolon  | -int-, dec -> .struct_specifier Semicolon  | ID, dec -> .struct_specifier Semicolon  | -short-, struct_specifier -> .-struct- ID LBrace struct_dec_list RBrace  | Semicolon, jump_stm -> .-goto- ID  | -fixed2-, stm -> .exp_stm  | Tilde, exp_stm -> .exp Semicolon  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | String, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, selection_stm -> .if LParen exp RParen stm  | -void-, stm -> .exp_stm  | -do-, jump_stm -> .-continue-  | Increment, selection_stm -> .if LParen exp RParen stm  | Increment, postfix_exp -> .postfix_exp Increment  | Question, type_qualifier -> .-uniform-  | -fixed4-, primary_exp -> .ID  | VerticalBar, compound_stm -> .LBrace block_item_list RBrace  | Plus, iteration_stm -> .while LParen exp RParen stm  | -do-, dec -> .dec_specifier init_dec_list Semicolon  | -void-, primary_exp -> .LParen exp RParen  | EQ, block_item -> .dec  | String, block_item -> .stm  | String, postfix_exp -> .postfix_exp LParen RParen  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | Plus, postfix_exp -> .primary_exp  | Times, block_item -> .stm  | LParen, block_item -> .stm  | -continue-, block_item -> .dec  | -long-, jump_stm -> .-continue-  | break, exp_stm -> .Semicolon  | -short-, block_item -> .stm  | if, stm -> .jump_stm  | -int-, type_specifier -> .typedef_name  | ID, dec -> .struct_specifier Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm  | -sampler2D-, selection_stm -> .if LParen exp RParen stm else stm  | -float4-, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp Decrement  | NEQ, dec -> .struct_specifier Semicolon  | -uniform-, dec -> .dec_specifier init_dec_list Semicolon  | NOT, selection_stm -> .if LParen exp RParen stm else stm  | -short-, primary_exp -> .ID  | LeftShift, selection_stm -> .if LParen exp RParen stm  | -float2-, jump_stm -> .-return- exp Semicolon  | -double-, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, jump_stm -> .-goto- ID  | while, type_specifier -> .-short-  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | NEQ, stm -> .jump_stm  | -do-, postfix_exp -> .postfix_exp Decrement  | Plus, exp_stm -> .exp Semicolon  | -half4-, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, stm -> .selection_stm  | -int-, compound_stm -> LBrace block_item_list .RBrace  | -fixed3-, selection_stm -> .if LParen exp RParen stm else stm  | -half3-, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, jump_stm -> .-goto- ID  | String, stm -> .exp_stm  | if, jump_stm -> .break  | String, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .postfix_exp Increment  | LT, selection_stm -> .if LParen exp RParen stm  | RBrace, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, block_item_list -> block_item_list .block_item  | -sampler2D-, block_item -> .stm  | break, dec -> .dec_specifier init_dec_list Semicolon  | LBrace, stm -> .selection_stm  | -do-, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp Increment  | NEQ, dec -> .dec_specifier init_dec_list Semicolon  | Decrement, stm -> .selection_stm  | -void-, stm -> .selection_stm  | -half2-, stm -> .exp_stm  | -struct-, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, stm -> .iteration_stm  | Semicolon, block_item_list -> block_item_list .block_item  | RBrace, jump_stm -> .break  | -fixed3-, primary_exp -> .LParen exp RParen  | Percent, dec -> .dec_specifier init_dec_list Semicolon  | -continue-, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, jump_stm -> .-return- exp Semicolon  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | Semicolon, primary_exp -> .ID  | GE, unary_op -> .Plus  | Plus, stm -> .exp_stm  | Semicolon, exp_stm -> .Semicolon  | Number, selection_stm -> .if LParen exp RParen stm else stm  | -sampler2D-, exp_stm -> .Semicolon  | -float-, block_item_list -> block_item_list .block_item  | Number, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, dec -> .struct_specifier Semicolon  | LParen, jump_stm -> .-goto- ID  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | String, stm -> .jump_stm  | LBrace, primary_exp -> .ID  | Assign, stm -> .iteration_stm  | -half4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed4-, dec -> .dec_specifier init_dec_list Semicolon  | Plus, type_specifier -> .-half2-  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, stm -> .compound_stm  | String, dec -> .dec_specifier init_dec_list Semicolon  | if, jump_stm -> .break  | Number, postfix_exp -> .postfix_exp LParen RParen  | LE, type_specifier -> .-fixed2-  | ID, jump_stm -> .-goto- ID  | -fixed4-, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, block_item -> .stm  | Semicolon, stm -> .jump_stm  | NOT, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, type_qualifier -> .-uniform-  | -sampler2D-, exp_stm -> .Semicolon  | -float4-, binary_exp -> .binary_exp binary_op unary_exp  | LE, block_item -> .dec  | -fixed3-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed2-, stm -> .selection_stm  | Increment, jump_stm -> .-continue-  | Semicolon, block_item -> .dec  | -return-, binary_exp -> .unary_exp  | NEQ, primary_exp -> .LParen exp RParen  | Minus, compound_stm -> .LBrace RBrace  | Number, block_item_list -> block_item_list .block_item  | -float2-, iteration_stm -> .while LParen exp RParen stm  | -float2-, dec -> .struct_specifier Semicolon  | -sampler2D-, primary_exp -> .Number  | Plus, dec -> .struct_specifier Semicolon  | Minus, unary_exp -> .Decrement unary_exp  | LE, block_item_list -> block_item_list .block_item  | -char-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, stm -> .jump_stm  | -half3-, exp_stm -> .exp Semicolon  | -fixed3-, jump_stm -> .-goto- ID  | -double-, postfix_exp -> .postfix_exp LParen RParen  | Question, jump_stm -> .-return- exp Semicolon  | Semicolon, selection_stm -> .if LParen exp RParen stm  | Decrement, unary_exp -> .postfix_exp  | LE, exp_stm -> .exp Semicolon  | -short-, primary_exp -> .String  | Assign, block_item -> .dec  | -struct-, stm -> .exp_stm  | for, exp_stm -> .Semicolon  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | String, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Decrement  | LParen, stm -> .selection_stm  | -half4-, primary_exp -> .LParen exp RParen  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Caret, selection_stm -> .if LParen exp RParen stm else stm  | if, compound_stm -> LBrace block_item_list .RBrace  | -struct-, unary_exp -> .unary_op unary_exp  | GT, compound_stm -> .LBrace block_item_list RBrace  | NOT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, block_item -> .dec  | break, primary_exp -> .LParen exp RParen  | LParen, stm -> .jump_stm  | Number, exp_stm -> .exp Semicolon  | RBrace, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half4-, exp_stm -> .Semicolon  | for, unary_exp -> .unary_op unary_exp  | AND, stm -> .jump_stm  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Number, postfix_exp -> .primary_exp  | Assign, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -continue-, exp_stm -> .Semicolon  | LBrace, jump_stm -> .-goto- ID  | -short-, stm -> .exp_stm  | -half4-, compound_stm -> .LBrace RBrace  | -fixed2-, unary_exp -> .unary_op unary_exp  | Percent, exp_stm -> .exp Semicolon  | if, dec -> .struct_specifier Semicolon  | while, postfix_exp -> .primary_exp  | Divide, block_item -> .dec  | -char-, stm -> .compound_stm  | ID, selection_stm -> .if LParen exp RParen stm  | while, block_item -> .dec  | -double-, iteration_stm -> .while LParen exp RParen stm  | -continue-, block_item -> .dec  | -fixed4-, postfix_exp -> .primary_exp  | LBrack, dec -> .struct_specifier Semicolon  | -half2-, jump_stm -> .break  | -int-, exp_stm -> .Semicolon  | -goto-, jump_stm -> .break  | -float3-, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, block_item_list -> block_item_list .block_item  | -half2-, jump_stm -> .-return- exp Semicolon  | -void-, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, binary_exp -> .unary_exp  | EQ, jump_stm -> .-continue-  | -float2-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, jump_stm -> .-continue-  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -float3-, primary_exp -> .ID  | Divide, selection_stm -> .if LParen exp RParen stm else stm  | -uniform-, stm -> .compound_stm  | Decrement, type_qualifier -> .-uniform-  | -half2-, jump_stm -> .-goto- ID  | ID, stm -> .exp_stm  | -fixed3-, block_item_list -> block_item_list .block_item  | -goto-, postfix_exp -> .postfix_exp Dot ID  | EQ, stm -> .selection_stm  | -float3-, unary_exp -> .unary_op unary_exp  | Comma, jump_stm -> .-return- exp Semicolon  | -float-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Semicolon, binary_exp -> .unary_exp  | GE, block_item_list -> block_item_list .block_item  | -fixed2-, compound_stm -> .LBrace block_item_list RBrace  | -goto-, iteration_stm -> .while LParen exp RParen stm  | break, stm -> .selection_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -int-, block_item_list -> block_item_list .block_item  | if, stm -> .compound_stm  | for, dec -> .dec_specifier init_dec_list Semicolon  | -return-, stm -> .jump_stm  | if, jump_stm -> .-goto- ID  | -float2-, stm -> .selection_stm  | Tilde, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, compound_stm -> LBrace block_item_list .RBrace  | -half2-, stm -> .compound_stm  | -long-, assignment_exp -> .conditional_exp  | Comma, unary_op -> .Plus  | Decrement, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | Assign, jump_stm -> .-goto- ID  | -half3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LBrace, exp_stm -> .Semicolon  | -fixed3-, stm -> .iteration_stm  | -half3-, primary_exp -> .String  | Decrement, exp_stm -> .Semicolon  | Tilde, selection_stm -> .if LParen exp RParen stm else stm  | Semicolon, stm -> .iteration_stm  | while, stm -> .selection_stm  | LBrace, compound_stm -> LBrace block_item_list .RBrace  | -long-, postfix_exp -> .postfix_exp LParen RParen  | Assign, compound_stm -> .LBrace RBrace  | -half3-, jump_stm -> .break  | -half4-, block_item_list -> block_item_list .block_item  | LParen, primary_exp -> .Number  | Increment, stm -> .iteration_stm  | -float-, exp_stm -> .Semicolon  | -float3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Number, stm -> .compound_stm  | -continue-, stm -> .exp_stm  | Plus, postfix_exp -> .postfix_exp Decrement  | Minus, stm -> .selection_stm  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, stm -> .iteration_stm  | ID, stm -> .compound_stm  | Plus, compound_stm -> .LBrace block_item_list RBrace  | RBrace, primary_exp -> .Number  | EQ, exp_stm -> .exp Semicolon  | -float2-, exp_stm -> .exp Semicolon  | -long-, compound_stm -> .LBrace RBrace  | String, compound_stm -> LBrace block_item_list .RBrace  | -double-, iteration_stm -> .while LParen exp RParen stm  | -void-, exp_stm -> .Semicolon  | Increment, primary_exp -> .ID  | Comma, dec -> .dec_specifier init_dec_list Semicolon  | -goto-, primary_exp -> .String  | LeftShift, block_item -> .dec  | -int-, jump_stm -> .-continue-  | -fixed3-, postfix_exp -> .postfix_exp LParen RParen  | GE, postfix_exp -> .primary_exp  | OR, iteration_stm -> .while LParen exp RParen stm  | RBrace, unary_exp -> .postfix_exp  | RightShift, compound_stm -> .LBrace block_item_list RBrace  | -fixed4-, block_item_list -> block_item_list .block_item  | -half3-, unary_op -> .Tilde  | Decrement, jump_stm -> .-continue-  | -return-, iteration_stm -> .while LParen exp RParen stm  | Plus, selection_stm -> .if LParen exp RParen stm  | -do-, stm -> .selection_stm  | Plus, compound_stm -> .LBrace RBrace  | NOT, exp_stm -> .Semicolon  | Decrement, compound_stm -> LBrace block_item_list .RBrace  | ID, type_specifier -> .-char-  | ID, exp_stm -> .Semicolon  | -float2-, dec -> .dec_specifier init_dec_list Semicolon  | -half4-, compound_stm -> LBrace block_item_list .RBrace  | -float2-, iteration_stm -> .while LParen exp RParen stm  | Number, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, exp_stm -> .exp Semicolon  | Decrement, block_item -> .dec  | -half3-, stm -> .iteration_stm  | LParen, stm -> .jump_stm  | -half2-, selection_stm -> .if LParen exp RParen stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Percent, jump_stm -> .break  | ID, jump_stm -> .-goto- ID  | Semicolon, block_item -> .stm  | -half2-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half3-, stm -> .iteration_stm  | Tilde, compound_stm -> .LBrace block_item_list RBrace  | LBrace, exp_stm -> .Semicolon  | while, postfix_exp -> .postfix_exp Increment  | Semicolon, jump_stm -> .break  | -sampler2D-, block_item_list -> block_item_list .block_item  | LBrace, block_item_list -> block_item_list .block_item  | -float4-, type_specifier -> .-double-  | ID, exp_stm -> .exp Semicolon  | -double-, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -long-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LParen, compound_stm -> .LBrace RBrace  | -half2-, jump_stm -> .-goto- ID  | -do-, exp_stm -> .exp Semicolon  | -float-, stm -> .jump_stm  | -float-, unary_exp -> .unary_op unary_exp  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | RBrace, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, jump_stm -> .-continue-  | for, unary_op -> .Minus  | Decrement, dec -> .dec_specifier init_dec_list Semicolon  | -uniform-, jump_stm -> .-return- exp Semicolon  | -fixed4-, block_item -> .stm  | -struct-, exp_stm -> .exp Semicolon  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | LT, dec -> .dec_specifier init_dec_list Semicolon  | -double-, postfix_exp -> .postfix_exp Increment  | Comma, jump_stm -> .-continue-  | -fixed2-, stm -> .compound_stm  | LBrace, exp_stm -> .exp Semicolon  | while, exp_stm -> .exp Semicolon  | LBrace, jump_stm -> .-continue-  | -short-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, binary_exp -> .binary_exp binary_op unary_exp  | EQ, dec -> .struct_specifier Semicolon  | -int-, block_item_list -> block_item_list .block_item  | -short-, block_item -> .dec  | Tilde, postfix_exp -> .primary_exp  | Percent, primary_exp -> .String  | Comma, stm -> .iteration_stm  | -fixed2-, binary_exp -> .binary_exp binary_op unary_exp  | Question, exp_stm -> .Semicolon  | -char-, block_item -> .stm  | ID, jump_stm -> .-return- exp Semicolon  | LBrace, type_qualifier -> .-uniform-  | -float3-, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | Plus, primary_exp -> .Number  | GE, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | for, primary_exp -> .Number  | Times, jump_stm -> .-return- exp Semicolon  | Increment, block_item_list -> block_item_list .block_item  | break, jump_stm -> .break  | -struct-, binary_exp -> .unary_exp  | RightShift, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -void-, primary_exp -> .ID  | Minus, dec -> .struct_specifier Semicolon  | LBrace, selection_stm -> .if LParen exp RParen stm  | -continue-, type_qualifier -> .-uniform-  | ID, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, unary_op -> .Plus  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -sampler2D-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed4-, jump_stm -> .break  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, stm -> .iteration_stm  | -sampler2D-, primary_exp -> .Number  | Decrement, compound_stm -> .LBrace RBrace  | for, selection_stm -> .if LParen exp RParen stm  | break, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, type_qualifier -> .-uniform-  | -double-, postfix_exp -> .primary_exp  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float2-, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, stm -> .selection_stm  | -char-, compound_stm -> .LBrace block_item_list RBrace  | ID, dec -> .struct_specifier Semicolon  | Tilde, jump_stm -> .break  | -double-, unary_exp -> .unary_op unary_exp  | Ampersand, exp_stm -> .exp Semicolon  | -void-, exp_stm -> .exp Semicolon  | -return-, block_item -> .stm  | Increment, compound_stm -> .LBrace RBrace  | -continue-, stm -> .iteration_stm  | for, postfix_exp -> .postfix_exp Increment  | RightShift, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .primary_exp  | Caret, compound_stm -> .LBrace block_item_list RBrace  | break, selection_stm -> .if LParen exp RParen stm  | -float3-, postfix_exp -> .postfix_exp Increment  | Caret, jump_stm -> .-goto- ID  | Tilde, type_specifier -> .-half3-  | ID, jump_stm -> .-goto- ID  | Number, postfix_exp -> .primary_exp  | Decrement, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -continue-, dec -> .dec_specifier init_dec_list Semicolon  | Tilde, jump_stm -> .-goto- ID  | Decrement, postfix_exp -> .primary_exp  | Ampersand, jump_stm -> .-goto- ID  | -uniform-, compound_stm -> .LBrace RBrace  | -uniform-, dec -> .struct_specifier Semicolon  | if, iteration_stm -> .while LParen exp RParen stm  | Decrement, dec -> .dec_specifier init_dec_list Semicolon  | -float2-, selection_stm -> .if LParen exp RParen stm  | -return-, jump_stm -> .-return- exp Semicolon  | -uniform-, exp_stm -> .Semicolon  | -return-, selection_stm -> .if LParen exp RParen stm  | LBrace, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, jump_stm -> .-continue-  | LParen, stm -> .iteration_stm  | -goto-, block_item_list -> block_item_list .block_item  | -int-, stm -> .compound_stm  | while, stm -> .exp_stm  | -sampler2D-, jump_stm -> .-goto- ID  | RBrace, postfix_exp -> .postfix_exp LParen RParen  | LT, compound_stm -> .LBrace RBrace  | -int-, binary_exp -> .unary_exp  | Caret, selection_stm -> .if LParen exp RParen stm  | Plus, jump_stm -> .-continue-  | LBrace, dec -> .struct_specifier Semicolon  | -struct-, jump_stm -> .-return- exp Semicolon  | break, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, stm -> .exp_stm  | Number, unary_exp -> .Increment unary_exp  | Caret, block_item -> .dec  | Minus, block_item -> .dec  | -short-, primary_exp -> .String  | AND, unary_exp -> .unary_op unary_exp  | Divide, dec_specifier -> .type_qualifier type_specifier  | ID, unary_exp -> .unary_op unary_exp  | Caret, stm -> .compound_stm  | -int-, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, block_item -> .stm  | -uniform-, postfix_exp -> .postfix_exp Dot ID  | Percent, exp_stm -> .exp Semicolon  | break, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, iteration_stm -> .while LParen exp RParen stm  | -fixed2-, stm -> .selection_stm  | -float-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -do-, unary_exp -> .postfix_exp  | Comma, binary_exp -> .unary_exp  | LeftShift, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Tilde, jump_stm -> .-continue-  | -long-, block_item -> .dec  | -half4-, stm -> .compound_stm  | -fixed3-, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -sampler2D-, block_item -> .stm  | -fixed3-, jump_stm -> .-return- exp Semicolon  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -short-, primary_exp -> .ID  | Percent, stm -> .compound_stm  | Number, primary_exp -> .Number  | Comma, stm -> .compound_stm  | LParen, compound_stm -> .LBrace RBrace  | -short-, stm -> .compound_stm  | Semicolon, stm -> .selection_stm  | break, dec -> .dec_specifier init_dec_list Semicolon  | -float-, block_item -> .dec  | -half2-, compound_stm -> .LBrace block_item_list RBrace  | -struct-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Decrement, unary_exp -> .postfix_exp  | Divide, jump_stm -> .-return- exp Semicolon  | -sampler2D-, unary_exp -> .postfix_exp  | GE, dec -> .dec_specifier init_dec_list Semicolon  | Increment, block_item_list -> block_item_list .block_item  | -long-, selection_stm -> .if LParen exp RParen stm else stm  | -continue-, block_item -> .dec  | Plus, compound_stm -> .LBrace RBrace  | -half4-, dec -> .struct_specifier Semicolon  | -goto-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float2-, stm -> .jump_stm  | RBrace, jump_stm -> .-goto- ID  | -half4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, compound_stm -> .LBrace RBrace  | -goto-, postfix_exp -> .postfix_exp LParen RParen  | Divide, block_item -> .stm  | -fixed4-, stm -> .jump_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half2-, primary_exp -> .LParen exp RParen  | Assign, unary_exp -> .Increment unary_exp  | Assign, jump_stm -> .-goto- ID  | -return-, postfix_exp -> .postfix_exp Increment  | Assign, jump_stm -> .break  | Tilde, block_item -> .dec  | -do-, type_specifier -> .-float3-  | ID, jump_stm -> .-continue-  | -half3-, primary_exp -> .Number  | Minus, stm -> .iteration_stm  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -half4-, stm -> .jump_stm  | LParen, exp_stm -> .exp Semicolon  | -goto-, jump_stm -> .-goto- ID  | for, stm -> .iteration_stm  | Decrement, stm -> .selection_stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, selection_stm -> .if LParen exp RParen stm else stm  | -struct-, stm -> .exp_stm  | -goto-, dec -> .struct_specifier Semicolon  | -half4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | ID, unary_exp -> .Increment unary_exp  | VerticalBar, dec -> .struct_specifier Semicolon  | -return-, block_item -> .stm  | -short-, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, block_item -> .stm  | NOT, type_qualifier -> .-uniform-  | -float-, primary_exp -> .ID  | AND, postfix_exp -> .postfix_exp LParen RParen  | Dot, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | String, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, exp_stm -> .Semicolon  | NOT, jump_stm -> .-goto- ID  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | Tilde, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, selection_stm -> .if LParen exp RParen stm  | -fixed3-, dec -> .dec_specifier init_dec_list Semicolon  | -float4-, exp_stm -> .exp Semicolon  | for, primary_exp -> .Number  | Ampersand, selection_stm -> .if LParen exp RParen stm  | -char-, primary_exp -> .ID  | Ampersand, stm -> .exp_stm  | RBrace, exp_stm -> .Semicolon  | RBrace, stm -> .exp_stm  | Decrement, block_item -> .dec  | -fixed2-, compound_stm -> .LBrace RBrace  | RBrace, primary_exp -> .LParen exp RParen  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_op -> .NOT  | NOT, unary_op -> .NOT  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -goto-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | ID, binary_exp -> .binary_exp binary_op unary_exp  | GT, postfix_exp -> .postfix_exp Increment  | Ampersand, jump_stm -> .-goto- ID  | -continue-, stm -> .selection_stm  | Semicolon, block_item_list -> block_item_list .block_item  | -float-, postfix_exp -> .postfix_exp Decrement  | Assign, stm -> .iteration_stm  | RBrace, stm -> .iteration_stm  | -struct-, dec -> .dec_specifier init_dec_list Semicolon  | break, jump_stm -> .break  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Increment, iteration_stm -> .while LParen exp RParen stm  | -float4-, exp_stm -> .Semicolon  | -half3-, dec -> .struct_specifier Semicolon  | Increment, unary_exp -> .Decrement unary_exp  | Plus, primary_exp -> .LParen exp RParen  | Plus, type_specifier -> .-sampler2D-  | ID, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, compound_stm -> .LBrace RBrace  | -float-, unary_exp -> .unary_op unary_exp  | LeftShift, dec -> .dec_specifier init_dec_list Semicolon  | -do-, block_item -> .stm  | -long-, compound_stm -> .LBrace block_item_list RBrace  | -int-, jump_stm -> .-goto- ID  | NOT, jump_stm -> .-continue-  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -half4-, type_specifier -> .-float4-  | ID, block_item_list -> block_item_list .block_item  | Plus, compound_stm -> .LBrace RBrace  | Minus, iteration_stm -> .while LParen exp RParen stm  | -char-, iteration_stm -> .while LParen exp RParen stm  | ID, exp_stm -> .exp Semicolon  | ID, unary_exp -> .Increment unary_exp  | LE, stm -> .exp_stm  | -fixed2-, jump_stm -> .-goto- ID  | -char-, stm -> .iteration_stm  | -return-, dec -> .struct_specifier Semicolon  | -void-, block_item -> .stm  | -void-, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, stm -> .iteration_stm  | if, type_specifier -> .-void-  | ID, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, jump_stm -> .break  | -float2-, primary_exp -> .Number  | LParen, jump_stm -> .break  | -half3-, typedef_name -> .ID  | ID, postfix_exp -> .postfix_exp Decrement  | LBrack, stm -> .jump_stm  | -fixed3-, block_item_list -> block_item_list .block_item  | -return-, stm -> .compound_stm  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -void-, block_item -> .stm  | RBrace, unary_exp -> .postfix_exp  | LeftShift, )
115 <- (65, 'break') (jump_stm -> break.  | -float3-, jump_stm -> break.  | Number, jump_stm -> break.  | -sampler2D-, jump_stm -> break.  | -struct-, jump_stm -> break.  | -uniform-, jump_stm -> break.  | -goto-, jump_stm -> break.  | Decrement, jump_stm -> break.  | RBrace, jump_stm -> break.  | break, jump_stm -> break.  | String, jump_stm -> break.  | for, jump_stm -> break.  | -float2-, jump_stm -> break.  | LBrace, jump_stm -> break.  | -return-, jump_stm -> break.  | -do-, jump_stm -> break.  | if, jump_stm -> break.  | NOT, jump_stm -> break.  | -void-, jump_stm -> break.  | Plus, jump_stm -> break.  | Minus, jump_stm -> break.  | -char-, jump_stm -> break.  | Tilde, jump_stm -> break.  | -float-, jump_stm -> break.  | LParen, jump_stm -> break.  | -double-, jump_stm -> break.  | -long-, jump_stm -> break.  | -half3-, jump_stm -> break.  | -fixed2-, jump_stm -> break.  | -half4-, jump_stm -> break.  | -float4-, jump_stm -> break.  | ID, jump_stm -> break.  | Increment, jump_stm -> break.  | -fixed3-, jump_stm -> break.  | while, jump_stm -> break.  | -short-, jump_stm -> break.  | -fixed4-, jump_stm -> break.  | -half2-, jump_stm -> break.  | -int-, jump_stm -> break.  | -continue-, jump_stm -> break.  | Semicolon, )
116 <- (65, 'compound_stm') (stm -> compound_stm.  | -sampler2D-, stm -> compound_stm.  | -float-, stm -> compound_stm.  | Number, stm -> compound_stm.  | LBrace, stm -> compound_stm.  | -struct-, stm -> compound_stm.  | NOT, stm -> compound_stm.  | -float2-, stm -> compound_stm.  | LParen, stm -> compound_stm.  | Decrement, stm -> compound_stm.  | -uniform-, stm -> compound_stm.  | -float4-, stm -> compound_stm.  | -fixed3-, stm -> compound_stm.  | -char-, stm -> compound_stm.  | -fixed4-, stm -> compound_stm.  | RBrace, stm -> compound_stm.  | for, stm -> compound_stm.  | String, stm -> compound_stm.  | -fixed2-, stm -> compound_stm.  | -do-, stm -> compound_stm.  | -void-, stm -> compound_stm.  | -int-, stm -> compound_stm.  | -long-, stm -> compound_stm.  | if, stm -> compound_stm.  | -half4-, stm -> compound_stm.  | Increment, stm -> compound_stm.  | -half3-, stm -> compound_stm.  | -half2-, stm -> compound_stm.  | -float3-, stm -> compound_stm.  | Plus, stm -> compound_stm.  | -continue-, stm -> compound_stm.  | -double-, stm -> compound_stm.  | while, stm -> compound_stm.  | Tilde, stm -> compound_stm.  | ID, stm -> compound_stm.  | -return-, stm -> compound_stm.  | Semicolon, stm -> compound_stm.  | Minus, stm -> compound_stm.  | break, stm -> compound_stm.  | -goto-, stm -> compound_stm.  | -short-, )
117 <- (65, 'conditional_exp') (assignment_exp -> conditional_exp.  | Comma, assignment_exp -> conditional_exp.  | Semicolon, )
118 <- (65, 'dec') (block_item -> dec.  | ID, block_item -> dec.  | -int-, block_item -> dec.  | -void-, block_item -> dec.  | -uniform-, block_item -> dec.  | Decrement, block_item -> dec.  | RBrace, block_item -> dec.  | Minus, block_item -> dec.  | while, block_item -> dec.  | -fixed3-, block_item -> dec.  | for, block_item -> dec.  | -float2-, block_item -> dec.  | LBrace, block_item -> dec.  | -sampler2D-, block_item -> dec.  | -return-, block_item -> dec.  | Plus, block_item -> dec.  | -continue-, block_item -> dec.  | -float4-, block_item -> dec.  | Number, block_item -> dec.  | -float-, block_item -> dec.  | -short-, block_item -> dec.  | -char-, block_item -> dec.  | NOT, block_item -> dec.  | -struct-, block_item -> dec.  | -double-, block_item -> dec.  | Tilde, block_item -> dec.  | LParen, block_item -> dec.  | -half2-, block_item -> dec.  | -long-, block_item -> dec.  | -float3-, block_item -> dec.  | if, block_item -> dec.  | Increment, block_item -> dec.  | String, block_item -> dec.  | -fixed4-, block_item -> dec.  | -half3-, block_item -> dec.  | Semicolon, block_item -> dec.  | -goto-, block_item -> dec.  | -fixed2-, block_item -> dec.  | break, block_item -> dec.  | -half4-, block_item -> dec.  | -do-, )
119 <- (65, 'dec_specifier') (dec -> dec_specifier .init_dec_list Semicolon  | -half4-, dec -> dec_specifier .init_dec_list Semicolon  | -fixed2-, dec -> dec_specifier .init_dec_list Semicolon  | LParen, dec -> dec_specifier .init_dec_list Semicolon  | RBrace, dec -> dec_specifier .init_dec_list Semicolon  | if, dec -> dec_specifier .init_dec_list Semicolon  | -half2-, dec -> dec_specifier .init_dec_list Semicolon  | -struct-, dec -> dec_specifier .init_dec_list Semicolon  | -short-, dec -> dec_specifier .init_dec_list Semicolon  | -fixed3-, dec -> dec_specifier .init_dec_list Semicolon  | for, dec -> dec_specifier .init_dec_list Semicolon  | -sampler2D-, dec -> dec_specifier .init_dec_list Semicolon  | -int-, dec -> dec_specifier .init_dec_list Semicolon  | ID, dec -> dec_specifier .init_dec_list Semicolon  | break, dec -> dec_specifier .init_dec_list Semicolon  | -double-, dec -> dec_specifier .init_dec_list Semicolon  | -float2-, dec -> dec_specifier .init_dec_list Semicolon  | String, dec -> dec_specifier .init_dec_list Semicolon  | -return-, dec -> dec_specifier .init_dec_list Semicolon  | -uniform-, dec -> dec_specifier .init_dec_list Semicolon  | -char-, dec -> dec_specifier .init_dec_list Semicolon  | -fixed4-, dec -> dec_specifier .init_dec_list Semicolon  | -void-, dec -> dec_specifier .init_dec_list Semicolon  | -do-, dec -> dec_specifier .init_dec_list Semicolon  | -half3-, dec -> dec_specifier .init_dec_list Semicolon  | Plus, dec -> dec_specifier .init_dec_list Semicolon  | LBrace, dec -> dec_specifier .init_dec_list Semicolon  | while, init_dec_list -> .ID  | Semicolon, dec -> dec_specifier .init_dec_list Semicolon  | Increment, dec -> dec_specifier .init_dec_list Semicolon  | Semicolon, dec -> dec_specifier .init_dec_list Semicolon  | -float-, dec -> dec_specifier .init_dec_list Semicolon  | Number, dec -> dec_specifier .init_dec_list Semicolon  | Minus, dec -> dec_specifier .init_dec_list Semicolon  | -continue-, dec -> dec_specifier .init_dec_list Semicolon  | NOT, dec -> dec_specifier .init_dec_list Semicolon  | -goto-, dec -> dec_specifier .init_dec_list Semicolon  | -long-, dec -> dec_specifier .init_dec_list Semicolon  | -float4-, dec -> dec_specifier .init_dec_list Semicolon  | -float3-, dec -> dec_specifier .init_dec_list Semicolon  | Decrement, dec -> dec_specifier .init_dec_list Semicolon  | Tilde, )
120 <- (65, 'exp') (exp_stm -> exp .Semicolon  | -fixed2-, exp_stm -> exp .Semicolon  | -short-, exp_stm -> exp .Semicolon  | -struct-, exp_stm -> exp .Semicolon  | -float2-, exp_stm -> exp .Semicolon  | -char-, exp_stm -> exp .Semicolon  | -goto-, exp_stm -> exp .Semicolon  | -return-, exp_stm -> exp .Semicolon  | -long-, exp_stm -> exp .Semicolon  | Decrement, exp_stm -> exp .Semicolon  | -void-, exp_stm -> exp .Semicolon  | -int-, exp_stm -> exp .Semicolon  | -uniform-, exp_stm -> exp .Semicolon  | Semicolon, exp_stm -> exp .Semicolon  | ID, exp_stm -> exp .Semicolon  | Number, exp_stm -> exp .Semicolon  | while, exp_stm -> exp .Semicolon  | LParen, exp -> exp .Comma assignment_exp  | Comma, exp_stm -> exp .Semicolon  | -double-, exp_stm -> exp .Semicolon  | -do-, exp_stm -> exp .Semicolon  | String, exp_stm -> exp .Semicolon  | NOT, exp_stm -> exp .Semicolon  | -sampler2D-, exp_stm -> exp .Semicolon  | -fixed3-, exp_stm -> exp .Semicolon  | -float3-, exp_stm -> exp .Semicolon  | Increment, exp -> exp .Comma assignment_exp  | Semicolon, exp_stm -> exp .Semicolon  | Minus, exp_stm -> exp .Semicolon  | -half3-, exp_stm -> exp .Semicolon  | RBrace, exp_stm -> exp .Semicolon  | Plus, exp_stm -> exp .Semicolon  | -fixed4-, exp_stm -> exp .Semicolon  | -half2-, exp_stm -> exp .Semicolon  | -continue-, exp_stm -> exp .Semicolon  | LBrace, exp_stm -> exp .Semicolon  | Tilde, exp_stm -> exp .Semicolon  | for, exp_stm -> exp .Semicolon  | -half4-, exp_stm -> exp .Semicolon  | if, exp_stm -> exp .Semicolon  | break, exp_stm -> exp .Semicolon  | -float4-, exp_stm -> exp .Semicolon  | -float-, )
121 <- (65, 'exp_stm') (stm -> exp_stm.  | RBrace, stm -> exp_stm.  | LParen, stm -> exp_stm.  | Minus, stm -> exp_stm.  | ID, stm -> exp_stm.  | Decrement, stm -> exp_stm.  | Semicolon, stm -> exp_stm.  | -float2-, stm -> exp_stm.  | Plus, stm -> exp_stm.  | Tilde, stm -> exp_stm.  | LBrace, stm -> exp_stm.  | String, stm -> exp_stm.  | Number, stm -> exp_stm.  | -uniform-, stm -> exp_stm.  | -fixed4-, stm -> exp_stm.  | -struct-, stm -> exp_stm.  | while, stm -> exp_stm.  | -return-, stm -> exp_stm.  | -half4-, stm -> exp_stm.  | -fixed3-, stm -> exp_stm.  | -float4-, stm -> exp_stm.  | -half3-, stm -> exp_stm.  | -void-, stm -> exp_stm.  | for, stm -> exp_stm.  | -goto-, stm -> exp_stm.  | -do-, stm -> exp_stm.  | -float3-, stm -> exp_stm.  | -short-, stm -> exp_stm.  | -half2-, stm -> exp_stm.  | break, stm -> exp_stm.  | -int-, stm -> exp_stm.  | -double-, stm -> exp_stm.  | Increment, stm -> exp_stm.  | -continue-, stm -> exp_stm.  | -fixed2-, stm -> exp_stm.  | if, stm -> exp_stm.  | NOT, stm -> exp_stm.  | -sampler2D-, stm -> exp_stm.  | -long-, stm -> exp_stm.  | -char-, stm -> exp_stm.  | -float-, )
122 <- (65, 'for') (iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -char-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -long-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | LParen, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -float4-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | Plus, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | NOT, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -float2-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -struct-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -sampler2D-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | Number, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -float3-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -goto-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | RBrace, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -return-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | if, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | Semicolon, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | Minus, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -double-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -half3-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | for, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -short-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed2-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed3-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -continue-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -void-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | break, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | LBrace, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | ID, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -half2-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | Increment, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -half4-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | Tilde, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -float-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -uniform-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -do-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | String, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | while, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed4-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | Decrement, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -int-, )
123 <- (65, 'if') (selection_stm -> if .LParen exp RParen stm  | -half2-, selection_stm -> if .LParen exp RParen stm  | NOT, selection_stm -> if .LParen exp RParen stm  | -float4-, selection_stm -> if .LParen exp RParen stm  | -fixed3-, selection_stm -> if .LParen exp RParen stm else stm  | -return-, selection_stm -> if .LParen exp RParen stm  | RBrace, selection_stm -> if .LParen exp RParen stm else stm  | -int-, selection_stm -> if .LParen exp RParen stm  | break, selection_stm -> if .LParen exp RParen stm  | -short-, selection_stm -> if .LParen exp RParen stm  | -half4-, selection_stm -> if .LParen exp RParen stm else stm  | -float3-, selection_stm -> if .LParen exp RParen stm  | -goto-, selection_stm -> if .LParen exp RParen stm  | LParen, selection_stm -> if .LParen exp RParen stm  | -sampler2D-, selection_stm -> if .LParen exp RParen stm  | -char-, selection_stm -> if .LParen exp RParen stm else stm  | while, selection_stm -> if .LParen exp RParen stm  | Semicolon, selection_stm -> if .LParen exp RParen stm  | Number, selection_stm -> if .LParen exp RParen stm else stm  | LParen, selection_stm -> if .LParen exp RParen stm else stm  | Minus, selection_stm -> if .LParen exp RParen stm  | Tilde, selection_stm -> if .LParen exp RParen stm else stm  | if, selection_stm -> if .LParen exp RParen stm else stm  | RBrace, selection_stm -> if .LParen exp RParen stm  | -float-, selection_stm -> if .LParen exp RParen stm else stm  | NOT, selection_stm -> if .LParen exp RParen stm  | for, selection_stm -> if .LParen exp RParen stm else stm  | ID, selection_stm -> if .LParen exp RParen stm  | String, selection_stm -> if .LParen exp RParen stm  | if, selection_stm -> if .LParen exp RParen stm  | -do-, selection_stm -> if .LParen exp RParen stm else stm  | -struct-, selection_stm -> if .LParen exp RParen stm else stm  | -short-, selection_stm -> if .LParen exp RParen stm else stm  | -sampler2D-, selection_stm -> if .LParen exp RParen stm  | -void-, selection_stm -> if .LParen exp RParen stm else stm  | -float4-, selection_stm -> if .LParen exp RParen stm  | Increment, selection_stm -> if .LParen exp RParen stm else stm  | -float2-, selection_stm -> if .LParen exp RParen stm else stm  | -void-, selection_stm -> if .LParen exp RParen stm else stm  | -fixed3-, selection_stm -> if .LParen exp RParen stm else stm  | -fixed2-, selection_stm -> if .LParen exp RParen stm else stm  | Plus, selection_stm -> if .LParen exp RParen stm else stm  | -float-, selection_stm -> if .LParen exp RParen stm  | -fixed2-, selection_stm -> if .LParen exp RParen stm else stm  | Decrement, selection_stm -> if .LParen exp RParen stm else stm  | -continue-, selection_stm -> if .LParen exp RParen stm  | -uniform-, selection_stm -> if .LParen exp RParen stm  | -long-, selection_stm -> if .LParen exp RParen stm else stm  | Number, selection_stm -> if .LParen exp RParen stm else stm  | -half2-, selection_stm -> if .LParen exp RParen stm else stm  | break, selection_stm -> if .LParen exp RParen stm else stm  | String, selection_stm -> if .LParen exp RParen stm else stm  | LBrace, selection_stm -> if .LParen exp RParen stm  | -struct-, selection_stm -> if .LParen exp RParen stm else stm  | -half3-, selection_stm -> if .LParen exp RParen stm else stm  | -uniform-, selection_stm -> if .LParen exp RParen stm  | -int-, selection_stm -> if .LParen exp RParen stm  | Minus, selection_stm -> if .LParen exp RParen stm  | LBrace, selection_stm -> if .LParen exp RParen stm else stm  | -long-, selection_stm -> if .LParen exp RParen stm else stm  | Increment, selection_stm -> if .LParen exp RParen stm  | Decrement, selection_stm -> if .LParen exp RParen stm  | -fixed4-, selection_stm -> if .LParen exp RParen stm else stm  | -goto-, selection_stm -> if .LParen exp RParen stm  | -half3-, selection_stm -> if .LParen exp RParen stm  | while, selection_stm -> if .LParen exp RParen stm else stm  | -do-, selection_stm -> if .LParen exp RParen stm else stm  | -char-, selection_stm -> if .LParen exp RParen stm  | -float3-, selection_stm -> if .LParen exp RParen stm  | ID, selection_stm -> if .LParen exp RParen stm else stm  | -half4-, selection_stm -> if .LParen exp RParen stm else stm  | -fixed4-, selection_stm -> if .LParen exp RParen stm else stm  | Tilde, selection_stm -> if .LParen exp RParen stm  | -continue-, selection_stm -> if .LParen exp RParen stm else stm  | -double-, selection_stm -> if .LParen exp RParen stm  | -double-, selection_stm -> if .LParen exp RParen stm  | -float2-, selection_stm -> if .LParen exp RParen stm else stm  | for, selection_stm -> if .LParen exp RParen stm else stm  | Semicolon, selection_stm -> if .LParen exp RParen stm  | -return-, selection_stm -> if .LParen exp RParen stm  | Plus, )
124 <- (65, 'iteration_stm') (stm -> iteration_stm.  | -float2-, stm -> iteration_stm.  | -float-, stm -> iteration_stm.  | Semicolon, stm -> iteration_stm.  | -char-, stm -> iteration_stm.  | -float4-, stm -> iteration_stm.  | -fixed4-, stm -> iteration_stm.  | Increment, stm -> iteration_stm.  | break, stm -> iteration_stm.  | -half3-, stm -> iteration_stm.  | if, stm -> iteration_stm.  | NOT, stm -> iteration_stm.  | -double-, stm -> iteration_stm.  | LParen, stm -> iteration_stm.  | -long-, stm -> iteration_stm.  | -fixed2-, stm -> iteration_stm.  | for, stm -> iteration_stm.  | -void-, stm -> iteration_stm.  | String, stm -> iteration_stm.  | -half4-, stm -> iteration_stm.  | LBrace, stm -> iteration_stm.  | -do-, stm -> iteration_stm.  | -return-, stm -> iteration_stm.  | while, stm -> iteration_stm.  | -fixed3-, stm -> iteration_stm.  | -uniform-, stm -> iteration_stm.  | -half2-, stm -> iteration_stm.  | RBrace, stm -> iteration_stm.  | Minus, stm -> iteration_stm.  | Tilde, stm -> iteration_stm.  | -float3-, stm -> iteration_stm.  | Plus, stm -> iteration_stm.  | -sampler2D-, stm -> iteration_stm.  | -short-, stm -> iteration_stm.  | -int-, stm -> iteration_stm.  | Decrement, stm -> iteration_stm.  | -struct-, stm -> iteration_stm.  | ID, stm -> iteration_stm.  | -goto-, stm -> iteration_stm.  | Number, stm -> iteration_stm.  | -continue-, )
125 <- (65, 'jump_stm') (stm -> jump_stm.  | while, stm -> jump_stm.  | -do-, stm -> jump_stm.  | -fixed3-, stm -> jump_stm.  | LBrace, stm -> jump_stm.  | LParen, stm -> jump_stm.  | Increment, stm -> jump_stm.  | NOT, stm -> jump_stm.  | Decrement, stm -> jump_stm.  | -struct-, stm -> jump_stm.  | -char-, stm -> jump_stm.  | for, stm -> jump_stm.  | -void-, stm -> jump_stm.  | Tilde, stm -> jump_stm.  | -return-, stm -> jump_stm.  | if, stm -> jump_stm.  | -int-, stm -> jump_stm.  | -float2-, stm -> jump_stm.  | -continue-, stm -> jump_stm.  | -float4-, stm -> jump_stm.  | -half2-, stm -> jump_stm.  | -double-, stm -> jump_stm.  | Semicolon, stm -> jump_stm.  | -fixed4-, stm -> jump_stm.  | -half4-, stm -> jump_stm.  | -uniform-, stm -> jump_stm.  | -float-, stm -> jump_stm.  | ID, stm -> jump_stm.  | -short-, stm -> jump_stm.  | -goto-, stm -> jump_stm.  | Plus, stm -> jump_stm.  | -half3-, stm -> jump_stm.  | RBrace, stm -> jump_stm.  | -float3-, stm -> jump_stm.  | -sampler2D-, stm -> jump_stm.  | String, stm -> jump_stm.  | -fixed2-, stm -> jump_stm.  | Minus, stm -> jump_stm.  | -long-, stm -> jump_stm.  | Number, stm -> jump_stm.  | break, )
126 <- (65, 'postfix_exp') (unary_exp -> postfix_exp.  | Ampersand, postfix_exp -> postfix_exp .Decrement  | GT, unary_exp -> postfix_exp.  | AND, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | OR, postfix_exp -> postfix_exp .Increment  | EQ, postfix_exp -> postfix_exp .LParen RParen  | Assign, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | GE, unary_exp -> postfix_exp.  | Semicolon, postfix_exp -> postfix_exp .LParen RParen  | EQ, postfix_exp -> postfix_exp .LBrack exp RBrack  | Plus, postfix_exp -> postfix_exp .Increment  | VerticalBar, unary_exp -> postfix_exp.  | Comma, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Comma, postfix_exp -> postfix_exp .Dot ID  | Assign, postfix_exp -> postfix_exp .Increment  | LeftShift, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Percent, postfix_exp -> postfix_exp .Dot ID  | Dot, postfix_exp -> postfix_exp .LParen RParen  | Minus, postfix_exp -> postfix_exp .Dot ID  | GT, postfix_exp -> postfix_exp .LParen RParen  | NEQ, postfix_exp -> postfix_exp .LParen RParen  | Percent, unary_exp -> postfix_exp.  | NEQ, postfix_exp -> postfix_exp .Decrement  | Caret, postfix_exp -> postfix_exp .LBrack exp RBrack  | LE, postfix_exp -> postfix_exp .Decrement  | RightShift, postfix_exp -> postfix_exp .LParen RParen  | AND, postfix_exp -> postfix_exp .Decrement  | LT, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Minus, unary_exp -> postfix_exp.  | Divide, postfix_exp -> postfix_exp .Decrement  | Assign, postfix_exp -> postfix_exp .Increment  | Minus, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Decrement, postfix_exp -> postfix_exp .Increment  | Percent, postfix_exp -> postfix_exp .Dot ID  | VerticalBar, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | EQ, postfix_exp -> postfix_exp .Increment  | Question, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> postfix_exp .Dot ID  | Times, postfix_exp -> postfix_exp .Decrement  | GE, postfix_exp -> postfix_exp .LParen RParen  | OR, unary_exp -> postfix_exp.  | Question, postfix_exp -> postfix_exp .LParen RParen  | LT, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | NEQ, postfix_exp -> postfix_exp .Decrement  | Divide, postfix_exp -> postfix_exp .Dot ID  | Divide, unary_exp -> postfix_exp.  | LeftShift, postfix_exp -> postfix_exp .Decrement  | Dot, postfix_exp -> postfix_exp .Dot ID  | Minus, postfix_exp -> postfix_exp .LBrack exp RBrack  | LT, unary_exp -> postfix_exp.  | OR, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Semicolon, postfix_exp -> postfix_exp .Decrement  | Increment, postfix_exp -> postfix_exp .LBrack exp RBrack  | Question, postfix_exp -> postfix_exp .Increment  | Divide, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LT, unary_exp -> postfix_exp.  | LE, unary_exp -> postfix_exp.  | Times, postfix_exp -> postfix_exp .LBrack exp RBrack  | EQ, postfix_exp -> postfix_exp .Increment  | OR, postfix_exp -> postfix_exp .Decrement  | LE, postfix_exp -> postfix_exp .LBrack exp RBrack  | LBrack, postfix_exp -> postfix_exp .LBrack exp RBrack  | GT, postfix_exp -> postfix_exp .Dot ID  | LE, postfix_exp -> postfix_exp .Decrement  | EQ, postfix_exp -> postfix_exp .Decrement  | Semicolon, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Divide, postfix_exp -> postfix_exp .LParen RParen  | Times, postfix_exp -> postfix_exp .LParen RParen  | LE, postfix_exp -> postfix_exp .LParen RParen  | LParen, postfix_exp -> postfix_exp .Dot ID  | Plus, unary_exp -> postfix_exp.  | LT, postfix_exp -> postfix_exp .Dot ID  | LBrack, postfix_exp -> postfix_exp .LBrack exp RBrack  | Dot, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LParen, postfix_exp -> postfix_exp .LBrack exp RBrack  | VerticalBar, postfix_exp -> postfix_exp .LBrack exp RBrack  | OR, postfix_exp -> postfix_exp .Increment  | Decrement, postfix_exp -> postfix_exp .Decrement  | Minus, postfix_exp -> postfix_exp .LParen RParen  | Semicolon, postfix_exp -> postfix_exp .Increment  | LT, postfix_exp -> postfix_exp .Increment  | Caret, postfix_exp -> postfix_exp .Increment  | LE, postfix_exp -> postfix_exp .Increment  | Times, postfix_exp -> postfix_exp .Decrement  | Decrement, postfix_exp -> postfix_exp .Dot ID  | NEQ, postfix_exp -> postfix_exp .LBrack exp RBrack  | LeftShift, postfix_exp -> postfix_exp .Increment  | Comma, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LeftShift, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Caret, postfix_exp -> postfix_exp .LParen RParen  | Caret, postfix_exp -> postfix_exp .LParen RParen  | LBrack, postfix_exp -> postfix_exp .Decrement  | NEQ, postfix_exp -> postfix_exp .LBrack exp RBrack  | AND, postfix_exp -> postfix_exp .LBrack exp RBrack  | Decrement, postfix_exp -> postfix_exp .Dot ID  | Comma, postfix_exp -> postfix_exp .LBrack exp RBrack  | GE, postfix_exp -> postfix_exp .Increment  | Plus, postfix_exp -> postfix_exp .Increment  | AND, postfix_exp -> postfix_exp .Increment  | LBrack, postfix_exp -> postfix_exp .Decrement  | VerticalBar, postfix_exp -> postfix_exp .Dot ID  | GE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | AND, postfix_exp -> postfix_exp .Dot ID  | Ampersand, postfix_exp -> postfix_exp .LBrack exp RBrack  | Divide, postfix_exp -> postfix_exp .Dot ID  | RightShift, postfix_exp -> postfix_exp .Dot ID  | LParen, unary_exp -> postfix_exp.  | Minus, unary_exp -> postfix_exp.  | Percent, postfix_exp -> postfix_exp .LBrack exp RBrack  | Increment, postfix_exp -> postfix_exp .LParen RParen  | Increment, postfix_exp -> postfix_exp .Increment  | Increment, postfix_exp -> postfix_exp .Dot ID  | Decrement, postfix_exp -> postfix_exp .Increment  | NEQ, postfix_exp -> postfix_exp .Dot ID  | Increment, postfix_exp -> postfix_exp .Decrement  | AND, postfix_exp -> postfix_exp .LBrack exp RBrack  | Percent, postfix_exp -> postfix_exp .Increment  | RightShift, postfix_exp -> postfix_exp .Increment  | LParen, postfix_exp -> postfix_exp .Dot ID  | Question, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Question, postfix_exp -> postfix_exp .LParen RParen  | Ampersand, postfix_exp -> postfix_exp .Dot ID  | EQ, postfix_exp -> postfix_exp .Decrement  | Percent, postfix_exp -> postfix_exp .Dot ID  | Semicolon, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | RightShift, postfix_exp -> postfix_exp .Decrement  | LBrack, postfix_exp -> postfix_exp .LBrack exp RBrack  | Minus, postfix_exp -> postfix_exp .LBrack exp RBrack  | Ampersand, postfix_exp -> postfix_exp .LParen RParen  | GT, postfix_exp -> postfix_exp .LBrack exp RBrack  | LParen, postfix_exp -> postfix_exp .Dot ID  | AND, postfix_exp -> postfix_exp .LParen RParen  | Comma, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | GT, postfix_exp -> postfix_exp .LParen RParen  | Dot, postfix_exp -> postfix_exp .Decrement  | Comma, postfix_exp -> postfix_exp .Decrement  | Times, postfix_exp -> postfix_exp .Decrement  | OR, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LBrack, postfix_exp -> postfix_exp .Dot ID  | LT, postfix_exp -> postfix_exp .LParen RParen  | LeftShift, unary_exp -> postfix_exp.  | VerticalBar, postfix_exp -> postfix_exp .Decrement  | LParen, postfix_exp -> postfix_exp .Increment  | Dot, unary_exp -> postfix_exp.  | GT, postfix_exp -> postfix_exp .Dot ID  | Caret, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Ampersand, postfix_exp -> postfix_exp .LBrack exp RBrack  | Comma, postfix_exp -> postfix_exp .LBrack exp RBrack  | Assign, postfix_exp -> postfix_exp .Decrement  | LeftShift, postfix_exp -> postfix_exp .LParen RParen  | Divide, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Dot, postfix_exp -> postfix_exp .Increment  | Ampersand, postfix_exp -> postfix_exp .Dot ID  | LeftShift, unary_exp -> postfix_exp.  | GE, unary_exp -> postfix_exp.  | Plus, postfix_exp -> postfix_exp .LParen RParen  | Plus, postfix_exp -> postfix_exp .LParen RParen  | GE, postfix_exp -> postfix_exp .LParen RParen  | Decrement, postfix_exp -> postfix_exp .LParen RParen  | VerticalBar, postfix_exp -> postfix_exp .LParen RParen  | Question, postfix_exp -> postfix_exp .Decrement  | Question, postfix_exp -> postfix_exp .Increment  | GE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Assign, postfix_exp -> postfix_exp .LBrack exp RBrack  | Times, unary_exp -> postfix_exp.  | Assign, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Plus, postfix_exp -> postfix_exp .Decrement  | Plus, postfix_exp -> postfix_exp .Decrement  | Ampersand, unary_exp -> postfix_exp.  | RightShift, postfix_exp -> postfix_exp .Increment  | Semicolon, postfix_exp -> postfix_exp .LBrack exp RBrack  | Caret, unary_exp -> postfix_exp.  | Caret, postfix_exp -> postfix_exp .LBrack exp RBrack  | RightShift, postfix_exp -> postfix_exp .LBrack exp RBrack  | NEQ, postfix_exp -> postfix_exp .Dot ID  | Percent, postfix_exp -> postfix_exp .Dot ID  | OR, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Times, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Increment, postfix_exp -> postfix_exp .LBrack exp RBrack  | Semicolon, unary_exp -> postfix_exp.  | EQ, postfix_exp -> postfix_exp .Increment  | GT, postfix_exp -> postfix_exp .LParen RParen  | RightShift, postfix_exp -> postfix_exp .Increment  | Assign, )
127 <- (65, 'primary_exp') (postfix_exp -> primary_exp.  | Semicolon, postfix_exp -> primary_exp.  | VerticalBar, postfix_exp -> primary_exp.  | OR, postfix_exp -> primary_exp.  | LE, postfix_exp -> primary_exp.  | Decrement, postfix_exp -> primary_exp.  | Times, postfix_exp -> primary_exp.  | Comma, postfix_exp -> primary_exp.  | Question, postfix_exp -> primary_exp.  | LeftShift, postfix_exp -> primary_exp.  | Assign, postfix_exp -> primary_exp.  | Caret, postfix_exp -> primary_exp.  | AND, postfix_exp -> primary_exp.  | Divide, postfix_exp -> primary_exp.  | LParen, postfix_exp -> primary_exp.  | EQ, postfix_exp -> primary_exp.  | Minus, postfix_exp -> primary_exp.  | GE, postfix_exp -> primary_exp.  | Dot, postfix_exp -> primary_exp.  | LBrack, postfix_exp -> primary_exp.  | LT, postfix_exp -> primary_exp.  | GT, postfix_exp -> primary_exp.  | Percent, postfix_exp -> primary_exp.  | Increment, postfix_exp -> primary_exp.  | RightShift, postfix_exp -> primary_exp.  | Ampersand, postfix_exp -> primary_exp.  | Plus, postfix_exp -> primary_exp.  | NEQ, )
128 <- (65, 'selection_stm') (stm -> selection_stm.  | -half4-, stm -> selection_stm.  | -float2-, stm -> selection_stm.  | Minus, stm -> selection_stm.  | -goto-, stm -> selection_stm.  | -continue-, stm -> selection_stm.  | -long-, stm -> selection_stm.  | -int-, stm -> selection_stm.  | -float4-, stm -> selection_stm.  | if, stm -> selection_stm.  | -do-, stm -> selection_stm.  | String, stm -> selection_stm.  | Plus, stm -> selection_stm.  | for, stm -> selection_stm.  | -fixed2-, stm -> selection_stm.  | -half3-, stm -> selection_stm.  | while, stm -> selection_stm.  | -float-, stm -> selection_stm.  | -sampler2D-, stm -> selection_stm.  | -half2-, stm -> selection_stm.  | -fixed4-, stm -> selection_stm.  | ID, stm -> selection_stm.  | Number, stm -> selection_stm.  | break, stm -> selection_stm.  | Semicolon, stm -> selection_stm.  | Tilde, stm -> selection_stm.  | Increment, stm -> selection_stm.  | NOT, stm -> selection_stm.  | -void-, stm -> selection_stm.  | -return-, stm -> selection_stm.  | LParen, stm -> selection_stm.  | -fixed3-, stm -> selection_stm.  | LBrace, stm -> selection_stm.  | RBrace, stm -> selection_stm.  | -struct-, stm -> selection_stm.  | -uniform-, stm -> selection_stm.  | -double-, stm -> selection_stm.  | -short-, stm -> selection_stm.  | Decrement, stm -> selection_stm.  | -float3-, stm -> selection_stm.  | -char-, )
129 <- (65, 'stm') (block_item -> stm.  | -goto-, block_item -> stm.  | Tilde, block_item -> stm.  | Decrement, block_item -> stm.  | Plus, block_item -> stm.  | break, block_item -> stm.  | ID, block_item -> stm.  | -short-, block_item -> stm.  | -void-, block_item -> stm.  | -half2-, block_item -> stm.  | RBrace, block_item -> stm.  | LBrace, block_item -> stm.  | -return-, block_item -> stm.  | -long-, block_item -> stm.  | -float4-, block_item -> stm.  | Minus, block_item -> stm.  | -char-, block_item -> stm.  | String, block_item -> stm.  | -struct-, block_item -> stm.  | Increment, block_item -> stm.  | -float2-, block_item -> stm.  | -float-, block_item -> stm.  | Semicolon, block_item -> stm.  | -do-, block_item -> stm.  | while, block_item -> stm.  | LParen, block_item -> stm.  | -uniform-, block_item -> stm.  | for, block_item -> stm.  | -fixed3-, block_item -> stm.  | Number, block_item -> stm.  | -sampler2D-, block_item -> stm.  | -int-, block_item -> stm.  | -continue-, block_item -> stm.  | -half3-, block_item -> stm.  | -float3-, block_item -> stm.  | NOT, block_item -> stm.  | -fixed4-, block_item -> stm.  | -half4-, block_item -> stm.  | -fixed2-, block_item -> stm.  | if, block_item -> stm.  | -double-, )
130 <- (65, 'struct_specifier') (dec -> struct_specifier .Semicolon  | -double-, dec -> struct_specifier .Semicolon  | Plus, dec -> struct_specifier .Semicolon  | -goto-, dec -> struct_specifier .Semicolon  | -sampler2D-, dec -> struct_specifier .Semicolon  | -half3-, dec -> struct_specifier .Semicolon  | -long-, dec -> struct_specifier .Semicolon  | while, dec -> struct_specifier .Semicolon  | -float2-, dec -> struct_specifier .Semicolon  | -return-, dec -> struct_specifier .Semicolon  | NOT, dec -> struct_specifier .Semicolon  | for, dec -> struct_specifier .Semicolon  | -int-, dec -> struct_specifier .Semicolon  | -float-, dec -> struct_specifier .Semicolon  | LBrace, dec -> struct_specifier .Semicolon  | Semicolon, dec -> struct_specifier .Semicolon  | RBrace, dec -> struct_specifier .Semicolon  | -char-, dec -> struct_specifier .Semicolon  | -continue-, dec -> struct_specifier .Semicolon  | Number, dec -> struct_specifier .Semicolon  | Increment, dec -> struct_specifier .Semicolon  | ID, dec -> struct_specifier .Semicolon  | -fixed3-, dec -> struct_specifier .Semicolon  | LParen, dec -> struct_specifier .Semicolon  | -void-, dec -> struct_specifier .Semicolon  | -short-, dec -> struct_specifier .Semicolon  | -fixed4-, dec -> struct_specifier .Semicolon  | -do-, dec -> struct_specifier .Semicolon  | if, dec -> struct_specifier .Semicolon  | -uniform-, dec -> struct_specifier .Semicolon  | -struct-, dec -> struct_specifier .Semicolon  | -half4-, dec -> struct_specifier .Semicolon  | -half2-, dec -> struct_specifier .Semicolon  | -float4-, dec -> struct_specifier .Semicolon  | Minus, dec -> struct_specifier .Semicolon  | String, dec -> struct_specifier .Semicolon  | Decrement, dec -> struct_specifier .Semicolon  | break, dec -> struct_specifier .Semicolon  | -float3-, dec -> struct_specifier .Semicolon  | -fixed2-, dec -> struct_specifier .Semicolon  | Tilde, )
131 <- (65, 'type_qualifier') (type_specifier -> .-float2-  | ID, type_specifier -> .-half2-  | ID, type_specifier -> .-fixed3-  | ID, type_specifier -> .-void-  | ID, type_specifier -> .-long-  | ID, type_specifier -> .-int-  | ID, type_specifier -> .-half4-  | ID, type_specifier -> .typedef_name  | ID, dec_specifier -> type_qualifier .type_specifier  | ID, type_specifier -> .-float-  | ID, type_specifier -> .-double-  | ID, type_specifier -> .-sampler2D-  | ID, type_specifier -> .-short-  | ID, type_specifier -> .-char-  | ID, type_specifier -> .-fixed2-  | ID, typedef_name -> .ID  | ID, type_specifier -> .-float4-  | ID, type_specifier -> .-half3-  | ID, type_specifier -> .-fixed4-  | ID, type_specifier -> .-float3-  | ID, )
132 <- (65, 'type_specifier') (dec_specifier -> type_specifier.  | ID, )
133 <- (65, 'typedef_name') (type_specifier -> typedef_name.  | ID, )
134 <- (65, 'unary_exp') (binary_exp -> unary_exp.  | Percent, assignment_exp -> unary_exp .assignment_op assignment_exp  | Comma, binary_exp -> unary_exp.  | GE, assignment_op -> .Assign  | String, binary_exp -> unary_exp.  | Comma, binary_exp -> unary_exp.  | Semicolon, assignment_op -> .Assign  | Number, binary_exp -> unary_exp.  | GT, binary_exp -> unary_exp.  | LeftShift, binary_exp -> unary_exp.  | AND, binary_exp -> unary_exp.  | LE, assignment_op -> .Assign  | NOT, binary_exp -> unary_exp.  | Divide, assignment_op -> .Assign  | Decrement, binary_exp -> unary_exp.  | NEQ, binary_exp -> unary_exp.  | Caret, binary_exp -> unary_exp.  | Ampersand, binary_exp -> unary_exp.  | VerticalBar, assignment_op -> .Assign  | LParen, assignment_op -> .Assign  | ID, binary_exp -> unary_exp.  | LT, binary_exp -> unary_exp.  | Times, assignment_op -> .Assign  | Plus, assignment_op -> .Assign  | Increment, binary_exp -> unary_exp.  | Plus, assignment_exp -> unary_exp .assignment_op assignment_exp  | Semicolon, binary_exp -> unary_exp.  | EQ, assignment_op -> .Assign  | Minus, binary_exp -> unary_exp.  | Question, binary_exp -> unary_exp.  | OR, assignment_op -> .Assign  | Tilde, binary_exp -> unary_exp.  | RightShift, binary_exp -> unary_exp.  | Minus, )
135 <- (65, 'unary_op') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, unary_op -> .Tilde  | String, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | RightShift, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, primary_exp -> .ID  | LT, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, unary_exp -> unary_op .unary_exp  | AND, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, primary_exp -> .LParen exp RParen  | Assign, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, primary_exp -> .Number  | AND, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_exp -> unary_op .unary_exp  | Minus, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, unary_exp -> unary_op .unary_exp  | NEQ, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, unary_exp -> unary_op .unary_exp  | LE, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_exp -> unary_op .unary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, primary_exp -> .String  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> unary_op .unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, unary_exp -> unary_op .unary_exp  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> unary_op .unary_exp  | Divide, primary_exp -> .ID  | LeftShift, unary_exp -> unary_op .unary_exp  | OR, primary_exp -> .Number  | Semicolon, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | GE, unary_exp -> .postfix_exp  | GT, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> unary_op .unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_op -> .Minus  | Decrement, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Semicolon, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Increment, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Percent, unary_exp -> unary_op .unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_op -> .Minus  | LParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | Decrement, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> unary_op .unary_exp  | Semicolon, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, postfix_exp -> .postfix_exp Dot ID  | Comma, unary_exp -> unary_op .unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, primary_exp -> .Number  | Plus, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .ID  | Comma, primary_exp -> .ID  | LBrack, unary_exp -> unary_op .unary_exp  | Question, unary_exp -> .Increment unary_exp  | Assign, unary_exp -> .postfix_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, unary_exp -> .Increment unary_exp  | Percent, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_exp -> unary_op .unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .String  | Times, unary_exp -> unary_op .unary_exp  | Plus, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .Number  | Increment, unary_exp -> unary_op .unary_exp  | Assign, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .Minus  | Number, unary_exp -> .Decrement unary_exp  | LeftShift, unary_exp -> .Decrement unary_exp  | OR, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, unary_exp -> unary_op .unary_exp  | Ampersand, postfix_exp -> .postfix_exp Increment  | Dot, unary_exp -> unary_op .unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, unary_exp -> unary_op .unary_exp  | Percent, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Decrement, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | Semicolon, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, unary_exp -> unary_op .unary_exp  | Times, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp Decrement  | Assign, unary_exp -> .postfix_exp  | LeftShift, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, unary_exp -> .Increment unary_exp  | Question, unary_exp -> unary_op .unary_exp  | RightShift, )
136 <- (65, 'while') (iteration_stm -> while .LParen exp RParen stm  | -struct-, iteration_stm -> while .LParen exp RParen stm  | -half2-, iteration_stm -> while .LParen exp RParen stm  | -float-, iteration_stm -> while .LParen exp RParen stm  | -void-, iteration_stm -> while .LParen exp RParen stm  | -float2-, iteration_stm -> while .LParen exp RParen stm  | -float3-, iteration_stm -> while .LParen exp RParen stm  | -double-, iteration_stm -> while .LParen exp RParen stm  | -continue-, iteration_stm -> while .LParen exp RParen stm  | -return-, iteration_stm -> while .LParen exp RParen stm  | Plus, iteration_stm -> while .LParen exp RParen stm  | if, iteration_stm -> while .LParen exp RParen stm  | -fixed4-, iteration_stm -> while .LParen exp RParen stm  | -int-, iteration_stm -> while .LParen exp RParen stm  | LParen, iteration_stm -> while .LParen exp RParen stm  | Increment, iteration_stm -> while .LParen exp RParen stm  | -uniform-, iteration_stm -> while .LParen exp RParen stm  | -half4-, iteration_stm -> while .LParen exp RParen stm  | -half3-, iteration_stm -> while .LParen exp RParen stm  | String, iteration_stm -> while .LParen exp RParen stm  | Tilde, iteration_stm -> while .LParen exp RParen stm  | ID, iteration_stm -> while .LParen exp RParen stm  | RBrace, iteration_stm -> while .LParen exp RParen stm  | -goto-, iteration_stm -> while .LParen exp RParen stm  | -float4-, iteration_stm -> while .LParen exp RParen stm  | break, iteration_stm -> while .LParen exp RParen stm  | Semicolon, iteration_stm -> while .LParen exp RParen stm  | -long-, iteration_stm -> while .LParen exp RParen stm  | while, iteration_stm -> while .LParen exp RParen stm  | -fixed3-, iteration_stm -> while .LParen exp RParen stm  | -fixed2-, iteration_stm -> while .LParen exp RParen stm  | -sampler2D-, iteration_stm -> while .LParen exp RParen stm  | NOT, iteration_stm -> while .LParen exp RParen stm  | LBrace, iteration_stm -> while .LParen exp RParen stm  | Decrement, iteration_stm -> while .LParen exp RParen stm  | -char-, iteration_stm -> while .LParen exp RParen stm  | -short-, iteration_stm -> while .LParen exp RParen stm  | -do-, iteration_stm -> while .LParen exp RParen stm  | Number, iteration_stm -> while .LParen exp RParen stm  | Minus, iteration_stm -> while .LParen exp RParen stm  | for, )
137 <- (66, 'parameter_dec') (parameter_list -> parameter_dec.  | Comma, parameter_list -> parameter_dec.  | RParen, )
138 <- (66, 'parameter_list') (declarator -> declarator LParen parameter_list .RParen  | LParen, parameter_list -> parameter_list .Comma parameter_dec  | RParen, parameter_list -> parameter_list .Comma parameter_dec  | Comma, declarator -> declarator LParen parameter_list .RParen  | LBrace, )
139 <- (66, 'type_specifier') (declarator -> .LParen declarator RParen  | LParen, declarator -> .ID  | LParen, parameter_dec -> type_specifier .declarator  | RParen, declarator -> .ID  | RParen, declarator -> .LParen declarator RParen  | RParen, declarator -> .declarator LParen parameter_list RParen  | RParen, parameter_dec -> type_specifier .declarator  | Comma, declarator -> .declarator LParen parameter_list RParen  | LParen, declarator -> .LParen declarator RParen  | Comma, declarator -> .ID  | Comma, declarator -> .declarator LParen parameter_list RParen  | Comma, )
140 <- (70, 'RBrace') (struct_specifier -> -struct- ID LBrace struct_dec_list RBrace.  | Semicolon, )
141 <- (70, 'struct_dec') (struct_dec_list -> struct_dec_list struct_dec.  | -half2-, struct_dec_list -> struct_dec_list struct_dec.  | -half3-, struct_dec_list -> struct_dec_list struct_dec.  | RBrace, struct_dec_list -> struct_dec_list struct_dec.  | -float4-, struct_dec_list -> struct_dec_list struct_dec.  | -float-, struct_dec_list -> struct_dec_list struct_dec.  | -fixed2-, struct_dec_list -> struct_dec_list struct_dec.  | -short-, struct_dec_list -> struct_dec_list struct_dec.  | -fixed4-, struct_dec_list -> struct_dec_list struct_dec.  | -long-, struct_dec_list -> struct_dec_list struct_dec.  | -half4-, struct_dec_list -> struct_dec_list struct_dec.  | -void-, struct_dec_list -> struct_dec_list struct_dec.  | -fixed3-, struct_dec_list -> struct_dec_list struct_dec.  | -sampler2D-, struct_dec_list -> struct_dec_list struct_dec.  | -char-, struct_dec_list -> struct_dec_list struct_dec.  | ID, struct_dec_list -> struct_dec_list struct_dec.  | -double-, struct_dec_list -> struct_dec_list struct_dec.  | -float2-, struct_dec_list -> struct_dec_list struct_dec.  | -float3-, struct_dec_list -> struct_dec_list struct_dec.  | -int-, )
142 <- (71, 'ID') (declarator -> ID.  | Comma, declarator -> ID.  | Colon, declarator -> ID.  | Semicolon, declarator -> ID.  | LParen, )
143 <- (71, 'LParen') (declarator -> LParen .declarator RParen  | Semicolon, declarator -> LParen .declarator RParen  | Colon, declarator -> LParen .declarator RParen  | LParen, declarator -> .ID  | RParen, declarator -> .LParen declarator RParen  | RParen, declarator -> .LParen declarator RParen  | LParen, declarator -> .declarator LParen parameter_list RParen  | RParen, declarator -> .ID  | LParen, declarator -> .declarator LParen parameter_list RParen  | LParen, declarator -> LParen .declarator RParen  | Comma, )
144 <- (71, 'declarator') (declarator -> declarator .LParen parameter_list RParen  | Comma, struct_declarator -> declarator .Colon ID  | Comma, struct_declarator -> declarator.  | Semicolon, struct_declarator -> declarator .Colon ID  | Semicolon, declarator -> declarator .LParen parameter_list RParen  | LParen, struct_declarator -> declarator.  | Comma, declarator -> declarator .LParen parameter_list RParen  | Colon, declarator -> declarator .LParen parameter_list RParen  | Semicolon, )
145 <- (71, 'struct_declarator') (struct_declarator_list -> struct_declarator.  | Semicolon, struct_declarator_list -> struct_declarator.  | Comma, )
146 <- (71, 'struct_declarator_list') (struct_dec -> type_specifier struct_declarator_list .Semicolon  | -double-, struct_dec -> type_specifier struct_declarator_list .Semicolon  | -fixed4-, struct_dec -> type_specifier struct_declarator_list .Semicolon  | -float-, struct_dec -> type_specifier struct_declarator_list .Semicolon  | ID, struct_dec -> type_specifier struct_declarator_list .Semicolon  | -int-, struct_dec -> type_specifier struct_declarator_list .Semicolon  | -fixed2-, struct_dec -> type_specifier struct_declarator_list .Semicolon  | -float2-, struct_dec -> type_specifier struct_declarator_list .Semicolon  | -short-, struct_dec -> type_specifier struct_declarator_list .Semicolon  | RBrace, struct_dec -> type_specifier struct_declarator_list .Semicolon  | -half2-, struct_dec -> type_specifier struct_declarator_list .Semicolon  | -sampler2D-, struct_dec -> type_specifier struct_declarator_list .Semicolon  | -half4-, struct_dec -> type_specifier struct_declarator_list .Semicolon  | -float3-, struct_dec -> type_specifier struct_declarator_list .Semicolon  | -void-, struct_dec -> type_specifier struct_declarator_list .Semicolon  | -long-, struct_declarator_list -> struct_declarator_list .Comma struct_declarator  | Semicolon, struct_dec -> type_specifier struct_declarator_list .Semicolon  | -float4-, struct_dec -> type_specifier struct_declarator_list .Semicolon  | -fixed3-, struct_declarator_list -> struct_declarator_list .Comma struct_declarator  | Comma, struct_dec -> type_specifier struct_declarator_list .Semicolon  | -half3-, struct_dec -> type_specifier struct_declarator_list .Semicolon  | -char-, )
147 <- (74, 'RParen') (declarator -> LParen declarator RParen.  | LParen, declarator -> LParen declarator RParen.  | RParen, )
148 <- (75, 'parameter_list') (declarator -> declarator LParen parameter_list .RParen  | LParen, declarator -> declarator LParen parameter_list .RParen  | RParen, parameter_list -> parameter_list .Comma parameter_dec  | RParen, parameter_list -> parameter_list .Comma parameter_dec  | Comma, )
149 <- (79, '-continue-') (jump_stm -> -continue-.  | while, )
150 <- (79, '-do-') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, stm -> .exp_stm  | while, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, exp_stm -> .Semicolon  | while, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, selection_stm -> .if LParen exp RParen stm else stm  | while, binary_exp -> .unary_exp  | Percent, compound_stm -> .LBrace block_item_list RBrace  | while, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, primary_exp -> .ID  | LT, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, unary_exp -> .unary_op unary_exp  | Semicolon, conditional_exp -> .binary_exp  | Comma, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, jump_stm -> .-return- exp Semicolon  | while, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | Ampersand, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, unary_exp -> .postfix_exp  | Semicolon, binary_exp -> .unary_exp  | LE, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, unary_exp -> .postfix_exp  | LE, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, jump_stm -> .break  | while, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .unary_exp  | Ampersand, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, iteration_stm -> .while LParen exp RParen stm  | while, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .String  | AND, postfix_exp -> .primary_exp  | Increment, jump_stm -> .-goto- ID  | while, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Decrement, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, compound_stm -> .LBrace RBrace  | while, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, stm -> .compound_stm  | while, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Semicolon, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .Tilde  | Number, stm -> .jump_stm  | while, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, binary_exp -> .unary_exp  | AND, primary_exp -> .Number  | Semicolon, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | GE, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Comma, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, stm -> .selection_stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Minus, postfix_exp -> .primary_exp  | GT, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | while, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, exp_stm -> .exp Semicolon  | while, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Assign, unary_exp -> .Decrement unary_exp  | AND, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Caret, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Dot, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | Comma, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, jump_stm -> .-continue-  | while, conditional_exp -> .binary_exp  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | EQ, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | Dot, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, stm -> .iteration_stm  | while, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, unary_exp -> .Increment unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Caret, unary_exp -> .postfix_exp  | LeftShift, )
151 <- (79, '-goto-') (jump_stm -> -goto- .ID  | while, )
152 <- (79, '-return-') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, unary_exp -> .unary_op unary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .Number  | AND, binary_exp -> .unary_exp  | LE, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Question, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, binary_exp -> .unary_exp  | LT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .String  | AND, postfix_exp -> .primary_exp  | Increment, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .String  | Question, primary_exp -> .Number  | Percent, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .Number  | Semicolon, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, postfix_exp -> .postfix_exp Increment  | Percent, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, unary_exp -> .postfix_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, jump_stm -> -return- .exp Semicolon  | while, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Dot, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | Comma, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, unary_exp -> .unary_op unary_exp  | Percent, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, conditional_exp -> .binary_exp  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .primary_exp  | LE, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | Dot, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
153 <- (79, 'ID') (primary_exp -> ID.  | Minus, primary_exp -> ID.  | NEQ, primary_exp -> ID.  | LBrack, primary_exp -> ID.  | OR, primary_exp -> ID.  | Decrement, primary_exp -> ID.  | LParen, primary_exp -> ID.  | Comma, primary_exp -> ID.  | Times, primary_exp -> ID.  | Percent, primary_exp -> ID.  | RightShift, primary_exp -> ID.  | Question, primary_exp -> ID.  | Semicolon, primary_exp -> ID.  | LE, primary_exp -> ID.  | GE, primary_exp -> ID.  | LT, primary_exp -> ID.  | EQ, primary_exp -> ID.  | GT, primary_exp -> ID.  | Caret, primary_exp -> ID.  | Increment, primary_exp -> ID.  | Divide, primary_exp -> ID.  | AND, primary_exp -> ID.  | VerticalBar, primary_exp -> ID.  | Ampersand, primary_exp -> ID.  | Assign, primary_exp -> ID.  | LeftShift, primary_exp -> ID.  | Plus, primary_exp -> ID.  | Dot, )
154 <- (79, 'LBrace') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, iteration_stm -> .while LParen exp RParen stm  | -fixed3-, exp_stm -> .exp Semicolon  | ID, exp_stm -> .Semicolon  | -half2-, block_item_list -> .block_item  | -long-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -char-, jump_stm -> .break  | -continue-, exp_stm -> .exp Semicolon  | -float4-, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, stm -> .iteration_stm  | Number, unary_exp -> .postfix_exp  | Ampersand, block_item -> .stm  | -return-, compound_stm -> .LBrace RBrace  | -do-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float3-, unary_op -> .Minus  | Minus, stm -> .compound_stm  | if, exp_stm -> .Semicolon  | -struct-, unary_exp -> .postfix_exp  | Assign, unary_exp -> .Increment unary_exp  | Percent, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -long-, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .unary_op unary_exp  | LT, unary_exp -> .Decrement unary_exp  | Minus, stm -> .iteration_stm  | String, jump_stm -> .-goto- ID  | LParen, block_item_list -> .block_item_list block_item  | -half4-, block_item_list -> .block_item_list block_item  | Minus, block_item_list -> .block_item  | -void-, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, unary_exp -> .postfix_exp  | GT, compound_stm -> .LBrace RBrace  | ID, jump_stm -> .-goto- ID  | -float4-, postfix_exp -> .postfix_exp LParen RParen  | GT, selection_stm -> .if LParen exp RParen stm else stm  | while, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -struct-, block_item_list -> .block_item_list block_item  | Number, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LParen, compound_stm -> .LBrace block_item_list RBrace  | Number, postfix_exp -> .postfix_exp Increment  | OR, exp_stm -> .Semicolon  | -long-, iteration_stm -> .while LParen exp RParen stm  | -fixed4-, block_item -> .dec  | while, unary_op -> .NOT  | Tilde, dec -> .struct_specifier Semicolon  | for, binary_exp -> .unary_exp  | Divide, dec -> .struct_specifier Semicolon  | -continue-, unary_op -> .Tilde  | LParen, selection_stm -> .if LParen exp RParen stm else stm  | -int-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | break, jump_stm -> .break  | Increment, compound_stm -> .LBrace block_item_list RBrace  | Tilde, block_item_list -> .block_item  | break, dec -> .dec_specifier init_dec_list Semicolon  | -fixed3-, compound_stm -> .LBrace RBrace  | -float2-, exp_stm -> .exp Semicolon  | -do-, unary_op -> .Plus  | ID, selection_stm -> .if LParen exp RParen stm else stm  | RBrace, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Dot ID  | Divide, postfix_exp -> .postfix_exp Decrement  | Dot, jump_stm -> .-return- exp Semicolon  | Minus, block_item -> .stm  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | LBrace, postfix_exp -> .primary_exp  | Semicolon, jump_stm -> .-continue-  | -fixed4-, block_item_list -> .block_item_list block_item  | -fixed3-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, exp_stm -> .Semicolon  | while, dec -> .struct_specifier Semicolon  | -double-, stm -> .jump_stm  | -struct-, selection_stm -> .if LParen exp RParen stm  | -float-, jump_stm -> .-return- exp Semicolon  | while, type_qualifier -> .-uniform-  | -short-, iteration_stm -> .while LParen exp RParen stm  | -sampler2D-, exp_stm -> .exp Semicolon  | -float3-, block_item -> .stm  | NOT, primary_exp -> .String  | Semicolon, block_item -> .stm  | -sampler2D-, stm -> .jump_stm  | -long-, jump_stm -> .-continue-  | ID, jump_stm -> .-return- exp Semicolon  | -struct-, dec -> .struct_specifier Semicolon  | -float2-, jump_stm -> .break  | Decrement, dec -> .dec_specifier init_dec_list Semicolon  | -int-, unary_exp -> .postfix_exp  | Times, compound_stm -> .LBrace RBrace  | -fixed3-, primary_exp -> .Number  | AND, dec -> .struct_specifier Semicolon  | String, selection_stm -> .if LParen exp RParen stm  | -half2-, postfix_exp -> .primary_exp  | RightShift, block_item_list -> .block_item_list block_item  | if, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | if, jump_stm -> .-continue-  | -int-, type_specifier -> .-half4-  | ID, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, dec -> .dec_specifier init_dec_list Semicolon  | -short-, block_item_list -> .block_item_list block_item  | RBrace, exp_stm -> .exp Semicolon  | -struct-, block_item -> .dec  | -float2-, selection_stm -> .if LParen exp RParen stm  | String, type_qualifier -> .-uniform-  | -long-, selection_stm -> .if LParen exp RParen stm  | -int-, type_specifier -> .-float2-  | ID, stm -> .jump_stm  | String, dec -> .struct_specifier Semicolon  | Number, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_exp -> .Increment unary_exp  | Plus, exp_stm -> .Semicolon  | if, selection_stm -> .if LParen exp RParen stm else stm  | -do-, stm -> .iteration_stm  | -void-, postfix_exp -> .primary_exp  | LE, exp_stm -> .exp Semicolon  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | -float-, block_item -> .dec  | -uniform-, stm -> .jump_stm  | -half4-, block_item_list -> .block_item_list block_item  | -float2-, jump_stm -> .-return- exp Semicolon  | -do-, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, block_item_list -> .block_item  | if, dec -> .struct_specifier Semicolon  | -float-, stm -> .compound_stm  | NOT, unary_exp -> .postfix_exp  | AND, stm -> .compound_stm  | -float-, unary_exp -> .Decrement unary_exp  | Assign, stm -> .jump_stm  | Decrement, primary_exp -> .String  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, block_item -> .stm  | -half4-, iteration_stm -> .while LParen exp RParen stm  | Tilde, exp -> .exp Comma assignment_exp  | Semicolon, jump_stm -> .-goto- ID  | -int-, exp_stm -> .Semicolon  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | -uniform-, type_specifier -> .-float-  | ID, block_item -> .stm  | for, selection_stm -> .if LParen exp RParen stm  | -float4-, type_specifier -> .-fixed3-  | ID, block_item_list -> .block_item_list block_item  | Semicolon, jump_stm -> .-return- exp Semicolon  | -return-, iteration_stm -> .while LParen exp RParen stm  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Tilde, postfix_exp -> .postfix_exp LParen RParen  | LBrack, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed3-, postfix_exp -> .primary_exp  | Minus, compound_stm -> .LBrace block_item_list RBrace  | -return-, jump_stm -> .break  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | -half2-, stm -> .iteration_stm  | LBrace, selection_stm -> .if LParen exp RParen stm else stm  | Number, primary_exp -> .LParen exp RParen  | LE, primary_exp -> .LParen exp RParen  | Caret, compound_stm -> .LBrace block_item_list RBrace  | -float4-, block_item -> .stm  | Semicolon, binary_exp -> .unary_exp  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float-, binary_exp -> .unary_exp  | LT, selection_stm -> .if LParen exp RParen stm else stm  | -float3-, jump_stm -> .-return- exp Semicolon  | NOT, postfix_exp -> .postfix_exp Increment  | Times, selection_stm -> .if LParen exp RParen stm else stm  | Decrement, stm -> .selection_stm  | -fixed3-, postfix_exp -> .postfix_exp Increment  | AND, iteration_stm -> .while LParen exp RParen stm  | -half2-, unary_exp -> .Increment unary_exp  | OR, exp_stm -> .Semicolon  | -continue-, selection_stm -> .if LParen exp RParen stm  | Minus, block_item_list -> .block_item_list block_item  | -goto-, jump_stm -> .-continue-  | while, selection_stm -> .if LParen exp RParen stm else stm  | Tilde, primary_exp -> .ID  | Decrement, stm -> .selection_stm  | Number, dec_specifier -> .type_specifier  | ID, unary_op -> .Minus  | ID, stm -> .exp_stm  | String, compound_stm -> .LBrace RBrace  | while, jump_stm -> .-continue-  | -float-, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | EQ, stm -> .exp_stm  | -double-, stm -> .selection_stm  | Minus, jump_stm -> .-continue-  | -return-, postfix_exp -> .postfix_exp Decrement  | Semicolon, unary_op -> .Tilde  | Number, dec -> .struct_specifier Semicolon  | -float4-, stm -> .jump_stm  | while, binary_exp -> .unary_exp  | Plus, stm -> .exp_stm  | -float4-, unary_exp -> .unary_op unary_exp  | Ampersand, compound_stm -> .LBrace block_item_list RBrace  | if, postfix_exp -> .postfix_exp Dot ID  | LT, jump_stm -> .-continue-  | for, unary_exp -> .unary_op unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | LT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, stm -> .iteration_stm  | -continue-, selection_stm -> .if LParen exp RParen stm else stm  | -float-, block_item -> .stm  | -float2-, dec -> .struct_specifier Semicolon  | -fixed2-, compound_stm -> .LBrace block_item_list RBrace  | String, block_item -> .dec  | Semicolon, unary_op -> .NOT  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | String, primary_exp -> .Number  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float4-, jump_stm -> .break  | -uniform-, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, dec -> .struct_specifier Semicolon  | NOT, dec -> .struct_specifier Semicolon  | Plus, dec -> .struct_specifier Semicolon  | -half3-, jump_stm -> .-return- exp Semicolon  | -long-, compound_stm -> .LBrace RBrace  | -return-, stm -> .exp_stm  | NOT, stm -> .iteration_stm  | Increment, jump_stm -> .-return- exp Semicolon  | LParen, iteration_stm -> .while LParen exp RParen stm  | if, postfix_exp -> .primary_exp  | Plus, stm -> .jump_stm  | -float4-, primary_exp -> .String  | Minus, stm -> .compound_stm  | Tilde, stm -> .exp_stm  | -float2-, unary_op -> .Plus  | Increment, iteration_stm -> .while LParen exp RParen stm  | -goto-, block_item_list -> .block_item_list block_item  | -continue-, selection_stm -> .if LParen exp RParen stm  | NOT, primary_exp -> .String  | Times, stm -> .selection_stm  | while, stm -> .exp_stm  | -int-, stm -> .iteration_stm  | break, iteration_stm -> .while LParen exp RParen stm  | -half3-, stm -> .iteration_stm  | -double-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -short-, stm -> .iteration_stm  | -float3-, selection_stm -> .if LParen exp RParen stm  | -half4-, primary_exp -> .String  | Increment, jump_stm -> .-return- exp Semicolon  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -uniform-, block_item -> .dec  | -sampler2D-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, jump_stm -> .-return- exp Semicolon  | ID, jump_stm -> .-return- exp Semicolon  | -char-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed3-, primary_exp -> .Number  | Dot, exp_stm -> .Semicolon  | -do-, exp_stm -> .Semicolon  | for, primary_exp -> .LParen exp RParen  | Ampersand, block_item -> .dec  | -continue-, type_qualifier -> .-uniform-  | -fixed3-, postfix_exp -> .primary_exp  | Comma, block_item -> .dec  | Increment, primary_exp -> .ID  | LBrack, unary_exp -> .postfix_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LBrack, block_item -> .dec  | NOT, selection_stm -> .if LParen exp RParen stm  | LParen, compound_stm -> .LBrace block_item_list RBrace  | for, block_item_list -> .block_item_list block_item  | while, jump_stm -> .break  | -fixed2-, type_specifier -> .-fixed4-  | ID, compound_stm -> .LBrace RBrace  | Plus, unary_exp -> .unary_op unary_exp  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, stm -> .selection_stm  | -short-, postfix_exp -> .postfix_exp Dot ID  | Semicolon, type_qualifier -> .-uniform-  | -fixed2-, compound_stm -> .LBrace RBrace  | break, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, stm -> .selection_stm  | -fixed4-, jump_stm -> .-goto- ID  | -void-, compound_stm -> .LBrace block_item_list RBrace  | -fixed2-, dec -> .dec_specifier init_dec_list Semicolon  | -long-, unary_op -> .Minus  | Plus, primary_exp -> .LParen exp RParen  | LT, compound_stm -> .LBrace RBrace  | -char-, primary_exp -> .String  | LT, block_item -> .stm  | -int-, unary_exp -> .postfix_exp  | NEQ, stm -> .compound_stm  | Increment, selection_stm -> .if LParen exp RParen stm  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | break, stm -> .compound_stm  | -void-, stm -> .jump_stm  | -float2-, unary_exp -> .Increment unary_exp  | NEQ, stm -> .selection_stm  | -return-, stm -> .iteration_stm  | -fixed3-, block_item -> .stm  | -float3-, compound_stm -> .LBrace RBrace  | Semicolon, unary_op -> .Minus  | NOT, block_item -> .dec  | ID, iteration_stm -> .while LParen exp RParen stm  | LParen, stm -> .iteration_stm  | -float2-, type_specifier -> .-long-  | ID, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | NOT, primary_exp -> .ID  | Semicolon, exp_stm -> .exp Semicolon  | -int-, postfix_exp -> .postfix_exp Decrement  | AND, unary_op -> .Tilde  | Increment, stm -> .iteration_stm  | -fixed4-, postfix_exp -> .postfix_exp LParen RParen  | EQ, stm -> .selection_stm  | Decrement, jump_stm -> .-continue-  | -do-, block_item -> .dec  | -void-, unary_exp -> .Decrement unary_exp  | LeftShift, block_item_list -> .block_item  | -half2-, jump_stm -> .-continue-  | Tilde, stm -> .exp_stm  | LBrace, jump_stm -> .-continue-  | -half4-, dec -> .struct_specifier Semicolon  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | OR, stm -> .jump_stm  | -float3-, jump_stm -> .break  | for, jump_stm -> .-continue-  | -goto-, compound_stm -> .LBrace RBrace  | -void-, exp_stm -> .Semicolon  | -fixed2-, selection_stm -> .if LParen exp RParen stm else stm  | -void-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Plus, block_item_list -> .block_item_list block_item  | Plus, exp_stm -> .Semicolon  | -fixed4-, compound_stm -> .LBrace RBrace  | -float4-, stm -> .iteration_stm  | -char-, block_item_list -> .block_item  | LBrace, jump_stm -> .break  | -float4-, stm -> .jump_stm  | -void-, primary_exp -> .Number  | VerticalBar, block_item -> .dec  | Decrement, stm -> .exp_stm  | Increment, compound_stm -> .LBrace RBrace  | -fixed4-, dec -> .struct_specifier Semicolon  | -fixed3-, exp_stm -> .exp Semicolon  | -sampler2D-, binary_exp -> .unary_exp  | Times, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed2-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float3-, stm -> .jump_stm  | Minus, postfix_exp -> .postfix_exp Increment  | VerticalBar, struct_specifier -> .-struct- ID  | Semicolon, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, jump_stm -> .break  | if, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half4-, jump_stm -> .-return- exp Semicolon  | -goto-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float-, jump_stm -> .-goto- ID  | -goto-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, stm -> .compound_stm  | -fixed4-, exp_stm -> .exp Semicolon  | -half2-, block_item_list -> .block_item_list block_item  | -void-, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | Minus, postfix_exp -> .postfix_exp Dot ID  | RightShift, stm -> .compound_stm  | -short-, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, iteration_stm -> .while LParen exp RParen stm  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -float2-, jump_stm -> .break  | -char-, binary_exp -> .unary_exp  | OR, stm -> .compound_stm  | -fixed2-, compound_stm -> .LBrace block_item_list RBrace  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | LParen, stm -> .selection_stm  | RBrace, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, stm -> .compound_stm  | -char-, type_specifier -> .-int-  | ID, compound_stm -> LBrace .block_item_list RBrace  | while, compound_stm -> .LBrace RBrace  | -long-, compound_stm -> .LBrace block_item_list RBrace  | -do-, jump_stm -> .-continue-  | -uniform-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LBrace, stm -> .compound_stm  | -goto-, jump_stm -> .break  | -return-, stm -> .compound_stm  | -float4-, block_item_list -> .block_item_list block_item  | -int-, iteration_stm -> .while LParen exp RParen stm  | -uniform-, jump_stm -> .-continue-  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -short-, postfix_exp -> .postfix_exp LParen RParen  | NEQ, block_item_list -> .block_item  | while, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, jump_stm -> .-return- exp Semicolon  | -half3-, primary_exp -> .LParen exp RParen  | NEQ, compound_stm -> .LBrace RBrace  | Increment, compound_stm -> .LBrace block_item_list RBrace  | -continue-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Plus, dec -> .dec_specifier init_dec_list Semicolon  | RBrace, block_item_list -> .block_item  | -float4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, postfix_exp -> .postfix_exp Decrement  | Times, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -int-, unary_op -> .NOT  | LParen, exp_stm -> .exp Semicolon  | String, block_item -> .stm  | -fixed2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .String  | Dot, stm -> .jump_stm  | LParen, jump_stm -> .-return- exp Semicolon  | -short-, dec -> .dec_specifier init_dec_list Semicolon  | LParen, unary_exp -> .unary_op unary_exp  | Plus, dec -> .dec_specifier init_dec_list Semicolon  | -struct-, stm -> .compound_stm  | -float3-, unary_op -> .NOT  | String, stm -> .selection_stm  | -float4-, block_item -> .dec  | -float4-, dec -> .dec_specifier init_dec_list Semicolon  | -char-, binary_exp -> .unary_exp  | Percent, compound_stm -> .LBrace block_item_list RBrace  | while, stm -> .iteration_stm  | Minus, block_item -> .stm  | -half3-, postfix_exp -> .postfix_exp Increment  | GE, block_item_list -> .block_item_list block_item  | -fixed2-, primary_exp -> .ID  | LParen, unary_exp -> .Increment unary_exp  | Divide, exp_stm -> .Semicolon  | ID, unary_op -> .NOT  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed2-, jump_stm -> .-goto- ID  | -struct-, jump_stm -> .break  | Minus, compound_stm -> .LBrace RBrace  | if, jump_stm -> .break  | -void-, block_item_list -> .block_item_list block_item  | for, iteration_stm -> .while LParen exp RParen stm  | -float-, block_item -> .stm  | Plus, type_qualifier -> .-uniform-  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | NOT, primary_exp -> .ID  | Times, stm -> .compound_stm  | -sampler2D-, stm -> .selection_stm  | LParen, dec -> .dec_specifier init_dec_list Semicolon  | for, selection_stm -> .if LParen exp RParen stm else stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | LBrace, dec -> .dec_specifier init_dec_list Semicolon  | String, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, binary_exp -> .binary_exp binary_op unary_exp  | Caret, primary_exp -> .LParen exp RParen  | Divide, unary_op -> .Tilde  | Tilde, exp_stm -> .Semicolon  | -fixed3-, type_qualifier -> .-uniform-  | -char-, stm -> .exp_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -return-, unary_exp -> .Decrement unary_exp  | Divide, stm -> .compound_stm  | -do-, jump_stm -> .-return- exp Semicolon  | -fixed3-, stm -> .selection_stm  | -struct-, stm -> .exp_stm  | -return-, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -long-, postfix_exp -> .postfix_exp Decrement  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, iteration_stm -> .while LParen exp RParen stm  | for, stm -> .selection_stm  | if, stm -> .compound_stm  | -uniform-, type_qualifier -> .-uniform-  | -float-, jump_stm -> .-continue-  | RBrace, binary_exp -> .unary_exp  | LE, jump_stm -> .-return- exp Semicolon  | -float4-, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, stm -> .exp_stm  | LParen, dec -> .dec_specifier init_dec_list Semicolon  | -float2-, selection_stm -> .if LParen exp RParen stm else stm  | -fixed3-, block_item_list -> .block_item_list block_item  | -struct-, primary_exp -> .ID  | VerticalBar, stm -> .compound_stm  | Minus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | if, block_item -> .stm  | -uniform-, stm -> .compound_stm  | -float2-, block_item_list -> .block_item_list block_item  | -fixed4-, primary_exp -> .Number  | LeftShift, exp_stm -> .exp Semicolon  | Tilde, jump_stm -> .break  | while, jump_stm -> .-continue-  | -char-, jump_stm -> .break  | LParen, compound_stm -> .LBrace RBrace  | LBrace, jump_stm -> .-goto- ID  | -float-, block_item -> .stm  | -do-, dec -> .dec_specifier init_dec_list Semicolon  | Number, postfix_exp -> .postfix_exp Decrement  | Percent, jump_stm -> .break  | -float-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, selection_stm -> .if LParen exp RParen stm  | -fixed2-, primary_exp -> .LParen exp RParen  | Times, stm -> .selection_stm  | ID, selection_stm -> .if LParen exp RParen stm  | -double-, exp_stm -> .Semicolon  | LParen, block_item_list -> .block_item_list block_item  | -half2-, stm -> .exp_stm  | Minus, exp_stm -> .exp Semicolon  | -uniform-, compound_stm -> .LBrace block_item_list RBrace  | -double-, postfix_exp -> .primary_exp  | AND, primary_exp -> .ID  | OR, selection_stm -> .if LParen exp RParen stm  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, postfix_exp -> .postfix_exp Increment  | GT, stm -> .jump_stm  | Semicolon, iteration_stm -> .while LParen exp RParen stm  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | Times, exp_stm -> .Semicolon  | -half4-, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, compound_stm -> .LBrace RBrace  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, unary_exp -> .unary_op unary_exp  | Question, stm -> .selection_stm  | -half3-, selection_stm -> .if LParen exp RParen stm else stm  | -double-, unary_exp -> .unary_op unary_exp  | Times, stm -> .iteration_stm  | -int-, dec -> .struct_specifier Semicolon  | -float3-, exp_stm -> .exp Semicolon  | Plus, jump_stm -> .-continue-  | -float2-, block_item -> .stm  | -double-, block_item_list -> .block_item  | Increment, primary_exp -> .String  | Question, iteration_stm -> .while LParen exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Comma, dec -> .dec_specifier init_dec_list Semicolon  | Minus, stm -> .iteration_stm  | -do-, block_item_list -> .block_item  | NOT, unary_exp -> .Decrement unary_exp  | GT, block_item -> .stm  | -float-, primary_exp -> .ID  | LE, block_item_list -> .block_item_list block_item  | -char-, stm -> .exp_stm  | -float-, compound_stm -> .LBrace block_item_list RBrace  | -sampler2D-, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | LeftShift, jump_stm -> .-return- exp Semicolon  | Number, exp_stm -> .exp Semicolon  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, block_item_list -> .block_item_list block_item  | Decrement, selection_stm -> .if LParen exp RParen stm  | -uniform-, jump_stm -> .-continue-  | -sampler2D-, dec -> .dec_specifier init_dec_list Semicolon  | ID, iteration_stm -> .while LParen exp RParen stm  | -int-, block_item_list -> .block_item  | -half3-, dec -> .struct_specifier Semicolon  | -long-, type_qualifier -> .-uniform-  | -float2-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Semicolon, dec -> .dec_specifier init_dec_list Semicolon  | Semicolon, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | for, postfix_exp -> .postfix_exp Decrement  | Increment, block_item -> .stm  | -goto-, binary_exp -> .binary_exp binary_op unary_exp  | Minus, primary_exp -> .LParen exp RParen  | OR, selection_stm -> .if LParen exp RParen stm else stm  | -fixed2-, postfix_exp -> .primary_exp  | Question, block_item -> .stm  | -char-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, jump_stm -> .break  | -fixed4-, dec -> .dec_specifier init_dec_list Semicolon  | -sampler2D-, stm -> .compound_stm  | -int-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | RBrace, stm -> .compound_stm  | -half2-, selection_stm -> .if LParen exp RParen stm else stm  | -fixed4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, stm -> .iteration_stm  | -short-, selection_stm -> .if LParen exp RParen stm  | Tilde, postfix_exp -> .postfix_exp Increment  | LeftShift, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> .postfix_exp  | Caret, stm -> .jump_stm  | Increment, selection_stm -> .if LParen exp RParen stm  | Number, primary_exp -> .ID  | LT, postfix_exp -> .postfix_exp Dot ID  | Caret, iteration_stm -> .while LParen exp RParen stm  | NOT, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -return-, dec -> .struct_specifier Semicolon  | Decrement, primary_exp -> .Number  | Percent, iteration_stm -> .while LParen exp RParen stm  | -return-, primary_exp -> .LParen exp RParen  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -double-, primary_exp -> .Number  | Assign, block_item_list -> .block_item  | RBrace, block_item -> .dec  | -float3-, compound_stm -> .LBrace block_item_list RBrace  | -void-, jump_stm -> .break  | -goto-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Increment, stm -> .compound_stm  | RBrace, postfix_exp -> .postfix_exp Dot ID  | GT, stm -> .exp_stm  | -continue-, stm -> .iteration_stm  | Plus, unary_exp -> .Decrement unary_exp  | Caret, selection_stm -> .if LParen exp RParen stm  | -fixed4-, exp_stm -> .Semicolon  | -uniform-, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, block_item_list -> .block_item  | ID, block_item_list -> .block_item  | -uniform-, stm -> .exp_stm  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Minus, postfix_exp -> .postfix_exp Decrement  | Divide, exp_stm -> .Semicolon  | Minus, unary_exp -> .postfix_exp  | VerticalBar, primary_exp -> .String  | Divide, block_item -> .dec  | -float-, unary_exp -> .postfix_exp  | EQ, stm -> .exp_stm  | ID, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, iteration_stm -> .while LParen exp RParen stm  | break, postfix_exp -> .postfix_exp Increment  | Minus, unary_exp -> .Increment unary_exp  | AND, iteration_stm -> .while LParen exp RParen stm  | -double-, jump_stm -> .-goto- ID  | LBrace, primary_exp -> .ID  | RightShift, selection_stm -> .if LParen exp RParen stm else stm  | -char-, stm -> .iteration_stm  | -long-, postfix_exp -> .postfix_exp Increment  | LE, jump_stm -> .-continue-  | -continue-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Tilde, primary_exp -> .ID  | NEQ, block_item_list -> .block_item_list block_item  | LParen, stm -> .compound_stm  | -half4-, unary_exp -> .unary_op unary_exp  | NEQ, block_item -> .dec  | -goto-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -double-, exp_stm -> .exp Semicolon  | Minus, selection_stm -> .if LParen exp RParen stm  | for, selection_stm -> .if LParen exp RParen stm  | ID, block_item -> .stm  | Tilde, stm -> .jump_stm  | ID, jump_stm -> .-return- exp Semicolon  | -half4-, block_item -> .dec  | for, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, dec -> .struct_specifier Semicolon  | RBrace, type_qualifier -> .-uniform-  | -void-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | RBrace, compound_stm -> .LBrace RBrace  | -struct-, unary_exp -> .postfix_exp  | Question, primary_exp -> .String  | LBrack, selection_stm -> .if LParen exp RParen stm else stm  | -half2-, jump_stm -> .-return- exp Semicolon  | Plus, stm -> .exp_stm  | -float3-, unary_exp -> .Increment unary_exp  | Comma, block_item_list -> .block_item_list block_item  | LBrace, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -uniform-, jump_stm -> .-return- exp Semicolon  | if, compound_stm -> LBrace .RBrace  | while, jump_stm -> .-goto- ID  | -fixed3-, dec -> .struct_specifier Semicolon  | -do-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | break, block_item -> .stm  | LBrace, stm -> .selection_stm  | -fixed2-, block_item -> .stm  | LParen, compound_stm -> .LBrace RBrace  | LParen, block_item -> .stm  | while, jump_stm -> .-return- exp Semicolon  | -continue-, stm -> .selection_stm  | -int-, stm -> .exp_stm  | -fixed4-, jump_stm -> .break  | -half4-, postfix_exp -> .primary_exp  | GT, block_item -> .stm  | break, binary_exp -> .unary_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, unary_op -> .Minus  | Tilde, unary_op -> .Tilde  | NOT, primary_exp -> .Number  | RightShift, jump_stm -> .-goto- ID  | Increment, primary_exp -> .String  | Ampersand, stm -> .jump_stm  | -short-, stm -> .exp_stm  | break, binary_exp -> .unary_exp  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -struct-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -char-, block_item_list -> .block_item  | LParen, compound_stm -> .LBrace RBrace  | -sampler2D-, jump_stm -> .-continue-  | Plus, unary_exp -> .Increment unary_exp  | GE, jump_stm -> .-continue-  | -half2-, unary_exp -> .Increment unary_exp  | EQ, compound_stm -> .LBrace RBrace  | Tilde, exp_stm -> .exp Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | ID, stm -> .jump_stm  | -char-, block_item_list -> .block_item  | Decrement, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | Comma, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half2-, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, conditional_exp -> .binary_exp  | Semicolon, iteration_stm -> .while LParen exp RParen stm  | -void-, exp_stm -> .Semicolon  | RBrace, postfix_exp -> .postfix_exp Dot ID  | Minus, stm -> .jump_stm  | -continue-, dec -> .struct_specifier Semicolon  | break, stm -> .compound_stm  | -struct-, stm -> .selection_stm  | NOT, jump_stm -> .-return- exp Semicolon  | -float2-, postfix_exp -> .postfix_exp Dot ID  | LParen, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, jump_stm -> .-return- exp Semicolon  | -float3-, iteration_stm -> .while LParen exp RParen stm  | -struct-, postfix_exp -> .postfix_exp Increment  | Dot, type_qualifier -> .-uniform-  | -float4-, stm -> .compound_stm  | break, jump_stm -> .break  | -long-, block_item -> .stm  | -float4-, postfix_exp -> .postfix_exp Increment  | Divide, stm -> .selection_stm  | -float2-, stm -> .jump_stm  | -return-, exp_stm -> .Semicolon  | break, unary_exp -> .postfix_exp  | OR, exp_stm -> .Semicolon  | -double-, block_item -> .dec  | LBrace, jump_stm -> .-goto- ID  | RBrace, postfix_exp -> .postfix_exp Decrement  | LE, selection_stm -> .if LParen exp RParen stm  | -short-, block_item -> .dec  | if, binary_exp -> .unary_exp  | AND, block_item -> .dec  | LParen, compound_stm -> .LBrace block_item_list RBrace  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, primary_exp -> .ID  | Dot, stm -> .selection_stm  | -double-, stm -> .iteration_stm  | NOT, primary_exp -> .Number  | NEQ, jump_stm -> .-continue-  | -double-, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, jump_stm -> .-goto- ID  | -half2-, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Increment  | EQ, exp_stm -> .exp Semicolon  | NOT, jump_stm -> .-continue-  | -float3-, unary_exp -> .postfix_exp  | Percent, block_item_list -> .block_item_list block_item  | Increment, binary_exp -> .unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, exp_stm -> .exp Semicolon  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -char-, exp_stm -> .Semicolon  | Plus, compound_stm -> .LBrace RBrace  | -float3-, stm -> .jump_stm  | -double-, dec -> .dec_specifier init_dec_list Semicolon  | -half3-, compound_stm -> .LBrace block_item_list RBrace  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | -half4-, jump_stm -> .break  | LBrace, jump_stm -> .break  | -short-, jump_stm -> .-continue-  | Minus, jump_stm -> .-continue-  | String, primary_exp -> .String  | OR, dec -> .struct_specifier Semicolon  | Semicolon, stm -> .selection_stm  | for, postfix_exp -> .postfix_exp Decrement  | EQ, exp_stm -> .exp Semicolon  | -continue-, compound_stm -> .LBrace block_item_list RBrace  | Increment, type_qualifier -> .-uniform-  | -fixed4-, stm -> .jump_stm  | Tilde, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, block_item_list -> .block_item  | String, selection_stm -> .if LParen exp RParen stm  | -half3-, stm -> .jump_stm  | -goto-, postfix_exp -> .primary_exp  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -float3-, block_item -> .stm  | Number, unary_exp -> .Decrement unary_exp  | GE, selection_stm -> .if LParen exp RParen stm else stm  | for, jump_stm -> .break  | Plus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float4-, type_qualifier -> .-uniform-  | -half4-, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, block_item_list -> .block_item  | -goto-, exp_stm -> .exp Semicolon  | Increment, dec -> .dec_specifier init_dec_list Semicolon  | while, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, stm -> .jump_stm  | -fixed2-, stm -> .compound_stm  | -return-, type_qualifier -> .-uniform-  | -int-, unary_exp -> .Decrement unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | Minus, postfix_exp -> .primary_exp  | LT, primary_exp -> .LParen exp RParen  | AND, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -do-, exp_stm -> .exp Semicolon  | for, selection_stm -> .if LParen exp RParen stm else stm  | NOT, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, stm -> .selection_stm  | -continue-, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, dec -> .dec_specifier init_dec_list Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | -return-, jump_stm -> .-continue-  | Number, stm -> .jump_stm  | -fixed4-, unary_exp -> .unary_op unary_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | -struct-, primary_exp -> .LParen exp RParen  | VerticalBar, jump_stm -> .break  | break, compound_stm -> .LBrace RBrace  | -double-, postfix_exp -> .postfix_exp Decrement  | OR, compound_stm -> .LBrace block_item_list RBrace  | -half3-, block_item -> .dec  | RBrace, stm -> .jump_stm  | -sampler2D-, block_item -> .dec  | Number, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .primary_exp  | LeftShift, primary_exp -> .ID  | Plus, stm -> .exp_stm  | -half2-, primary_exp -> .ID  | GT, selection_stm -> .if LParen exp RParen stm else stm  | -long-, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, block_item_list -> .block_item  | -int-, dec -> .dec_specifier init_dec_list Semicolon  | -half2-, stm -> .compound_stm  | -half3-, selection_stm -> .if LParen exp RParen stm  | if, jump_stm -> .-continue-  | if, compound_stm -> .LBrace block_item_list RBrace  | Decrement, unary_op -> .Minus  | LParen, jump_stm -> .-goto- ID  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -goto-, block_item_list -> .block_item  | Tilde, primary_exp -> .Number  | Question, jump_stm -> .-goto- ID  | -long-, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, jump_stm -> .-continue-  | -struct-, jump_stm -> .-return- exp Semicolon  | -int-, block_item_list -> .block_item_list block_item  | NOT, stm -> .iteration_stm  | -half2-, primary_exp -> .Number  | LBrack, stm -> .exp_stm  | -long-, binary_exp -> .unary_exp  | NEQ, iteration_stm -> .while LParen exp RParen stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Comma, exp_stm -> .Semicolon  | -int-, dec -> .struct_specifier Semicolon  | ID, exp_stm -> .Semicolon  | -short-, struct_specifier -> .-struct- ID LBrace struct_dec_list RBrace  | Semicolon, jump_stm -> .-goto- ID  | -fixed2-, stm -> .exp_stm  | Tilde, exp_stm -> .exp Semicolon  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | String, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, selection_stm -> .if LParen exp RParen stm  | -void-, stm -> .exp_stm  | -do-, jump_stm -> .-continue-  | Increment, stm -> .exp_stm  | while, postfix_exp -> .postfix_exp Increment  | Question, unary_exp -> .Decrement unary_exp  | Ampersand, block_item_list -> .block_item  | Plus, compound_stm -> .LBrace block_item_list RBrace  | Plus, iteration_stm -> .while LParen exp RParen stm  | -do-, dec -> .dec_specifier init_dec_list Semicolon  | -void-, primary_exp -> .LParen exp RParen  | EQ, block_item -> .dec  | String, block_item -> .stm  | String, postfix_exp -> .postfix_exp LParen RParen  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | Plus, postfix_exp -> .primary_exp  | Times, jump_stm -> .-goto- ID  | if, block_item -> .stm  | -continue-, block_item -> .dec  | -long-, jump_stm -> .-continue-  | break, dec -> .struct_specifier Semicolon  | -short-, block_item -> .stm  | if, block_item_list -> .block_item_list block_item  | -float4-, type_specifier -> .typedef_name  | ID, dec -> .struct_specifier Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm  | -sampler2D-, selection_stm -> .if LParen exp RParen stm else stm  | -float4-, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp Decrement  | NEQ, dec -> .struct_specifier Semicolon  | -uniform-, dec -> .dec_specifier init_dec_list Semicolon  | NOT, selection_stm -> .if LParen exp RParen stm else stm  | -short-, primary_exp -> .ID  | LeftShift, selection_stm -> .if LParen exp RParen stm  | -float2-, block_item_list -> .block_item  | for, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, jump_stm -> .-goto- ID  | while, type_specifier -> .-short-  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | NEQ, stm -> .jump_stm  | -do-, postfix_exp -> .postfix_exp Decrement  | Plus, exp_stm -> .exp Semicolon  | -half4-, block_item_list -> .block_item  | -fixed4-, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, primary_exp -> .Number  | OR, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -half3-, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, jump_stm -> .-goto- ID  | String, jump_stm -> .-goto- ID  | -float3-, stm -> .exp_stm  | if, jump_stm -> .break  | String, block_item_list -> .block_item  | -fixed3-, postfix_exp -> .postfix_exp Increment  | LT, selection_stm -> .if LParen exp RParen stm  | RBrace, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, block_item_list -> .block_item_list block_item  | -long-, exp_stm -> .Semicolon  | -void-, dec -> .dec_specifier init_dec_list Semicolon  | LBrace, stm -> .selection_stm  | -do-, jump_stm -> .-return- exp Semicolon  | -double-, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp Increment  | NEQ, dec -> .dec_specifier init_dec_list Semicolon  | Decrement, stm -> .selection_stm  | -void-, stm -> .selection_stm  | -half2-, stm -> .exp_stm  | -struct-, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, stm -> .iteration_stm  | Semicolon, jump_stm -> .break  | -fixed3-, primary_exp -> .LParen exp RParen  | Percent, dec -> .dec_specifier init_dec_list Semicolon  | -continue-, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, jump_stm -> .-return- exp Semicolon  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | Semicolon, primary_exp -> .ID  | GE, unary_op -> .Plus  | Plus, stm -> .exp_stm  | Semicolon, exp_stm -> .Semicolon  | Number, selection_stm -> .if LParen exp RParen stm else stm  | -sampler2D-, block_item_list -> .block_item_list block_item  | -double-, exp_stm -> .Semicolon  | -float-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, dec -> .struct_specifier Semicolon  | LParen, jump_stm -> .-goto- ID  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | String, stm -> .jump_stm  | LBrace, primary_exp -> .ID  | Assign, stm -> .iteration_stm  | -half4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed4-, dec -> .dec_specifier init_dec_list Semicolon  | Plus, type_specifier -> .-half2-  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, stm -> .compound_stm  | String, dec -> .dec_specifier init_dec_list Semicolon  | if, jump_stm -> .break  | Number, postfix_exp -> .postfix_exp LParen RParen  | LE, type_specifier -> .-fixed2-  | ID, jump_stm -> .-goto- ID  | -fixed4-, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, stm -> .jump_stm  | NOT, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, type_qualifier -> .-uniform-  | -sampler2D-, exp_stm -> .Semicolon  | -float4-, binary_exp -> .binary_exp binary_op unary_exp  | LE, block_item -> .dec  | -fixed3-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, compound_stm -> .LBrace block_item_list RBrace  | -int-, stm -> .selection_stm  | Increment, jump_stm -> .-continue-  | Semicolon, block_item -> .dec  | -return-, primary_exp -> .LParen exp RParen  | Minus, compound_stm -> .LBrace RBrace  | Number, block_item_list -> .block_item  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | -float2-, dec -> .struct_specifier Semicolon  | -sampler2D-, primary_exp -> .Number  | Plus, dec -> .struct_specifier Semicolon  | Minus, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, stm -> .jump_stm  | -half3-, exp_stm -> .exp Semicolon  | -fixed3-, jump_stm -> .-goto- ID  | -double-, postfix_exp -> .postfix_exp LParen RParen  | Question, jump_stm -> .-return- exp Semicolon  | Semicolon, selection_stm -> .if LParen exp RParen stm  | Decrement, unary_exp -> .postfix_exp  | LE, exp_stm -> .exp Semicolon  | -short-, primary_exp -> .String  | Assign, block_item -> .dec  | -struct-, stm -> .exp_stm  | for, exp_stm -> .Semicolon  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | String, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, stm -> .selection_stm  | -half4-, primary_exp -> .LParen exp RParen  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | if, stm -> .iteration_stm  | -uniform-, unary_exp -> .unary_op unary_exp  | GT, compound_stm -> .LBrace block_item_list RBrace  | NOT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, block_item -> .dec  | break, primary_exp -> .LParen exp RParen  | LParen, stm -> .jump_stm  | Number, exp_stm -> .exp Semicolon  | RBrace, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half4-, jump_stm -> .break  | -do-, unary_exp -> .unary_op unary_exp  | AND, stm -> .jump_stm  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Number, postfix_exp -> .primary_exp  | Assign, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -continue-, exp_stm -> .Semicolon  | LBrace, jump_stm -> .-goto- ID  | -short-, stm -> .exp_stm  | -half4-, compound_stm -> .LBrace RBrace  | -fixed2-, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_exp -> .unary_op unary_exp  | Percent, exp_stm -> .exp Semicolon  | if, dec -> .struct_specifier Semicolon  | while, postfix_exp -> .primary_exp  | Divide, block_item -> .dec  | -char-, postfix_exp -> .postfix_exp LParen RParen  | Increment, stm -> .compound_stm  | ID, selection_stm -> .if LParen exp RParen stm  | while, block_item -> .dec  | -double-, block_item_list -> .block_item_list block_item  | -return-, iteration_stm -> .while LParen exp RParen stm  | -continue-, block_item -> .dec  | -fixed4-, postfix_exp -> .primary_exp  | LBrack, dec -> .struct_specifier Semicolon  | -half2-, jump_stm -> .break  | -int-, exp_stm -> .Semicolon  | -goto-, jump_stm -> .break  | -float3-, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, block_item_list -> .block_item  | -short-, block_item_list -> .block_item  | -struct-, jump_stm -> .-return- exp Semicolon  | -void-, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, binary_exp -> .unary_exp  | EQ, stm -> .exp_stm  | -void-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, jump_stm -> .-continue-  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -float3-, primary_exp -> .ID  | Divide, selection_stm -> .if LParen exp RParen stm else stm  | -uniform-, stm -> .compound_stm  | Decrement, type_qualifier -> .-uniform-  | -half2-, jump_stm -> .-goto- ID  | ID, stm -> .exp_stm  | -fixed3-, postfix_exp -> .postfix_exp Dot ID  | EQ, stm -> .selection_stm  | -float3-, unary_exp -> .unary_op unary_exp  | Comma, jump_stm -> .-return- exp Semicolon  | -float-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Semicolon, binary_exp -> .unary_exp  | GE, compound_stm -> .LBrace block_item_list RBrace  | -goto-, primary_exp -> .String  | LParen, stm -> .selection_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -int-, stm -> .compound_stm  | for, dec -> .dec_specifier init_dec_list Semicolon  | -return-, stm -> .jump_stm  | if, jump_stm -> .-goto- ID  | -float2-, stm -> .selection_stm  | Tilde, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, stm -> .compound_stm  | -long-, assignment_exp -> .conditional_exp  | Comma, unary_op -> .Plus  | Decrement, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | Assign, jump_stm -> .-goto- ID  | -half3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LBrace, jump_stm -> .-continue-  | -void-, stm -> .iteration_stm  | -half3-, exp_stm -> .Semicolon  | Tilde, block_item_list -> .block_item  | -half4-, selection_stm -> .if LParen exp RParen stm else stm  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | Plus, stm -> .iteration_stm  | while, stm -> .selection_stm  | LBrace, postfix_exp -> .postfix_exp LParen RParen  | Assign, compound_stm -> .LBrace RBrace  | -half3-, stm -> .jump_stm  | break, stm -> .iteration_stm  | -float-, exp_stm -> .Semicolon  | -float3-, primary_exp -> .String  | GT, stm -> .compound_stm  | -continue-, stm -> .exp_stm  | Plus, postfix_exp -> .postfix_exp Decrement  | Minus, stm -> .selection_stm  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, stm -> .iteration_stm  | ID, stm -> .compound_stm  | Plus, compound_stm -> .LBrace block_item_list RBrace  | RBrace, block_item_list -> .block_item_list block_item  | String, primary_exp -> .Number  | EQ, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Increment, exp_stm -> .exp Semicolon  | -long-, compound_stm -> .LBrace RBrace  | String, selection_stm -> .if LParen exp RParen stm  | Increment, block_item_list -> .block_item  | -char-, exp_stm -> .Semicolon  | Increment, primary_exp -> .ID  | Comma, dec -> .dec_specifier init_dec_list Semicolon  | -goto-, primary_exp -> .String  | LeftShift, block_item -> .dec  | -int-, jump_stm -> .-continue-  | -fixed3-, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, postfix_exp -> .primary_exp  | OR, iteration_stm -> .while LParen exp RParen stm  | RBrace, unary_exp -> .postfix_exp  | RightShift, compound_stm -> .LBrace block_item_list RBrace  | -fixed4-, block_item_list -> .block_item  | -continue-, block_item_list -> .block_item  | -double-, unary_op -> .Tilde  | Decrement, exp_stm -> .exp Semicolon  | -half3-, iteration_stm -> .while LParen exp RParen stm  | Plus, block_item_list -> .block_item  | -return-, selection_stm -> .if LParen exp RParen stm  | -do-, stm -> .selection_stm  | Plus, compound_stm -> .LBrace RBrace  | NOT, exp_stm -> .Semicolon  | Decrement, type_specifier -> .-char-  | ID, block_item_list -> .block_item_list block_item  | -uniform-, exp_stm -> .Semicolon  | -float2-, dec -> .dec_specifier init_dec_list Semicolon  | -half4-, iteration_stm -> .while LParen exp RParen stm  | Number, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, exp_stm -> .exp Semicolon  | Decrement, block_item -> .dec  | -half3-, stm -> .iteration_stm  | LParen, stm -> .jump_stm  | -half2-, selection_stm -> .if LParen exp RParen stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Percent, jump_stm -> .break  | ID, jump_stm -> .-goto- ID  | Semicolon, block_item -> .stm  | -half2-, postfix_exp -> .postfix_exp Increment  | Ampersand, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Number, binary_exp -> .unary_exp  | GT, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half3-, stm -> .iteration_stm  | Tilde, block_item_list -> .block_item  | Number, compound_stm -> .LBrace block_item_list RBrace  | LBrace, postfix_exp -> .postfix_exp Increment  | Semicolon, jump_stm -> .break  | -sampler2D-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, block_item_list -> .block_item  | -float-, type_specifier -> .-double-  | ID, exp_stm -> .exp Semicolon  | -double-, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, stm -> .exp_stm  | -char-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LParen, compound_stm -> .LBrace RBrace  | -half2-, jump_stm -> .-goto- ID  | -do-, exp_stm -> .exp Semicolon  | -float-, stm -> .jump_stm  | -float-, unary_exp -> .unary_op unary_exp  | VerticalBar, stm -> .selection_stm  | -sampler2D-, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, dec -> .dec_specifier init_dec_list Semicolon  | -fixed2-, unary_op -> .Minus  | Decrement, selection_stm -> .if LParen exp RParen stm  | Plus, jump_stm -> .-return- exp Semicolon  | -fixed4-, block_item -> .stm  | -struct-, exp_stm -> .exp Semicolon  | -char-, jump_stm -> .-return- exp Semicolon  | -half2-, dec -> .dec_specifier init_dec_list Semicolon  | -double-, postfix_exp -> .postfix_exp Increment  | Comma, block_item_list -> .block_item_list block_item  | -sampler2D-, jump_stm -> .-continue-  | -fixed2-, stm -> .compound_stm  | LBrace, block_item -> .stm  | -fixed4-, exp_stm -> .exp Semicolon  | LBrace, jump_stm -> .-continue-  | -short-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, block_item_list -> .block_item_list block_item  | break, binary_exp -> .binary_exp binary_op unary_exp  | EQ, dec -> .struct_specifier Semicolon  | -int-, block_item -> .dec  | Tilde, postfix_exp -> .primary_exp  | Percent, primary_exp -> .String  | Comma, stm -> .iteration_stm  | -fixed2-, binary_exp -> .binary_exp binary_op unary_exp  | Question, exp_stm -> .Semicolon  | -char-, block_item -> .stm  | ID, jump_stm -> .-return- exp Semicolon  | LBrace, block_item_list -> .block_item  | -sampler2D-, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | Plus, primary_exp -> .Number  | GE, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | for, primary_exp -> .Number  | Times, jump_stm -> .-return- exp Semicolon  | Increment, jump_stm -> .break  | -struct-, binary_exp -> .unary_exp  | RightShift, block_item_list -> .block_item_list block_item  | Tilde, primary_exp -> .ID  | Minus, dec -> .struct_specifier Semicolon  | LBrace, selection_stm -> .if LParen exp RParen stm  | -continue-, type_qualifier -> .-uniform-  | ID, selection_stm -> .if LParen exp RParen stm else stm  | -half4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, unary_op -> .Plus  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -sampler2D-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed4-, block_item_list -> .block_item_list block_item  | -half3-, jump_stm -> .break  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, compound_stm -> .LBrace RBrace  | for, selection_stm -> .if LParen exp RParen stm  | break, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, type_qualifier -> .-uniform-  | -double-, block_item_list -> .block_item_list block_item  | -float-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, stm -> .selection_stm  | -char-, compound_stm -> .LBrace block_item_list RBrace  | ID, dec -> .struct_specifier Semicolon  | Tilde, jump_stm -> .break  | -double-, postfix_exp -> .postfix_exp LParen RParen  | OR, exp_stm -> .exp Semicolon  | -void-, exp_stm -> .exp Semicolon  | -return-, block_item -> .stm  | Increment, stm -> .compound_stm  | -double-, compound_stm -> .LBrace RBrace  | -continue-, stm -> .iteration_stm  | for, postfix_exp -> .postfix_exp Increment  | RightShift, stm -> .exp_stm  | -short-, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .primary_exp  | Caret, compound_stm -> .LBrace block_item_list RBrace  | break, selection_stm -> .if LParen exp RParen stm  | -float3-, postfix_exp -> .postfix_exp Increment  | Caret, jump_stm -> .-goto- ID  | Tilde, type_specifier -> .-half3-  | ID, jump_stm -> .-goto- ID  | Number, postfix_exp -> .primary_exp  | Decrement, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -continue-, dec -> .dec_specifier init_dec_list Semicolon  | Tilde, jump_stm -> .-goto- ID  | Decrement, postfix_exp -> .primary_exp  | Ampersand, block_item_list -> .block_item_list block_item  | -short-, jump_stm -> .-goto- ID  | -uniform-, compound_stm -> .LBrace RBrace  | -uniform-, dec -> .struct_specifier Semicolon  | if, compound_stm -> .LBrace block_item_list RBrace  | -short-, compound_stm -> .LBrace block_item_list RBrace  | -long-, selection_stm -> .if LParen exp RParen stm  | -return-, jump_stm -> .-return- exp Semicolon  | -uniform-, exp_stm -> .Semicolon  | -return-, selection_stm -> .if LParen exp RParen stm  | LBrace, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, jump_stm -> .-continue-  | LParen, stm -> .iteration_stm  | -goto-, stm -> .compound_stm  | while, stm -> .exp_stm  | -sampler2D-, jump_stm -> .-goto- ID  | break, postfix_exp -> .postfix_exp LParen RParen  | LT, compound_stm -> .LBrace RBrace  | -int-, dec -> .dec_specifier init_dec_list Semicolon  | -uniform-, jump_stm -> .-continue-  | LBrace, dec -> .struct_specifier Semicolon  | -struct-, jump_stm -> .-return- exp Semicolon  | break, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, block_item -> .stm  | Minus, stm -> .exp_stm  | Number, unary_exp -> .Increment unary_exp  | Caret, block_item_list -> .block_item  | -float2-, block_item -> .dec  | Minus, block_item -> .dec  | -short-, primary_exp -> .String  | AND, unary_exp -> .unary_op unary_exp  | Divide, block_item_list -> .block_item_list block_item  | -do-, dec_specifier -> .type_qualifier type_specifier  | ID, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -void-, postfix_exp -> .postfix_exp Dot ID  | Percent, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -goto-, exp_stm -> .exp Semicolon  | break, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, iteration_stm -> .while LParen exp RParen stm  | -fixed2-, stm -> .selection_stm  | -float-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -do-, unary_exp -> .postfix_exp  | Comma, binary_exp -> .unary_exp  | LeftShift, jump_stm -> .break  | -half2-, stm -> .selection_stm  | Semicolon, jump_stm -> .-continue-  | -long-, block_item -> .dec  | -half4-, compound_stm -> .LBrace block_item_list RBrace  | -float2-, stm -> .compound_stm  | -fixed3-, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -sampler2D-, block_item -> .stm  | -fixed3-, jump_stm -> .-return- exp Semicolon  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -short-, primary_exp -> .ID  | Percent, stm -> .compound_stm  | Number, primary_exp -> .Number  | Comma, stm -> .compound_stm  | LParen, compound_stm -> .LBrace RBrace  | -short-, unary_exp -> .Decrement unary_exp  | Percent, stm -> .selection_stm  | break, dec -> .dec_specifier init_dec_list Semicolon  | -float-, block_item -> .dec  | -half2-, binary_exp -> .binary_exp binary_op unary_exp  | AND, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Decrement, stm -> .iteration_stm  | if, type_specifier -> .-void-  | ID, unary_exp -> .postfix_exp  | GE, dec -> .dec_specifier init_dec_list Semicolon  | Increment, selection_stm -> .if LParen exp RParen stm else stm  | -continue-, block_item -> .dec  | Plus, compound_stm -> .LBrace RBrace  | -half4-, dec -> .struct_specifier Semicolon  | -goto-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float2-, stm -> .jump_stm  | RBrace, jump_stm -> .-goto- ID  | -half4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, compound_stm -> .LBrace RBrace  | -goto-, postfix_exp -> .postfix_exp LParen RParen  | Divide, exp_stm -> .exp Semicolon  | while, stm -> .jump_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half2-, primary_exp -> .LParen exp RParen  | Assign, unary_exp -> .Increment unary_exp  | Assign, jump_stm -> .-goto- ID  | -return-, postfix_exp -> .postfix_exp Increment  | Assign, jump_stm -> .break  | Tilde, block_item -> .dec  | -do-, type_specifier -> .-float3-  | ID, jump_stm -> .-continue-  | -half3-, block_item_list -> .block_item  | Minus, primary_exp -> .Number  | Minus, stm -> .iteration_stm  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -half4-, exp_stm -> .exp Semicolon  | -goto-, jump_stm -> .-goto- ID  | for, stm -> .iteration_stm  | Decrement, stm -> .jump_stm  | -int-, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, selection_stm -> .if LParen exp RParen stm else stm  | -struct-, stm -> .exp_stm  | -goto-, dec -> .struct_specifier Semicolon  | -half4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | ID, unary_exp -> .Increment unary_exp  | VerticalBar, dec -> .struct_specifier Semicolon  | -return-, block_item -> .stm  | -short-, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, stm -> .selection_stm  | String, postfix_exp -> .postfix_exp LParen RParen  | Caret, primary_exp -> .ID  | AND, postfix_exp -> .postfix_exp LParen RParen  | Dot, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | String, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, exp_stm -> .Semicolon  | NOT, jump_stm -> .-goto- ID  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | Tilde, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, block_item_list -> .block_item_list block_item  | ID, selection_stm -> .if LParen exp RParen stm  | -fixed3-, dec -> .dec_specifier init_dec_list Semicolon  | -float4-, dec -> .dec_specifier init_dec_list Semicolon  | -float3-, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Decrement  | LBrack, primary_exp -> .ID  | Ampersand, stm -> .exp_stm  | RBrace, unary_exp -> .Increment unary_exp  | Semicolon, stm -> .exp_stm  | Decrement, block_item -> .dec  | -fixed2-, compound_stm -> .LBrace RBrace  | RBrace, primary_exp -> .LParen exp RParen  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, stm -> .selection_stm  | -long-, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, block_item_list -> .block_item  | -do-, unary_op -> .NOT  | NOT, unary_op -> .NOT  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -goto-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | ID, binary_exp -> .binary_exp binary_op unary_exp  | GT, jump_stm -> .-goto- ID  | -continue-, exp_stm -> .Semicolon  | String, postfix_exp -> .postfix_exp Decrement  | Assign, stm -> .iteration_stm  | RBrace, stm -> .iteration_stm  | -struct-, dec -> .dec_specifier init_dec_list Semicolon  | break, jump_stm -> .break  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, exp_stm -> .exp Semicolon  | -float2-, iteration_stm -> .while LParen exp RParen stm  | -float4-, exp_stm -> .Semicolon  | -half3-, dec -> .struct_specifier Semicolon  | Increment, unary_exp -> .Decrement unary_exp  | Plus, primary_exp -> .LParen exp RParen  | Plus, type_specifier -> .-sampler2D-  | ID, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, compound_stm -> .LBrace RBrace  | -float-, unary_exp -> .unary_op unary_exp  | LeftShift, block_item_list -> .block_item  | -float3-, dec -> .dec_specifier init_dec_list Semicolon  | -do-, block_item_list -> .block_item  | Semicolon, block_item -> .stm  | -long-, stm -> .iteration_stm  | -sampler2D-, jump_stm -> .-goto- ID  | NOT, jump_stm -> .-continue-  | Decrement, unary_exp -> .postfix_exp  | Plus, stm -> .jump_stm  | for, type_specifier -> .-float4-  | ID, unary_op -> .Plus  | Tilde, compound_stm -> .LBrace RBrace  | Minus, iteration_stm -> .while LParen exp RParen stm  | -char-, iteration_stm -> .while LParen exp RParen stm  | ID, unary_exp -> .Increment unary_exp  | LE, stm -> .exp_stm  | -fixed2-, jump_stm -> .-goto- ID  | -char-, stm -> .iteration_stm  | -return-, jump_stm -> .-return- exp Semicolon  | for, dec -> .struct_specifier Semicolon  | -void-, block_item -> .stm  | -void-, primary_exp -> .LParen exp RParen  | Decrement, stm -> .compound_stm  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | -struct-, unary_exp -> .postfix_exp  | Divide, jump_stm -> .-return- exp Semicolon  | -sampler2D-, block_item_list -> .block_item_list block_item  | -float3-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, jump_stm -> .break  | -float2-, primary_exp -> .Number  | LParen, jump_stm -> .break  | -half3-, typedef_name -> .ID  | ID, selection_stm -> .if LParen exp RParen stm  | -char-, stm -> .jump_stm  | -fixed3-, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, type_qualifier -> .-uniform-  | -float3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -void-, block_item -> .stm  | RBrace, unary_exp -> .postfix_exp  | LeftShift, )
155 <- (79, 'Semicolon') (exp_stm -> Semicolon.  | while, )
156 <- (79, 'break') (jump_stm -> break.  | while, )
157 <- (79, 'compound_stm') (stm -> compound_stm.  | while, )
158 <- (79, 'exp') (exp -> exp .Comma assignment_exp  | Comma, exp_stm -> exp .Semicolon  | while, exp -> exp .Comma assignment_exp  | Semicolon, )
159 <- (79, 'exp_stm') (stm -> exp_stm.  | while, )
160 <- (79, 'for') (iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | while, )
161 <- (79, 'if') (selection_stm -> if .LParen exp RParen stm else stm  | while, selection_stm -> if .LParen exp RParen stm  | while, )
162 <- (79, 'iteration_stm') (stm -> iteration_stm.  | while, )
163 <- (79, 'jump_stm') (stm -> jump_stm.  | while, )
164 <- (79, 'selection_stm') (stm -> selection_stm.  | while, )
165 <- (79, 'stm') (iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -float4-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -sampler2D-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | if, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -long-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | String, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -half2-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -void-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -float-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -fixed3-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | Minus, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -fixed4-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -uniform-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -fixed2-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | LBrace, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -float3-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -goto-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | ID, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | Increment, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -int-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -half4-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | break, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | Decrement, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | LParen, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -continue-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | RBrace, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -do-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -float2-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | NOT, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -short-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | while, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | Plus, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | Tilde, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -half3-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -struct-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | Number, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -return-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | for, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -double-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -char-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | Semicolon, )
166 <- (79, 'while') (iteration_stm -> while .LParen exp RParen stm  | while, )
167 <- (88, 'ID') (jump_stm -> -goto- ID.  | Number, jump_stm -> -goto- ID.  | -float3-, jump_stm -> -goto- ID.  | -float-, jump_stm -> -goto- ID.  | -char-, jump_stm -> -goto- ID.  | NOT, jump_stm -> -goto- ID.  | -do-, jump_stm -> -goto- ID.  | -float4-, jump_stm -> -goto- ID.  | Increment, jump_stm -> -goto- ID.  | -int-, jump_stm -> -goto- ID.  | Tilde, jump_stm -> -goto- ID.  | Decrement, jump_stm -> -goto- ID.  | LParen, jump_stm -> -goto- ID.  | -half2-, jump_stm -> -goto- ID.  | -half4-, jump_stm -> -goto- ID.  | ID, jump_stm -> -goto- ID.  | -float2-, jump_stm -> -goto- ID.  | -uniform-, jump_stm -> -goto- ID.  | break, jump_stm -> -goto- ID.  | -sampler2D-, jump_stm -> -goto- ID.  | -fixed4-, jump_stm -> -goto- ID.  | -half3-, jump_stm -> -goto- ID.  | -void-, jump_stm -> -goto- ID.  | -struct-, jump_stm -> -goto- ID.  | -fixed3-, jump_stm -> -goto- ID.  | String, jump_stm -> -goto- ID.  | -return-, jump_stm -> -goto- ID.  | -fixed2-, jump_stm -> -goto- ID.  | Semicolon, jump_stm -> -goto- ID.  | -long-, jump_stm -> -goto- ID.  | -goto-, jump_stm -> -goto- ID.  | RBrace, jump_stm -> -goto- ID.  | for, jump_stm -> -goto- ID.  | -continue-, jump_stm -> -goto- ID.  | while, jump_stm -> -goto- ID.  | if, jump_stm -> -goto- ID.  | Minus, jump_stm -> -goto- ID.  | Plus, jump_stm -> -goto- ID.  | -short-, jump_stm -> -goto- ID.  | LBrace, jump_stm -> -goto- ID.  | -double-, )
168 <- (94, 'exp') (jump_stm -> -return- exp .Semicolon  | LBrace, jump_stm -> -return- exp .Semicolon  | -do-, jump_stm -> -return- exp .Semicolon  | ID, jump_stm -> -return- exp .Semicolon  | break, jump_stm -> -return- exp .Semicolon  | Number, jump_stm -> -return- exp .Semicolon  | -float-, jump_stm -> -return- exp .Semicolon  | Minus, jump_stm -> -return- exp .Semicolon  | -fixed3-, jump_stm -> -return- exp .Semicolon  | -void-, jump_stm -> -return- exp .Semicolon  | String, jump_stm -> -return- exp .Semicolon  | -return-, jump_stm -> -return- exp .Semicolon  | for, jump_stm -> -return- exp .Semicolon  | -int-, jump_stm -> -return- exp .Semicolon  | Decrement, jump_stm -> -return- exp .Semicolon  | -struct-, jump_stm -> -return- exp .Semicolon  | -half4-, jump_stm -> -return- exp .Semicolon  | -float2-, exp -> exp .Comma assignment_exp  | Comma, jump_stm -> -return- exp .Semicolon  | -long-, jump_stm -> -return- exp .Semicolon  | LParen, jump_stm -> -return- exp .Semicolon  | NOT, jump_stm -> -return- exp .Semicolon  | -goto-, jump_stm -> -return- exp .Semicolon  | Increment, jump_stm -> -return- exp .Semicolon  | RBrace, jump_stm -> -return- exp .Semicolon  | -float4-, exp -> exp .Comma assignment_exp  | Semicolon, jump_stm -> -return- exp .Semicolon  | if, jump_stm -> -return- exp .Semicolon  | -uniform-, jump_stm -> -return- exp .Semicolon  | Plus, jump_stm -> -return- exp .Semicolon  | -short-, jump_stm -> -return- exp .Semicolon  | -half3-, jump_stm -> -return- exp .Semicolon  | -sampler2D-, jump_stm -> -return- exp .Semicolon  | -continue-, jump_stm -> -return- exp .Semicolon  | Semicolon, jump_stm -> -return- exp .Semicolon  | while, jump_stm -> -return- exp .Semicolon  | -double-, jump_stm -> -return- exp .Semicolon  | -float3-, jump_stm -> -return- exp .Semicolon  | Tilde, jump_stm -> -return- exp .Semicolon  | -fixed2-, jump_stm -> -return- exp .Semicolon  | -char-, jump_stm -> -return- exp .Semicolon  | -half2-, jump_stm -> -return- exp .Semicolon  | -fixed4-, )
169 <- (98, 'unary_exp') (unary_exp -> Decrement unary_exp.  | RightShift, unary_exp -> Decrement unary_exp.  | OR, unary_exp -> Decrement unary_exp.  | Semicolon, unary_exp -> Decrement unary_exp.  | LE, unary_exp -> Decrement unary_exp.  | Divide, unary_exp -> Decrement unary_exp.  | Caret, unary_exp -> Decrement unary_exp.  | EQ, unary_exp -> Decrement unary_exp.  | Percent, unary_exp -> Decrement unary_exp.  | LT, unary_exp -> Decrement unary_exp.  | GE, unary_exp -> Decrement unary_exp.  | Ampersand, unary_exp -> Decrement unary_exp.  | LeftShift, unary_exp -> Decrement unary_exp.  | Question, unary_exp -> Decrement unary_exp.  | Minus, unary_exp -> Decrement unary_exp.  | Plus, unary_exp -> Decrement unary_exp.  | NEQ, unary_exp -> Decrement unary_exp.  | AND, unary_exp -> Decrement unary_exp.  | Times, unary_exp -> Decrement unary_exp.  | Assign, unary_exp -> Decrement unary_exp.  | GT, unary_exp -> Decrement unary_exp.  | Comma, unary_exp -> Decrement unary_exp.  | VerticalBar, )
170 <- (100, 'unary_exp') (unary_exp -> Increment unary_exp.  | Semicolon, unary_exp -> Increment unary_exp.  | Question, unary_exp -> Increment unary_exp.  | LeftShift, unary_exp -> Increment unary_exp.  | Caret, unary_exp -> Increment unary_exp.  | LE, unary_exp -> Increment unary_exp.  | Comma, unary_exp -> Increment unary_exp.  | Divide, unary_exp -> Increment unary_exp.  | OR, unary_exp -> Increment unary_exp.  | Assign, unary_exp -> Increment unary_exp.  | VerticalBar, unary_exp -> Increment unary_exp.  | GE, unary_exp -> Increment unary_exp.  | Times, unary_exp -> Increment unary_exp.  | Ampersand, unary_exp -> Increment unary_exp.  | AND, unary_exp -> Increment unary_exp.  | LT, unary_exp -> Increment unary_exp.  | GT, unary_exp -> Increment unary_exp.  | NEQ, unary_exp -> Increment unary_exp.  | Plus, unary_exp -> Increment unary_exp.  | EQ, unary_exp -> Increment unary_exp.  | RightShift, unary_exp -> Increment unary_exp.  | Minus, unary_exp -> Increment unary_exp.  | Percent, )
171 <- (101, 'RBrace') (compound_stm -> LBrace RBrace.  | Minus, compound_stm -> LBrace RBrace.  | -half3-, compound_stm -> LBrace RBrace.  | String, compound_stm -> LBrace RBrace.  | for, compound_stm -> LBrace RBrace.  | -return-, compound_stm -> LBrace RBrace.  | -void-, compound_stm -> LBrace RBrace.  | Increment, compound_stm -> LBrace RBrace.  | -int-, compound_stm -> LBrace RBrace.  | Decrement, compound_stm -> LBrace RBrace.  | Plus, compound_stm -> LBrace RBrace.  | -goto-, compound_stm -> LBrace RBrace.  | -fixed3-, compound_stm -> LBrace RBrace.  | -continue-, compound_stm -> LBrace RBrace.  | -sampler2D-, compound_stm -> LBrace RBrace.  | -float4-, compound_stm -> LBrace RBrace.  | -float3-, compound_stm -> LBrace RBrace.  | Number, compound_stm -> LBrace RBrace.  | ID, compound_stm -> LBrace RBrace.  | Semicolon, compound_stm -> LBrace RBrace.  | -half2-, compound_stm -> LBrace RBrace.  | -do-, compound_stm -> LBrace RBrace.  | -long-, compound_stm -> LBrace RBrace.  | -float-, compound_stm -> LBrace RBrace.  | LParen, compound_stm -> LBrace RBrace.  | if, compound_stm -> LBrace RBrace.  | while, compound_stm -> LBrace RBrace.  | Tilde, compound_stm -> LBrace RBrace.  | -char-, compound_stm -> LBrace RBrace.  | LBrace, compound_stm -> LBrace RBrace.  | -fixed4-, compound_stm -> LBrace RBrace.  | -struct-, compound_stm -> LBrace RBrace.  | RBrace, compound_stm -> LBrace RBrace.  | -half4-, compound_stm -> LBrace RBrace.  | -short-, compound_stm -> LBrace RBrace.  | -uniform-, compound_stm -> LBrace RBrace.  | -float2-, compound_stm -> LBrace RBrace.  | NOT, compound_stm -> LBrace RBrace.  | -fixed2-, compound_stm -> LBrace RBrace.  | break, compound_stm -> LBrace RBrace.  | -double-, )
172 <- (101, 'block_item_list') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, iteration_stm -> .while LParen exp RParen stm  | -fixed3-, block_item_list -> block_item_list .block_item  | -void-, exp_stm -> .Semicolon  | -half2-, stm -> .iteration_stm  | String, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -char-, jump_stm -> .break  | -continue-, exp_stm -> .exp Semicolon  | -float4-, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, stm -> .iteration_stm  | Number, unary_exp -> .postfix_exp  | Ampersand, dec -> .dec_specifier init_dec_list Semicolon  | -fixed3-, compound_stm -> .LBrace RBrace  | -do-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float3-, unary_op -> .Minus  | Minus, stm -> .compound_stm  | if, selection_stm -> .if LParen exp RParen stm  | Plus, exp_stm -> .Semicolon  | -struct-, exp_stm -> .Semicolon  | Plus, unary_exp -> .Increment unary_exp  | Percent, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -long-, compound_stm -> LBrace block_item_list .RBrace  | while, selection_stm -> .if LParen exp RParen stm  | -continue-, unary_exp -> .Decrement unary_exp  | Minus, jump_stm -> .-goto- ID  | LParen, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, unary_exp -> .postfix_exp  | GT, compound_stm -> .LBrace RBrace  | ID, jump_stm -> .-goto- ID  | -float4-, postfix_exp -> .postfix_exp LParen RParen  | GT, selection_stm -> .if LParen exp RParen stm else stm  | while, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -struct-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LParen, compound_stm -> .LBrace block_item_list RBrace  | Number, postfix_exp -> .postfix_exp Increment  | OR, exp_stm -> .Semicolon  | -long-, iteration_stm -> .while LParen exp RParen stm  | -fixed4-, block_item -> .dec  | while, unary_op -> .NOT  | Tilde, dec -> .struct_specifier Semicolon  | for, binary_exp -> .unary_exp  | Divide, dec -> .struct_specifier Semicolon  | -continue-, unary_op -> .Tilde  | LParen, selection_stm -> .if LParen exp RParen stm else stm  | -int-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | break, compound_stm -> .LBrace block_item_list RBrace  | Tilde, block_item -> .stm  | -return-, compound_stm -> .LBrace RBrace  | -float2-, exp_stm -> .exp Semicolon  | -do-, unary_op -> .Plus  | ID, compound_stm -> .LBrace RBrace  | -goto-, selection_stm -> .if LParen exp RParen stm else stm  | RBrace, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Dot ID  | Divide, postfix_exp -> .postfix_exp Decrement  | Dot, compound_stm -> LBrace block_item_list .RBrace  | RBrace, block_item -> .stm  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | LBrace, postfix_exp -> .primary_exp  | Semicolon, jump_stm -> .-continue-  | -fixed4-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, dec -> .struct_specifier Semicolon  | -double-, stm -> .jump_stm  | -struct-, unary_exp -> .Increment unary_exp  | Divide, jump_stm -> .-return- exp Semicolon  | while, dec -> .struct_specifier Semicolon  | LBrace, block_item_list -> block_item_list .block_item  | -uniform-, iteration_stm -> .while LParen exp RParen stm  | -sampler2D-, exp_stm -> .exp Semicolon  | -float3-, block_item -> .stm  | NOT, primary_exp -> .String  | Semicolon, block_item -> .stm  | -sampler2D-, stm -> .jump_stm  | -long-, jump_stm -> .-continue-  | ID, jump_stm -> .-return- exp Semicolon  | -struct-, dec -> .struct_specifier Semicolon  | -float2-, jump_stm -> .break  | Decrement, dec -> .dec_specifier init_dec_list Semicolon  | -int-, unary_exp -> .postfix_exp  | Times, compound_stm -> .LBrace RBrace  | -fixed3-, primary_exp -> .Number  | AND, block_item_list -> block_item_list .block_item  | Semicolon, dec -> .struct_specifier Semicolon  | String, selection_stm -> .if LParen exp RParen stm  | -half2-, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | if, compound_stm -> .LBrace block_item_list RBrace  | for, type_specifier -> .-half4-  | ID, postfix_exp -> .postfix_exp LParen RParen  | Percent, exp_stm -> .exp Semicolon  | -struct-, block_item -> .dec  | -float2-, selection_stm -> .if LParen exp RParen stm  | String, type_qualifier -> .-uniform-  | -long-, selection_stm -> .if LParen exp RParen stm  | -int-, type_specifier -> .-float2-  | ID, stm -> .jump_stm  | String, dec -> .struct_specifier Semicolon  | Number, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_exp -> .Increment unary_exp  | Plus, compound_stm -> LBrace block_item_list .RBrace  | LParen, exp_stm -> .Semicolon  | if, selection_stm -> .if LParen exp RParen stm else stm  | -do-, stm -> .iteration_stm  | -void-, postfix_exp -> .primary_exp  | LE, exp_stm -> .exp Semicolon  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | -float-, block_item -> .dec  | -uniform-, stm -> .jump_stm  | -half4-, jump_stm -> .-return- exp Semicolon  | -do-, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, dec -> .struct_specifier Semicolon  | -float-, stm -> .compound_stm  | NOT, unary_exp -> .postfix_exp  | AND, unary_exp -> .Decrement unary_exp  | Assign, stm -> .jump_stm  | Decrement, primary_exp -> .String  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, stm -> .selection_stm  | -continue-, iteration_stm -> .while LParen exp RParen stm  | Tilde, exp -> .exp Comma assignment_exp  | Semicolon, jump_stm -> .-goto- ID  | -int-, exp_stm -> .Semicolon  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | -uniform-, type_specifier -> .-float-  | ID, block_item -> .stm  | for, selection_stm -> .if LParen exp RParen stm  | -float4-, type_specifier -> .-fixed3-  | ID, jump_stm -> .-return- exp Semicolon  | -return-, iteration_stm -> .while LParen exp RParen stm  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Tilde, postfix_exp -> .postfix_exp LParen RParen  | LBrack, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, compound_stm -> LBrace block_item_list .RBrace  | -half3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed3-, compound_stm -> LBrace block_item_list .RBrace  | -sampler2D-, selection_stm -> .if LParen exp RParen stm  | RBrace, jump_stm -> .break  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | -half2-, stm -> .iteration_stm  | LBrace, selection_stm -> .if LParen exp RParen stm else stm  | Number, stm -> .iteration_stm  | -uniform-, primary_exp -> .LParen exp RParen  | LE, primary_exp -> .LParen exp RParen  | Caret, compound_stm -> .LBrace block_item_list RBrace  | -float4-, compound_stm -> LBrace block_item_list .RBrace  | -short-, dec -> .struct_specifier Semicolon  | Tilde, binary_exp -> .unary_exp  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float-, binary_exp -> .unary_exp  | LT, selection_stm -> .if LParen exp RParen stm else stm  | -float3-, jump_stm -> .-return- exp Semicolon  | NOT, postfix_exp -> .postfix_exp Increment  | Times, selection_stm -> .if LParen exp RParen stm else stm  | Decrement, stm -> .selection_stm  | -fixed3-, stm -> .compound_stm  | -double-, iteration_stm -> .while LParen exp RParen stm  | -half2-, unary_exp -> .Increment unary_exp  | OR, exp_stm -> .Semicolon  | -continue-, selection_stm -> .if LParen exp RParen stm  | Minus, jump_stm -> .-continue-  | while, selection_stm -> .if LParen exp RParen stm else stm  | Tilde, primary_exp -> .ID  | Decrement, stm -> .selection_stm  | Number, compound_stm -> LBrace block_item_list .RBrace  | -float-, dec_specifier -> .type_specifier  | ID, unary_op -> .Minus  | ID, compound_stm -> LBrace block_item_list .RBrace  | -half4-, dec -> .struct_specifier Semicolon  | -long-, compound_stm -> .LBrace RBrace  | while, jump_stm -> .-continue-  | -float-, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | EQ, stm -> .exp_stm  | -double-, stm -> .selection_stm  | Minus, exp_stm -> .exp Semicolon  | -half3-, postfix_exp -> .postfix_exp Decrement  | Semicolon, stm -> .exp_stm  | while, unary_op -> .Tilde  | Number, exp_stm -> .exp Semicolon  | -goto-, stm -> .jump_stm  | while, binary_exp -> .unary_exp  | Plus, stm -> .exp_stm  | -float4-, postfix_exp -> .postfix_exp LParen RParen  | OR, compound_stm -> .LBrace block_item_list RBrace  | if, postfix_exp -> .postfix_exp Dot ID  | LT, jump_stm -> .-continue-  | for, unary_exp -> .unary_op unary_exp  | Assign, jump_stm -> .-return- exp Semicolon  | -half2-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, stm -> .iteration_stm  | -continue-, selection_stm -> .if LParen exp RParen stm else stm  | -float-, block_item -> .stm  | -float2-, dec -> .struct_specifier Semicolon  | -fixed2-, compound_stm -> .LBrace block_item_list RBrace  | String, block_item -> .dec  | Semicolon, unary_op -> .NOT  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | String, primary_exp -> .Number  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float4-, jump_stm -> .break  | -uniform-, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, dec -> .struct_specifier Semicolon  | NOT, dec -> .struct_specifier Semicolon  | Plus, dec -> .struct_specifier Semicolon  | -half3-, dec -> .struct_specifier Semicolon  | -half4-, jump_stm -> .-return- exp Semicolon  | -long-, compound_stm -> .LBrace RBrace  | -return-, stm -> .exp_stm  | NOT, compound_stm -> LBrace block_item_list .RBrace  | -float4-, stm -> .iteration_stm  | Increment, jump_stm -> .-return- exp Semicolon  | LParen, iteration_stm -> .while LParen exp RParen stm  | if, postfix_exp -> .primary_exp  | Plus, stm -> .jump_stm  | -float4-, primary_exp -> .String  | Minus, stm -> .compound_stm  | Tilde, stm -> .exp_stm  | -float2-, unary_op -> .Plus  | Increment, iteration_stm -> .while LParen exp RParen stm  | -goto-, block_item_list -> block_item_list .block_item  | -half4-, selection_stm -> .if LParen exp RParen stm  | NOT, dec -> .dec_specifier init_dec_list Semicolon  | -float3-, primary_exp -> .String  | Times, stm -> .selection_stm  | while, stm -> .exp_stm  | -int-, stm -> .iteration_stm  | break, iteration_stm -> .while LParen exp RParen stm  | -half3-, stm -> .iteration_stm  | -double-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -goto-, stm -> .iteration_stm  | -float3-, selection_stm -> .if LParen exp RParen stm  | -half4-, primary_exp -> .String  | Increment, jump_stm -> .-return- exp Semicolon  | Decrement, compound_stm -> LBrace block_item_list .RBrace  | -uniform-, block_item -> .dec  | -sampler2D-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, jump_stm -> .-return- exp Semicolon  | ID, jump_stm -> .-return- exp Semicolon  | -char-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed3-, primary_exp -> .Number  | Dot, exp_stm -> .Semicolon  | -do-, exp_stm -> .Semicolon  | for, primary_exp -> .LParen exp RParen  | Ampersand, block_item -> .dec  | -continue-, type_qualifier -> .-uniform-  | -fixed3-, block_item_list -> block_item_list .block_item  | Tilde, postfix_exp -> .primary_exp  | Comma, block_item -> .dec  | Increment, primary_exp -> .ID  | LBrack, unary_exp -> .postfix_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LBrack, block_item -> .dec  | NOT, selection_stm -> .if LParen exp RParen stm  | LParen, jump_stm -> .-continue-  | -int-, jump_stm -> .break  | -fixed2-, type_specifier -> .-fixed4-  | ID, compound_stm -> .LBrace RBrace  | Plus, block_item_list -> block_item_list .block_item  | -double-, unary_exp -> .unary_op unary_exp  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, stm -> .selection_stm  | -short-, postfix_exp -> .postfix_exp Dot ID  | Semicolon, type_qualifier -> .-uniform-  | -fixed2-, compound_stm -> .LBrace RBrace  | break, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, stm -> .selection_stm  | -fixed4-, jump_stm -> .-goto- ID  | -void-, compound_stm -> .LBrace block_item_list RBrace  | -fixed2-, dec -> .dec_specifier init_dec_list Semicolon  | -long-, unary_op -> .Minus  | Tilde, primary_exp -> .LParen exp RParen  | LT, compound_stm -> .LBrace RBrace  | -char-, primary_exp -> .String  | LT, block_item -> .stm  | -int-, compound_stm -> LBrace block_item_list .RBrace  | -fixed4-, unary_exp -> .postfix_exp  | NEQ, selection_stm -> .if LParen exp RParen stm  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | break, stm -> .compound_stm  | -void-, stm -> .jump_stm  | -float2-, unary_exp -> .Increment unary_exp  | NEQ, exp_stm -> .exp Semicolon  | -int-, compound_stm -> LBrace block_item_list .RBrace  | Semicolon, stm -> .iteration_stm  | -fixed3-, compound_stm -> LBrace block_item_list .RBrace  | LBrace, block_item -> .stm  | -float3-, compound_stm -> .LBrace RBrace  | Semicolon, unary_op -> .Minus  | NOT, block_item -> .dec  | ID, iteration_stm -> .while LParen exp RParen stm  | LParen, stm -> .iteration_stm  | -float2-, type_specifier -> .-long-  | ID, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | NOT, primary_exp -> .ID  | Semicolon, stm -> .selection_stm  | -return-, postfix_exp -> .postfix_exp Decrement  | AND, unary_op -> .Tilde  | Increment, stm -> .iteration_stm  | -fixed4-, postfix_exp -> .postfix_exp LParen RParen  | EQ, stm -> .selection_stm  | Decrement, jump_stm -> .-continue-  | -do-, block_item -> .dec  | -void-, unary_exp -> .Decrement unary_exp  | LeftShift, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Decrement, compound_stm -> LBrace block_item_list .RBrace  | -int-, stm -> .exp_stm  | LBrace, jump_stm -> .-continue-  | -half4-, dec -> .struct_specifier Semicolon  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | OR, compound_stm -> .LBrace block_item_list RBrace  | Minus, jump_stm -> .break  | for, jump_stm -> .-continue-  | -goto-, compound_stm -> .LBrace RBrace  | -void-, exp_stm -> .Semicolon  | -fixed2-, selection_stm -> .if LParen exp RParen stm else stm  | -void-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Plus, exp_stm -> .Semicolon  | -fixed4-, exp_stm -> .exp Semicolon  | Minus, stm -> .iteration_stm  | -char-, block_item_list -> block_item_list .block_item  | Decrement, jump_stm -> .break  | -float4-, iteration_stm -> .while LParen exp RParen stm  | LBrace, primary_exp -> .Number  | VerticalBar, block_item -> .dec  | Decrement, stm -> .exp_stm  | Increment, compound_stm -> .LBrace RBrace  | -fixed4-, dec -> .struct_specifier Semicolon  | -fixed3-, exp_stm -> .exp Semicolon  | -sampler2D-, binary_exp -> .unary_exp  | Times, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float3-, stm -> .jump_stm  | Minus, stm -> .compound_stm  | ID, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half3-, jump_stm -> .-continue-  | Tilde, postfix_exp -> .postfix_exp Increment  | VerticalBar, struct_specifier -> .-struct- ID  | Semicolon, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, jump_stm -> .break  | if, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half4-, jump_stm -> .-return- exp Semicolon  | -goto-, stm -> .compound_stm  | RBrace, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, stm -> .compound_stm  | -fixed4-, exp_stm -> .exp Semicolon  | -half2-, postfix_exp -> .postfix_exp LParen RParen  | Decrement, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | Minus, jump_stm -> .-continue-  | -continue-, stm -> .compound_stm  | -short-, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, iteration_stm -> .while LParen exp RParen stm  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -float2-, jump_stm -> .break  | -char-, binary_exp -> .unary_exp  | OR, stm -> .compound_stm  | -fixed2-, stm -> .jump_stm  | -float3-, selection_stm -> .if LParen exp RParen stm else stm  | LParen, stm -> .selection_stm  | RBrace, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, stm -> .compound_stm  | -char-, type_specifier -> .-int-  | ID, compound_stm -> .LBrace RBrace  | -long-, jump_stm -> .break  | -long-, jump_stm -> .-continue-  | -uniform-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LBrace, stm -> .compound_stm  | -goto-, jump_stm -> .break  | -return-, stm -> .compound_stm  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -uniform-, jump_stm -> .-continue-  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -short-, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, jump_stm -> .-return- exp Semicolon  | -half3-, primary_exp -> .LParen exp RParen  | NEQ, compound_stm -> .LBrace RBrace  | Increment, compound_stm -> .LBrace block_item_list RBrace  | -continue-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Plus, dec -> .dec_specifier init_dec_list Semicolon  | RBrace, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, postfix_exp -> .postfix_exp Decrement  | Times, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -int-, unary_op -> .NOT  | LParen, exp_stm -> .exp Semicolon  | String, block_item -> .stm  | -fixed2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .String  | Dot, postfix_exp -> .primary_exp  | AND, jump_stm -> .-return- exp Semicolon  | -short-, postfix_exp -> .postfix_exp Decrement  | OR, unary_exp -> .unary_op unary_exp  | Plus, dec -> .dec_specifier init_dec_list Semicolon  | -struct-, stm -> .compound_stm  | -float3-, block_item_list -> block_item_list .block_item  | while, stm -> .selection_stm  | -float4-, block_item -> .dec  | -float4-, dec -> .dec_specifier init_dec_list Semicolon  | -char-, binary_exp -> .unary_exp  | Percent, compound_stm -> .LBrace block_item_list RBrace  | while, stm -> .iteration_stm  | Minus, block_item -> .stm  | -half3-, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, selection_stm -> .if LParen exp RParen stm  | -float-, exp_stm -> .Semicolon  | ID, unary_op -> .NOT  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed2-, jump_stm -> .-goto- ID  | -struct-, jump_stm -> .break  | Minus, compound_stm -> .LBrace RBrace  | if, jump_stm -> .break  | -void-, iteration_stm -> .while LParen exp RParen stm  | -float-, primary_exp -> .String  | Ampersand, block_item -> .stm  | Plus, type_qualifier -> .-uniform-  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | NOT, primary_exp -> .ID  | Times, stm -> .compound_stm  | -sampler2D-, stm -> .selection_stm  | LParen, dec -> .dec_specifier init_dec_list Semicolon  | for, block_item_list -> block_item_list .block_item  | NOT, selection_stm -> .if LParen exp RParen stm else stm  | Increment, stm -> .jump_stm  | -void-, binary_exp -> .unary_exp  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, binary_exp -> .binary_exp binary_op unary_exp  | Caret, primary_exp -> .LParen exp RParen  | Divide, unary_op -> .Tilde  | Tilde, exp_stm -> .Semicolon  | -fixed3-, type_qualifier -> .-uniform-  | -char-, unary_exp -> .Decrement unary_exp  | Comma, dec -> .dec_specifier init_dec_list Semicolon  | ID, stm -> .exp_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -return-, unary_exp -> .Decrement unary_exp  | Divide, stm -> .compound_stm  | -do-, jump_stm -> .-return- exp Semicolon  | -fixed3-, postfix_exp -> .postfix_exp Increment  | AND, stm -> .selection_stm  | -struct-, stm -> .exp_stm  | -return-, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, stm -> .exp_stm  | -char-, postfix_exp -> .postfix_exp Decrement  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, iteration_stm -> .while LParen exp RParen stm  | for, stm -> .selection_stm  | if, stm -> .compound_stm  | -uniform-, jump_stm -> .-continue-  | RBrace, binary_exp -> .unary_exp  | LE, jump_stm -> .-return- exp Semicolon  | -float4-, stm -> .exp_stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, stm -> .exp_stm  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -long-, selection_stm -> .if LParen exp RParen stm else stm  | -fixed3-, primary_exp -> .ID  | VerticalBar, stm -> .compound_stm  | Minus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | if, block_item -> .stm  | -uniform-, stm -> .compound_stm  | -float2-, compound_stm -> .LBrace block_item_list RBrace  | -float2-, primary_exp -> .Number  | LeftShift, exp_stm -> .exp Semicolon  | Tilde, jump_stm -> .break  | while, jump_stm -> .-continue-  | -char-, jump_stm -> .break  | LParen, compound_stm -> .LBrace RBrace  | LBrace, jump_stm -> .-goto- ID  | -float-, block_item -> .stm  | -do-, dec -> .dec_specifier init_dec_list Semicolon  | Number, postfix_exp -> .postfix_exp Decrement  | Percent, compound_stm -> .LBrace block_item_list RBrace  | -void-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, selection_stm -> .if LParen exp RParen stm  | -fixed2-, primary_exp -> .LParen exp RParen  | Times, stm -> .selection_stm  | ID, selection_stm -> .if LParen exp RParen stm  | -double-, exp_stm -> .Semicolon  | LParen, jump_stm -> .break  | -goto-, stm -> .exp_stm  | Minus, exp_stm -> .exp Semicolon  | -uniform-, compound_stm -> .LBrace block_item_list RBrace  | -double-, selection_stm -> .if LParen exp RParen stm  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, postfix_exp -> .postfix_exp Increment  | GT, stm -> .jump_stm  | Semicolon, iteration_stm -> .while LParen exp RParen stm  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | Times, exp_stm -> .Semicolon  | -half4-, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, compound_stm -> .LBrace RBrace  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, unary_exp -> .unary_op unary_exp  | Question, selection_stm -> .if LParen exp RParen stm else stm  | -double-, unary_exp -> .unary_op unary_exp  | Times, stm -> .iteration_stm  | -int-, dec -> .struct_specifier Semicolon  | -float3-, exp_stm -> .exp Semicolon  | Plus, jump_stm -> .-continue-  | -float2-, block_item -> .stm  | -double-, iteration_stm -> .while LParen exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Comma, dec -> .dec_specifier init_dec_list Semicolon  | Minus, stm -> .iteration_stm  | -do-, unary_exp -> .Decrement unary_exp  | GT, block_item -> .stm  | -float-, primary_exp -> .ID  | LE, stm -> .exp_stm  | -float-, compound_stm -> .LBrace block_item_list RBrace  | -sampler2D-, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | LeftShift, jump_stm -> .-return- exp Semicolon  | Number, exp_stm -> .Semicolon  | -uniform-, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, selection_stm -> .if LParen exp RParen stm  | -uniform-, jump_stm -> .-continue-  | -sampler2D-, postfix_exp -> .postfix_exp Decrement  | EQ, iteration_stm -> .while LParen exp RParen stm  | -int-, stm -> .compound_stm  | Increment, block_item_list -> block_item_list .block_item  | -do-, type_qualifier -> .-uniform-  | -float2-, jump_stm -> .-goto- ID  | Minus, dec -> .dec_specifier init_dec_list Semicolon  | Semicolon, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | for, postfix_exp -> .postfix_exp Decrement  | Increment, block_item -> .stm  | -goto-, binary_exp -> .binary_exp binary_op unary_exp  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | -fixed2-, postfix_exp -> .primary_exp  | Question, block_item -> .stm  | -char-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, jump_stm -> .break  | -fixed4-, dec -> .dec_specifier init_dec_list Semicolon  | -sampler2D-, stm -> .compound_stm  | -int-, stm -> .compound_stm  | -half2-, selection_stm -> .if LParen exp RParen stm else stm  | -fixed4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, stm -> .iteration_stm  | -short-, selection_stm -> .if LParen exp RParen stm  | Tilde, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> .postfix_exp  | Caret, stm -> .jump_stm  | Increment, selection_stm -> .if LParen exp RParen stm  | Number, primary_exp -> .ID  | LT, postfix_exp -> .postfix_exp Dot ID  | Caret, iteration_stm -> .while LParen exp RParen stm  | NOT, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -return-, dec -> .struct_specifier Semicolon  | Decrement, primary_exp -> .Number  | Percent, iteration_stm -> .while LParen exp RParen stm  | -return-, primary_exp -> .LParen exp RParen  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -double-, primary_exp -> .Number  | Assign, jump_stm -> .-return- exp Semicolon  | for, block_item -> .dec  | -float3-, jump_stm -> .break  | -float-, block_item_list -> block_item_list .block_item  | -fixed3-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float-, jump_stm -> .-goto- ID  | -goto-, stm -> .exp_stm  | -continue-, stm -> .iteration_stm  | Plus, unary_exp -> .Decrement unary_exp  | Caret, selection_stm -> .if LParen exp RParen stm  | -fixed4-, exp_stm -> .exp Semicolon  | Number, stm -> .exp_stm  | ID, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, stm -> .exp_stm  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Minus, postfix_exp -> .postfix_exp Decrement  | Divide, block_item_list -> block_item_list .block_item  | for, exp_stm -> .Semicolon  | Minus, unary_exp -> .postfix_exp  | VerticalBar, primary_exp -> .String  | Divide, block_item -> .dec  | -float-, unary_exp -> .postfix_exp  | EQ, block_item_list -> block_item_list .block_item  | ID, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, iteration_stm -> .while LParen exp RParen stm  | break, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .postfix_exp Increment  | Plus, iteration_stm -> .while LParen exp RParen stm  | -double-, jump_stm -> .-goto- ID  | LBrace, primary_exp -> .ID  | RightShift, selection_stm -> .if LParen exp RParen stm else stm  | -char-, jump_stm -> .-return- exp Semicolon  | -continue-, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .String  | Plus, postfix_exp -> .postfix_exp Dot ID  | RightShift, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Tilde, primary_exp -> .ID  | NEQ, compound_stm -> LBrace block_item_list .RBrace  | break, compound_stm -> LBrace block_item_list .RBrace  | Decrement, stm -> .compound_stm  | -half4-, unary_exp -> .unary_op unary_exp  | NEQ, block_item -> .dec  | -goto-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -double-, block_item_list -> block_item_list .block_item  | Minus, selection_stm -> .if LParen exp RParen stm  | for, selection_stm -> .if LParen exp RParen stm  | ID, block_item -> .stm  | Tilde, stm -> .jump_stm  | ID, jump_stm -> .-return- exp Semicolon  | -half4-, block_item -> .dec  | for, block_item_list -> block_item_list .block_item  | -fixed4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, dec -> .struct_specifier Semicolon  | RBrace, type_qualifier -> .-uniform-  | -void-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | RBrace, postfix_exp -> .primary_exp  | LT, unary_exp -> .postfix_exp  | Question, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, jump_stm -> .-return- exp Semicolon  | Plus, stm -> .exp_stm  | -float3-, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -uniform-, jump_stm -> .-return- exp Semicolon  | if, jump_stm -> .-goto- ID  | -fixed3-, dec -> .struct_specifier Semicolon  | -do-, block_item -> .stm  | LBrace, stm -> .selection_stm  | -fixed2-, compound_stm -> .LBrace RBrace  | -float4-, compound_stm -> .LBrace RBrace  | LParen, block_item -> .stm  | while, stm -> .iteration_stm  | -long-, stm -> .selection_stm  | -int-, stm -> .exp_stm  | -fixed4-, jump_stm -> .-goto- ID  | -float3-, postfix_exp -> .primary_exp  | GT, exp_stm -> .Semicolon  | -void-, jump_stm -> .-return- exp Semicolon  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, unary_op -> .Tilde  | NOT, primary_exp -> .Number  | RightShift, unary_op -> .Plus  | Decrement, stm -> .selection_stm  | -half3-, stm -> .jump_stm  | -short-, stm -> .exp_stm  | break, jump_stm -> .-continue-  | Semicolon, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -struct-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -char-, dec -> .dec_specifier init_dec_list Semicolon  | -short-, jump_stm -> .-continue-  | Plus, unary_exp -> .Increment unary_exp  | GE, jump_stm -> .-continue-  | -half2-, unary_exp -> .Increment unary_exp  | EQ, compound_stm -> .LBrace RBrace  | Tilde, exp_stm -> .exp Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | ID, stm -> .jump_stm  | -char-, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | Comma, block_item_list -> block_item_list .block_item  | -float3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half2-, compound_stm -> LBrace block_item_list .RBrace  | -void-, stm -> .iteration_stm  | while, primary_exp -> .Number  | Increment, conditional_exp -> .binary_exp  | Semicolon, stm -> .compound_stm  | -float-, exp_stm -> .Semicolon  | RBrace, postfix_exp -> .postfix_exp Dot ID  | Minus, stm -> .jump_stm  | -continue-, dec -> .struct_specifier Semicolon  | break, selection_stm -> .if LParen exp RParen stm else stm  | -half2-, stm -> .compound_stm  | -struct-, stm -> .selection_stm  | NOT, jump_stm -> .-return- exp Semicolon  | -float2-, postfix_exp -> .postfix_exp Dot ID  | LParen, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, jump_stm -> .-return- exp Semicolon  | -float3-, block_item_list -> block_item_list .block_item  | String, iteration_stm -> .while LParen exp RParen stm  | -struct-, postfix_exp -> .postfix_exp Increment  | Dot, type_qualifier -> .-uniform-  | -float4-, stm -> .compound_stm  | break, compound_stm -> .LBrace block_item_list RBrace  | -do-, block_item -> .stm  | -float4-, postfix_exp -> .postfix_exp Increment  | Divide, stm -> .selection_stm  | -float2-, stm -> .jump_stm  | -return-, exp_stm -> .Semicolon  | break, unary_exp -> .postfix_exp  | OR, exp_stm -> .Semicolon  | -double-, block_item -> .dec  | LBrace, jump_stm -> .-goto- ID  | break, postfix_exp -> .postfix_exp Decrement  | LE, exp_stm -> .Semicolon  | Number, block_item -> .dec  | if, binary_exp -> .unary_exp  | AND, block_item -> .dec  | LParen, compound_stm -> .LBrace block_item_list RBrace  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, compound_stm -> LBrace block_item_list .RBrace  | for, stm -> .selection_stm  | -double-, block_item -> .stm  | LParen, stm -> .iteration_stm  | NOT, primary_exp -> .Number  | NEQ, jump_stm -> .-continue-  | -double-, block_item_list -> block_item_list .block_item  | -continue-, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, jump_stm -> .-goto- ID  | -half2-, compound_stm -> LBrace block_item_list .RBrace  | -char-, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Increment  | EQ, exp_stm -> .exp Semicolon  | NOT, jump_stm -> .-continue-  | -float3-, stm -> .exp_stm  | -do-, binary_exp -> .unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, exp_stm -> .exp Semicolon  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -char-, unary_exp -> .postfix_exp  | Assign, compound_stm -> .LBrace RBrace  | -float3-, stm -> .jump_stm  | -double-, dec -> .dec_specifier init_dec_list Semicolon  | -half3-, compound_stm -> .LBrace block_item_list RBrace  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | -half4-, jump_stm -> .break  | LBrace, jump_stm -> .break  | -short-, jump_stm -> .-continue-  | Minus, jump_stm -> .-continue-  | String, primary_exp -> .String  | OR, dec -> .struct_specifier Semicolon  | Semicolon, stm -> .selection_stm  | for, exp_stm -> .exp Semicolon  | -continue-, compound_stm -> .LBrace block_item_list RBrace  | Increment, type_qualifier -> .-uniform-  | -fixed4-, stm -> .jump_stm  | Tilde, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, selection_stm -> .if LParen exp RParen stm  | -half3-, stm -> .jump_stm  | -goto-, postfix_exp -> .primary_exp  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -float3-, block_item -> .dec  | Plus, unary_exp -> .Decrement unary_exp  | GE, selection_stm -> .if LParen exp RParen stm else stm  | for, unary_exp -> .unary_op unary_exp  | LT, jump_stm -> .break  | Plus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float4-, type_qualifier -> .-uniform-  | -half4-, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, compound_stm -> LBrace block_item_list .RBrace  | -fixed2-, exp_stm -> .exp Semicolon  | Increment, block_item_list -> block_item_list .block_item  | -return-, dec -> .dec_specifier init_dec_list Semicolon  | while, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, stm -> .jump_stm  | -fixed2-, stm -> .compound_stm  | -return-, type_qualifier -> .-uniform-  | -int-, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, compound_stm -> .LBrace RBrace  | -struct-, primary_exp -> .LParen exp RParen  | AND, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -do-, selection_stm -> .if LParen exp RParen stm else stm  | NOT, primary_exp -> .Number  | LE, stm -> .jump_stm  | for, unary_exp -> .Increment unary_exp  | LT, block_item -> .stm  | -half4-, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, dec -> .dec_specifier init_dec_list Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | -return-, jump_stm -> .-continue-  | Number, stm -> .jump_stm  | -fixed4-, unary_exp -> .unary_op unary_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | -struct-, primary_exp -> .LParen exp RParen  | VerticalBar, jump_stm -> .break  | break, compound_stm -> .LBrace RBrace  | -double-, dec -> .dec_specifier init_dec_list Semicolon  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -half3-, block_item -> .dec  | RBrace, block_item_list -> block_item_list .block_item  | -struct-, stm -> .jump_stm  | -sampler2D-, block_item -> .dec  | Number, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .primary_exp  | LeftShift, unary_op -> .NOT  | ID, primary_exp -> .ID  | Plus, stm -> .exp_stm  | -half2-, primary_exp -> .ID  | GT, selection_stm -> .if LParen exp RParen stm else stm  | -long-, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | break, dec -> .dec_specifier init_dec_list Semicolon  | -half2-, stm -> .compound_stm  | -half3-, selection_stm -> .if LParen exp RParen stm  | if, jump_stm -> .-continue-  | if, compound_stm -> .LBrace block_item_list RBrace  | Decrement, unary_op -> .Minus  | LParen, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -goto-, primary_exp -> .Number  | Question, jump_stm -> .-goto- ID  | -long-, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, jump_stm -> .-continue-  | -struct-, jump_stm -> .-return- exp Semicolon  | -int-, stm -> .iteration_stm  | -half2-, primary_exp -> .Number  | LBrack, stm -> .exp_stm  | -long-, binary_exp -> .unary_exp  | NEQ, iteration_stm -> .while LParen exp RParen stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Comma, exp_stm -> .Semicolon  | -int-, dec -> .struct_specifier Semicolon  | ID, exp_stm -> .Semicolon  | -short-, struct_specifier -> .-struct- ID LBrace struct_dec_list RBrace  | Semicolon, jump_stm -> .-goto- ID  | -fixed2-, stm -> .exp_stm  | Tilde, exp_stm -> .exp Semicolon  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | String, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, selection_stm -> .if LParen exp RParen stm  | -void-, compound_stm -> LBrace block_item_list .RBrace  | -do-, jump_stm -> .-continue-  | Increment, selection_stm -> .if LParen exp RParen stm  | Increment, postfix_exp -> .postfix_exp Increment  | Question, unary_exp -> .Decrement unary_exp  | Ampersand, compound_stm -> .LBrace block_item_list RBrace  | Plus, iteration_stm -> .while LParen exp RParen stm  | -do-, dec -> .dec_specifier init_dec_list Semicolon  | -void-, primary_exp -> .LParen exp RParen  | EQ, block_item -> .dec  | String, block_item -> .stm  | String, primary_exp -> .LParen exp RParen  | OR, selection_stm -> .if LParen exp RParen stm else stm  | Plus, postfix_exp -> .primary_exp  | Times, jump_stm -> .-goto- ID  | if, block_item -> .stm  | -continue-, block_item -> .dec  | -long-, jump_stm -> .-continue-  | break, dec -> .struct_specifier Semicolon  | -short-, block_item -> .stm  | if, stm -> .selection_stm  | -long-, type_specifier -> .typedef_name  | ID, dec -> .struct_specifier Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm  | -sampler2D-, selection_stm -> .if LParen exp RParen stm else stm  | -float4-, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp Decrement  | NEQ, dec -> .struct_specifier Semicolon  | -uniform-, dec -> .dec_specifier init_dec_list Semicolon  | NOT, selection_stm -> .if LParen exp RParen stm else stm  | -short-, primary_exp -> .ID  | LeftShift, selection_stm -> .if LParen exp RParen stm  | -float2-, jump_stm -> .-return- exp Semicolon  | -double-, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, jump_stm -> .-goto- ID  | while, type_specifier -> .-short-  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | NEQ, stm -> .jump_stm  | -do-, postfix_exp -> .postfix_exp Decrement  | Plus, exp_stm -> .exp Semicolon  | -half4-, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, primary_exp -> .Number  | OR, compound_stm -> LBrace block_item_list .RBrace  | -fixed3-, selection_stm -> .if LParen exp RParen stm else stm  | -half3-, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, compound_stm -> LBrace block_item_list .RBrace  | -return-, jump_stm -> .-goto- ID  | String, stm -> .exp_stm  | if, jump_stm -> .break  | String, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .postfix_exp Increment  | LT, compound_stm -> .LBrace block_item_list RBrace  | -return-, postfix_exp -> .postfix_exp Decrement  | LeftShift, compound_stm -> LBrace block_item_list .RBrace  | Plus, unary_exp -> .Decrement unary_exp  | OR, block_item_list -> block_item_list .block_item  | -sampler2D-, block_item -> .stm  | break, dec -> .dec_specifier init_dec_list Semicolon  | LBrace, stm -> .selection_stm  | -do-, compound_stm -> LBrace block_item_list .RBrace  | Increment, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp Increment  | NEQ, dec -> .dec_specifier init_dec_list Semicolon  | Decrement, exp_stm -> .Semicolon  | Increment, stm -> .selection_stm  | -half2-, stm -> .exp_stm  | -struct-, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, stm -> .iteration_stm  | Semicolon, block_item_list -> block_item_list .block_item  | RBrace, jump_stm -> .break  | -fixed3-, primary_exp -> .LParen exp RParen  | Percent, dec -> .dec_specifier init_dec_list Semicolon  | -continue-, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, jump_stm -> .-return- exp Semicolon  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | Semicolon, primary_exp -> .ID  | GE, unary_op -> .Plus  | Plus, stm -> .exp_stm  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | -sampler2D-, exp_stm -> .Semicolon  | -float-, block_item_list -> block_item_list .block_item  | Number, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, dec -> .struct_specifier Semicolon  | LParen, jump_stm -> .-goto- ID  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | String, stm -> .jump_stm  | LBrace, primary_exp -> .ID  | Assign, stm -> .iteration_stm  | -half4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed4-, dec -> .dec_specifier init_dec_list Semicolon  | Plus, type_specifier -> .-half2-  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, stm -> .compound_stm  | String, dec -> .dec_specifier init_dec_list Semicolon  | if, jump_stm -> .break  | Number, postfix_exp -> .postfix_exp LParen RParen  | LE, type_specifier -> .-fixed2-  | ID, jump_stm -> .break  | -float3-, jump_stm -> .-goto- ID  | -fixed4-, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, block_item -> .stm  | Semicolon, stm -> .jump_stm  | NOT, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, type_qualifier -> .-uniform-  | -sampler2D-, exp_stm -> .Semicolon  | -float4-, binary_exp -> .binary_exp binary_op unary_exp  | LE, block_item -> .dec  | -fixed3-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed2-, stm -> .selection_stm  | Increment, binary_exp -> .unary_exp  | VerticalBar, block_item -> .dec  | -return-, primary_exp -> .LParen exp RParen  | Minus, compound_stm -> .LBrace RBrace  | Number, block_item_list -> block_item_list .block_item  | -float2-, dec -> .struct_specifier Semicolon  | -sampler2D-, primary_exp -> .Number  | Plus, dec -> .struct_specifier Semicolon  | Minus, unary_exp -> .Decrement unary_exp  | LE, block_item_list -> block_item_list .block_item  | -char-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, stm -> .jump_stm  | -half3-, exp_stm -> .exp Semicolon  | -fixed3-, jump_stm -> .-goto- ID  | -double-, postfix_exp -> .postfix_exp LParen RParen  | Question, jump_stm -> .-return- exp Semicolon  | Semicolon, selection_stm -> .if LParen exp RParen stm  | Decrement, unary_exp -> .postfix_exp  | LE, exp_stm -> .exp Semicolon  | -short-, primary_exp -> .String  | Assign, block_item -> .dec  | -struct-, stm -> .exp_stm  | for, exp_stm -> .Semicolon  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | String, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, stm -> .selection_stm  | -half4-, primary_exp -> .LParen exp RParen  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Caret, selection_stm -> .if LParen exp RParen stm else stm  | if, compound_stm -> LBrace block_item_list .RBrace  | -struct-, unary_exp -> .unary_op unary_exp  | GT, compound_stm -> .LBrace block_item_list RBrace  | NOT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, compound_stm -> .LBrace RBrace  | -sampler2D-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, block_item -> .dec  | break, primary_exp -> .LParen exp RParen  | LParen, stm -> .jump_stm  | Number, exp_stm -> .exp Semicolon  | RBrace, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half4-, jump_stm -> .break  | -do-, unary_exp -> .unary_op unary_exp  | AND, stm -> .jump_stm  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Number, postfix_exp -> .primary_exp  | Assign, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -continue-, exp_stm -> .Semicolon  | LBrace, jump_stm -> .-goto- ID  | -short-, stm -> .exp_stm  | -half4-, compound_stm -> .LBrace RBrace  | -fixed2-, compound_stm -> LBrace block_item_list .RBrace  | Tilde, unary_exp -> .unary_op unary_exp  | Percent, exp_stm -> .exp Semicolon  | if, dec -> .struct_specifier Semicolon  | while, postfix_exp -> .primary_exp  | Divide, block_item -> .dec  | -char-, block_item_list -> block_item_list .block_item  | Increment, selection_stm -> .if LParen exp RParen stm  | while, block_item -> .dec  | -double-, iteration_stm -> .while LParen exp RParen stm  | -continue-, block_item -> .dec  | -fixed4-, postfix_exp -> .primary_exp  | LBrack, compound_stm -> LBrace block_item_list .RBrace  | Minus, dec -> .struct_specifier Semicolon  | -half2-, jump_stm -> .break  | -int-, exp_stm -> .Semicolon  | -goto-, iteration_stm -> .while LParen exp RParen stm  | -float2-, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, compound_stm -> LBrace block_item_list .RBrace  | Number, block_item_list -> block_item_list .block_item  | -half2-, jump_stm -> .-return- exp Semicolon  | -void-, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, dec -> .dec_specifier init_dec_list Semicolon  | String, stm -> .exp_stm  | -void-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | ID, jump_stm -> .-continue-  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -float3-, primary_exp -> .ID  | Divide, selection_stm -> .if LParen exp RParen stm else stm  | -uniform-, stm -> .compound_stm  | Decrement, type_qualifier -> .-uniform-  | -half2-, jump_stm -> .-goto- ID  | ID, stm -> .exp_stm  | -fixed3-, block_item_list -> block_item_list .block_item  | -goto-, postfix_exp -> .postfix_exp Dot ID  | EQ, unary_exp -> .unary_op unary_exp  | Comma, jump_stm -> .-return- exp Semicolon  | -float-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Semicolon, binary_exp -> .unary_exp  | GE, block_item_list -> block_item_list .block_item  | -fixed2-, compound_stm -> .LBrace block_item_list RBrace  | -goto-, primary_exp -> .String  | LParen, stm -> .selection_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -int-, block_item_list -> block_item_list .block_item  | if, stm -> .compound_stm  | for, dec -> .dec_specifier init_dec_list Semicolon  | -return-, stm -> .jump_stm  | if, jump_stm -> .-goto- ID  | -float2-, stm -> .selection_stm  | Tilde, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, compound_stm -> LBrace block_item_list .RBrace  | -half2-, stm -> .compound_stm  | -long-, assignment_exp -> .conditional_exp  | Comma, jump_stm -> .-goto- ID  | Increment, compound_stm -> LBrace block_item_list .RBrace  | -continue-, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | Assign, jump_stm -> .-goto- ID  | -half3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LBrace, jump_stm -> .-continue-  | -void-, stm -> .iteration_stm  | -half3-, exp_stm -> .Semicolon  | Tilde, selection_stm -> .if LParen exp RParen stm else stm  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | Plus, unary_exp -> .Increment unary_exp  | Question, stm -> .selection_stm  | LBrace, compound_stm -> LBrace block_item_list .RBrace  | -long-, postfix_exp -> .postfix_exp LParen RParen  | Assign, compound_stm -> .LBrace RBrace  | -half3-, jump_stm -> .break  | -half4-, block_item_list -> block_item_list .block_item  | LParen, stm -> .jump_stm  | break, stm -> .iteration_stm  | -float-, exp_stm -> .Semicolon  | -float3-, primary_exp -> .String  | GT, stm -> .compound_stm  | -continue-, stm -> .exp_stm  | Plus, postfix_exp -> .postfix_exp Decrement  | Minus, stm -> .selection_stm  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, stm -> .iteration_stm  | ID, stm -> .compound_stm  | Plus, compound_stm -> .LBrace block_item_list RBrace  | RBrace, primary_exp -> .Number  | EQ, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Increment, exp_stm -> .exp Semicolon  | -long-, compound_stm -> .LBrace RBrace  | String, compound_stm -> LBrace block_item_list .RBrace  | -double-, iteration_stm -> .while LParen exp RParen stm  | -void-, stm -> .selection_stm  | -void-, primary_exp -> .ID  | Comma, compound_stm -> LBrace block_item_list .RBrace  | -float3-, primary_exp -> .String  | LeftShift, block_item -> .dec  | -int-, jump_stm -> .-continue-  | -fixed3-, postfix_exp -> .postfix_exp LParen RParen  | GE, postfix_exp -> .primary_exp  | OR, iteration_stm -> .while LParen exp RParen stm  | RBrace, unary_exp -> .postfix_exp  | RightShift, compound_stm -> .LBrace block_item_list RBrace  | -fixed4-, block_item_list -> block_item_list .block_item  | -half3-, unary_op -> .Tilde  | Decrement, jump_stm -> .-continue-  | -return-, iteration_stm -> .while LParen exp RParen stm  | Plus, selection_stm -> .if LParen exp RParen stm  | -do-, stm -> .selection_stm  | Plus, compound_stm -> .LBrace RBrace  | NOT, exp_stm -> .Semicolon  | Decrement, compound_stm -> LBrace block_item_list .RBrace  | ID, type_specifier -> .-char-  | ID, exp_stm -> .Semicolon  | -float2-, dec -> .dec_specifier init_dec_list Semicolon  | -half4-, compound_stm -> LBrace block_item_list .RBrace  | -float2-, iteration_stm -> .while LParen exp RParen stm  | Number, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, exp_stm -> .exp Semicolon  | Decrement, block_item -> .dec  | -half3-, dec -> .struct_specifier Semicolon  | -float4-, stm -> .jump_stm  | -half2-, selection_stm -> .if LParen exp RParen stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Percent, jump_stm -> .break  | ID, jump_stm -> .-goto- ID  | Semicolon, block_item -> .stm  | -half2-, postfix_exp -> .postfix_exp Increment  | Ampersand, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Number, binary_exp -> .unary_exp  | GT, jump_stm -> .break  | Increment, stm -> .iteration_stm  | Tilde, compound_stm -> .LBrace block_item_list RBrace  | LBrace, exp_stm -> .Semicolon  | while, postfix_exp -> .postfix_exp Increment  | Semicolon, jump_stm -> .break  | -sampler2D-, block_item_list -> block_item_list .block_item  | LBrace, block_item_list -> block_item_list .block_item  | -float4-, type_specifier -> .-double-  | ID, exp_stm -> .exp Semicolon  | -double-, stm -> .selection_stm  | -sampler2D-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -long-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LParen, compound_stm -> .LBrace RBrace  | -half2-, jump_stm -> .-goto- ID  | -do-, exp_stm -> .exp Semicolon  | -float-, stm -> .jump_stm  | -float-, unary_exp -> .unary_op unary_exp  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | RBrace, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, dec -> .dec_specifier init_dec_list Semicolon  | -fixed2-, unary_op -> .Minus  | Decrement, dec -> .dec_specifier init_dec_list Semicolon  | -uniform-, jump_stm -> .-return- exp Semicolon  | -fixed4-, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, block_item -> .stm  | -struct-, exp_stm -> .exp Semicolon  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | LT, dec -> .dec_specifier init_dec_list Semicolon  | -double-, postfix_exp -> .postfix_exp Increment  | Comma, jump_stm -> .-continue-  | -fixed2-, stm -> .compound_stm  | LBrace, selection_stm -> .if LParen exp RParen stm  | -short-, exp_stm -> .exp Semicolon  | while, exp_stm -> .exp Semicolon  | LBrace, jump_stm -> .-continue-  | -short-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, binary_exp -> .binary_exp binary_op unary_exp  | EQ, exp_stm -> .exp Semicolon  | for, block_item_list -> block_item_list .block_item  | -short-, block_item -> .dec  | Tilde, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, primary_exp -> .String  | Comma, stm -> .iteration_stm  | -fixed2-, binary_exp -> .binary_exp binary_op unary_exp  | Question, exp_stm -> .Semicolon  | -char-, block_item -> .stm  | ID, jump_stm -> .-return- exp Semicolon  | LBrace, type_qualifier -> .-uniform-  | -float3-, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | Plus, primary_exp -> .Number  | GE, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | for, primary_exp -> .Number  | Times, jump_stm -> .-return- exp Semicolon  | Increment, block_item_list -> block_item_list .block_item  | break, jump_stm -> .break  | -struct-, binary_exp -> .unary_exp  | RightShift, primary_exp -> .ID  | Minus, type_qualifier -> .-uniform-  | -short-, type_qualifier -> .-uniform-  | ID, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, unary_op -> .Plus  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -sampler2D-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed4-, jump_stm -> .break  | NOT, dec -> .dec_specifier init_dec_list Semicolon  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, stm -> .iteration_stm  | -sampler2D-, primary_exp -> .Number  | Decrement, compound_stm -> .LBrace RBrace  | for, selection_stm -> .if LParen exp RParen stm  | break, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, type_qualifier -> .-uniform-  | -double-, postfix_exp -> .primary_exp  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float2-, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, stm -> .selection_stm  | -char-, compound_stm -> .LBrace block_item_list RBrace  | ID, stm -> .exp_stm  | String, jump_stm -> .break  | -double-, unary_exp -> .unary_op unary_exp  | Ampersand, exp_stm -> .exp Semicolon  | -void-, exp_stm -> .exp Semicolon  | -return-, block_item -> .stm  | Increment, compound_stm -> .LBrace RBrace  | -continue-, stm -> .iteration_stm  | for, postfix_exp -> .postfix_exp Increment  | RightShift, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .primary_exp  | Caret, compound_stm -> .LBrace block_item_list RBrace  | break, selection_stm -> .if LParen exp RParen stm  | -float3-, postfix_exp -> .postfix_exp Increment  | Caret, jump_stm -> .-goto- ID  | Tilde, type_specifier -> .-half3-  | ID, jump_stm -> .-goto- ID  | Number, postfix_exp -> .primary_exp  | Decrement, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -continue-, dec -> .dec_specifier init_dec_list Semicolon  | Tilde, jump_stm -> .-goto- ID  | Decrement, postfix_exp -> .primary_exp  | Ampersand, jump_stm -> .-goto- ID  | -uniform-, compound_stm -> .LBrace RBrace  | -uniform-, dec -> .struct_specifier Semicolon  | if, compound_stm -> .LBrace block_item_list RBrace  | -short-, dec -> .dec_specifier init_dec_list Semicolon  | -float2-, selection_stm -> .if LParen exp RParen stm  | -return-, jump_stm -> .-return- exp Semicolon  | -uniform-, exp_stm -> .Semicolon  | -return-, selection_stm -> .if LParen exp RParen stm  | LBrace, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, jump_stm -> .-continue-  | LParen, stm -> .iteration_stm  | -goto-, block_item_list -> block_item_list .block_item  | -int-, stm -> .compound_stm  | while, stm -> .exp_stm  | -sampler2D-, jump_stm -> .-goto- ID  | RBrace, postfix_exp -> .postfix_exp LParen RParen  | LT, compound_stm -> .LBrace RBrace  | -int-, binary_exp -> .unary_exp  | Caret, primary_exp -> .String  | Question, jump_stm -> .-continue-  | LBrace, dec -> .struct_specifier Semicolon  | -struct-, jump_stm -> .-return- exp Semicolon  | break, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, block_item -> .stm  | Minus, stm -> .exp_stm  | Number, unary_exp -> .Increment unary_exp  | Caret, block_item -> .dec  | Minus, block_item -> .dec  | -short-, primary_exp -> .String  | AND, unary_exp -> .unary_op unary_exp  | Divide, dec_specifier -> .type_qualifier type_specifier  | ID, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -void-, postfix_exp -> .postfix_exp Dot ID  | Percent, exp_stm -> .exp Semicolon  | break, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, iteration_stm -> .while LParen exp RParen stm  | -fixed2-, stm -> .selection_stm  | -float-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -do-, unary_exp -> .postfix_exp  | Comma, binary_exp -> .unary_exp  | LeftShift, jump_stm -> .break  | -half2-, stm -> .selection_stm  | Semicolon, jump_stm -> .-continue-  | -long-, block_item -> .dec  | -half4-, stm -> .compound_stm  | -fixed3-, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -sampler2D-, block_item -> .stm  | -fixed3-, jump_stm -> .-return- exp Semicolon  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -short-, primary_exp -> .ID  | Percent, stm -> .compound_stm  | Number, primary_exp -> .Number  | Comma, stm -> .compound_stm  | LParen, compound_stm -> .LBrace RBrace  | -short-, unary_exp -> .Decrement unary_exp  | Percent, stm -> .selection_stm  | break, dec -> .dec_specifier init_dec_list Semicolon  | -float-, block_item -> .dec  | -half2-, binary_exp -> .binary_exp binary_op unary_exp  | AND, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Decrement, stm -> .iteration_stm  | if, jump_stm -> .-return- exp Semicolon  | -sampler2D-, unary_exp -> .postfix_exp  | GE, dec -> .dec_specifier init_dec_list Semicolon  | Increment, block_item_list -> block_item_list .block_item  | -long-, selection_stm -> .if LParen exp RParen stm else stm  | -continue-, block_item -> .stm  | Number, compound_stm -> .LBrace RBrace  | -half4-, dec -> .struct_specifier Semicolon  | -goto-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float2-, stm -> .jump_stm  | RBrace, jump_stm -> .-goto- ID  | -half4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, stm -> .selection_stm  | -float3-, postfix_exp -> .postfix_exp LParen RParen  | Divide, block_item -> .stm  | -fixed4-, stm -> .jump_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half2-, primary_exp -> .LParen exp RParen  | Assign, unary_exp -> .Increment unary_exp  | Assign, jump_stm -> .-goto- ID  | -return-, postfix_exp -> .postfix_exp Increment  | Assign, jump_stm -> .break  | Tilde, block_item -> .dec  | -do-, type_specifier -> .-float3-  | ID, jump_stm -> .-continue-  | -half3-, primary_exp -> .Number  | Minus, stm -> .iteration_stm  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -half4-, stm -> .jump_stm  | LParen, jump_stm -> .-goto- ID  | for, stm -> .iteration_stm  | Decrement, stm -> .jump_stm  | -int-, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, selection_stm -> .if LParen exp RParen stm else stm  | -struct-, stm -> .exp_stm  | -goto-, primary_exp -> .ID  | OR, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | ID, unary_exp -> .Increment unary_exp  | VerticalBar, dec -> .struct_specifier Semicolon  | -return-, block_item -> .stm  | -short-, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, stm -> .selection_stm  | String, type_qualifier -> .-uniform-  | -float-, primary_exp -> .ID  | AND, postfix_exp -> .postfix_exp LParen RParen  | Dot, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | String, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, exp_stm -> .Semicolon  | NOT, jump_stm -> .-goto- ID  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | Tilde, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, selection_stm -> .if LParen exp RParen stm  | -fixed3-, dec -> .dec_specifier init_dec_list Semicolon  | -float4-, dec -> .struct_specifier Semicolon  | -int-, primary_exp -> .Number  | Ampersand, selection_stm -> .if LParen exp RParen stm  | -char-, primary_exp -> .ID  | Ampersand, stm -> .exp_stm  | RBrace, unary_exp -> .Increment unary_exp  | Semicolon, stm -> .exp_stm  | Decrement, block_item -> .dec  | -fixed2-, compound_stm -> .LBrace RBrace  | RBrace, primary_exp -> .LParen exp RParen  | Dot, compound_stm -> LBrace block_item_list .RBrace  | if, compound_stm -> LBrace block_item_list .RBrace  | -goto-, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_op -> .NOT  | NOT, unary_op -> .NOT  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -goto-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | GT, jump_stm -> .-goto- ID  | -continue-, exp_stm -> .Semicolon  | String, block_item_list -> block_item_list .block_item  | -float-, postfix_exp -> .postfix_exp Decrement  | Assign, stm -> .iteration_stm  | RBrace, stm -> .iteration_stm  | -struct-, dec -> .dec_specifier init_dec_list Semicolon  | break, jump_stm -> .break  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, exp_stm -> .exp Semicolon  | -float2-, iteration_stm -> .while LParen exp RParen stm  | -float4-, compound_stm -> LBrace block_item_list .RBrace  | String, exp_stm -> .Semicolon  | -half3-, dec -> .struct_specifier Semicolon  | Increment, unary_exp -> .Decrement unary_exp  | Plus, primary_exp -> .LParen exp RParen  | Plus, type_specifier -> .-sampler2D-  | ID, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, postfix_exp -> .primary_exp  | Percent, compound_stm -> .LBrace RBrace  | -float-, unary_exp -> .unary_op unary_exp  | LeftShift, dec -> .dec_specifier init_dec_list Semicolon  | -do-, block_item -> .stm  | -long-, compound_stm -> .LBrace block_item_list RBrace  | -int-, jump_stm -> .-goto- ID  | NOT, jump_stm -> .-continue-  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -half4-, compound_stm -> LBrace block_item_list .RBrace  | NOT, type_specifier -> .-float4-  | ID, block_item_list -> block_item_list .block_item  | Plus, compound_stm -> .LBrace RBrace  | Minus, iteration_stm -> .while LParen exp RParen stm  | -char-, iteration_stm -> .while LParen exp RParen stm  | ID, exp_stm -> .exp Semicolon  | ID, unary_exp -> .Increment unary_exp  | LE, stm -> .exp_stm  | -fixed2-, jump_stm -> .-goto- ID  | -char-, unary_exp -> .postfix_exp  | Percent, stm -> .iteration_stm  | -return-, dec -> .struct_specifier Semicolon  | -void-, block_item -> .stm  | -void-, primary_exp -> .LParen exp RParen  | Decrement, stm -> .compound_stm  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | -struct-, unary_exp -> .postfix_exp  | Divide, type_specifier -> .-void-  | ID, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, jump_stm -> .break  | -float2-, primary_exp -> .Number  | LParen, jump_stm -> .break  | -half3-, typedef_name -> .ID  | ID, postfix_exp -> .postfix_exp Decrement  | LBrack, stm -> .jump_stm  | -fixed3-, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, stm -> .iteration_stm  | LParen, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -void-, block_item -> .stm  | RBrace, primary_exp -> .ID  | Dot, unary_exp -> .postfix_exp  | LeftShift, )
173 <- (102, 'Decrement') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, unary_exp -> Decrement .unary_exp  | Divide, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | RParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, unary_op -> .NOT  | Tilde, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_exp -> Decrement .unary_exp  | VerticalBar, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Caret, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, unary_exp -> Decrement .unary_exp  | Plus, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .primary_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, unary_exp -> Decrement .unary_exp  | EQ, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, unary_exp -> .unary_op unary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .ID  | VerticalBar, unary_exp -> Decrement .unary_exp  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> Decrement .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | RightShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, unary_exp -> Decrement .unary_exp  | Comma, unary_exp -> .postfix_exp  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, primary_exp -> .LParen exp RParen  | LT, primary_exp -> .ID  | LeftShift, unary_exp -> Decrement .unary_exp  | LT, primary_exp -> .LParen exp RParen  | GT, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | GE, unary_exp -> .postfix_exp  | GT, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .primary_exp  | LParen, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Times, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, unary_exp -> Decrement .unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> .postfix_exp  | Caret, unary_exp -> Decrement .unary_exp  | LE, primary_exp -> .ID  | LT, unary_exp -> Decrement .unary_exp  | GE, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Percent, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, primary_exp -> .Number  | RParen, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, primary_exp -> .String  | GE, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .unary_op unary_exp  | RParen, unary_exp -> Decrement .unary_exp  | Question, unary_exp -> Decrement .unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, primary_exp -> .Number  | Plus, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | RParen, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | Percent, unary_exp -> Decrement .unary_exp  | AND, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, unary_exp -> Decrement .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_exp -> Decrement .unary_exp  | RParen, unary_op -> .Tilde  | ID, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, unary_exp -> Decrement .unary_exp  | Assign, primary_exp -> .ID  | Times, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Dot ID  | EQ, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, unary_exp -> Decrement .unary_exp  | Times, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .postfix_exp  | Comma, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, postfix_exp -> .postfix_exp Dot ID  | RParen, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Decrement, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, unary_exp -> Decrement .unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, postfix_exp -> .primary_exp  | Ampersand, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, unary_exp -> Decrement .unary_exp  | RightShift, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, unary_exp -> Decrement .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> Decrement .unary_exp  | GT, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, unary_exp -> .Increment unary_exp  | Question, unary_exp -> .postfix_exp  | LeftShift, )
174 <- (102, 'ID') (primary_exp -> ID.  | Minus, primary_exp -> ID.  | NEQ, primary_exp -> ID.  | LBrack, primary_exp -> ID.  | OR, primary_exp -> ID.  | Decrement, primary_exp -> ID.  | LParen, primary_exp -> ID.  | Comma, primary_exp -> ID.  | Times, primary_exp -> ID.  | Percent, primary_exp -> ID.  | RightShift, primary_exp -> ID.  | Question, primary_exp -> ID.  | LE, primary_exp -> ID.  | GE, primary_exp -> ID.  | LT, primary_exp -> ID.  | GT, primary_exp -> ID.  | EQ, primary_exp -> ID.  | Increment, primary_exp -> ID.  | Divide, primary_exp -> ID.  | RParen, primary_exp -> ID.  | AND, primary_exp -> ID.  | VerticalBar, primary_exp -> ID.  | Ampersand, primary_exp -> ID.  | Caret, primary_exp -> ID.  | LeftShift, primary_exp -> ID.  | Plus, primary_exp -> ID.  | Dot, primary_exp -> ID.  | Assign, )
175 <- (102, 'Increment') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, unary_exp -> Increment .unary_exp  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | RParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_exp -> Increment .unary_exp  | Minus, unary_op -> .NOT  | Tilde, unary_exp -> Increment .unary_exp  | Question, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | RightShift, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | Number, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, unary_exp -> Increment .unary_exp  | EQ, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, unary_exp -> Increment .unary_exp  | Plus, primary_exp -> .String  | LE, postfix_exp -> .primary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Percent, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Increment  | Question, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, primary_exp -> .String  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, primary_exp -> .ID  | LeftShift, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Increment, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, unary_exp -> .postfix_exp  | GT, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .primary_exp  | LParen, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, primary_exp -> .Number  | Plus, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_exp -> Increment .unary_exp  | NEQ, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Divide, unary_exp -> Increment .unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> Increment .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> Increment .unary_exp  | Assign, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .String  | Question, primary_exp -> .Number  | Percent, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, primary_exp -> .Number  | RParen, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, primary_exp -> .String  | Decrement, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, primary_exp -> .ID  | Assign, unary_exp -> Increment .unary_exp  | AND, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> Increment .unary_exp  | LE, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, unary_exp -> Increment .unary_exp  | RightShift, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, primary_exp -> .String  | LParen, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, unary_exp -> Increment .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, unary_exp -> Increment .unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .unary_op unary_exp  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, postfix_exp -> .postfix_exp Increment  | Percent, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | RParen, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, unary_exp -> Increment .unary_exp  | LT, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Times, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | Percent, unary_exp -> .postfix_exp  | RParen, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> Increment .unary_exp  | Divide, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, primary_exp -> .ID  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> Increment .unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | Decrement, unary_op -> .NOT  | String, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, unary_exp -> Increment .unary_exp  | RParen, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, postfix_exp -> .postfix_exp Dot ID  | RParen, unary_exp -> .unary_op unary_exp  | Comma, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Decrement, unary_exp -> Increment .unary_exp  | GT, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, postfix_exp -> .primary_exp  | Ampersand, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, unary_exp -> Increment .unary_exp  | Comma, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, unary_exp -> Increment .unary_exp  | Times, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, unary_exp -> Increment .unary_exp  | GE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, unary_exp -> .Increment unary_exp  | Question, unary_exp -> .postfix_exp  | LeftShift, )
176 <- (102, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, primary_exp -> LParen .exp RParen  | Dot, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, primary_exp -> LParen .exp RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .Increment unary_exp  | Ampersand, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, postfix_exp -> .primary_exp  | LT, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, primary_exp -> LParen .exp RParen  | Decrement, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, conditional_exp -> .binary_exp  | Comma, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> LParen .exp RParen  | GT, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | RParen, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, primary_exp -> LParen .exp RParen  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, binary_exp -> .unary_exp  | LE, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, unary_exp -> .postfix_exp  | LE, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .String  | Question, primary_exp -> LParen .exp RParen  | Percent, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> LParen .exp RParen  | GE, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, primary_exp -> LParen .exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, exp -> .assignment_exp  | RParen, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> LParen .exp RParen  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, primary_exp -> LParen .exp RParen  | Assign, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, primary_exp -> LParen .exp RParen  | Ampersand, primary_exp -> LParen .exp RParen  | Plus, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen RParen  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> LParen .exp RParen  | LE, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, primary_exp -> LParen .exp RParen  | Increment, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> LParen .exp RParen  | NEQ, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | RParen, postfix_exp -> .postfix_exp Dot ID  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .Tilde  | Number, binary_exp -> .unary_exp  | Plus, primary_exp -> LParen .exp RParen  | Divide, unary_exp -> .unary_op unary_exp  | Ampersand, unary_op -> .Minus  | Number, primary_exp -> .Number  | Percent, assignment_exp -> .conditional_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, primary_exp -> LParen .exp RParen  | Comma, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, primary_exp -> .Number  | RParen, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, unary_exp -> .Increment unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, primary_exp -> LParen .exp RParen  | Minus, exp -> .exp Comma assignment_exp  | RParen, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, primary_exp -> LParen .exp RParen  | Caret, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, primary_exp -> LParen .exp RParen  | OR, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> LParen .exp RParen  | LeftShift, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, primary_exp -> .Number  | Dot, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Assign, unary_exp -> .Decrement unary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | RParen, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, primary_exp -> LParen .exp RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .postfix_exp  | RParen, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, primary_exp -> LParen .exp RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, primary_exp -> LParen .exp RParen  | RParen, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, primary_exp -> LParen .exp RParen  | EQ, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Ampersand, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> LParen .exp RParen  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, primary_exp -> LParen .exp RParen  | VerticalBar, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .postfix_exp  | Comma, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .String  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
177 <- (102, 'Number') (primary_exp -> Number.  | Increment, primary_exp -> Number.  | Question, primary_exp -> Number.  | Divide, primary_exp -> Number.  | Ampersand, primary_exp -> Number.  | Plus, primary_exp -> Number.  | LE, primary_exp -> Number.  | Decrement, primary_exp -> Number.  | Caret, primary_exp -> Number.  | Percent, primary_exp -> Number.  | VerticalBar, primary_exp -> Number.  | EQ, primary_exp -> Number.  | Comma, primary_exp -> Number.  | GT, primary_exp -> Number.  | AND, primary_exp -> Number.  | GE, primary_exp -> Number.  | OR, primary_exp -> Number.  | Minus, primary_exp -> Number.  | LBrack, primary_exp -> Number.  | RightShift, primary_exp -> Number.  | LParen, primary_exp -> Number.  | Dot, primary_exp -> Number.  | LT, primary_exp -> Number.  | RParen, primary_exp -> Number.  | Assign, primary_exp -> Number.  | NEQ, primary_exp -> Number.  | Times, primary_exp -> Number.  | LeftShift, )
178 <- (102, 'String') (primary_exp -> String.  | Plus, primary_exp -> String.  | Ampersand, primary_exp -> String.  | AND, primary_exp -> String.  | Comma, primary_exp -> String.  | LeftShift, primary_exp -> String.  | RParen, primary_exp -> String.  | LE, primary_exp -> String.  | EQ, primary_exp -> String.  | RightShift, primary_exp -> String.  | Increment, primary_exp -> String.  | LParen, primary_exp -> String.  | VerticalBar, primary_exp -> String.  | Minus, primary_exp -> String.  | Question, primary_exp -> String.  | GE, primary_exp -> String.  | GT, primary_exp -> String.  | OR, primary_exp -> String.  | Divide, primary_exp -> String.  | Caret, primary_exp -> String.  | NEQ, primary_exp -> String.  | LBrack, primary_exp -> String.  | Percent, primary_exp -> String.  | Assign, primary_exp -> String.  | LT, primary_exp -> String.  | Dot, primary_exp -> String.  | Times, primary_exp -> String.  | Decrement, )
179 <- (102, 'assignment_exp') (exp -> assignment_exp.  | RParen, exp -> assignment_exp.  | Comma, )
180 <- (102, 'binary_exp') (binary_op -> .GE  | LParen, binary_op -> .LE  | ID, binary_op -> .LeftShift  | Increment, binary_op -> .VerticalBar  | Number, binary_op -> .Caret  | LParen, binary_op -> .Times  | String, binary_op -> .Times  | Decrement, binary_op -> .NEQ  | String, binary_op -> .LE  | Plus, binary_op -> .OR  | Increment, binary_op -> .LeftShift  | Decrement, binary_exp -> binary_exp .binary_op unary_exp  | Ampersand, binary_op -> .RightShift  | Increment, binary_op -> .RightShift  | String, binary_op -> .Minus  | Decrement, binary_op -> .Times  | LParen, binary_op -> .Percent  | Increment, binary_exp -> binary_exp .binary_op unary_exp  | RParen, binary_exp -> binary_exp .binary_op unary_exp  | Comma, binary_exp -> binary_exp .binary_op unary_exp  | Percent, binary_op -> .Minus  | String, binary_exp -> binary_exp .binary_op unary_exp  | GE, binary_op -> .Caret  | ID, binary_op -> .LeftShift  | Number, binary_op -> .EQ  | Plus, binary_op -> .GE  | NOT, binary_op -> .OR  | Tilde, binary_op -> .GT  | Minus, binary_op -> .LT  | Number, binary_op -> .VerticalBar  | Decrement, binary_op -> .VerticalBar  | String, binary_op -> .Caret  | Plus, binary_op -> .VerticalBar  | LParen, binary_op -> .GE  | Minus, binary_op -> .VerticalBar  | Plus, binary_op -> .GT  | Increment, binary_op -> .Plus  | LParen, binary_exp -> binary_exp .binary_op unary_exp  | Minus, binary_op -> .Plus  | ID, binary_op -> .LT  | Decrement, binary_op -> .Ampersand  | NOT, binary_op -> .Times  | Tilde, binary_op -> .Percent  | Tilde, binary_op -> .Plus  | NOT, binary_op -> .GE  | Decrement, binary_exp -> binary_exp .binary_op unary_exp  | Caret, binary_op -> .GT  | NOT, binary_op -> .EQ  | Tilde, binary_op -> .VerticalBar  | Tilde, binary_exp -> binary_exp .binary_op unary_exp  | GT, binary_op -> .Ampersand  | Increment, binary_op -> .LT  | NOT, binary_op -> .VerticalBar  | Minus, binary_op -> .Caret  | String, binary_op -> .Times  | ID, binary_op -> .Divide  | NOT, binary_op -> .LeftShift  | Plus, binary_op -> .Minus  | Plus, binary_op -> .RightShift  | Decrement, binary_op -> .RightShift  | Plus, binary_op -> .NEQ  | ID, binary_op -> .OR  | NOT, binary_op -> .GT  | Plus, binary_op -> .VerticalBar  | Increment, binary_op -> .EQ  | Number, binary_exp -> binary_exp .binary_op unary_exp  | EQ, binary_op -> .Plus  | Minus, binary_op -> .LE  | LParen, binary_op -> .LeftShift  | Minus, binary_op -> .GE  | Increment, binary_exp -> binary_exp .binary_op unary_exp  | AND, binary_op -> .Divide  | String, binary_exp -> binary_exp .binary_op unary_exp  | LE, binary_op -> .Divide  | Tilde, binary_op -> .GT  | Number, binary_op -> .Caret  | Number, binary_op -> .Times  | Plus, binary_op -> .LE  | String, binary_op -> .GT  | LParen, binary_op -> .NEQ  | Increment, binary_op -> .AND  | Minus, binary_op -> .LeftShift  | NOT, binary_op -> .OR  | Minus, binary_op -> .Caret  | Minus, binary_op -> .Times  | Number, binary_exp -> binary_exp .binary_op unary_exp  | LT, binary_exp -> binary_exp .binary_op unary_exp  | Divide, binary_op -> .RightShift  | ID, binary_op -> .Ampersand  | String, binary_op -> .RightShift  | NOT, binary_op -> .LE  | Increment, binary_op -> .OR  | Number, conditional_exp -> binary_exp .Question exp Colon conditional_exp  | Comma, binary_op -> .Divide  | Decrement, binary_op -> .EQ  | NOT, binary_op -> .Ampersand  | Plus, binary_op -> .Divide  | Plus, binary_op -> .Percent  | Number, binary_op -> .EQ  | LParen, binary_op -> .LeftShift  | String, binary_op -> .Ampersand  | LParen, binary_op -> .Percent  | String, conditional_exp -> binary_exp.  | RParen, binary_exp -> binary_exp .binary_op unary_exp  | LeftShift, binary_op -> .OR  | Decrement, binary_op -> .LeftShift  | Tilde, conditional_exp -> binary_exp .Question exp Colon conditional_exp  | RParen, binary_op -> .NEQ  | Minus, binary_op -> .LE  | Minus, binary_op -> .LE  | Number, binary_op -> .RightShift  | LParen, binary_op -> .Minus  | NOT, binary_exp -> binary_exp .binary_op unary_exp  | Question, binary_op -> .LE  | Decrement, binary_op -> .Plus  | String, binary_op -> .GE  | Tilde, binary_op -> .NEQ  | LParen, binary_op -> .Times  | NOT, binary_op -> .LE  | Tilde, binary_op -> .GT  | ID, binary_op -> .Minus  | Increment, binary_op -> .EQ  | ID, binary_op -> .Percent  | ID, binary_op -> .NEQ  | Decrement, binary_op -> .Percent  | Decrement, binary_op -> .Ampersand  | ID, binary_op -> .NEQ  | Plus, binary_op -> .Percent  | NOT, binary_exp -> binary_exp .binary_op unary_exp  | OR, binary_op -> .GT  | Decrement, binary_op -> .LE  | NOT, binary_op -> .LT  | String, binary_op -> .EQ  | Minus, binary_op -> .Minus  | Tilde, binary_exp -> binary_exp .binary_op unary_exp  | VerticalBar, binary_exp -> binary_exp .binary_op unary_exp  | Plus, binary_op -> .AND  | String, binary_op -> .GE  | Plus, binary_op -> .NEQ  | NOT, binary_op -> .Divide  | Minus, binary_op -> .Caret  | Tilde, binary_op -> .GT  | String, binary_exp -> binary_exp .binary_op unary_exp  | Times, binary_op -> .Plus  | Increment, binary_op -> .AND  | ID, binary_op -> .EQ  | Increment, binary_op -> .VerticalBar  | ID, binary_op -> .Minus  | Minus, binary_op -> .AND  | Number, binary_op -> .Divide  | Number, binary_op -> .NEQ  | Number, binary_op -> .RightShift  | Minus, binary_op -> .LT  | Tilde, binary_op -> .Plus  | Plus, binary_op -> .LT  | Plus, binary_op -> .AND  | Plus, binary_op -> .Ampersand  | Minus, binary_op -> .Plus  | Number, binary_op -> .Plus  | Decrement, binary_op -> .Ampersand  | Decrement, binary_op -> .Minus  | ID, binary_op -> .Divide  | Increment, binary_op -> .AND  | Decrement, binary_op -> .LT  | Increment, binary_op -> .Ampersand  | Number, binary_op -> .OR  | ID, binary_op -> .LeftShift  | LParen, binary_op -> .GE  | Number, binary_op -> .Divide  | ID, binary_op -> .Minus  | LParen, binary_op -> .Percent  | Minus, binary_op -> .OR  | String, binary_exp -> binary_exp .binary_op unary_exp  | NEQ, binary_op -> .LT  | LParen, binary_op -> .Caret  | Increment, binary_op -> .GE  | String, binary_op -> .AND  | Increment, binary_op -> .EQ  | String, binary_op -> .Percent  | Plus, binary_op -> .Caret  | Decrement, binary_op -> .AND  | Tilde, binary_op -> .Times  | Minus, binary_op -> .RightShift  | Tilde, binary_op -> .OR  | Plus, binary_op -> .RightShift  | Number, binary_op -> .GT  | Tilde, binary_op -> .EQ  | Decrement, conditional_exp -> binary_exp.  | Comma, binary_op -> .LeftShift  | ID, binary_op -> .AND  | LParen, binary_op -> .LT  | Minus, binary_op -> .Caret  | NOT, binary_op -> .NEQ  | Tilde, binary_op -> .LT  | ID, binary_op -> .Divide  | LParen, binary_exp -> binary_exp .binary_op unary_exp  | RightShift, binary_op -> .AND  | NOT, binary_op -> .Minus  | Number, binary_op -> .OR  | LParen, binary_op -> .GE  | ID, binary_op -> .Ampersand  | Tilde, binary_op -> .Percent  | LParen, binary_op -> .Times  | Increment, binary_op -> .Plus  | Tilde, binary_op -> .VerticalBar  | NOT, )
181 <- (102, 'conditional_exp') (assignment_exp -> conditional_exp.  | RParen, assignment_exp -> conditional_exp.  | Comma, )
182 <- (102, 'exp') (primary_exp -> LParen exp .RParen  | LeftShift, primary_exp -> LParen exp .RParen  | RightShift, primary_exp -> LParen exp .RParen  | NEQ, primary_exp -> LParen exp .RParen  | Ampersand, primary_exp -> LParen exp .RParen  | Assign, primary_exp -> LParen exp .RParen  | AND, primary_exp -> LParen exp .RParen  | LBrack, primary_exp -> LParen exp .RParen  | LParen, primary_exp -> LParen exp .RParen  | EQ, exp -> exp .Comma assignment_exp  | Comma, primary_exp -> LParen exp .RParen  | LE, primary_exp -> LParen exp .RParen  | Minus, primary_exp -> LParen exp .RParen  | Semicolon, primary_exp -> LParen exp .RParen  | VerticalBar, primary_exp -> LParen exp .RParen  | Percent, primary_exp -> LParen exp .RParen  | Divide, primary_exp -> LParen exp .RParen  | Dot, primary_exp -> LParen exp .RParen  | GT, primary_exp -> LParen exp .RParen  | LT, primary_exp -> LParen exp .RParen  | Comma, primary_exp -> LParen exp .RParen  | Increment, primary_exp -> LParen exp .RParen  | Plus, primary_exp -> LParen exp .RParen  | Times, primary_exp -> LParen exp .RParen  | Decrement, primary_exp -> LParen exp .RParen  | OR, exp -> exp .Comma assignment_exp  | RParen, primary_exp -> LParen exp .RParen  | Question, primary_exp -> LParen exp .RParen  | GE, primary_exp -> LParen exp .RParen  | Caret, )
183 <- (102, 'postfix_exp') (unary_exp -> postfix_exp.  | Ampersand, postfix_exp -> postfix_exp .Decrement  | GT, postfix_exp -> postfix_exp .LBrack exp RBrack  | Plus, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | OR, postfix_exp -> postfix_exp .LParen RParen  | OR, postfix_exp -> postfix_exp .LParen RParen  | Assign, postfix_exp -> postfix_exp .Increment  | Divide, postfix_exp -> postfix_exp .LParen RParen  | EQ, unary_exp -> postfix_exp.  | AND, postfix_exp -> postfix_exp .Increment  | VerticalBar, unary_exp -> postfix_exp.  | Comma, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Comma, postfix_exp -> postfix_exp .Dot ID  | Assign, postfix_exp -> postfix_exp .Increment  | LeftShift, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Percent, postfix_exp -> postfix_exp .Dot ID  | Dot, postfix_exp -> postfix_exp .LParen RParen  | Minus, postfix_exp -> postfix_exp .Dot ID  | GT, postfix_exp -> postfix_exp .LParen RParen  | NEQ, postfix_exp -> postfix_exp .LBrack exp RBrack  | RParen, postfix_exp -> postfix_exp .Decrement  | Caret, postfix_exp -> postfix_exp .LBrack exp RBrack  | LE, postfix_exp -> postfix_exp .Decrement  | RightShift, postfix_exp -> postfix_exp .LParen RParen  | AND, postfix_exp -> postfix_exp .LParen RParen  | RParen, postfix_exp -> postfix_exp .Decrement  | LT, postfix_exp -> postfix_exp .Decrement  | RParen, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Minus, unary_exp -> postfix_exp.  | Divide, postfix_exp -> postfix_exp .Decrement  | Assign, postfix_exp -> postfix_exp .Increment  | Minus, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Decrement, postfix_exp -> postfix_exp .Increment  | Percent, postfix_exp -> postfix_exp .Dot ID  | VerticalBar, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | EQ, postfix_exp -> postfix_exp .Increment  | Question, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> postfix_exp .Dot ID  | Times, postfix_exp -> postfix_exp .Decrement  | GE, postfix_exp -> postfix_exp .Increment  | EQ, unary_exp -> postfix_exp.  | Question, postfix_exp -> postfix_exp .LParen RParen  | LT, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | NEQ, postfix_exp -> postfix_exp .Decrement  | Divide, postfix_exp -> postfix_exp .Dot ID  | Divide, unary_exp -> postfix_exp.  | LeftShift, postfix_exp -> postfix_exp .Decrement  | Dot, postfix_exp -> postfix_exp .Dot ID  | Minus, postfix_exp -> postfix_exp .LBrack exp RBrack  | LT, unary_exp -> postfix_exp.  | OR, postfix_exp -> postfix_exp .Decrement  | Increment, postfix_exp -> postfix_exp .LBrack exp RBrack  | Question, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | GE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LT, unary_exp -> postfix_exp.  | LE, postfix_exp -> postfix_exp .Dot ID  | Increment, postfix_exp -> postfix_exp .LBrack exp RBrack  | EQ, postfix_exp -> postfix_exp .Dot ID  | Comma, postfix_exp -> postfix_exp .Increment  | OR, postfix_exp -> postfix_exp .Decrement  | LE, postfix_exp -> postfix_exp .LBrack exp RBrack  | LBrack, postfix_exp -> postfix_exp .LBrack exp RBrack  | GT, postfix_exp -> postfix_exp .LParen RParen  | LBrack, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Divide, postfix_exp -> postfix_exp .LParen RParen  | Times, postfix_exp -> postfix_exp .LParen RParen  | LE, postfix_exp -> postfix_exp .LParen RParen  | LParen, postfix_exp -> postfix_exp .Dot ID  | Plus, unary_exp -> postfix_exp.  | LT, postfix_exp -> postfix_exp .Dot ID  | LBrack, postfix_exp -> postfix_exp .LBrack exp RBrack  | Dot, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LParen, postfix_exp -> postfix_exp .LBrack exp RBrack  | VerticalBar, postfix_exp -> postfix_exp .Increment  | Decrement, postfix_exp -> postfix_exp .Decrement  | Minus, postfix_exp -> postfix_exp .Increment  | AND, postfix_exp -> postfix_exp .Increment  | LT, postfix_exp -> postfix_exp .Increment  | Caret, postfix_exp -> postfix_exp .Increment  | LE, postfix_exp -> postfix_exp .Increment  | Times, unary_exp -> postfix_exp.  | Times, postfix_exp -> postfix_exp .LParen RParen  | GT, postfix_exp -> postfix_exp .LBrack exp RBrack  | LeftShift, postfix_exp -> postfix_exp .Increment  | Comma, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | RParen, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LeftShift, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Assign, postfix_exp -> postfix_exp .LParen RParen  | Caret, postfix_exp -> postfix_exp .Dot ID  | LE, postfix_exp -> postfix_exp .Decrement  | NEQ, unary_exp -> postfix_exp.  | GE, postfix_exp -> postfix_exp .LBrack exp RBrack  | AND, postfix_exp -> postfix_exp .LBrack exp RBrack  | Decrement, postfix_exp -> postfix_exp .Decrement  | Percent, postfix_exp -> postfix_exp .LBrack exp RBrack  | GE, postfix_exp -> postfix_exp .Increment  | Plus, postfix_exp -> postfix_exp .Dot ID  | OR, postfix_exp -> postfix_exp .Increment  | LBrack, postfix_exp -> postfix_exp .Decrement  | VerticalBar, postfix_exp -> postfix_exp .Dot ID  | GE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | AND, postfix_exp -> postfix_exp .Dot ID  | Ampersand, postfix_exp -> postfix_exp .Decrement  | Times, unary_exp -> postfix_exp.  | Percent, postfix_exp -> postfix_exp .Dot ID  | LParen, unary_exp -> postfix_exp.  | Minus, postfix_exp -> postfix_exp .Decrement  | Decrement, postfix_exp -> postfix_exp .Dot ID  | RightShift, postfix_exp -> postfix_exp .Dot ID  | NEQ, postfix_exp -> postfix_exp .LBrack exp RBrack  | Increment, postfix_exp -> postfix_exp .LParen RParen  | Increment, postfix_exp -> postfix_exp .Increment  | Increment, postfix_exp -> postfix_exp .Dot ID  | RParen, postfix_exp -> postfix_exp .Dot ID  | Decrement, postfix_exp -> postfix_exp .Increment  | NEQ, postfix_exp -> postfix_exp .Increment  | Ampersand, postfix_exp -> postfix_exp .LBrack exp RBrack  | Percent, postfix_exp -> postfix_exp .Increment  | RightShift, postfix_exp -> postfix_exp .LBrack exp RBrack  | LParen, postfix_exp -> postfix_exp .Dot ID  | Question, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Question, postfix_exp -> postfix_exp .LParen RParen  | Ampersand, postfix_exp -> postfix_exp .Dot ID  | EQ, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | RightShift, postfix_exp -> postfix_exp .Decrement  | LBrack, unary_exp -> postfix_exp.  | RParen, postfix_exp -> postfix_exp .LBrack exp RBrack  | Minus, postfix_exp -> postfix_exp .Decrement  | Ampersand, postfix_exp -> postfix_exp .LBrack exp RBrack  | Ampersand, postfix_exp -> postfix_exp .LParen RParen  | Percent, postfix_exp -> postfix_exp .Dot ID  | AND, postfix_exp -> postfix_exp .LParen RParen  | Comma, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | GT, postfix_exp -> postfix_exp .LParen RParen  | Dot, postfix_exp -> postfix_exp .Decrement  | Comma, postfix_exp -> postfix_exp .LBrack exp RBrack  | Divide, postfix_exp -> postfix_exp .Decrement  | OR, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LBrack, postfix_exp -> postfix_exp .Dot ID  | LT, postfix_exp -> postfix_exp .LParen RParen  | LeftShift, unary_exp -> postfix_exp.  | VerticalBar, postfix_exp -> postfix_exp .Decrement  | LParen, postfix_exp -> postfix_exp .Increment  | Dot, unary_exp -> postfix_exp.  | GT, postfix_exp -> postfix_exp .Dot ID  | Caret, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Ampersand, postfix_exp -> postfix_exp .LBrack exp RBrack  | Comma, postfix_exp -> postfix_exp .LBrack exp RBrack  | Assign, postfix_exp -> postfix_exp .Decrement  | LeftShift, postfix_exp -> postfix_exp .LParen RParen  | Divide, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Dot, postfix_exp -> postfix_exp .Decrement  | AND, postfix_exp -> postfix_exp .Dot ID  | LeftShift, unary_exp -> postfix_exp.  | NEQ, postfix_exp -> postfix_exp .LBrack exp RBrack  | OR, postfix_exp -> postfix_exp .LParen RParen  | Plus, postfix_exp -> postfix_exp .LParen RParen  | GE, postfix_exp -> postfix_exp .LParen RParen  | Decrement, postfix_exp -> postfix_exp .LParen RParen  | VerticalBar, postfix_exp -> postfix_exp .LParen RParen  | Question, postfix_exp -> postfix_exp .Decrement  | Question, postfix_exp -> postfix_exp .Increment  | RParen, postfix_exp -> postfix_exp .Increment  | GE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Caret, postfix_exp -> postfix_exp .LBrack exp RBrack  | Times, unary_exp -> postfix_exp.  | Assign, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Plus, postfix_exp -> postfix_exp .Decrement  | Plus, postfix_exp -> postfix_exp .Decrement  | EQ, postfix_exp -> postfix_exp .Increment  | LParen, postfix_exp -> postfix_exp .Increment  | GT, postfix_exp -> postfix_exp .LBrack exp RBrack  | Caret, unary_exp -> postfix_exp.  | Caret, postfix_exp -> postfix_exp .LBrack exp RBrack  | RightShift, unary_exp -> postfix_exp.  | Plus, postfix_exp -> postfix_exp .LBrack exp RBrack  | NEQ, postfix_exp -> postfix_exp .Dot ID  | Percent, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Times, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Increment, unary_exp -> postfix_exp.  | EQ, unary_exp -> postfix_exp.  | RightShift, postfix_exp -> postfix_exp .LParen RParen  | RightShift, postfix_exp -> postfix_exp .Increment  | Assign, )
184 <- (102, 'primary_exp') (postfix_exp -> primary_exp.  | VerticalBar, postfix_exp -> primary_exp.  | OR, postfix_exp -> primary_exp.  | LE, postfix_exp -> primary_exp.  | Decrement, postfix_exp -> primary_exp.  | Times, postfix_exp -> primary_exp.  | Comma, postfix_exp -> primary_exp.  | Question, postfix_exp -> primary_exp.  | LeftShift, postfix_exp -> primary_exp.  | Assign, postfix_exp -> primary_exp.  | Caret, postfix_exp -> primary_exp.  | AND, postfix_exp -> primary_exp.  | Divide, postfix_exp -> primary_exp.  | LParen, postfix_exp -> primary_exp.  | EQ, postfix_exp -> primary_exp.  | Minus, postfix_exp -> primary_exp.  | GE, postfix_exp -> primary_exp.  | Dot, postfix_exp -> primary_exp.  | LBrack, postfix_exp -> primary_exp.  | LT, postfix_exp -> primary_exp.  | GT, postfix_exp -> primary_exp.  | Percent, postfix_exp -> primary_exp.  | RParen, postfix_exp -> primary_exp.  | Increment, postfix_exp -> primary_exp.  | RightShift, postfix_exp -> primary_exp.  | Ampersand, postfix_exp -> primary_exp.  | Plus, postfix_exp -> primary_exp.  | NEQ, )
185 <- (102, 'unary_exp') (binary_exp -> unary_exp.  | RParen, binary_exp -> unary_exp.  | VerticalBar, assignment_exp -> unary_exp .assignment_op assignment_exp  | Comma, binary_exp -> unary_exp.  | GE, assignment_op -> .Assign  | String, binary_exp -> unary_exp.  | Comma, binary_exp -> unary_exp.  | Minus, assignment_op -> .Assign  | Number, binary_exp -> unary_exp.  | GT, binary_exp -> unary_exp.  | LeftShift, binary_exp -> unary_exp.  | AND, binary_exp -> unary_exp.  | LE, assignment_op -> .Assign  | NOT, binary_exp -> unary_exp.  | Divide, binary_exp -> unary_exp.  | RightShift, assignment_op -> .Assign  | Decrement, binary_exp -> unary_exp.  | NEQ, binary_exp -> unary_exp.  | Caret, binary_exp -> unary_exp.  | Ampersand, binary_exp -> unary_exp.  | Percent, assignment_op -> .Assign  | LParen, assignment_op -> .Assign  | ID, binary_exp -> unary_exp.  | LT, binary_exp -> unary_exp.  | Times, assignment_op -> .Assign  | Plus, assignment_op -> .Assign  | Increment, binary_exp -> unary_exp.  | EQ, assignment_op -> .Assign  | Minus, binary_exp -> unary_exp.  | Question, binary_exp -> unary_exp.  | OR, assignment_op -> .Assign  | Tilde, assignment_exp -> unary_exp .assignment_op assignment_exp  | RParen, binary_exp -> unary_exp.  | Plus, )
186 <- (102, 'unary_op') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_op -> .Tilde  | String, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, unary_exp -> .postfix_exp  | RParen, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | RParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, primary_exp -> .String  | LeftShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, unary_exp -> unary_op .unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, primary_exp -> .LParen exp RParen  | Assign, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .unary_op unary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_exp -> unary_op .unary_exp  | Minus, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Percent, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, unary_exp -> unary_op .unary_exp  | NEQ, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, unary_exp -> unary_op .unary_exp  | LE, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Increment  | Question, unary_exp -> .Decrement unary_exp  | Question, unary_exp -> unary_op .unary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, primary_exp -> .String  | RightShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> unary_op .unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, unary_exp -> unary_op .unary_exp  | LeftShift, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> unary_op .unary_exp  | Divide, primary_exp -> .ID  | LeftShift, unary_exp -> unary_op .unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .LParen exp RParen  | GE, unary_exp -> .postfix_exp  | GT, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .primary_exp  | LParen, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> unary_op .unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_op -> .Minus  | Decrement, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .String  | Question, primary_exp -> .Number  | Percent, unary_exp -> .unary_op unary_exp  | Assign, unary_exp -> unary_op .unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, primary_exp -> .Number  | RParen, unary_op -> .Minus  | LParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | Decrement, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, postfix_exp -> .postfix_exp Dot ID  | Comma, unary_exp -> unary_op .unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, primary_exp -> .LParen exp RParen  | Minus, postfix_exp -> .primary_exp  | GT, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, primary_exp -> .Number  | Plus, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | RParen, primary_exp -> .ID  | Comma, primary_exp -> .ID  | LBrack, unary_exp -> unary_op .unary_exp  | Question, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, unary_exp -> unary_op .unary_exp  | RParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Divide, primary_exp -> .String  | Caret, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | Percent, unary_exp -> unary_op .unary_exp  | Assign, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, unary_exp -> unary_op .unary_exp  | GT, primary_exp -> .String  | Times, unary_exp -> unary_op .unary_exp  | Plus, primary_exp -> .LParen exp RParen  | Divide, primary_exp -> .LParen exp RParen  | RParen, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | GE, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .Minus  | Number, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, unary_exp -> unary_op .unary_exp  | Ampersand, postfix_exp -> .postfix_exp Increment  | Dot, unary_exp -> unary_op .unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, postfix_exp -> .postfix_exp Dot ID  | RParen, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, unary_exp -> unary_op .unary_exp  | Percent, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Decrement, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, unary_exp -> unary_op .unary_exp  | Times, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, unary_exp -> unary_op .unary_exp  | RightShift, primary_exp -> .ID  | Dot, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Assign, unary_exp -> .Increment unary_exp  | Question, unary_exp -> .postfix_exp  | LeftShift, )
187 <- (112, 'AND') (binary_op -> AND.  | LParen, binary_op -> AND.  | Number, binary_op -> AND.  | Tilde, binary_op -> AND.  | Plus, binary_op -> AND.  | Minus, binary_op -> AND.  | ID, binary_op -> AND.  | Increment, binary_op -> AND.  | NOT, binary_op -> AND.  | Decrement, binary_op -> AND.  | String, )
188 <- (112, 'Ampersand') (binary_op -> Ampersand.  | Minus, binary_op -> Ampersand.  | LParen, binary_op -> Ampersand.  | Number, binary_op -> Ampersand.  | Plus, binary_op -> Ampersand.  | Decrement, binary_op -> Ampersand.  | ID, binary_op -> Ampersand.  | Increment, binary_op -> Ampersand.  | String, binary_op -> Ampersand.  | Tilde, binary_op -> Ampersand.  | NOT, )
189 <- (112, 'Caret') (binary_op -> Caret.  | Decrement, binary_op -> Caret.  | Plus, binary_op -> Caret.  | String, binary_op -> Caret.  | Number, binary_op -> Caret.  | ID, binary_op -> Caret.  | Increment, binary_op -> Caret.  | NOT, binary_op -> Caret.  | Tilde, binary_op -> Caret.  | LParen, binary_op -> Caret.  | Minus, )
190 <- (112, 'Divide') (binary_op -> Divide.  | Tilde, binary_op -> Divide.  | Number, binary_op -> Divide.  | Decrement, binary_op -> Divide.  | Increment, binary_op -> Divide.  | Plus, binary_op -> Divide.  | String, binary_op -> Divide.  | Minus, binary_op -> Divide.  | NOT, binary_op -> Divide.  | ID, binary_op -> Divide.  | LParen, )
191 <- (112, 'EQ') (binary_op -> EQ.  | LParen, binary_op -> EQ.  | ID, binary_op -> EQ.  | Increment, binary_op -> EQ.  | Plus, binary_op -> EQ.  | Tilde, binary_op -> EQ.  | Decrement, binary_op -> EQ.  | NOT, binary_op -> EQ.  | Minus, binary_op -> EQ.  | String, binary_op -> EQ.  | Number, )
192 <- (112, 'GE') (binary_op -> GE.  | NOT, binary_op -> GE.  | Tilde, binary_op -> GE.  | Number, binary_op -> GE.  | Plus, binary_op -> GE.  | LParen, binary_op -> GE.  | Minus, binary_op -> GE.  | ID, binary_op -> GE.  | Decrement, binary_op -> GE.  | String, binary_op -> GE.  | Increment, )
193 <- (112, 'GT') (binary_op -> GT.  | Tilde, binary_op -> GT.  | Increment, binary_op -> GT.  | Decrement, binary_op -> GT.  | Plus, binary_op -> GT.  | Minus, binary_op -> GT.  | Number, binary_op -> GT.  | NOT, binary_op -> GT.  | ID, binary_op -> GT.  | String, binary_op -> GT.  | LParen, )
194 <- (112, 'LE') (binary_op -> LE.  | Minus, binary_op -> LE.  | LParen, binary_op -> LE.  | Plus, binary_op -> LE.  | Decrement, binary_op -> LE.  | Tilde, binary_op -> LE.  | Increment, binary_op -> LE.  | Number, binary_op -> LE.  | NOT, binary_op -> LE.  | ID, binary_op -> LE.  | String, )
195 <- (112, 'LT') (binary_op -> LT.  | Increment, binary_op -> LT.  | NOT, binary_op -> LT.  | ID, binary_op -> LT.  | String, binary_op -> LT.  | Tilde, binary_op -> LT.  | Number, binary_op -> LT.  | Decrement, binary_op -> LT.  | LParen, binary_op -> LT.  | Plus, binary_op -> LT.  | Minus, )
196 <- (112, 'LeftShift') (binary_op -> LeftShift.  | String, binary_op -> LeftShift.  | Number, binary_op -> LeftShift.  | LParen, binary_op -> LeftShift.  | Increment, binary_op -> LeftShift.  | NOT, binary_op -> LeftShift.  | Decrement, binary_op -> LeftShift.  | Plus, binary_op -> LeftShift.  | Minus, binary_op -> LeftShift.  | Tilde, binary_op -> LeftShift.  | ID, )
197 <- (112, 'Minus') (binary_op -> Minus.  | ID, binary_op -> Minus.  | NOT, binary_op -> Minus.  | String, binary_op -> Minus.  | Number, binary_op -> Minus.  | Tilde, binary_op -> Minus.  | Plus, binary_op -> Minus.  | LParen, binary_op -> Minus.  | Minus, binary_op -> Minus.  | Increment, binary_op -> Minus.  | Decrement, )
198 <- (112, 'NEQ') (binary_op -> NEQ.  | Decrement, binary_op -> NEQ.  | NOT, binary_op -> NEQ.  | Increment, binary_op -> NEQ.  | String, binary_op -> NEQ.  | LParen, binary_op -> NEQ.  | Plus, binary_op -> NEQ.  | Number, binary_op -> NEQ.  | Minus, binary_op -> NEQ.  | ID, binary_op -> NEQ.  | Tilde, )
199 <- (112, 'OR') (binary_op -> OR.  | NOT, binary_op -> OR.  | Tilde, binary_op -> OR.  | Number, binary_op -> OR.  | String, binary_op -> OR.  | ID, binary_op -> OR.  | Plus, binary_op -> OR.  | LParen, binary_op -> OR.  | Minus, binary_op -> OR.  | Decrement, binary_op -> OR.  | Increment, )
200 <- (112, 'Percent') (binary_op -> Percent.  | ID, binary_op -> Percent.  | NOT, binary_op -> Percent.  | String, binary_op -> Percent.  | Number, binary_op -> Percent.  | Increment, binary_op -> Percent.  | Tilde, binary_op -> Percent.  | LParen, binary_op -> Percent.  | Decrement, binary_op -> Percent.  | Minus, binary_op -> Percent.  | Plus, )
201 <- (112, 'Plus') (binary_op -> Plus.  | NOT, binary_op -> Plus.  | LParen, binary_op -> Plus.  | String, binary_op -> Plus.  | Plus, binary_op -> Plus.  | Tilde, binary_op -> Plus.  | Decrement, binary_op -> Plus.  | ID, binary_op -> Plus.  | Number, binary_op -> Plus.  | Increment, binary_op -> Plus.  | Minus, )
202 <- (112, 'Question') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Dot ID  | Decrement, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .unary_op unary_exp  | Colon, unary_exp -> .Increment unary_exp  | Colon, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, conditional_exp -> binary_exp Question .exp Colon conditional_exp  | Semicolon, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, postfix_exp -> .postfix_exp LParen RParen  | LT, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, conditional_exp -> .binary_exp  | Colon, binary_exp -> .unary_exp  | EQ, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, primary_exp -> .String  | Colon, unary_exp -> .postfix_exp  | Colon, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, primary_exp -> .ID  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Colon, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Colon, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, postfix_exp -> .postfix_exp Decrement  | Colon, binary_exp -> .unary_exp  | LE, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, exp -> .exp Comma assignment_exp  | Colon, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp Decrement  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Colon, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Colon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, binary_exp -> .unary_exp  | LT, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | Percent, unary_op -> .Tilde  | Minus, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_op -> .Plus  | Minus, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, primary_exp -> .ID  | Assign, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, postfix_exp -> .postfix_exp Increment  | Colon, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .Number  | Colon, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, assignment_exp -> .unary_exp assignment_op assignment_exp  | Colon, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, unary_exp -> .Increment unary_exp  | Question, binary_exp -> .unary_exp  | AND, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_exp -> .Decrement unary_exp  | Colon, unary_op -> .NOT  | Number, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, assignment_exp -> .conditional_exp  | Colon, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, primary_exp -> .LParen exp RParen  | Colon, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, binary_exp -> .unary_exp  | Colon, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, postfix_exp -> .postfix_exp Dot ID  | Colon, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .Decrement unary_exp  | Percent, primary_exp -> .LParen exp RParen  | LE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, unary_exp -> .Decrement unary_exp  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Colon, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_exp -> .postfix_exp  | Question, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, primary_exp -> .LParen exp RParen  | Plus, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | Colon, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .Number  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_op -> .Minus  | NOT, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Colon, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, conditional_exp -> binary_exp Question .exp Colon conditional_exp  | Comma, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .String  | GE, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, postfix_exp -> .primary_exp  | Ampersand, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, exp -> .assignment_exp  | Colon, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
203 <- (112, 'RightShift') (binary_op -> RightShift.  | LParen, binary_op -> RightShift.  | NOT, binary_op -> RightShift.  | Tilde, binary_op -> RightShift.  | Minus, binary_op -> RightShift.  | Decrement, binary_op -> RightShift.  | ID, binary_op -> RightShift.  | String, binary_op -> RightShift.  | Increment, binary_op -> RightShift.  | Plus, binary_op -> RightShift.  | Number, )
204 <- (112, 'Times') (binary_op -> Times.  | Increment, binary_op -> Times.  | Minus, binary_op -> Times.  | Plus, binary_op -> Times.  | Number, binary_op -> Times.  | LParen, binary_op -> Times.  | Decrement, binary_op -> Times.  | String, binary_op -> Times.  | ID, binary_op -> Times.  | NOT, binary_op -> Times.  | Tilde, )
205 <- (112, 'VerticalBar') (binary_op -> VerticalBar.  | LParen, binary_op -> VerticalBar.  | Decrement, binary_op -> VerticalBar.  | Minus, binary_op -> VerticalBar.  | String, binary_op -> VerticalBar.  | Number, binary_op -> VerticalBar.  | NOT, binary_op -> VerticalBar.  | Tilde, binary_op -> VerticalBar.  | Plus, binary_op -> VerticalBar.  | ID, binary_op -> VerticalBar.  | Increment, )
206 <- (112, 'binary_op') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | LT, binary_exp -> binary_exp binary_op .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | RightShift, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, unary_exp -> .unary_op unary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, unary_exp -> .postfix_exp  | Semicolon, unary_exp -> .unary_op unary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Percent, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Question, binary_exp -> binary_exp binary_op .unary_exp  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | GE, binary_exp -> binary_exp binary_op .unary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | Plus, binary_exp -> binary_exp binary_op .unary_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Increment  | Question, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, primary_exp -> .String  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, primary_exp -> .ID  | Minus, binary_exp -> binary_exp binary_op .unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Semicolon, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen RParen  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, primary_exp -> .ID  | LeftShift, binary_exp -> binary_exp binary_op .unary_exp  | Ampersand, binary_exp -> binary_exp binary_op .unary_exp  | LT, primary_exp -> .Number  | Semicolon, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .LParen exp RParen  | GE, unary_exp -> .postfix_exp  | GT, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, binary_exp -> binary_exp binary_op .unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_op -> .Plus  | Minus, unary_exp -> .Increment unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, binary_exp -> binary_exp binary_op .unary_exp  | Comma, postfix_exp -> .primary_exp  | Decrement, binary_exp -> binary_exp binary_op .unary_exp  | OR, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, binary_exp -> binary_exp binary_op .unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Question, binary_exp -> binary_exp binary_op .unary_exp  | NEQ, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, postfix_exp -> .postfix_exp Dot ID  | Comma, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, binary_exp -> binary_exp binary_op .unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, primary_exp -> .LParen exp RParen  | Minus, postfix_exp -> .primary_exp  | GT, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, primary_exp -> .Number  | Plus, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .ID  | Comma, primary_exp -> .ID  | LBrack, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, binary_exp -> binary_exp binary_op .unary_exp  | AND, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Times, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, binary_exp -> binary_exp binary_op .unary_exp  | GE, primary_exp -> .LParen exp RParen  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, binary_exp -> binary_exp binary_op .unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | ID, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, postfix_exp -> .postfix_exp Decrement  | Percent, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_op -> .Tilde  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, binary_exp -> binary_exp binary_op .unary_exp  | GT, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, unary_exp -> .Decrement unary_exp  | OR, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Dot ID  | EQ, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, binary_exp -> binary_exp binary_op .unary_exp  | Divide, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, binary_exp -> binary_exp binary_op .unary_exp  | Times, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, binary_exp -> binary_exp binary_op .unary_exp  | Percent, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Decrement, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Dot, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, binary_exp -> binary_exp binary_op .unary_exp  | EQ, unary_exp -> .postfix_exp  | LeftShift, )
207 <- (114, 'RBrace') (compound_stm -> LBrace block_item_list RBrace.  | -double-, compound_stm -> LBrace block_item_list RBrace.  | -fixed2-, compound_stm -> LBrace block_item_list RBrace.  | -float3-, compound_stm -> LBrace block_item_list RBrace.  | -half4-, compound_stm -> LBrace block_item_list RBrace.  | -uniform-, compound_stm -> LBrace block_item_list RBrace.  | -half3-, compound_stm -> LBrace block_item_list RBrace.  | -short-, compound_stm -> LBrace block_item_list RBrace.  | -int-, compound_stm -> LBrace block_item_list RBrace.  | -sampler2D-, compound_stm -> LBrace block_item_list RBrace.  | ID, compound_stm -> LBrace block_item_list RBrace.  | -float-, compound_stm -> LBrace block_item_list RBrace.  | Pound, compound_stm -> LBrace block_item_list RBrace.  | -float2-, compound_stm -> LBrace block_item_list RBrace.  | -struct-, compound_stm -> LBrace block_item_list RBrace.  | -void-, compound_stm -> LBrace block_item_list RBrace.  | -half2-, compound_stm -> LBrace block_item_list RBrace.  | -fixed4-, compound_stm -> LBrace block_item_list RBrace.  | -long-, compound_stm -> LBrace block_item_list RBrace.  | -char-, compound_stm -> LBrace block_item_list RBrace.  | -fixed3-, compound_stm -> LBrace block_item_list RBrace.  | -float4-, compound_stm -> LBrace block_item_list RBrace.  | -ENDCG-, )
208 <- (114, 'block_item') (block_item_list -> block_item_list block_item.  | -goto-, block_item_list -> block_item_list block_item.  | for, block_item_list -> block_item_list block_item.  | -half2-, block_item_list -> block_item_list block_item.  | NOT, block_item_list -> block_item_list block_item.  | -continue-, block_item_list -> block_item_list block_item.  | -half4-, block_item_list -> block_item_list block_item.  | Tilde, block_item_list -> block_item_list block_item.  | RBrace, block_item_list -> block_item_list block_item.  | String, block_item_list -> block_item_list block_item.  | -short-, block_item_list -> block_item_list block_item.  | -do-, block_item_list -> block_item_list block_item.  | -struct-, block_item_list -> block_item_list block_item.  | LBrace, block_item_list -> block_item_list block_item.  | Plus, block_item_list -> block_item_list block_item.  | Number, block_item_list -> block_item_list block_item.  | -fixed4-, block_item_list -> block_item_list block_item.  | -int-, block_item_list -> block_item_list block_item.  | -sampler2D-, block_item_list -> block_item_list block_item.  | Semicolon, block_item_list -> block_item_list block_item.  | -fixed2-, block_item_list -> block_item_list block_item.  | -half3-, block_item_list -> block_item_list block_item.  | -double-, block_item_list -> block_item_list block_item.  | -float3-, block_item_list -> block_item_list block_item.  | -float2-, block_item_list -> block_item_list block_item.  | -long-, block_item_list -> block_item_list block_item.  | Minus, block_item_list -> block_item_list block_item.  | -return-, block_item_list -> block_item_list block_item.  | Decrement, block_item_list -> block_item_list block_item.  | -float-, block_item_list -> block_item_list block_item.  | ID, block_item_list -> block_item_list block_item.  | break, block_item_list -> block_item_list block_item.  | if, block_item_list -> block_item_list block_item.  | -char-, block_item_list -> block_item_list block_item.  | -void-, block_item_list -> block_item_list block_item.  | Increment, block_item_list -> block_item_list block_item.  | while, block_item_list -> block_item_list block_item.  | LParen, block_item_list -> block_item_list block_item.  | -float4-, block_item_list -> block_item_list block_item.  | -fixed3-, block_item_list -> block_item_list block_item.  | -uniform-, )
209 <- (119, 'ID') (init_dec_list -> ID.  | Semicolon, )
210 <- (119, 'init_dec_list') (dec -> dec_specifier init_dec_list .Semicolon  | -half4-, dec -> dec_specifier init_dec_list .Semicolon  | -float3-, dec -> dec_specifier init_dec_list .Semicolon  | -goto-, dec -> dec_specifier init_dec_list .Semicolon  | -int-, dec -> dec_specifier init_dec_list .Semicolon  | -fixed3-, dec -> dec_specifier init_dec_list .Semicolon  | -struct-, dec -> dec_specifier init_dec_list .Semicolon  | Minus, dec -> dec_specifier init_dec_list .Semicolon  | -double-, dec -> dec_specifier init_dec_list .Semicolon  | Plus, dec -> dec_specifier init_dec_list .Semicolon  | -float2-, dec -> dec_specifier init_dec_list .Semicolon  | -void-, dec -> dec_specifier init_dec_list .Semicolon  | if, dec -> dec_specifier init_dec_list .Semicolon  | -char-, dec -> dec_specifier init_dec_list .Semicolon  | break, dec -> dec_specifier init_dec_list .Semicolon  | while, dec -> dec_specifier init_dec_list .Semicolon  | -long-, dec -> dec_specifier init_dec_list .Semicolon  | Number, dec -> dec_specifier init_dec_list .Semicolon  | -continue-, dec -> dec_specifier init_dec_list .Semicolon  | NOT, dec -> dec_specifier init_dec_list .Semicolon  | -do-, dec -> dec_specifier init_dec_list .Semicolon  | -half2-, dec -> dec_specifier init_dec_list .Semicolon  | -fixed4-, dec -> dec_specifier init_dec_list .Semicolon  | for, dec -> dec_specifier init_dec_list .Semicolon  | -fixed2-, dec -> dec_specifier init_dec_list .Semicolon  | Semicolon, dec -> dec_specifier init_dec_list .Semicolon  | ID, dec -> dec_specifier init_dec_list .Semicolon  | -sampler2D-, dec -> dec_specifier init_dec_list .Semicolon  | LBrace, dec -> dec_specifier init_dec_list .Semicolon  | -uniform-, dec -> dec_specifier init_dec_list .Semicolon  | -float4-, dec -> dec_specifier init_dec_list .Semicolon  | -return-, dec -> dec_specifier init_dec_list .Semicolon  | -half3-, dec -> dec_specifier init_dec_list .Semicolon  | Tilde, dec -> dec_specifier init_dec_list .Semicolon  | -float-, dec -> dec_specifier init_dec_list .Semicolon  | Decrement, dec -> dec_specifier init_dec_list .Semicolon  | RBrace, dec -> dec_specifier init_dec_list .Semicolon  | String, dec -> dec_specifier init_dec_list .Semicolon  | LParen, dec -> dec_specifier init_dec_list .Semicolon  | Increment, dec -> dec_specifier init_dec_list .Semicolon  | -short-, )
211 <- (120, 'Comma') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, primary_exp -> .ID  | LT, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, unary_exp -> .unary_op unary_exp  | Semicolon, conditional_exp -> .binary_exp  | Comma, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, exp -> exp Comma .assignment_exp  | Comma, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, exp -> exp Comma .assignment_exp  | Semicolon, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Dot ID  | Increment, postfix_exp -> .primary_exp  | Increment, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, primary_exp -> .Number  | AND, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .String  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Question, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, binary_exp -> .unary_exp  | LE, primary_exp -> .Number  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Semicolon, unary_op -> .Tilde  | Number, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .unary_op unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, postfix_exp -> .postfix_exp Dot ID  | LBrack, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | Decrement, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, unary_exp -> .postfix_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Times, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, conditional_exp -> .binary_exp  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, binary_exp -> .unary_exp  | LT, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Ampersand, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .primary_exp  | LE, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | Dot, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
212 <- (120, 'Semicolon') (exp_stm -> exp Semicolon.  | -short-, exp_stm -> exp Semicolon.  | Decrement, exp_stm -> exp Semicolon.  | -return-, exp_stm -> exp Semicolon.  | -fixed4-, exp_stm -> exp Semicolon.  | -half2-, exp_stm -> exp Semicolon.  | Plus, exp_stm -> exp Semicolon.  | break, exp_stm -> exp Semicolon.  | -float2-, exp_stm -> exp Semicolon.  | -struct-, exp_stm -> exp Semicolon.  | String, exp_stm -> exp Semicolon.  | NOT, exp_stm -> exp Semicolon.  | -do-, exp_stm -> exp Semicolon.  | -int-, exp_stm -> exp Semicolon.  | -sampler2D-, exp_stm -> exp Semicolon.  | for, exp_stm -> exp Semicolon.  | LBrace, exp_stm -> exp Semicolon.  | -char-, exp_stm -> exp Semicolon.  | Increment, exp_stm -> exp Semicolon.  | Minus, exp_stm -> exp Semicolon.  | LParen, exp_stm -> exp Semicolon.  | -float4-, exp_stm -> exp Semicolon.  | -float-, exp_stm -> exp Semicolon.  | -long-, exp_stm -> exp Semicolon.  | -goto-, exp_stm -> exp Semicolon.  | Semicolon, exp_stm -> exp Semicolon.  | -fixed3-, exp_stm -> exp Semicolon.  | -float3-, exp_stm -> exp Semicolon.  | -double-, exp_stm -> exp Semicolon.  | -half3-, exp_stm -> exp Semicolon.  | ID, exp_stm -> exp Semicolon.  | -void-, exp_stm -> exp Semicolon.  | -half4-, exp_stm -> exp Semicolon.  | Number, exp_stm -> exp Semicolon.  | while, exp_stm -> exp Semicolon.  | -fixed2-, exp_stm -> exp Semicolon.  | -uniform-, exp_stm -> exp Semicolon.  | if, exp_stm -> exp Semicolon.  | -continue-, exp_stm -> exp Semicolon.  | RBrace, exp_stm -> exp Semicolon.  | Tilde, )
213 <- (122, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -continue-, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp Dot ID  | Decrement, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -struct-, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, postfix_exp -> .primary_exp  | Divide, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, primary_exp -> .ID  | LT, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, conditional_exp -> .binary_exp  | Comma, unary_exp -> .unary_op unary_exp  | LE, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | ID, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Increment  | Semicolon, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | LParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .primary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, postfix_exp -> .primary_exp  | Increment, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | Number, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, unary_exp -> .postfix_exp  | Semicolon, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -half2-, binary_exp -> .unary_exp  | LE, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -void-, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | Question, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | break, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -do-, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, binary_exp -> .unary_exp  | Ampersand, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | Plus, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -half4-, unary_exp -> .Increment unary_exp  | Caret, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -fixed4-, binary_exp -> .binary_exp binary_op unary_exp  | Question, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -half3-, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Assign, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -double-, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -goto-, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -float2-, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -float3-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | Tilde, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .Number  | Semicolon, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | Decrement, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -int-, postfix_exp -> .postfix_exp Decrement  | Semicolon, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | LT, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .Decrement unary_exp  | OR, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -short-, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .unary_op unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, postfix_exp -> .postfix_exp Dot ID  | LBrack, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, binary_exp -> .unary_exp  | AND, primary_exp -> .String  | Decrement, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | while, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -float4-, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | LBrace, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, primary_exp -> .Number  | Plus, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | Semicolon, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -fixed2-, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, unary_op -> .Minus  | Tilde, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -uniform-, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .Decrement unary_exp  | AND, primary_exp -> .String  | Assign, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -float-, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | NOT, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Caret, unary_exp -> .postfix_exp  | NEQ, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, binary_exp -> .binary_exp binary_op unary_exp  | EQ, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -fixed3-, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_op -> .NOT  | Plus, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | Comma, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | RBrace, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -long-, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | for, conditional_exp -> .binary_exp  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | Increment, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | String, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, postfix_exp -> .primary_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -sampler2D-, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> .String  | Divide, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, primary_exp -> .String  | Comma, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | Minus, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | if, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .primary_exp  | LE, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, unary_exp -> .unary_op unary_exp  | Semicolon, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -return-, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -char-, unary_exp -> .postfix_exp  | LeftShift, unary_op -> .NOT  | Decrement, )
214 <- (123, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, selection_stm -> if LParen .exp RParen stm  | Increment, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, primary_exp -> .LParen exp RParen  | RightShift, selection_stm -> if LParen .exp RParen stm else stm  | Plus, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, selection_stm -> if LParen .exp RParen stm  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, selection_stm -> if LParen .exp RParen stm else stm  | -continue-, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, selection_stm -> if LParen .exp RParen stm  | for, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, unary_exp -> .postfix_exp  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, selection_stm -> if LParen .exp RParen stm else stm  | break, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | GE, selection_stm -> if LParen .exp RParen stm  | Decrement, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, unary_exp -> .postfix_exp  | RParen, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, selection_stm -> if LParen .exp RParen stm else stm  | -short-, unary_exp -> .Decrement unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | RParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, selection_stm -> if LParen .exp RParen stm  | LBrace, unary_exp -> .Increment unary_exp  | Ampersand, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, selection_stm -> if LParen .exp RParen stm else stm  | -struct-, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, selection_stm -> if LParen .exp RParen stm  | Plus, postfix_exp -> .postfix_exp Decrement  | Caret, selection_stm -> if LParen .exp RParen stm  | -float2-, primary_exp -> .String  | RightShift, unary_op -> .Tilde  | LParen, selection_stm -> if LParen .exp RParen stm  | NOT, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, selection_stm -> if LParen .exp RParen stm  | String, binary_exp -> .unary_exp  | EQ, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, unary_exp -> .unary_op unary_exp  | LE, selection_stm -> if LParen .exp RParen stm else stm  | -float2-, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .primary_exp  | Caret, selection_stm -> if LParen .exp RParen stm else stm  | NOT, primary_exp -> .ID  | Comma, primary_exp -> .String  | LeftShift, postfix_exp -> .postfix_exp Increment  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .primary_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, selection_stm -> if LParen .exp RParen stm  | -half4-, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | LBrack, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, selection_stm -> if LParen .exp RParen stm else stm  | while, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, selection_stm -> if LParen .exp RParen stm  | -struct-, postfix_exp -> .postfix_exp Increment  | LeftShift, assignment_exp -> .conditional_exp  | RParen, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, selection_stm -> if LParen .exp RParen stm  | -do-, selection_stm -> if LParen .exp RParen stm else stm  | Semicolon, selection_stm -> if LParen .exp RParen stm else stm  | Decrement, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, selection_stm -> if LParen .exp RParen stm  | -fixed4-, selection_stm -> if LParen .exp RParen stm  | -float3-, selection_stm -> if LParen .exp RParen stm  | -half3-, primary_exp -> .Number  | LBrack, selection_stm -> if LParen .exp RParen stm  | RBrace, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, selection_stm -> if LParen .exp RParen stm  | -goto-, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, selection_stm -> if LParen .exp RParen stm else stm  | -void-, binary_exp -> .binary_exp binary_op unary_exp  | Comma, binary_exp -> .unary_exp  | Times, primary_exp -> .LParen exp RParen  | Times, selection_stm -> if LParen .exp RParen stm  | -int-, primary_exp -> .ID  | GT, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, selection_stm -> if LParen .exp RParen stm else stm  | -half3-, selection_stm -> if LParen .exp RParen stm else stm  | -fixed4-, postfix_exp -> .primary_exp  | LE, exp -> .assignment_exp  | RParen, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, selection_stm -> if LParen .exp RParen stm else stm  | -char-, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, selection_stm -> if LParen .exp RParen stm  | -char-, primary_exp -> .String  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, selection_stm -> if LParen .exp RParen stm  | Tilde, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, selection_stm -> if LParen .exp RParen stm else stm  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, selection_stm -> if LParen .exp RParen stm  | ID, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, selection_stm -> if LParen .exp RParen stm else stm  | -do-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, binary_exp -> .unary_exp  | AND, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, binary_exp -> .unary_exp  | LT, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, unary_exp -> .Increment unary_exp  | GT, unary_exp -> .unary_op unary_exp  | Ampersand, selection_stm -> if LParen .exp RParen stm  | LParen, primary_exp -> .Number  | RParen, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, selection_stm -> if LParen .exp RParen stm  | -uniform-, postfix_exp -> .postfix_exp Dot ID  | NEQ, selection_stm -> if LParen .exp RParen stm else stm  | for, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, selection_stm -> if LParen .exp RParen stm  | -fixed2-, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Times, unary_op -> .Plus  | Minus, selection_stm -> if LParen .exp RParen stm  | -float-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, binary_exp -> .unary_exp  | GE, postfix_exp -> .primary_exp  | Decrement, binary_exp -> .binary_exp binary_op unary_exp  | Question, selection_stm -> if LParen .exp RParen stm  | break, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | LParen, binary_exp -> .unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LParen RParen  | Divide, unary_op -> .Minus  | String, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, selection_stm -> if LParen .exp RParen stm else stm  | String, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Question, selection_stm -> if LParen .exp RParen stm else stm  | RBrace, postfix_exp -> .primary_exp  | Ampersand, selection_stm -> if LParen .exp RParen stm  | Semicolon, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, selection_stm -> if LParen .exp RParen stm else stm  | Tilde, primary_exp -> .ID  | LE, primary_exp -> .LParen exp RParen  | GE, binary_exp -> .unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, unary_exp -> .Increment unary_exp  | Question, selection_stm -> if LParen .exp RParen stm  | -void-, primary_exp -> .String  | Decrement, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, exp -> .exp Comma assignment_exp  | RParen, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_op -> .NOT  | Number, unary_exp -> .Decrement unary_exp  | NEQ, selection_stm -> if LParen .exp RParen stm else stm  | -half4-, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, selection_stm -> if LParen .exp RParen stm else stm  | -float4-, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .postfix_exp Increment  | Plus, primary_exp -> .String  | Minus, selection_stm -> if LParen .exp RParen stm  | -fixed3-, unary_exp -> .Decrement unary_exp  | Times, selection_stm -> if LParen .exp RParen stm  | -long-, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, unary_exp -> .unary_op unary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, selection_stm -> if LParen .exp RParen stm else stm  | LParen, primary_exp -> .LParen exp RParen  | Minus, selection_stm -> if LParen .exp RParen stm else stm  | -long-, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, selection_stm -> if LParen .exp RParen stm  | -short-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, selection_stm -> if LParen .exp RParen stm  | if, binary_exp -> .unary_exp  | OR, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, postfix_exp -> .primary_exp  | Plus, selection_stm -> if LParen .exp RParen stm  | -sampler2D-, postfix_exp -> .postfix_exp Decrement  | RParen, primary_exp -> .LParen exp RParen  | Assign, selection_stm -> if LParen .exp RParen stm else stm  | -double-, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Assign, selection_stm -> if LParen .exp RParen stm else stm  | -uniform-, selection_stm -> if LParen .exp RParen stm else stm  | -fixed2-, binary_exp -> .binary_exp binary_op unary_exp  | RParen, primary_exp -> .String  | Assign, selection_stm -> if LParen .exp RParen stm else stm  | -float3-, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, selection_stm -> if LParen .exp RParen stm else stm  | -fixed3-, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, selection_stm -> if LParen .exp RParen stm  | -return-, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, primary_exp -> .ID  | LeftShift, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, selection_stm -> if LParen .exp RParen stm else stm  | LBrace, primary_exp -> .ID  | VerticalBar, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp LParen RParen  | Caret, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .Number  | Plus, unary_op -> .NOT  | Plus, unary_op -> .Minus  | NOT, selection_stm -> if LParen .exp RParen stm else stm  | -goto-, primary_exp -> .ID  | RightShift, postfix_exp -> .primary_exp  | GE, selection_stm -> if LParen .exp RParen stm else stm  | Increment, primary_exp -> .ID  | Times, selection_stm -> if LParen .exp RParen stm else stm  | -sampler2D-, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, selection_stm -> if LParen .exp RParen stm else stm  | -float-, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .ID  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .primary_exp  | GT, selection_stm -> if LParen .exp RParen stm  | -float4-, selection_stm -> if LParen .exp RParen stm  | Number, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .String  | GE, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Dot ID  | EQ, selection_stm -> if LParen .exp RParen stm  | -continue-, primary_exp -> .String  | EQ, selection_stm -> if LParen .exp RParen stm  | -half2-, primary_exp -> .String  | Comma, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, selection_stm -> if LParen .exp RParen stm  | -double-, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .unary_op unary_exp  | Assign, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, binary_exp -> .binary_exp binary_op unary_exp  | OR, selection_stm -> if LParen .exp RParen stm else stm  | ID, selection_stm -> if LParen .exp RParen stm else stm  | if, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .postfix_exp Dot ID  | RParen, unary_exp -> .unary_op unary_exp  | Comma, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, selection_stm -> if LParen .exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, selection_stm -> if LParen .exp RParen stm else stm  | -int-, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | Dot, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, selection_stm -> if LParen .exp RParen stm else stm  | -return-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, selection_stm -> if LParen .exp RParen stm else stm  | Number, postfix_exp -> .postfix_exp Dot ID  | Plus, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .primary_exp  | LParen, primary_exp -> .ID  | Dot, selection_stm -> if LParen .exp RParen stm else stm  | -half2-, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, primary_exp -> .Number  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
215 <- (126, 'Decrement') (postfix_exp -> postfix_exp Decrement.  | OR, postfix_exp -> postfix_exp Decrement.  | RightShift, postfix_exp -> postfix_exp Decrement.  | Caret, postfix_exp -> postfix_exp Decrement.  | LParen, postfix_exp -> postfix_exp Decrement.  | AND, postfix_exp -> postfix_exp Decrement.  | EQ, postfix_exp -> postfix_exp Decrement.  | GT, postfix_exp -> postfix_exp Decrement.  | LT, postfix_exp -> postfix_exp Decrement.  | Question, postfix_exp -> postfix_exp Decrement.  | Assign, postfix_exp -> postfix_exp Decrement.  | Plus, postfix_exp -> postfix_exp Decrement.  | Comma, postfix_exp -> postfix_exp Decrement.  | Percent, postfix_exp -> postfix_exp Decrement.  | GE, postfix_exp -> postfix_exp Decrement.  | Semicolon, postfix_exp -> postfix_exp Decrement.  | Divide, postfix_exp -> postfix_exp Decrement.  | Times, postfix_exp -> postfix_exp Decrement.  | Decrement, postfix_exp -> postfix_exp Decrement.  | Increment, postfix_exp -> postfix_exp Decrement.  | NEQ, postfix_exp -> postfix_exp Decrement.  | Minus, postfix_exp -> postfix_exp Decrement.  | LBrack, postfix_exp -> postfix_exp Decrement.  | Ampersand, postfix_exp -> postfix_exp Decrement.  | Dot, postfix_exp -> postfix_exp Decrement.  | LE, postfix_exp -> postfix_exp Decrement.  | VerticalBar, postfix_exp -> postfix_exp Decrement.  | LeftShift, )
216 <- (126, 'Dot') (postfix_exp -> postfix_exp Dot .ID  | Percent, postfix_exp -> postfix_exp Dot .ID  | LBrack, postfix_exp -> postfix_exp Dot .ID  | Question, postfix_exp -> postfix_exp Dot .ID  | Divide, postfix_exp -> postfix_exp Dot .ID  | Plus, postfix_exp -> postfix_exp Dot .ID  | AND, postfix_exp -> postfix_exp Dot .ID  | Ampersand, postfix_exp -> postfix_exp Dot .ID  | VerticalBar, postfix_exp -> postfix_exp Dot .ID  | Assign, postfix_exp -> postfix_exp Dot .ID  | NEQ, postfix_exp -> postfix_exp Dot .ID  | Dot, postfix_exp -> postfix_exp Dot .ID  | Decrement, postfix_exp -> postfix_exp Dot .ID  | LE, postfix_exp -> postfix_exp Dot .ID  | Increment, postfix_exp -> postfix_exp Dot .ID  | LT, postfix_exp -> postfix_exp Dot .ID  | Times, postfix_exp -> postfix_exp Dot .ID  | Minus, postfix_exp -> postfix_exp Dot .ID  | OR, postfix_exp -> postfix_exp Dot .ID  | LeftShift, postfix_exp -> postfix_exp Dot .ID  | EQ, postfix_exp -> postfix_exp Dot .ID  | Caret, postfix_exp -> postfix_exp Dot .ID  | GT, postfix_exp -> postfix_exp Dot .ID  | GE, postfix_exp -> postfix_exp Dot .ID  | LParen, postfix_exp -> postfix_exp Dot .ID  | Semicolon, postfix_exp -> postfix_exp Dot .ID  | RightShift, postfix_exp -> postfix_exp Dot .ID  | Comma, )
217 <- (126, 'Increment') (postfix_exp -> postfix_exp Increment.  | VerticalBar, postfix_exp -> postfix_exp Increment.  | Dot, postfix_exp -> postfix_exp Increment.  | Percent, postfix_exp -> postfix_exp Increment.  | GE, postfix_exp -> postfix_exp Increment.  | Decrement, postfix_exp -> postfix_exp Increment.  | Comma, postfix_exp -> postfix_exp Increment.  | Semicolon, postfix_exp -> postfix_exp Increment.  | OR, postfix_exp -> postfix_exp Increment.  | LT, postfix_exp -> postfix_exp Increment.  | Times, postfix_exp -> postfix_exp Increment.  | AND, postfix_exp -> postfix_exp Increment.  | GT, postfix_exp -> postfix_exp Increment.  | RightShift, postfix_exp -> postfix_exp Increment.  | Caret, postfix_exp -> postfix_exp Increment.  | LeftShift, postfix_exp -> postfix_exp Increment.  | LBrack, postfix_exp -> postfix_exp Increment.  | Increment, postfix_exp -> postfix_exp Increment.  | Question, postfix_exp -> postfix_exp Increment.  | Ampersand, postfix_exp -> postfix_exp Increment.  | NEQ, postfix_exp -> postfix_exp Increment.  | Minus, postfix_exp -> postfix_exp Increment.  | LE, postfix_exp -> postfix_exp Increment.  | Assign, postfix_exp -> postfix_exp Increment.  | LParen, postfix_exp -> postfix_exp Increment.  | Divide, postfix_exp -> postfix_exp Increment.  | Plus, postfix_exp -> postfix_exp Increment.  | EQ, )
218 <- (126, 'LBrack') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, postfix_exp -> postfix_exp LBrack .exp RBrack  | RightShift, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | LBrack, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, postfix_exp -> postfix_exp LBrack .exp RBrack  | NEQ, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> postfix_exp LBrack .exp RBrack  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RBrack, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, postfix_exp -> .postfix_exp LParen RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RBrack, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, postfix_exp -> postfix_exp LBrack .exp RBrack  | OR, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, primary_exp -> .ID  | RBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | LParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> postfix_exp LBrack .exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, binary_exp -> .unary_exp  | LE, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, postfix_exp -> postfix_exp LBrack .exp RBrack  | EQ, postfix_exp -> postfix_exp LBrack .exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | Decrement, postfix_exp -> .postfix_exp Increment  | LeftShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | LT, primary_exp -> .LParen exp RParen  | Question, postfix_exp -> .postfix_exp Decrement  | LeftShift, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .unary_exp  | Ampersand, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, postfix_exp -> .postfix_exp Decrement  | RBrack, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, unary_exp -> .postfix_exp  | RBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, unary_exp -> .Decrement unary_exp  | Ampersand, postfix_exp -> postfix_exp LBrack .exp RBrack  | VerticalBar, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> postfix_exp LBrack .exp RBrack  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | RBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, primary_exp -> .Number  | LT, postfix_exp -> postfix_exp LBrack .exp RBrack  | Assign, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, binary_exp -> .unary_exp  | LT, exp -> .exp Comma assignment_exp  | RBrack, unary_exp -> .unary_op unary_exp  | VerticalBar, postfix_exp -> postfix_exp LBrack .exp RBrack  | Comma, primary_exp -> .LParen exp RParen  | GT, unary_exp -> .Decrement unary_exp  | RBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, postfix_exp -> .primary_exp  | Increment, postfix_exp -> .postfix_exp LParen RParen  | RBrack, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .primary_exp  | Decrement, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .primary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> postfix_exp LBrack .exp RBrack  | Increment, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, conditional_exp -> .binary_exp  | RBrack, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp Increment  | EQ, primary_exp -> .ID  | EQ, unary_op -> .Minus  | String, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | RBrack, primary_exp -> .String  | Question, primary_exp -> .Number  | Percent, unary_exp -> .unary_op unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, postfix_exp -> postfix_exp LBrack .exp RBrack  | Minus, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, exp -> .assignment_exp  | RBrack, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_op -> .NOT  | Number, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> postfix_exp LBrack .exp RBrack  | GT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> postfix_exp LBrack .exp RBrack  | Ampersand, binary_exp -> .unary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | RBrack, primary_exp -> .LParen exp RParen  | Minus, postfix_exp -> .primary_exp  | GT, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> postfix_exp LBrack .exp RBrack  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | RBrack, unary_op -> .Plus  | Decrement, postfix_exp -> postfix_exp LBrack .exp RBrack  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, primary_exp -> .String  | Assign, postfix_exp -> postfix_exp LBrack .exp RBrack  | Dot, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, assignment_exp -> .conditional_exp  | RBrack, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, primary_exp -> .String  | RBrack, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, primary_exp -> .ID  | AND, postfix_exp -> postfix_exp LBrack .exp RBrack  | Caret, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, postfix_exp -> postfix_exp LBrack .exp RBrack  | Plus, primary_exp -> .Number  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Divide, primary_exp -> .String  | Caret, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, binary_exp -> .binary_exp binary_op unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .ID  | NEQ, binary_exp -> .unary_exp  | RBrack, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | RBrack, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Tilde  | NOT, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> .Number  | RBrack, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Increment  | RBrack, postfix_exp -> postfix_exp LBrack .exp RBrack  | Semicolon, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .primary_exp  | RBrack, primary_exp -> .ID  | Increment, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, primary_exp -> .Number  | GE, postfix_exp -> postfix_exp LBrack .exp RBrack  | Question, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> postfix_exp LBrack .exp RBrack  | LParen, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, postfix_exp -> .postfix_exp Decrement  | LT, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, unary_exp -> .Increment unary_exp  | RBrack, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .String  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Increment  | LBrack, primary_exp -> .ID  | Dot, assignment_exp -> .unary_exp assignment_op assignment_exp  | RBrack, postfix_exp -> .postfix_exp LParen RParen  | Assign, unary_exp -> .Increment unary_exp  | Question, unary_exp -> .postfix_exp  | LeftShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | GE, )
219 <- (126, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, postfix_exp -> postfix_exp LParen .RParen  | LParen, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Question, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, unary_exp -> .postfix_exp  | Assign, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, unary_exp -> .postfix_exp  | LE, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Ampersand, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, unary_exp -> .postfix_exp  | RParen, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, postfix_exp -> postfix_exp LParen .RParen  | GT, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Plus, primary_exp -> .Number  | Times, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, postfix_exp -> postfix_exp LParen .RParen  | LBrack, unary_exp -> .Increment unary_exp  | Ampersand, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | RightShift, unary_op -> .Tilde  | LParen, postfix_exp -> postfix_exp LParen .RParen  | EQ, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, postfix_exp -> postfix_exp LParen .RParen  | RightShift, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Decrement, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, argument_exp_list -> .argument_exp_list Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, primary_exp -> .String  | LeftShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> postfix_exp LParen .RParen  | LE, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Times, unary_op -> .NOT  | ID, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Increment, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, primary_exp -> .ID  | GT, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, postfix_exp -> postfix_exp LParen .RParen  | Divide, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LE, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | LeftShift, postfix_exp -> postfix_exp LParen .RParen  | AND, primary_exp -> .String  | Question, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, postfix_exp -> postfix_exp LParen .RParen  | LeftShift, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> postfix_exp LParen .RParen  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, postfix_exp -> postfix_exp LParen .RParen  | VerticalBar, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | Percent, postfix_exp -> postfix_exp LParen .RParen  | Minus, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, argument_exp_list -> .argument_exp_list Comma assignment_exp  | RParen, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Plus, unary_exp -> .unary_op unary_exp  | Question, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | GT, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, primary_exp -> .ID  | Divide, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, binary_exp -> .unary_exp  | LT, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Increment, unary_exp -> .unary_op unary_exp  | Caret, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Divide, postfix_exp -> postfix_exp LParen .RParen  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, unary_op -> .Tilde  | Minus, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | GT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, binary_exp -> .binary_exp binary_op unary_exp  | Question, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, postfix_exp -> postfix_exp LParen .RParen  | LT, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | RParen, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .Tilde  | Number, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Question, postfix_exp -> postfix_exp LParen .RParen  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, primary_exp -> .Number  | RParen, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | AND, unary_op -> .NOT  | Minus, binary_exp -> .unary_exp  | AND, primary_exp -> .String  | Decrement, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Percent, unary_exp -> .unary_op unary_exp  | Divide, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | RightShift, unary_exp -> .Decrement unary_exp  | NEQ, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Comma, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | GE, primary_exp -> .ID  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Dot, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, postfix_exp -> postfix_exp LParen .RParen  | Caret, unary_exp -> .Decrement unary_exp  | Times, unary_exp -> .unary_op unary_exp  | LE, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, binary_exp -> .unary_exp  | VerticalBar, postfix_exp -> postfix_exp LParen .RParen  | GE, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, postfix_exp -> postfix_exp LParen .RParen  | Assign, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp Decrement  | Assign, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Assign, unary_exp -> .Decrement unary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | RParen, primary_exp -> .String  | Assign, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | OR, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, primary_exp -> .ID  | LeftShift, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, primary_exp -> .Number  | NEQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LParen, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, assignment_exp -> .conditional_exp  | RParen, postfix_exp -> .primary_exp  | GE, postfix_exp -> postfix_exp LParen .RParen  | Semicolon, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, postfix_exp -> postfix_exp LParen .RParen  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, argument_exp_list -> .assignment_exp  | RParen, primary_exp -> .Number  | Increment, postfix_exp -> postfix_exp LParen .RParen  | Increment, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LT, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> postfix_exp LParen .RParen  | Percent, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | VerticalBar, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> postfix_exp LParen .RParen  | Question, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> postfix_exp LParen .RParen  | Decrement, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .unary_op unary_exp  | Assign, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .postfix_exp  | Comma, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .postfix_exp Dot ID  | RParen, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> postfix_exp LParen .RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .ID  | VerticalBar, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Semicolon, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> postfix_exp LParen .RParen  | NEQ, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, argument_exp_list -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Percent, unary_exp -> .postfix_exp  | LeftShift, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, postfix_exp -> postfix_exp LParen .RParen  | Plus, )
220 <- (130, 'Semicolon') (dec -> struct_specifier Semicolon.  | -float3-, dec -> struct_specifier Semicolon.  | -int-, dec -> struct_specifier Semicolon.  | -char-, dec -> struct_specifier Semicolon.  | Plus, dec -> struct_specifier Semicolon.  | RBrace, dec -> struct_specifier Semicolon.  | -return-, dec -> struct_specifier Semicolon.  | Semicolon, dec -> struct_specifier Semicolon.  | -struct-, dec -> struct_specifier Semicolon.  | Number, dec -> struct_specifier Semicolon.  | -fixed3-, dec -> struct_specifier Semicolon.  | String, dec -> struct_specifier Semicolon.  | -goto-, dec -> struct_specifier Semicolon.  | Tilde, dec -> struct_specifier Semicolon.  | for, dec -> struct_specifier Semicolon.  | -half2-, dec -> struct_specifier Semicolon.  | ID, dec -> struct_specifier Semicolon.  | -float4-, dec -> struct_specifier Semicolon.  | -float2-, dec -> struct_specifier Semicolon.  | -fixed4-, dec -> struct_specifier Semicolon.  | -half3-, dec -> struct_specifier Semicolon.  | NOT, dec -> struct_specifier Semicolon.  | LParen, dec -> struct_specifier Semicolon.  | -half4-, dec -> struct_specifier Semicolon.  | -do-, dec -> struct_specifier Semicolon.  | -void-, dec -> struct_specifier Semicolon.  | Minus, dec -> struct_specifier Semicolon.  | -sampler2D-, dec -> struct_specifier Semicolon.  | LBrace, dec -> struct_specifier Semicolon.  | -long-, dec -> struct_specifier Semicolon.  | while, dec -> struct_specifier Semicolon.  | if, dec -> struct_specifier Semicolon.  | -uniform-, dec -> struct_specifier Semicolon.  | -short-, dec -> struct_specifier Semicolon.  | -double-, dec -> struct_specifier Semicolon.  | Decrement, dec -> struct_specifier Semicolon.  | -float-, dec -> struct_specifier Semicolon.  | -continue-, dec -> struct_specifier Semicolon.  | Increment, dec -> struct_specifier Semicolon.  | break, dec -> struct_specifier Semicolon.  | -fixed2-, )
221 <- (131, 'ID') (typedef_name -> ID.  | ID, )
222 <- (131, 'type_specifier') (dec_specifier -> type_qualifier type_specifier.  | ID, )
223 <- (134, 'Assign') (assignment_op -> Assign.  | Minus, assignment_op -> Assign.  | NOT, assignment_op -> Assign.  | ID, assignment_op -> Assign.  | Decrement, assignment_op -> Assign.  | LParen, assignment_op -> Assign.  | Increment, assignment_op -> Assign.  | Number, assignment_op -> Assign.  | String, assignment_op -> Assign.  | Plus, assignment_op -> Assign.  | Tilde, )
224 <- (134, 'assignment_op') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, assignment_exp -> unary_exp assignment_op .assignment_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, primary_exp -> .ID  | LT, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, conditional_exp -> .binary_exp  | Comma, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Dot ID  | Increment, postfix_exp -> .primary_exp  | Increment, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, unary_exp -> .postfix_exp  | Semicolon, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Question, primary_exp -> .Number  | NEQ, assignment_exp -> unary_exp assignment_op .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Comma, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, binary_exp -> .unary_exp  | LE, primary_exp -> .Number  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Semicolon, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .Tilde  | Number, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, postfix_exp -> .postfix_exp Dot ID  | LBrack, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | Decrement, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .Decrement unary_exp  | AND, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Increment  | Times, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp LParen RParen  | Caret, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | Comma, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, conditional_exp -> .binary_exp  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .primary_exp  | LE, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, unary_exp -> .unary_op unary_exp  | Semicolon, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp Decrement  | Assign, postfix_exp -> .postfix_exp Increment  | LBrack, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
225 <- (135, 'unary_exp') (unary_exp -> unary_op unary_exp.  | NEQ, unary_exp -> unary_op unary_exp.  | GE, unary_exp -> unary_op unary_exp.  | RightShift, unary_exp -> unary_op unary_exp.  | Question, unary_exp -> unary_op unary_exp.  | LeftShift, unary_exp -> unary_op unary_exp.  | Plus, unary_exp -> unary_op unary_exp.  | Divide, unary_exp -> unary_op unary_exp.  | LE, unary_exp -> unary_op unary_exp.  | Caret, unary_exp -> unary_op unary_exp.  | Assign, unary_exp -> unary_op unary_exp.  | GT, unary_exp -> unary_op unary_exp.  | LT, unary_exp -> unary_op unary_exp.  | AND, unary_exp -> unary_op unary_exp.  | Times, unary_exp -> unary_op unary_exp.  | VerticalBar, unary_exp -> unary_op unary_exp.  | Comma, unary_exp -> unary_op unary_exp.  | Semicolon, unary_exp -> unary_op unary_exp.  | Ampersand, unary_exp -> unary_op unary_exp.  | EQ, unary_exp -> unary_op unary_exp.  | OR, unary_exp -> unary_op unary_exp.  | Percent, unary_exp -> unary_op unary_exp.  | Minus, )
226 <- (136, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, iteration_stm -> while LParen .exp RParen stm  | RBrace, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_op -> .Tilde  | String, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp Dot ID  | NEQ, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, iteration_stm -> while LParen .exp RParen stm  | -do-, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, iteration_stm -> while LParen .exp RParen stm  | -char-, unary_exp -> .Increment unary_exp  | Ampersand, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, conditional_exp -> .binary_exp  | Comma, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, iteration_stm -> while LParen .exp RParen stm  | Decrement, postfix_exp -> .postfix_exp Dot ID  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .primary_exp  | Comma, iteration_stm -> while LParen .exp RParen stm  | Number, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, iteration_stm -> while LParen .exp RParen stm  | NOT, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, iteration_stm -> while LParen .exp RParen stm  | -fixed3-, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, iteration_stm -> while LParen .exp RParen stm  | -float3-, postfix_exp -> .primary_exp  | RightShift, iteration_stm -> while LParen .exp RParen stm  | Increment, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .String  | Question, iteration_stm -> while LParen .exp RParen stm  | if, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, iteration_stm -> while LParen .exp RParen stm  | LBrace, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, iteration_stm -> while LParen .exp RParen stm  | -double-, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, primary_exp -> .LParen exp RParen  | Ampersand, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, iteration_stm -> while LParen .exp RParen stm  | -struct-, postfix_exp -> .primary_exp  | Percent, iteration_stm -> while LParen .exp RParen stm  | -float4-, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, exp -> .assignment_exp  | RParen, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, iteration_stm -> while LParen .exp RParen stm  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_exp -> .Increment unary_exp  | Percent, unary_exp -> .unary_op unary_exp  | LT, unary_exp -> .Decrement unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, iteration_stm -> while LParen .exp RParen stm  | Tilde, iteration_stm -> while LParen .exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, iteration_stm -> while LParen .exp RParen stm  | -continue-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, iteration_stm -> while LParen .exp RParen stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, iteration_stm -> while LParen .exp RParen stm  | for, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, postfix_exp -> .primary_exp  | Minus, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, iteration_stm -> while LParen .exp RParen stm  | LParen, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .Number  | RParen, primary_exp -> .LParen exp RParen  | LE, primary_exp -> .LParen exp RParen  | Caret, iteration_stm -> while LParen .exp RParen stm  | -fixed4-, iteration_stm -> while LParen .exp RParen stm  | -float-, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_op -> .Minus  | ID, unary_op -> .Minus  | Decrement, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | RParen, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, iteration_stm -> while LParen .exp RParen stm  | -float2-, unary_op -> .Tilde  | Number, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp Decrement  | Question, primary_exp -> .LParen exp RParen  | Assign, postfix_exp -> .primary_exp  | Increment, unary_op -> .Minus  | Number, primary_exp -> .Number  | Percent, assignment_exp -> .conditional_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, primary_exp -> .LParen exp RParen  | GE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, binary_exp -> .unary_exp  | AND, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, exp -> .exp Comma assignment_exp  | RParen, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, iteration_stm -> while LParen .exp RParen stm  | -sampler2D-, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .Number  | GE, iteration_stm -> while LParen .exp RParen stm  | Semicolon, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Minus, iteration_stm -> while LParen .exp RParen stm  | -int-, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, postfix_exp -> .postfix_exp Increment  | Percent, unary_op -> .Plus  | Decrement, iteration_stm -> while LParen .exp RParen stm  | -half3-, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, iteration_stm -> while LParen .exp RParen stm  | -uniform-, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Decrement  | RParen, primary_exp -> .ID  | Comma, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, iteration_stm -> while LParen .exp RParen stm  | -half2-, iteration_stm -> while LParen .exp RParen stm  | ID, unary_exp -> .Decrement unary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | RParen, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .postfix_exp  | RParen, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, iteration_stm -> while LParen .exp RParen stm  | -fixed2-, primary_exp -> .ID  | VerticalBar, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, iteration_stm -> while LParen .exp RParen stm  | break, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, unary_op -> .Minus  | NOT, iteration_stm -> while LParen .exp RParen stm  | -goto-, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, unary_op -> .Plus  | Plus, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, iteration_stm -> while LParen .exp RParen stm  | -void-, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .unary_op unary_exp  | Assign, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, iteration_stm -> while LParen .exp RParen stm  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, postfix_exp -> .postfix_exp LParen RParen  | Assign, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, iteration_stm -> while LParen .exp RParen stm  | -return-, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, iteration_stm -> while LParen .exp RParen stm  | -long-, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .ID  | Dot, iteration_stm -> while LParen .exp RParen stm  | String, binary_exp -> .unary_exp  | Ampersand, iteration_stm -> while LParen .exp RParen stm  | -half4-, unary_exp -> .postfix_exp  | LeftShift, )
227 <- (138, 'Comma') (type_specifier -> .-half2-  | ID, type_specifier -> .-fixed3-  | ID, type_specifier -> .-fixed4-  | LParen, type_specifier -> .-void-  | ID, type_specifier -> .-half4-  | ID, type_specifier -> .-fixed3-  | LParen, type_specifier -> .-int-  | LParen, type_specifier -> .-short-  | LParen, type_specifier -> .-double-  | LParen, type_specifier -> .-double-  | ID, parameter_list -> parameter_list Comma .parameter_dec  | RParen, type_specifier -> .typedef_name  | ID, parameter_dec -> .type_specifier declarator  | Comma, type_specifier -> .-half2-  | LParen, typedef_name -> .ID  | ID, type_specifier -> .-long-  | LParen, type_specifier -> .-float4-  | ID, type_specifier -> .-half3-  | ID, type_specifier -> .-half4-  | LParen, type_specifier -> .-fixed4-  | ID, type_specifier -> .-half3-  | LParen, type_specifier -> .-float3-  | ID, type_specifier -> .typedef_name  | LParen, type_specifier -> .-float-  | LParen, type_specifier -> .-float-  | ID, parameter_dec -> .type_specifier declarator  | RParen, type_specifier -> .-char-  | LParen, type_specifier -> .-long-  | ID, type_specifier -> .-int-  | ID, type_specifier -> .-fixed2-  | LParen, typedef_name -> .ID  | LParen, type_specifier -> .-sampler2D-  | ID, type_specifier -> .-void-  | LParen, type_specifier -> .-short-  | ID, type_specifier -> .-float2-  | LParen, type_specifier -> .-char-  | ID, type_specifier -> .-fixed2-  | ID, type_specifier -> .-float2-  | ID, type_specifier -> .-float3-  | LParen, parameter_list -> parameter_list Comma .parameter_dec  | Comma, type_specifier -> .-float4-  | LParen, type_specifier -> .-sampler2D-  | LParen, )
228 <- (138, 'RParen') (declarator -> declarator LParen parameter_list RParen.  | LParen, declarator -> declarator LParen parameter_list RParen.  | LBrace, )
229 <- (139, 'ID') (declarator -> ID.  | Comma, declarator -> ID.  | RParen, declarator -> ID.  | LParen, )
230 <- (139, 'LParen') (declarator -> .LParen declarator RParen  | LParen, declarator -> LParen .declarator RParen  | LParen, declarator -> .ID  | LParen, declarator -> .LParen declarator RParen  | RParen, declarator -> .declarator LParen parameter_list RParen  | RParen, declarator -> .ID  | RParen, declarator -> .declarator LParen parameter_list RParen  | LParen, declarator -> LParen .declarator RParen  | Comma, declarator -> LParen .declarator RParen  | RParen, )
231 <- (139, 'declarator') (declarator -> declarator .LParen parameter_list RParen  | LParen, parameter_dec -> type_specifier declarator.  | Comma, parameter_dec -> type_specifier declarator.  | RParen, declarator -> declarator .LParen parameter_list RParen  | Comma, declarator -> declarator .LParen parameter_list RParen  | RParen, )
232 <- (143, 'declarator') (declarator -> LParen declarator .RParen  | Colon, declarator -> LParen declarator .RParen  | Semicolon, declarator -> LParen declarator .RParen  | LParen, declarator -> LParen declarator .RParen  | Comma, declarator -> declarator .LParen parameter_list RParen  | LParen, declarator -> declarator .LParen parameter_list RParen  | RParen, )
233 <- (144, 'Colon') (struct_declarator -> declarator Colon .ID  | Semicolon, struct_declarator -> declarator Colon .ID  | Comma, )
234 <- (144, 'LParen') (declarator -> declarator LParen .parameter_list RParen  | Semicolon, type_specifier -> .-fixed3-  | ID, type_specifier -> .-half4-  | ID, type_specifier -> .-fixed3-  | LParen, type_specifier -> .-int-  | LParen, type_specifier -> .-short-  | LParen, type_specifier -> .typedef_name  | ID, type_specifier -> .-fixed4-  | LParen, type_specifier -> .-long-  | LParen, type_specifier -> .-float4-  | ID, type_specifier -> .-char-  | LParen, type_specifier -> .-float3-  | ID, type_specifier -> .typedef_name  | LParen, type_specifier -> .-float-  | LParen, declarator -> declarator LParen .parameter_list RParen  | Comma, type_specifier -> .-long-  | ID, parameter_list -> .parameter_list Comma parameter_dec  | RParen, parameter_list -> .parameter_list Comma parameter_dec  | Comma, type_specifier -> .-half3-  | LParen, type_specifier -> .-short-  | ID, declarator -> declarator LParen .parameter_list RParen  | Colon, type_specifier -> .-sampler2D-  | LParen, type_specifier -> .-float2-  | LParen, declarator -> declarator LParen .parameter_list RParen  | LParen, type_specifier -> .-float2-  | ID, parameter_list -> .parameter_dec  | Comma, type_specifier -> .-void-  | ID, type_specifier -> .-double-  | LParen, type_specifier -> .-double-  | ID, parameter_list -> .parameter_dec  | RParen, parameter_dec -> .type_specifier declarator  | Comma, type_specifier -> .-half2-  | LParen, typedef_name -> .ID  | ID, type_specifier -> .-half3-  | ID, type_specifier -> .-half4-  | LParen, type_specifier -> .-fixed4-  | ID, typedef_name -> .ID  | LParen, type_specifier -> .-half2-  | ID, parameter_dec -> .type_specifier declarator  | RParen, type_specifier -> .-int-  | ID, type_specifier -> .-float3-  | LParen, type_specifier -> .-sampler2D-  | ID, type_specifier -> .-void-  | LParen, type_specifier -> .-char-  | ID, type_specifier -> .-fixed2-  | ID, type_specifier -> .-float-  | ID, type_specifier -> .-float4-  | LParen, type_specifier -> .-fixed2-  | LParen, )
235 <- (146, 'Comma') (struct_declarator_list -> struct_declarator_list Comma .struct_declarator  | Semicolon, struct_declarator -> .declarator Colon ID  | Comma, struct_declarator -> .declarator  | Comma, declarator -> .ID  | Semicolon, declarator -> .LParen declarator RParen  | LParen, struct_declarator_list -> struct_declarator_list Comma .struct_declarator  | Comma, struct_declarator -> .declarator Colon ID  | Semicolon, declarator -> .LParen declarator RParen  | Semicolon, struct_declarator -> .declarator  | Semicolon, declarator -> .declarator LParen parameter_list RParen  | Semicolon, declarator -> .ID  | Colon, declarator -> .LParen declarator RParen  | Colon, declarator -> .declarator LParen parameter_list RParen  | Colon, declarator -> .ID  | LParen, declarator -> .declarator LParen parameter_list RParen  | LParen, declarator -> .LParen declarator RParen  | Comma, declarator -> .declarator LParen parameter_list RParen  | Comma, declarator -> .ID  | Comma, )
236 <- (146, 'Semicolon') (struct_dec -> type_specifier struct_declarator_list Semicolon.  | -int-, struct_dec -> type_specifier struct_declarator_list Semicolon.  | -long-, struct_dec -> type_specifier struct_declarator_list Semicolon.  | -void-, struct_dec -> type_specifier struct_declarator_list Semicolon.  | -half4-, struct_dec -> type_specifier struct_declarator_list Semicolon.  | -fixed2-, struct_dec -> type_specifier struct_declarator_list Semicolon.  | -float-, struct_dec -> type_specifier struct_declarator_list Semicolon.  | -fixed4-, struct_dec -> type_specifier struct_declarator_list Semicolon.  | -double-, struct_dec -> type_specifier struct_declarator_list Semicolon.  | RBrace, struct_dec -> type_specifier struct_declarator_list Semicolon.  | -short-, struct_dec -> type_specifier struct_declarator_list Semicolon.  | -half2-, struct_dec -> type_specifier struct_declarator_list Semicolon.  | -fixed3-, struct_dec -> type_specifier struct_declarator_list Semicolon.  | -char-, struct_dec -> type_specifier struct_declarator_list Semicolon.  | -sampler2D-, struct_dec -> type_specifier struct_declarator_list Semicolon.  | -float3-, struct_dec -> type_specifier struct_declarator_list Semicolon.  | -float4-, struct_dec -> type_specifier struct_declarator_list Semicolon.  | -float2-, struct_dec -> type_specifier struct_declarator_list Semicolon.  | -half3-, struct_dec -> type_specifier struct_declarator_list Semicolon.  | ID, )
237 <- (148, 'RParen') (declarator -> declarator LParen parameter_list RParen.  | RParen, declarator -> declarator LParen parameter_list RParen.  | LParen, )
238 <- (150, 'stm') (iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | while, )
239 <- (151, 'ID') (jump_stm -> -goto- ID.  | while, )
240 <- (152, 'exp') (exp -> exp .Comma assignment_exp  | Semicolon, exp -> exp .Comma assignment_exp  | Comma, jump_stm -> -return- exp .Semicolon  | while, )
241 <- (154, 'RBrace') (compound_stm -> LBrace RBrace.  | while, )
242 <- (154, 'block_item_list') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, iteration_stm -> .while LParen exp RParen stm  | -fixed3-, block_item_list -> block_item_list .block_item  | -void-, exp_stm -> .Semicolon  | -half2-, stm -> .iteration_stm  | String, dec -> .dec_specifier init_dec_list Semicolon  | -struct-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -char-, jump_stm -> .break  | -continue-, exp_stm -> .exp Semicolon  | -float4-, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, stm -> .iteration_stm  | Number, unary_exp -> .postfix_exp  | Ampersand, block_item -> .stm  | -return-, compound_stm -> .LBrace RBrace  | -do-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float3-, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_op -> .Minus  | Minus, stm -> .compound_stm  | if, exp_stm -> .Semicolon  | -struct-, exp_stm -> .Semicolon  | Plus, unary_exp -> .Increment unary_exp  | Percent, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -long-, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .unary_op unary_exp  | LT, unary_exp -> .Decrement unary_exp  | Minus, jump_stm -> .-goto- ID  | LParen, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, unary_exp -> .postfix_exp  | GT, compound_stm -> .LBrace RBrace  | ID, jump_stm -> .-goto- ID  | -float4-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | for, selection_stm -> .if LParen exp RParen stm else stm  | while, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -struct-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LParen, compound_stm -> .LBrace block_item_list RBrace  | Number, postfix_exp -> .postfix_exp Increment  | OR, exp_stm -> .Semicolon  | -long-, iteration_stm -> .while LParen exp RParen stm  | -fixed4-, block_item -> .dec  | while, unary_op -> .NOT  | Tilde, dec -> .struct_specifier Semicolon  | for, binary_exp -> .unary_exp  | Divide, dec -> .struct_specifier Semicolon  | -continue-, unary_op -> .Tilde  | LParen, selection_stm -> .if LParen exp RParen stm else stm  | -int-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | break, compound_stm -> .LBrace block_item_list RBrace  | Tilde, dec -> .dec_specifier init_dec_list Semicolon  | -fixed3-, compound_stm -> .LBrace RBrace  | -float2-, exp_stm -> .exp Semicolon  | -do-, unary_op -> .Plus  | ID, selection_stm -> .if LParen exp RParen stm else stm  | RBrace, primary_exp -> .String  | EQ, iteration_stm -> .while LParen exp RParen stm  | -half2-, postfix_exp -> .postfix_exp Dot ID  | Divide, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, block_item -> .stm  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | LBrace, postfix_exp -> .primary_exp  | Semicolon, jump_stm -> .-continue-  | -fixed4-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, exp_stm -> .Semicolon  | while, dec -> .struct_specifier Semicolon  | -double-, stm -> .jump_stm  | -struct-, selection_stm -> .if LParen exp RParen stm  | -float-, jump_stm -> .-return- exp Semicolon  | while, type_qualifier -> .-uniform-  | -short-, block_item_list -> block_item_list .block_item  | -uniform-, iteration_stm -> .while LParen exp RParen stm  | -sampler2D-, exp_stm -> .exp Semicolon  | -float3-, block_item -> .stm  | NOT, primary_exp -> .String  | Semicolon, block_item -> .stm  | -sampler2D-, stm -> .jump_stm  | -long-, jump_stm -> .-continue-  | ID, jump_stm -> .-return- exp Semicolon  | -struct-, dec -> .struct_specifier Semicolon  | -float2-, jump_stm -> .break  | Decrement, dec -> .dec_specifier init_dec_list Semicolon  | -int-, unary_exp -> .postfix_exp  | Times, compound_stm -> .LBrace RBrace  | -fixed3-, primary_exp -> .Number  | AND, block_item_list -> block_item_list .block_item  | Semicolon, dec -> .struct_specifier Semicolon  | String, selection_stm -> .if LParen exp RParen stm  | -half2-, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | if, compound_stm -> .LBrace block_item_list RBrace  | for, type_specifier -> .-half4-  | ID, compound_stm -> LBrace block_item_list .RBrace  | while, exp_stm -> .exp Semicolon  | -struct-, block_item -> .dec  | -float2-, selection_stm -> .if LParen exp RParen stm  | String, type_qualifier -> .-uniform-  | -long-, selection_stm -> .if LParen exp RParen stm  | -int-, type_specifier -> .-float2-  | ID, stm -> .jump_stm  | String, dec -> .struct_specifier Semicolon  | Number, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_exp -> .Increment unary_exp  | Plus, exp_stm -> .Semicolon  | if, selection_stm -> .if LParen exp RParen stm else stm  | -do-, stm -> .iteration_stm  | -void-, postfix_exp -> .primary_exp  | LE, compound_stm -> .LBrace block_item_list RBrace  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -float-, block_item -> .dec  | -uniform-, stm -> .jump_stm  | -half4-, jump_stm -> .-return- exp Semicolon  | -do-, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, dec -> .struct_specifier Semicolon  | -float-, stm -> .compound_stm  | NOT, unary_exp -> .postfix_exp  | AND, unary_exp -> .Decrement unary_exp  | Assign, stm -> .jump_stm  | Decrement, primary_exp -> .String  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, stm -> .selection_stm  | -continue-, iteration_stm -> .while LParen exp RParen stm  | Tilde, exp -> .exp Comma assignment_exp  | Semicolon, jump_stm -> .-goto- ID  | -int-, exp_stm -> .Semicolon  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | -uniform-, type_specifier -> .-float-  | ID, block_item -> .stm  | for, selection_stm -> .if LParen exp RParen stm  | -float4-, type_specifier -> .-fixed3-  | ID, jump_stm -> .-return- exp Semicolon  | -return-, iteration_stm -> .while LParen exp RParen stm  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Tilde, postfix_exp -> .postfix_exp LParen RParen  | LBrack, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Decrement, compound_stm -> .LBrace block_item_list RBrace  | -return-, jump_stm -> .break  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | -half2-, stm -> .iteration_stm  | LBrace, selection_stm -> .if LParen exp RParen stm else stm  | Number, primary_exp -> .LParen exp RParen  | LE, primary_exp -> .LParen exp RParen  | Caret, compound_stm -> .LBrace block_item_list RBrace  | -float4-, block_item -> .stm  | Semicolon, binary_exp -> .unary_exp  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float-, binary_exp -> .unary_exp  | LT, selection_stm -> .if LParen exp RParen stm else stm  | -float3-, jump_stm -> .-return- exp Semicolon  | NOT, postfix_exp -> .postfix_exp Increment  | Times, selection_stm -> .if LParen exp RParen stm else stm  | Decrement, stm -> .selection_stm  | -fixed3-, stm -> .compound_stm  | -double-, jump_stm -> .break  | -do-, unary_exp -> .Increment unary_exp  | OR, exp_stm -> .Semicolon  | -continue-, selection_stm -> .if LParen exp RParen stm  | Minus, jump_stm -> .-continue-  | while, selection_stm -> .if LParen exp RParen stm else stm  | Tilde, primary_exp -> .ID  | Decrement, stm -> .selection_stm  | Number, dec_specifier -> .type_specifier  | ID, unary_op -> .Minus  | ID, dec -> .struct_specifier Semicolon  | Tilde, dec -> .struct_specifier Semicolon  | -long-, compound_stm -> .LBrace RBrace  | while, jump_stm -> .-continue-  | -float-, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | EQ, stm -> .exp_stm  | -double-, stm -> .selection_stm  | Minus, exp_stm -> .exp Semicolon  | -half3-, postfix_exp -> .postfix_exp Decrement  | Semicolon, unary_op -> .Tilde  | Number, dec -> .struct_specifier Semicolon  | -float4-, stm -> .jump_stm  | while, binary_exp -> .unary_exp  | Plus, stm -> .exp_stm  | -float4-, unary_exp -> .unary_op unary_exp  | Ampersand, compound_stm -> .LBrace block_item_list RBrace  | if, postfix_exp -> .postfix_exp Dot ID  | LT, dec -> .dec_specifier init_dec_list Semicolon  | -fixed2-, unary_exp -> .unary_op unary_exp  | Assign, jump_stm -> .-return- exp Semicolon  | -half2-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, stm -> .iteration_stm  | -continue-, selection_stm -> .if LParen exp RParen stm else stm  | -float-, block_item -> .stm  | -float2-, dec -> .struct_specifier Semicolon  | -fixed2-, compound_stm -> .LBrace block_item_list RBrace  | String, block_item -> .dec  | Semicolon, unary_op -> .NOT  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | String, primary_exp -> .Number  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float4-, jump_stm -> .break  | -uniform-, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, dec -> .struct_specifier Semicolon  | NOT, dec -> .struct_specifier Semicolon  | Plus, dec -> .struct_specifier Semicolon  | -half3-, dec -> .struct_specifier Semicolon  | -half4-, jump_stm -> .-return- exp Semicolon  | -long-, compound_stm -> .LBrace RBrace  | -return-, stm -> .exp_stm  | NOT, stm -> .iteration_stm  | Increment, jump_stm -> .-return- exp Semicolon  | LParen, iteration_stm -> .while LParen exp RParen stm  | if, postfix_exp -> .primary_exp  | Plus, stm -> .jump_stm  | -float4-, primary_exp -> .String  | Minus, stm -> .compound_stm  | Tilde, stm -> .exp_stm  | -float2-, unary_op -> .Plus  | Increment, iteration_stm -> .while LParen exp RParen stm  | -goto-, block_item_list -> block_item_list .block_item  | -half4-, selection_stm -> .if LParen exp RParen stm  | NOT, dec -> .dec_specifier init_dec_list Semicolon  | -float3-, primary_exp -> .String  | Times, stm -> .selection_stm  | while, stm -> .exp_stm  | -int-, stm -> .iteration_stm  | break, iteration_stm -> .while LParen exp RParen stm  | -half3-, stm -> .iteration_stm  | -double-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -goto-, stm -> .iteration_stm  | -float3-, selection_stm -> .if LParen exp RParen stm  | -half4-, primary_exp -> .String  | Increment, jump_stm -> .-return- exp Semicolon  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -uniform-, block_item -> .dec  | -sampler2D-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, jump_stm -> .-return- exp Semicolon  | ID, jump_stm -> .-return- exp Semicolon  | -char-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed3-, primary_exp -> .Number  | Dot, exp_stm -> .Semicolon  | -do-, primary_exp -> .LParen exp RParen  | Ampersand, block_item -> .dec  | -continue-, type_qualifier -> .-uniform-  | -fixed3-, block_item_list -> block_item_list .block_item  | Tilde, postfix_exp -> .primary_exp  | Comma, block_item -> .dec  | Increment, primary_exp -> .ID  | LBrack, unary_exp -> .postfix_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LBrack, block_item -> .dec  | NOT, selection_stm -> .if LParen exp RParen stm  | LParen, jump_stm -> .-continue-  | -int-, jump_stm -> .break  | -fixed2-, type_specifier -> .-fixed4-  | ID, compound_stm -> .LBrace RBrace  | Plus, block_item_list -> block_item_list .block_item  | -double-, unary_exp -> .unary_op unary_exp  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, stm -> .selection_stm  | -short-, postfix_exp -> .postfix_exp Dot ID  | Semicolon, type_qualifier -> .-uniform-  | -fixed2-, compound_stm -> .LBrace RBrace  | break, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, stm -> .selection_stm  | -fixed4-, jump_stm -> .-goto- ID  | -void-, stm -> .exp_stm  | -half4-, dec -> .dec_specifier init_dec_list Semicolon  | -long-, unary_op -> .Minus  | Tilde, primary_exp -> .LParen exp RParen  | LT, compound_stm -> .LBrace RBrace  | -char-, primary_exp -> .String  | LT, block_item -> .stm  | -int-, unary_exp -> .postfix_exp  | NEQ, selection_stm -> .if LParen exp RParen stm  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | break, stm -> .compound_stm  | -void-, stm -> .jump_stm  | -float2-, unary_exp -> .Increment unary_exp  | NEQ, exp_stm -> .exp Semicolon  | -int-, stm -> .iteration_stm  | -fixed3-, block_item -> .stm  | -float3-, compound_stm -> .LBrace RBrace  | Semicolon, unary_op -> .Minus  | NOT, block_item -> .dec  | ID, iteration_stm -> .while LParen exp RParen stm  | LParen, stm -> .iteration_stm  | -float2-, type_specifier -> .-long-  | ID, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | NOT, primary_exp -> .ID  | Semicolon, stm -> .selection_stm  | -return-, postfix_exp -> .postfix_exp Decrement  | AND, unary_op -> .Tilde  | Increment, stm -> .iteration_stm  | -fixed4-, postfix_exp -> .postfix_exp LParen RParen  | EQ, stm -> .selection_stm  | Decrement, jump_stm -> .-continue-  | -do-, block_item -> .dec  | -void-, unary_exp -> .Decrement unary_exp  | LeftShift, jump_stm -> .-continue-  | Tilde, stm -> .exp_stm  | LBrace, jump_stm -> .-continue-  | -half4-, dec -> .struct_specifier Semicolon  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | OR, stm -> .jump_stm  | -float3-, jump_stm -> .break  | for, jump_stm -> .-continue-  | -half2-, compound_stm -> .LBrace RBrace  | -void-, exp_stm -> .Semicolon  | -fixed2-, selection_stm -> .if LParen exp RParen stm else stm  | -void-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Plus, exp_stm -> .Semicolon  | -fixed4-, exp_stm -> .exp Semicolon  | Minus, stm -> .iteration_stm  | -char-, block_item_list -> block_item_list .block_item  | Decrement, jump_stm -> .break  | -float4-, iteration_stm -> .while LParen exp RParen stm  | LBrace, primary_exp -> .Number  | VerticalBar, block_item -> .dec  | Decrement, stm -> .exp_stm  | Increment, compound_stm -> .LBrace RBrace  | -fixed4-, dec -> .struct_specifier Semicolon  | -fixed3-, exp_stm -> .exp Semicolon  | -sampler2D-, binary_exp -> .unary_exp  | Times, exp_stm -> .Semicolon  | String, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float3-, stm -> .jump_stm  | Minus, stm -> .compound_stm  | ID, postfix_exp -> .postfix_exp Increment  | VerticalBar, struct_specifier -> .-struct- ID  | Semicolon, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, jump_stm -> .break  | if, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half4-, jump_stm -> .-return- exp Semicolon  | -goto-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float-, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, stm -> .compound_stm  | -fixed4-, exp_stm -> .exp Semicolon  | -half2-, postfix_exp -> .postfix_exp LParen RParen  | Decrement, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | Minus, jump_stm -> .-continue-  | -continue-, stm -> .compound_stm  | -short-, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, compound_stm -> .LBrace block_item_list RBrace  | -short-, selection_stm -> .if LParen exp RParen stm else stm  | -float2-, jump_stm -> .break  | -char-, binary_exp -> .unary_exp  | OR, stm -> .compound_stm  | -fixed2-, compound_stm -> .LBrace block_item_list RBrace  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | LParen, stm -> .selection_stm  | RBrace, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, stm -> .compound_stm  | -char-, type_specifier -> .-int-  | ID, compound_stm -> .LBrace RBrace  | -long-, compound_stm -> .LBrace block_item_list RBrace  | -do-, jump_stm -> .-continue-  | -uniform-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LBrace, stm -> .compound_stm  | -goto-, jump_stm -> .break  | -return-, stm -> .compound_stm  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -uniform-, jump_stm -> .-continue-  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -short-, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, selection_stm -> .if LParen exp RParen stm else stm  | for, primary_exp -> .LParen exp RParen  | NEQ, compound_stm -> .LBrace RBrace  | Increment, compound_stm -> .LBrace block_item_list RBrace  | -continue-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Plus, dec -> .dec_specifier init_dec_list Semicolon  | RBrace, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, postfix_exp -> .postfix_exp Decrement  | Times, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -int-, unary_op -> .NOT  | LParen, exp_stm -> .exp Semicolon  | String, block_item -> .stm  | -fixed2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .String  | Dot, stm -> .jump_stm  | LParen, jump_stm -> .-return- exp Semicolon  | -short-, postfix_exp -> .postfix_exp Decrement  | OR, unary_exp -> .unary_op unary_exp  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Increment, stm -> .compound_stm  | -float3-, block_item_list -> block_item_list .block_item  | while, stm -> .selection_stm  | -float4-, block_item -> .dec  | -float4-, dec -> .dec_specifier init_dec_list Semicolon  | -char-, binary_exp -> .unary_exp  | Percent, compound_stm -> .LBrace block_item_list RBrace  | while, stm -> .iteration_stm  | Minus, block_item -> .stm  | -half3-, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_exp -> .Increment unary_exp  | Divide, exp_stm -> .Semicolon  | ID, unary_op -> .NOT  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed2-, jump_stm -> .-goto- ID  | -struct-, jump_stm -> .break  | Minus, compound_stm -> .LBrace RBrace  | if, jump_stm -> .break  | -void-, iteration_stm -> .while LParen exp RParen stm  | -float-, primary_exp -> .String  | Ampersand, block_item -> .stm  | Plus, type_qualifier -> .-uniform-  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | NOT, primary_exp -> .ID  | Times, stm -> .compound_stm  | -sampler2D-, stm -> .selection_stm  | LParen, dec -> .dec_specifier init_dec_list Semicolon  | for, block_item_list -> block_item_list .block_item  | NOT, selection_stm -> .if LParen exp RParen stm else stm  | Increment, stm -> .jump_stm  | -void-, dec -> .dec_specifier init_dec_list Semicolon  | String, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, binary_exp -> .binary_exp binary_op unary_exp  | Caret, unary_op -> .Tilde  | Tilde, exp_stm -> .Semicolon  | -fixed3-, type_qualifier -> .-uniform-  | -char-, unary_exp -> .Decrement unary_exp  | Comma, stm -> .exp_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -return-, unary_exp -> .Decrement unary_exp  | Divide, stm -> .compound_stm  | -do-, jump_stm -> .-return- exp Semicolon  | -fixed3-, postfix_exp -> .postfix_exp Increment  | AND, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half3-, stm -> .exp_stm  | -return-, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -long-, postfix_exp -> .postfix_exp Decrement  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, iteration_stm -> .while LParen exp RParen stm  | for, stm -> .selection_stm  | if, stm -> .compound_stm  | -uniform-, jump_stm -> .-continue-  | RBrace, binary_exp -> .unary_exp  | LE, jump_stm -> .-return- exp Semicolon  | -float4-, stm -> .exp_stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, stm -> .exp_stm  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -long-, selection_stm -> .if LParen exp RParen stm else stm  | -fixed3-, primary_exp -> .String  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | if, postfix_exp -> .postfix_exp Dot ID  | Plus, stm -> .compound_stm  | -float2-, compound_stm -> .LBrace block_item_list RBrace  | -float2-, primary_exp -> .Number  | LeftShift, exp_stm -> .exp Semicolon  | Tilde, jump_stm -> .break  | while, jump_stm -> .-continue-  | -char-, jump_stm -> .break  | LParen, compound_stm -> .LBrace RBrace  | LBrace, jump_stm -> .-goto- ID  | -float-, dec -> .dec_specifier init_dec_list Semicolon  | Number, postfix_exp -> .postfix_exp Decrement  | Percent, compound_stm -> .LBrace block_item_list RBrace  | -void-, selection_stm -> .if LParen exp RParen stm else stm  | -goto-, selection_stm -> .if LParen exp RParen stm  | -fixed2-, primary_exp -> .LParen exp RParen  | Times, stm -> .selection_stm  | ID, selection_stm -> .if LParen exp RParen stm  | -double-, exp_stm -> .Semicolon  | LParen, jump_stm -> .break  | -goto-, stm -> .exp_stm  | Minus, exp_stm -> .exp Semicolon  | -uniform-, compound_stm -> .LBrace block_item_list RBrace  | -double-, postfix_exp -> .primary_exp  | AND, jump_stm -> .-continue-  | -float2-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, selection_stm -> .if LParen exp RParen stm  | -fixed3-, jump_stm -> .-continue-  | -goto-, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, postfix_exp -> .postfix_exp Increment  | GT, stm -> .jump_stm  | Semicolon, iteration_stm -> .while LParen exp RParen stm  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | Times, exp_stm -> .Semicolon  | -half4-, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, compound_stm -> .LBrace RBrace  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, unary_exp -> .unary_op unary_exp  | Question, selection_stm -> .if LParen exp RParen stm else stm  | -double-, unary_exp -> .unary_op unary_exp  | Times, stm -> .iteration_stm  | -int-, dec -> .struct_specifier Semicolon  | -float3-, exp_stm -> .exp Semicolon  | Plus, stm -> .exp_stm  | -void-, block_item -> .stm  | -double-, iteration_stm -> .while LParen exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Comma, dec -> .dec_specifier init_dec_list Semicolon  | Minus, stm -> .iteration_stm  | -do-, unary_exp -> .Decrement unary_exp  | GT, block_item -> .stm  | -float-, primary_exp -> .ID  | LE, stm -> .exp_stm  | -float-, compound_stm -> .LBrace block_item_list RBrace  | -sampler2D-, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | LeftShift, jump_stm -> .-return- exp Semicolon  | Number, exp_stm -> .exp Semicolon  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, selection_stm -> .if LParen exp RParen stm  | -uniform-, jump_stm -> .-continue-  | -sampler2D-, dec -> .dec_specifier init_dec_list Semicolon  | ID, iteration_stm -> .while LParen exp RParen stm  | -int-, stm -> .compound_stm  | Increment, block_item_list -> block_item_list .block_item  | -do-, type_qualifier -> .-uniform-  | -float2-, jump_stm -> .-goto- ID  | Minus, dec -> .dec_specifier init_dec_list Semicolon  | Semicolon, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | for, postfix_exp -> .postfix_exp Decrement  | Increment, block_item -> .stm  | -goto-, binary_exp -> .binary_exp binary_op unary_exp  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | -fixed2-, postfix_exp -> .primary_exp  | Question, block_item -> .stm  | -char-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, jump_stm -> .break  | -fixed4-, dec -> .dec_specifier init_dec_list Semicolon  | -sampler2D-, stm -> .compound_stm  | -int-, stm -> .compound_stm  | -half2-, selection_stm -> .if LParen exp RParen stm else stm  | -fixed4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, stm -> .iteration_stm  | -short-, selection_stm -> .if LParen exp RParen stm  | Tilde, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> .postfix_exp  | Caret, stm -> .jump_stm  | Increment, selection_stm -> .if LParen exp RParen stm  | Number, primary_exp -> .ID  | LT, postfix_exp -> .postfix_exp Dot ID  | Caret, iteration_stm -> .while LParen exp RParen stm  | NOT, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, jump_stm -> .-goto- ID  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -return-, dec -> .struct_specifier Semicolon  | Decrement, primary_exp -> .Number  | Percent, iteration_stm -> .while LParen exp RParen stm  | -return-, primary_exp -> .LParen exp RParen  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -double-, primary_exp -> .Number  | Assign, jump_stm -> .-return- exp Semicolon  | for, block_item -> .dec  | -float3-, jump_stm -> .break  | -float-, block_item_list -> block_item_list .block_item  | -fixed3-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Increment, stm -> .compound_stm  | RBrace, jump_stm -> .-goto- ID  | -goto-, stm -> .exp_stm  | -continue-, stm -> .iteration_stm  | Plus, unary_exp -> .Decrement unary_exp  | Caret, selection_stm -> .if LParen exp RParen stm  | -fixed4-, exp_stm -> .Semicolon  | -uniform-, stm -> .exp_stm  | ID, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, stm -> .exp_stm  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Minus, postfix_exp -> .postfix_exp Decrement  | Divide, block_item_list -> block_item_list .block_item  | for, exp_stm -> .Semicolon  | Minus, block_item_list -> block_item_list .block_item  | ID, primary_exp -> .String  | Divide, block_item -> .dec  | -float-, unary_exp -> .postfix_exp  | EQ, unary_exp -> .postfix_exp  | VerticalBar, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, iteration_stm -> .while LParen exp RParen stm  | break, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .postfix_exp Increment  | Plus, iteration_stm -> .while LParen exp RParen stm  | -double-, jump_stm -> .-goto- ID  | LBrace, primary_exp -> .ID  | RightShift, selection_stm -> .if LParen exp RParen stm else stm  | -char-, jump_stm -> .-return- exp Semicolon  | -continue-, postfix_exp -> .postfix_exp Dot ID  | RightShift, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Tilde, primary_exp -> .ID  | NEQ, stm -> .selection_stm  | -struct-, stm -> .compound_stm  | -half4-, unary_exp -> .unary_op unary_exp  | NEQ, block_item -> .dec  | -goto-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -double-, block_item_list -> block_item_list .block_item  | Minus, selection_stm -> .if LParen exp RParen stm  | for, selection_stm -> .if LParen exp RParen stm  | ID, block_item -> .stm  | Tilde, stm -> .jump_stm  | ID, jump_stm -> .-return- exp Semicolon  | -half4-, block_item -> .dec  | for, block_item_list -> block_item_list .block_item  | -fixed4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, dec -> .struct_specifier Semicolon  | RBrace, type_qualifier -> .-uniform-  | -void-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | RBrace, postfix_exp -> .primary_exp  | LT, unary_exp -> .postfix_exp  | Question, primary_exp -> .String  | LBrack, stm -> .jump_stm  | for, jump_stm -> .-return- exp Semicolon  | Plus, stm -> .exp_stm  | -float3-, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -uniform-, jump_stm -> .-return- exp Semicolon  | if, jump_stm -> .-goto- ID  | -fixed3-, dec -> .struct_specifier Semicolon  | -do-, block_item -> .stm  | LBrace, stm -> .selection_stm  | -fixed2-, compound_stm -> .LBrace RBrace  | -float4-, compound_stm -> .LBrace RBrace  | LParen, block_item -> .stm  | while, stm -> .iteration_stm  | -long-, primary_exp -> .Number  | OR, stm -> .exp_stm  | -fixed4-, jump_stm -> .-goto- ID  | -float3-, postfix_exp -> .primary_exp  | GT, exp_stm -> .Semicolon  | -void-, jump_stm -> .-return- exp Semicolon  | Minus, unary_op -> .Tilde  | NOT, primary_exp -> .Number  | RightShift, unary_op -> .Plus  | Decrement, stm -> .selection_stm  | -half3-, stm -> .jump_stm  | -short-, stm -> .exp_stm  | break, binary_exp -> .unary_exp  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -struct-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -char-, jump_stm -> .-goto- ID  | break, dec -> .dec_specifier init_dec_list Semicolon  | -short-, jump_stm -> .-continue-  | Plus, unary_exp -> .Increment unary_exp  | GE, unary_exp -> .Increment unary_exp  | EQ, compound_stm -> .LBrace RBrace  | Tilde, exp_stm -> .exp Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | ID, stm -> .jump_stm  | -char-, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | Comma, block_item_list -> block_item_list .block_item  | -float3-, primary_exp -> .LParen exp RParen  | Divide, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, conditional_exp -> .binary_exp  | Semicolon, iteration_stm -> .while LParen exp RParen stm  | -void-, exp_stm -> .Semicolon  | RBrace, selection_stm -> .if LParen exp RParen stm  | -do-, stm -> .jump_stm  | -continue-, dec -> .struct_specifier Semicolon  | break, selection_stm -> .if LParen exp RParen stm else stm  | -half2-, stm -> .compound_stm  | -struct-, stm -> .selection_stm  | NOT, jump_stm -> .-return- exp Semicolon  | -float2-, postfix_exp -> .postfix_exp Dot ID  | LParen, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, jump_stm -> .-return- exp Semicolon  | -float3-, block_item_list -> block_item_list .block_item  | String, iteration_stm -> .while LParen exp RParen stm  | -struct-, postfix_exp -> .postfix_exp Increment  | Dot, type_qualifier -> .-uniform-  | -float4-, stm -> .compound_stm  | break, jump_stm -> .break  | -long-, block_item -> .stm  | -float4-, postfix_exp -> .postfix_exp Increment  | Divide, stm -> .selection_stm  | -float2-, stm -> .jump_stm  | -return-, exp_stm -> .Semicolon  | break, unary_exp -> .postfix_exp  | OR, exp_stm -> .Semicolon  | -double-, block_item_list -> block_item_list .block_item  | -int-, block_item -> .stm  | -do-, postfix_exp -> .postfix_exp Decrement  | LE, exp_stm -> .Semicolon  | Number, block_item -> .dec  | if, binary_exp -> .unary_exp  | AND, block_item -> .dec  | LParen, exp_stm -> .exp Semicolon  | Semicolon, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, primary_exp -> .ID  | Dot, stm -> .selection_stm  | -double-, block_item -> .stm  | LParen, stm -> .iteration_stm  | NOT, primary_exp -> .Number  | NEQ, jump_stm -> .-continue-  | -double-, block_item_list -> block_item_list .block_item  | -continue-, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, jump_stm -> .-goto- ID  | -half2-, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Increment  | EQ, exp_stm -> .exp Semicolon  | NOT, jump_stm -> .-continue-  | -float3-, unary_exp -> .postfix_exp  | Percent, binary_exp -> .unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, exp_stm -> .exp Semicolon  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -char-, unary_exp -> .postfix_exp  | Assign, compound_stm -> .LBrace RBrace  | -float3-, stm -> .jump_stm  | -double-, dec -> .dec_specifier init_dec_list Semicolon  | -half3-, compound_stm -> .LBrace block_item_list RBrace  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | -half4-, jump_stm -> .break  | LBrace, jump_stm -> .break  | -short-, jump_stm -> .-continue-  | Minus, jump_stm -> .-continue-  | String, primary_exp -> .String  | OR, dec -> .struct_specifier Semicolon  | Semicolon, stm -> .selection_stm  | for, postfix_exp -> .postfix_exp Decrement  | EQ, exp_stm -> .exp Semicolon  | -continue-, compound_stm -> .LBrace block_item_list RBrace  | Increment, type_qualifier -> .-uniform-  | -fixed4-, stm -> .jump_stm  | Tilde, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, selection_stm -> .if LParen exp RParen stm  | -half3-, stm -> .jump_stm  | -goto-, postfix_exp -> .primary_exp  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -float3-, block_item -> .stm  | Number, unary_exp -> .Decrement unary_exp  | GE, jump_stm -> .-return- exp Semicolon  | -half3-, jump_stm -> .break  | Plus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float4-, type_qualifier -> .-uniform-  | -half4-, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, exp_stm -> .exp Semicolon  | Increment, exp_stm -> .exp Semicolon  | -return-, dec -> .dec_specifier init_dec_list Semicolon  | while, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, stm -> .jump_stm  | -fixed2-, stm -> .compound_stm  | -return-, type_qualifier -> .-uniform-  | -int-, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, compound_stm -> .LBrace RBrace  | -struct-, primary_exp -> .LParen exp RParen  | AND, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -do-, selection_stm -> .if LParen exp RParen stm else stm  | NOT, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, block_item -> .stm  | -half4-, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, dec -> .dec_specifier init_dec_list Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | -return-, jump_stm -> .-continue-  | Number, stm -> .jump_stm  | -fixed4-, unary_exp -> .unary_op unary_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | -struct-, primary_exp -> .LParen exp RParen  | VerticalBar, jump_stm -> .break  | break, compound_stm -> .LBrace RBrace  | -double-, dec -> .dec_specifier init_dec_list Semicolon  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -half3-, block_item -> .dec  | RBrace, block_item_list -> block_item_list .block_item  | -struct-, stm -> .jump_stm  | -sampler2D-, block_item -> .dec  | Number, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .primary_exp  | LeftShift, primary_exp -> .ID  | Plus, stm -> .exp_stm  | -half2-, primary_exp -> .ID  | GT, selection_stm -> .if LParen exp RParen stm else stm  | -long-, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | break, dec -> .dec_specifier init_dec_list Semicolon  | -half2-, stm -> .compound_stm  | -half3-, selection_stm -> .if LParen exp RParen stm  | if, jump_stm -> .-continue-  | if, compound_stm -> .LBrace block_item_list RBrace  | Decrement, unary_op -> .Minus  | LParen, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -goto-, block_item -> .stm  | -uniform-, primary_exp -> .Number  | Question, jump_stm -> .-goto- ID  | -long-, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, jump_stm -> .-continue-  | -struct-, jump_stm -> .-return- exp Semicolon  | -int-, stm -> .iteration_stm  | -half2-, primary_exp -> .Number  | LBrack, stm -> .exp_stm  | -long-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, iteration_stm -> .while LParen exp RParen stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Comma, exp_stm -> .Semicolon  | -int-, dec -> .struct_specifier Semicolon  | ID, dec -> .struct_specifier Semicolon  | -short-, struct_specifier -> .-struct- ID LBrace struct_dec_list RBrace  | Semicolon, jump_stm -> .-goto- ID  | -fixed2-, stm -> .exp_stm  | Tilde, exp_stm -> .exp Semicolon  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | String, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, selection_stm -> .if LParen exp RParen stm  | -void-, stm -> .exp_stm  | -do-, jump_stm -> .-continue-  | Increment, stm -> .exp_stm  | while, postfix_exp -> .postfix_exp Increment  | Question, unary_exp -> .Decrement unary_exp  | Ampersand, primary_exp -> .ID  | VerticalBar, compound_stm -> .LBrace block_item_list RBrace  | Plus, iteration_stm -> .while LParen exp RParen stm  | -do-, dec -> .dec_specifier init_dec_list Semicolon  | -void-, primary_exp -> .LParen exp RParen  | EQ, block_item -> .dec  | String, block_item -> .stm  | String, primary_exp -> .LParen exp RParen  | OR, selection_stm -> .if LParen exp RParen stm else stm  | Plus, postfix_exp -> .primary_exp  | Times, jump_stm -> .-goto- ID  | if, block_item -> .stm  | -continue-, block_item -> .dec  | -long-, jump_stm -> .-continue-  | break, exp_stm -> .Semicolon  | -short-, block_item -> .stm  | if, stm -> .jump_stm  | -int-, type_specifier -> .typedef_name  | ID, dec -> .struct_specifier Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | -float4-, selection_stm -> .if LParen exp RParen stm  | -sampler2D-, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp Decrement  | NEQ, dec -> .struct_specifier Semicolon  | -uniform-, dec -> .dec_specifier init_dec_list Semicolon  | NOT, selection_stm -> .if LParen exp RParen stm else stm  | -short-, primary_exp -> .ID  | LeftShift, selection_stm -> .if LParen exp RParen stm  | -float2-, jump_stm -> .-return- exp Semicolon  | -double-, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, jump_stm -> .break  | -fixed3-, jump_stm -> .-goto- ID  | while, type_specifier -> .-short-  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | NEQ, stm -> .jump_stm  | -do-, postfix_exp -> .postfix_exp Decrement  | Plus, exp_stm -> .exp Semicolon  | -half4-, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, stm -> .selection_stm  | -int-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed3-, selection_stm -> .if LParen exp RParen stm else stm  | -half3-, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, jump_stm -> .-goto- ID  | String, stm -> .exp_stm  | if, jump_stm -> .break  | String, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .postfix_exp Increment  | LT, selection_stm -> .if LParen exp RParen stm  | RBrace, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, block_item_list -> block_item_list .block_item  | -sampler2D-, block_item -> .stm  | break, dec -> .dec_specifier init_dec_list Semicolon  | LBrace, stm -> .selection_stm  | -do-, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp Increment  | NEQ, dec -> .dec_specifier init_dec_list Semicolon  | Decrement, stm -> .selection_stm  | -void-, stm -> .selection_stm  | -half2-, stm -> .exp_stm  | -struct-, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, stm -> .iteration_stm  | Semicolon, block_item_list -> block_item_list .block_item  | RBrace, unary_op -> .Plus  | LParen, postfix_exp -> .primary_exp  | Increment, primary_exp -> .LParen exp RParen  | Percent, dec -> .dec_specifier init_dec_list Semicolon  | -continue-, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, jump_stm -> .-return- exp Semicolon  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | Semicolon, type_qualifier -> .-uniform-  | -float-, unary_op -> .Plus  | Plus, stm -> .exp_stm  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | -sampler2D-, exp_stm -> .Semicolon  | -float-, block_item_list -> block_item_list .block_item  | Number, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, dec -> .struct_specifier Semicolon  | LParen, jump_stm -> .-goto- ID  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | String, stm -> .jump_stm  | LBrace, primary_exp -> .ID  | Assign, stm -> .iteration_stm  | -half4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed4-, dec -> .dec_specifier init_dec_list Semicolon  | Plus, type_specifier -> .-half2-  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, stm -> .compound_stm  | String, dec -> .dec_specifier init_dec_list Semicolon  | if, jump_stm -> .break  | Number, postfix_exp -> .postfix_exp LParen RParen  | LE, type_specifier -> .-fixed2-  | ID, jump_stm -> .-goto- ID  | -fixed4-, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, stm -> .jump_stm  | NOT, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, type_qualifier -> .-uniform-  | -sampler2D-, exp_stm -> .Semicolon  | -float4-, binary_exp -> .binary_exp binary_op unary_exp  | LE, block_item -> .dec  | -fixed3-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed2-, stm -> .selection_stm  | Increment, jump_stm -> .-continue-  | Semicolon, block_item -> .dec  | -return-, binary_exp -> .unary_exp  | NEQ, primary_exp -> .LParen exp RParen  | Minus, compound_stm -> .LBrace RBrace  | Number, block_item_list -> block_item_list .block_item  | -float2-, iteration_stm -> .while LParen exp RParen stm  | -float2-, dec -> .struct_specifier Semicolon  | -sampler2D-, primary_exp -> .Number  | Plus, dec -> .struct_specifier Semicolon  | Minus, unary_exp -> .Decrement unary_exp  | LE, block_item_list -> block_item_list .block_item  | -char-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, stm -> .jump_stm  | -half3-, exp_stm -> .exp Semicolon  | -fixed3-, jump_stm -> .-goto- ID  | -double-, postfix_exp -> .postfix_exp LParen RParen  | Question, jump_stm -> .-return- exp Semicolon  | Semicolon, selection_stm -> .if LParen exp RParen stm  | Decrement, unary_exp -> .postfix_exp  | LE, exp_stm -> .exp Semicolon  | -short-, primary_exp -> .String  | Assign, block_item -> .dec  | -struct-, stm -> .exp_stm  | for, exp_stm -> .Semicolon  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | String, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Decrement  | LParen, stm -> .selection_stm  | -half4-, primary_exp -> .LParen exp RParen  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | if, stm -> .iteration_stm  | -uniform-, unary_exp -> .unary_op unary_exp  | GT, compound_stm -> .LBrace block_item_list RBrace  | NOT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, compound_stm -> .LBrace RBrace  | -sampler2D-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, block_item -> .dec  | break, primary_exp -> .LParen exp RParen  | LParen, stm -> .jump_stm  | Number, exp_stm -> .exp Semicolon  | RBrace, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half4-, exp_stm -> .Semicolon  | for, unary_exp -> .unary_op unary_exp  | AND, stm -> .jump_stm  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Number, postfix_exp -> .primary_exp  | Assign, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -continue-, exp_stm -> .Semicolon  | LBrace, jump_stm -> .-goto- ID  | -short-, compound_stm -> .LBrace block_item_list RBrace  | -fixed2-, compound_stm -> .LBrace RBrace  | -fixed2-, unary_exp -> .unary_op unary_exp  | Percent, exp_stm -> .exp Semicolon  | if, dec -> .struct_specifier Semicolon  | while, postfix_exp -> .primary_exp  | Divide, block_item -> .dec  | -char-, block_item_list -> block_item_list .block_item  | Increment, selection_stm -> .if LParen exp RParen stm  | while, block_item -> .dec  | -double-, iteration_stm -> .while LParen exp RParen stm  | -continue-, block_item -> .dec  | -fixed4-, postfix_exp -> .primary_exp  | LBrack, dec -> .struct_specifier Semicolon  | -half2-, jump_stm -> .break  | -int-, exp_stm -> .Semicolon  | -goto-, jump_stm -> .break  | -float3-, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, block_item_list -> block_item_list .block_item  | -half2-, jump_stm -> .-return- exp Semicolon  | -void-, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, binary_exp -> .unary_exp  | EQ, selection_stm -> .if LParen exp RParen stm  | -goto-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, jump_stm -> .-continue-  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -float3-, primary_exp -> .ID  | Divide, selection_stm -> .if LParen exp RParen stm else stm  | -uniform-, stm -> .compound_stm  | Decrement, type_qualifier -> .-uniform-  | -half2-, jump_stm -> .-goto- ID  | ID, stm -> .exp_stm  | -fixed3-, block_item_list -> block_item_list .block_item  | -goto-, postfix_exp -> .postfix_exp Dot ID  | EQ, stm -> .selection_stm  | -float3-, unary_exp -> .unary_op unary_exp  | Comma, jump_stm -> .-return- exp Semicolon  | -float-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Semicolon, binary_exp -> .unary_exp  | GE, block_item_list -> block_item_list .block_item  | -fixed2-, compound_stm -> .LBrace block_item_list RBrace  | -goto-, primary_exp -> .String  | LParen, stm -> .selection_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -int-, block_item_list -> block_item_list .block_item  | if, stm -> .compound_stm  | for, dec -> .dec_specifier init_dec_list Semicolon  | -return-, stm -> .jump_stm  | if, jump_stm -> .-goto- ID  | -float2-, stm -> .selection_stm  | Tilde, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, stm -> .compound_stm  | -long-, assignment_exp -> .conditional_exp  | Comma, jump_stm -> .-goto- ID  | Increment, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | Assign, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half2-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LBrace, jump_stm -> .-continue-  | -void-, stm -> .iteration_stm  | -half3-, primary_exp -> .String  | Decrement, exp_stm -> .Semicolon  | Tilde, selection_stm -> .if LParen exp RParen stm else stm  | Semicolon, stm -> .iteration_stm  | while, stm -> .selection_stm  | LBrace, postfix_exp -> .postfix_exp LParen RParen  | Assign, compound_stm -> .LBrace RBrace  | -half3-, jump_stm -> .break  | -half4-, block_item_list -> block_item_list .block_item  | LParen, stm -> .jump_stm  | break, stm -> .iteration_stm  | -float-, exp_stm -> .Semicolon  | -float3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Number, stm -> .compound_stm  | -continue-, stm -> .exp_stm  | Plus, postfix_exp -> .postfix_exp Decrement  | Minus, stm -> .selection_stm  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, stm -> .iteration_stm  | ID, stm -> .compound_stm  | Plus, compound_stm -> .LBrace block_item_list RBrace  | RBrace, primary_exp -> .Number  | EQ, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Increment, exp_stm -> .exp Semicolon  | -long-, compound_stm -> .LBrace RBrace  | String, selection_stm -> .if LParen exp RParen stm  | Increment, stm -> .compound_stm  | -float-, exp_stm -> .Semicolon  | Increment, dec -> .dec_specifier init_dec_list Semicolon  | -goto-, primary_exp -> .String  | LeftShift, block_item -> .dec  | -int-, jump_stm -> .-continue-  | -fixed3-, postfix_exp -> .postfix_exp LParen RParen  | GE, postfix_exp -> .primary_exp  | OR, iteration_stm -> .while LParen exp RParen stm  | RBrace, unary_exp -> .postfix_exp  | RightShift, compound_stm -> .LBrace block_item_list RBrace  | -fixed4-, block_item_list -> block_item_list .block_item  | -half3-, unary_op -> .Tilde  | Decrement, jump_stm -> .-continue-  | -return-, iteration_stm -> .while LParen exp RParen stm  | Plus, postfix_exp -> .postfix_exp Dot ID  | Minus, stm -> .selection_stm  | Plus, compound_stm -> .LBrace RBrace  | NOT, exp_stm -> .Semicolon  | Decrement, type_specifier -> .-char-  | ID, exp_stm -> .Semicolon  | -float2-, dec -> .dec_specifier init_dec_list Semicolon  | -half4-, iteration_stm -> .while LParen exp RParen stm  | Number, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, exp_stm -> .exp Semicolon  | Decrement, block_item -> .dec  | -half3-, exp_stm -> .exp Semicolon  | -goto-, stm -> .jump_stm  | -half2-, selection_stm -> .if LParen exp RParen stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Percent, jump_stm -> .break  | ID, jump_stm -> .-goto- ID  | Semicolon, block_item -> .stm  | -half2-, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, jump_stm -> .break  | Increment, stm -> .iteration_stm  | Tilde, compound_stm -> .LBrace block_item_list RBrace  | LBrace, postfix_exp -> .postfix_exp Increment  | Semicolon, jump_stm -> .break  | -sampler2D-, block_item_list -> block_item_list .block_item  | LBrace, block_item_list -> block_item_list .block_item  | -float4-, type_specifier -> .-double-  | ID, exp_stm -> .exp Semicolon  | -double-, stm -> .selection_stm  | -sampler2D-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, stm -> .exp_stm  | -char-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LParen, compound_stm -> .LBrace RBrace  | -half2-, jump_stm -> .-goto- ID  | -do-, exp_stm -> .exp Semicolon  | -float-, stm -> .jump_stm  | -float-, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, jump_stm -> .-continue-  | for, unary_op -> .Minus  | Decrement, selection_stm -> .if LParen exp RParen stm  | Plus, jump_stm -> .-return- exp Semicolon  | -fixed4-, block_item -> .stm  | -struct-, exp_stm -> .exp Semicolon  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | LT, dec -> .dec_specifier init_dec_list Semicolon  | -double-, postfix_exp -> .postfix_exp Increment  | Comma, jump_stm -> .-continue-  | -fixed2-, stm -> .compound_stm  | LBrace, selection_stm -> .if LParen exp RParen stm  | -short-, exp_stm -> .exp Semicolon  | while, exp_stm -> .exp Semicolon  | LBrace, jump_stm -> .-continue-  | -short-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, binary_exp -> .binary_exp binary_op unary_exp  | EQ, dec -> .struct_specifier Semicolon  | -int-, block_item_list -> block_item_list .block_item  | -short-, block_item -> .dec  | Tilde, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, primary_exp -> .String  | Comma, stm -> .iteration_stm  | -fixed2-, binary_exp -> .binary_exp binary_op unary_exp  | Question, exp_stm -> .Semicolon  | -char-, block_item -> .stm  | ID, jump_stm -> .-return- exp Semicolon  | LBrace, type_qualifier -> .-uniform-  | -float3-, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | Plus, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, jump_stm -> .-return- exp Semicolon  | Increment, block_item_list -> block_item_list .block_item  | break, jump_stm -> .break  | -struct-, binary_exp -> .unary_exp  | RightShift, primary_exp -> .ID  | Minus, dec -> .struct_specifier Semicolon  | LBrace, selection_stm -> .if LParen exp RParen stm  | -continue-, type_qualifier -> .-uniform-  | ID, selection_stm -> .if LParen exp RParen stm else stm  | -half4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, unary_op -> .Plus  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -sampler2D-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed4-, jump_stm -> .break  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, stm -> .iteration_stm  | -sampler2D-, primary_exp -> .Number  | Decrement, compound_stm -> .LBrace RBrace  | for, selection_stm -> .if LParen exp RParen stm  | break, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, type_qualifier -> .-uniform-  | -double-, postfix_exp -> .primary_exp  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float2-, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, stm -> .selection_stm  | -char-, compound_stm -> .LBrace block_item_list RBrace  | ID, stm -> .exp_stm  | String, jump_stm -> .break  | -double-, postfix_exp -> .postfix_exp LParen RParen  | OR, exp_stm -> .exp Semicolon  | -void-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | RBrace, block_item -> .stm  | Increment, compound_stm -> .LBrace RBrace  | -continue-, stm -> .iteration_stm  | for, postfix_exp -> .postfix_exp Increment  | RightShift, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .primary_exp  | Caret, compound_stm -> .LBrace block_item_list RBrace  | break, selection_stm -> .if LParen exp RParen stm  | -float3-, postfix_exp -> .postfix_exp Increment  | Caret, jump_stm -> .-goto- ID  | Tilde, type_specifier -> .-half3-  | ID, jump_stm -> .-goto- ID  | Number, postfix_exp -> .primary_exp  | Decrement, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -continue-, dec -> .dec_specifier init_dec_list Semicolon  | Tilde, jump_stm -> .-goto- ID  | Decrement, postfix_exp -> .primary_exp  | Ampersand, jump_stm -> .-goto- ID  | -uniform-, compound_stm -> .LBrace RBrace  | -uniform-, dec -> .struct_specifier Semicolon  | if, iteration_stm -> .while LParen exp RParen stm  | Decrement, dec -> .dec_specifier init_dec_list Semicolon  | -float2-, selection_stm -> .if LParen exp RParen stm  | -return-, jump_stm -> .-return- exp Semicolon  | -uniform-, exp_stm -> .Semicolon  | -return-, selection_stm -> .if LParen exp RParen stm  | LBrace, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, jump_stm -> .-continue-  | LParen, stm -> .iteration_stm  | -goto-, block_item -> .dec  | LBrace, stm -> .compound_stm  | while, stm -> .exp_stm  | -sampler2D-, jump_stm -> .-goto- ID  | RBrace, postfix_exp -> .postfix_exp LParen RParen  | LT, compound_stm -> .LBrace RBrace  | -int-, binary_exp -> .unary_exp  | Caret, primary_exp -> .LParen exp RParen  | Assign, dec -> .dec_specifier init_dec_list Semicolon  | -uniform-, jump_stm -> .-continue-  | LBrace, dec -> .struct_specifier Semicolon  | -struct-, jump_stm -> .-return- exp Semicolon  | break, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, block_item -> .stm  | Minus, stm -> .exp_stm  | Number, unary_exp -> .Increment unary_exp  | Caret, block_item -> .dec  | Minus, block_item -> .dec  | -short-, primary_exp -> .String  | AND, unary_exp -> .unary_op unary_exp  | Divide, dec_specifier -> .type_qualifier type_specifier  | ID, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -void-, postfix_exp -> .postfix_exp Dot ID  | Percent, exp_stm -> .exp Semicolon  | break, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, iteration_stm -> .while LParen exp RParen stm  | -fixed2-, stm -> .selection_stm  | -float-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -do-, unary_exp -> .postfix_exp  | Comma, binary_exp -> .unary_exp  | LeftShift, jump_stm -> .break  | -half2-, primary_exp -> .ID  | GE, jump_stm -> .-continue-  | -long-, block_item -> .dec  | -half4-, stm -> .compound_stm  | -fixed3-, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -sampler2D-, block_item -> .stm  | -fixed3-, jump_stm -> .-return- exp Semicolon  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -short-, primary_exp -> .ID  | Percent, stm -> .compound_stm  | Number, primary_exp -> .Number  | Comma, stm -> .compound_stm  | LParen, compound_stm -> .LBrace RBrace  | -short-, stm -> .compound_stm  | Semicolon, stm -> .selection_stm  | break, dec -> .dec_specifier init_dec_list Semicolon  | -float-, block_item -> .dec  | -half2-, binary_exp -> .binary_exp binary_op unary_exp  | AND, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Decrement, unary_exp -> .postfix_exp  | Divide, type_specifier -> .-void-  | ID, unary_exp -> .postfix_exp  | GE, dec -> .dec_specifier init_dec_list Semicolon  | Increment, block_item_list -> block_item_list .block_item  | -long-, selection_stm -> .if LParen exp RParen stm else stm  | -continue-, block_item -> .dec  | Plus, compound_stm -> .LBrace RBrace  | -half4-, dec -> .struct_specifier Semicolon  | -goto-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float2-, stm -> .jump_stm  | RBrace, jump_stm -> .-goto- ID  | -half4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, compound_stm -> .LBrace RBrace  | -goto-, postfix_exp -> .postfix_exp LParen RParen  | Divide, block_item -> .stm  | -fixed4-, stm -> .jump_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half2-, primary_exp -> .ID  | Comma, unary_exp -> .Increment unary_exp  | Assign, jump_stm -> .-goto- ID  | -return-, postfix_exp -> .postfix_exp Increment  | Assign, jump_stm -> .break  | Tilde, block_item -> .dec  | -do-, type_specifier -> .-float3-  | ID, jump_stm -> .-continue-  | -half3-, primary_exp -> .Number  | Minus, stm -> .iteration_stm  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -half4-, jump_stm -> .-goto- ID  | for, stm -> .iteration_stm  | Decrement, stm -> .selection_stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, selection_stm -> .if LParen exp RParen stm else stm  | -struct-, stm -> .exp_stm  | -goto-, primary_exp -> .ID  | OR, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | ID, unary_exp -> .Increment unary_exp  | VerticalBar, dec -> .struct_specifier Semicolon  | -return-, block_item -> .stm  | -short-, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, stm -> .selection_stm  | String, postfix_exp -> .postfix_exp LParen RParen  | Caret, primary_exp -> .ID  | AND, postfix_exp -> .postfix_exp LParen RParen  | Dot, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | String, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, exp_stm -> .Semicolon  | NOT, jump_stm -> .-goto- ID  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | Tilde, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, dec -> .dec_specifier init_dec_list Semicolon  | -float4-, exp_stm -> .exp Semicolon  | for, primary_exp -> .Number  | Ampersand, selection_stm -> .if LParen exp RParen stm  | -char-, primary_exp -> .ID  | Ampersand, stm -> .exp_stm  | RBrace, unary_exp -> .Increment unary_exp  | Semicolon, stm -> .exp_stm  | Decrement, block_item -> .dec  | -fixed2-, compound_stm -> .LBrace RBrace  | RBrace, primary_exp -> .LParen exp RParen  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_op -> .NOT  | NOT, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | ID, binary_exp -> .binary_exp binary_op unary_exp  | GT, jump_stm -> .-goto- ID  | -continue-, stm -> .selection_stm  | Semicolon, block_item_list -> block_item_list .block_item  | -float-, postfix_exp -> .postfix_exp Decrement  | Assign, stm -> .iteration_stm  | RBrace, stm -> .iteration_stm  | -struct-, dec -> .dec_specifier init_dec_list Semicolon  | break, jump_stm -> .break  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, exp_stm -> .exp Semicolon  | -float2-, iteration_stm -> .while LParen exp RParen stm  | -float4-, exp_stm -> .Semicolon  | -half3-, dec -> .struct_specifier Semicolon  | Increment, unary_exp -> .Decrement unary_exp  | Plus, primary_exp -> .LParen exp RParen  | Plus, type_specifier -> .-sampler2D-  | ID, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, postfix_exp -> .primary_exp  | Percent, compound_stm -> .LBrace RBrace  | -float-, unary_exp -> .unary_op unary_exp  | LeftShift, dec -> .dec_specifier init_dec_list Semicolon  | -do-, block_item -> .stm  | -long-, compound_stm -> .LBrace block_item_list RBrace  | -int-, jump_stm -> .-goto- ID  | NOT, jump_stm -> .-continue-  | Decrement, unary_exp -> .postfix_exp  | Plus, type_specifier -> .-float4-  | ID, block_item_list -> block_item_list .block_item  | Plus, compound_stm -> .LBrace RBrace  | Minus, iteration_stm -> .while LParen exp RParen stm  | -char-, iteration_stm -> .while LParen exp RParen stm  | ID, exp_stm -> .exp Semicolon  | ID, unary_exp -> .Increment unary_exp  | LE, stm -> .exp_stm  | -fixed2-, jump_stm -> .-goto- ID  | -char-, stm -> .iteration_stm  | -return-, dec -> .struct_specifier Semicolon  | -void-, block_item -> .stm  | -void-, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, compound_stm -> .LBrace block_item_list RBrace  | -struct-, stm -> .iteration_stm  | if, jump_stm -> .-return- exp Semicolon  | -sampler2D-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, jump_stm -> .break  | -float2-, primary_exp -> .Number  | LParen, jump_stm -> .break  | -half3-, typedef_name -> .ID  | ID, postfix_exp -> .postfix_exp Decrement  | LBrack, stm -> .jump_stm  | -fixed3-, block_item_list -> block_item_list .block_item  | -return-, stm -> .compound_stm  | Minus, stm -> .iteration_stm  | LParen, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -void-, block_item -> .stm  | RBrace, unary_exp -> .postfix_exp  | LeftShift, )
243 <- (158, 'Semicolon') (exp_stm -> exp Semicolon.  | while, )
244 <- (160, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, primary_exp -> .ID  | LT, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .postfix_exp  | Semicolon, binary_exp -> .unary_exp  | LE, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Question, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .Number  | Semicolon, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Semicolon, unary_op -> .Tilde  | Number, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .String  | Question, primary_exp -> .Number  | Percent, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, postfix_exp -> .postfix_exp Dot ID  | LBrack, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_op -> .NOT  | Number, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | while, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp Decrement  | Assign, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, unary_exp -> .unary_op unary_exp  | Percent, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, conditional_exp -> .binary_exp  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, binary_exp -> .unary_exp  | LT, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .primary_exp  | LE, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, unary_exp -> .unary_op unary_exp  | Semicolon, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .String  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
245 <- (161, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, primary_exp -> .ID  | EQ, postfix_exp -> .postfix_exp Dot ID  | Decrement, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, postfix_exp -> .postfix_exp LParen RParen  | RParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .Increment unary_exp  | Ampersand, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, selection_stm -> if LParen .exp RParen stm else stm  | while, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Question, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, exp -> .assignment_exp  | RParen, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, primary_exp -> .Number  | RParen, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .primary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, assignment_exp -> .conditional_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, primary_exp -> .LParen exp RParen  | GE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, selection_stm -> if LParen .exp RParen stm  | while, unary_op -> .NOT  | Minus, binary_exp -> .unary_exp  | AND, primary_exp -> .String  | Decrement, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, exp -> .exp Comma assignment_exp  | RParen, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_op -> .NOT  | Number, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, unary_exp -> .Decrement unary_exp  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp Decrement  | Assign, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, binary_exp -> .binary_exp binary_op unary_exp  | RParen, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .postfix_exp  | RParen, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .Number  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, binary_exp -> .unary_exp  | LT, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .primary_exp  | Ampersand, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .unary_op unary_exp  | Assign, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
246 <- (165, 'while') (iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -long-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -sampler2D-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | Plus, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -continue-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | NOT, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -double-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | String, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | Minus, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | Semicolon, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | for, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -half3-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -float4-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -float3-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -float2-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -void-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -char-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | Tilde, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | while, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | Decrement, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | RBrace, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -fixed4-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -fixed2-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -uniform-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | LParen, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -half4-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -half2-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -goto-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -int-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | if, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -float-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | break, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -do-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -struct-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | Increment, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | Number, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | LBrace, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -fixed3-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -return-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -short-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | ID, )
247 <- (166, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .Increment unary_exp  | Ampersand, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, conditional_exp -> .binary_exp  | Comma, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | RParen, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, iteration_stm -> while LParen .exp RParen stm  | while, postfix_exp -> .postfix_exp Dot ID  | LT, binary_exp -> .unary_exp  | LE, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, exp -> .assignment_exp  | RParen, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, unary_exp -> .Decrement unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .Number  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .primary_exp  | LParen, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, binary_exp -> .binary_exp binary_op unary_exp  | Question, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | RParen, postfix_exp -> .postfix_exp LParen RParen  | Divide, unary_op -> .Minus  | String, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Increment, primary_exp -> .String  | Question, primary_exp -> .Number  | Percent, assignment_exp -> .conditional_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, primary_exp -> .LParen exp RParen  | GE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, unary_exp -> .Increment unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, exp -> .exp Comma assignment_exp  | RParen, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_op -> .NOT  | Number, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, binary_exp -> .binary_exp binary_op unary_exp  | RParen, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .postfix_exp  | RParen, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .Number  | Plus, unary_op -> .NOT  | Plus, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, binary_exp -> .unary_exp  | LT, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Ampersand, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .unary_op unary_exp  | Assign, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, primary_exp -> .Number  | GE, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .postfix_exp Dot ID  | RParen, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
248 <- (168, 'Semicolon') (jump_stm -> -return- exp Semicolon.  | RBrace, jump_stm -> -return- exp Semicolon.  | -int-, jump_stm -> -return- exp Semicolon.  | -float-, jump_stm -> -return- exp Semicolon.  | NOT, jump_stm -> -return- exp Semicolon.  | Decrement, jump_stm -> -return- exp Semicolon.  | ID, jump_stm -> -return- exp Semicolon.  | -fixed3-, jump_stm -> -return- exp Semicolon.  | String, jump_stm -> -return- exp Semicolon.  | -sampler2D-, jump_stm -> -return- exp Semicolon.  | -half2-, jump_stm -> -return- exp Semicolon.  | -short-, jump_stm -> -return- exp Semicolon.  | break, jump_stm -> -return- exp Semicolon.  | -double-, jump_stm -> -return- exp Semicolon.  | -float4-, jump_stm -> -return- exp Semicolon.  | -return-, jump_stm -> -return- exp Semicolon.  | -long-, jump_stm -> -return- exp Semicolon.  | Semicolon, jump_stm -> -return- exp Semicolon.  | LParen, jump_stm -> -return- exp Semicolon.  | -void-, jump_stm -> -return- exp Semicolon.  | -fixed2-, jump_stm -> -return- exp Semicolon.  | -float3-, jump_stm -> -return- exp Semicolon.  | -do-, jump_stm -> -return- exp Semicolon.  | Tilde, jump_stm -> -return- exp Semicolon.  | -continue-, jump_stm -> -return- exp Semicolon.  | -fixed4-, jump_stm -> -return- exp Semicolon.  | Increment, jump_stm -> -return- exp Semicolon.  | while, jump_stm -> -return- exp Semicolon.  | -struct-, jump_stm -> -return- exp Semicolon.  | Number, jump_stm -> -return- exp Semicolon.  | -float2-, jump_stm -> -return- exp Semicolon.  | if, jump_stm -> -return- exp Semicolon.  | for, jump_stm -> -return- exp Semicolon.  | Plus, jump_stm -> -return- exp Semicolon.  | -char-, jump_stm -> -return- exp Semicolon.  | LBrace, jump_stm -> -return- exp Semicolon.  | -half4-, jump_stm -> -return- exp Semicolon.  | -uniform-, jump_stm -> -return- exp Semicolon.  | -goto-, jump_stm -> -return- exp Semicolon.  | Minus, jump_stm -> -return- exp Semicolon.  | -half3-, )
249 <- (172, 'RBrace') (compound_stm -> LBrace block_item_list RBrace.  | -do-, compound_stm -> LBrace block_item_list RBrace.  | Semicolon, compound_stm -> LBrace block_item_list RBrace.  | NOT, compound_stm -> LBrace block_item_list RBrace.  | -double-, compound_stm -> LBrace block_item_list RBrace.  | -return-, compound_stm -> LBrace block_item_list RBrace.  | -char-, compound_stm -> LBrace block_item_list RBrace.  | -float3-, compound_stm -> LBrace block_item_list RBrace.  | -half4-, compound_stm -> LBrace block_item_list RBrace.  | Number, compound_stm -> LBrace block_item_list RBrace.  | -uniform-, compound_stm -> LBrace block_item_list RBrace.  | Increment, compound_stm -> LBrace block_item_list RBrace.  | LParen, compound_stm -> LBrace block_item_list RBrace.  | Plus, compound_stm -> LBrace block_item_list RBrace.  | -half3-, compound_stm -> LBrace block_item_list RBrace.  | -short-, compound_stm -> LBrace block_item_list RBrace.  | RBrace, compound_stm -> LBrace block_item_list RBrace.  | -int-, compound_stm -> LBrace block_item_list RBrace.  | while, compound_stm -> LBrace block_item_list RBrace.  | ID, compound_stm -> LBrace block_item_list RBrace.  | Tilde, compound_stm -> LBrace block_item_list RBrace.  | -float-, compound_stm -> LBrace block_item_list RBrace.  | -sampler2D-, compound_stm -> LBrace block_item_list RBrace.  | break, compound_stm -> LBrace block_item_list RBrace.  | -goto-, compound_stm -> LBrace block_item_list RBrace.  | -float2-, compound_stm -> LBrace block_item_list RBrace.  | Minus, compound_stm -> LBrace block_item_list RBrace.  | -struct-, compound_stm -> LBrace block_item_list RBrace.  | for, compound_stm -> LBrace block_item_list RBrace.  | -continue-, compound_stm -> LBrace block_item_list RBrace.  | -void-, compound_stm -> LBrace block_item_list RBrace.  | -half2-, compound_stm -> LBrace block_item_list RBrace.  | -fixed4-, compound_stm -> LBrace block_item_list RBrace.  | -long-, compound_stm -> LBrace block_item_list RBrace.  | -fixed2-, compound_stm -> LBrace block_item_list RBrace.  | -fixed3-, compound_stm -> LBrace block_item_list RBrace.  | -float4-, compound_stm -> LBrace block_item_list RBrace.  | LBrace, compound_stm -> LBrace block_item_list RBrace.  | Decrement, compound_stm -> LBrace block_item_list RBrace.  | String, compound_stm -> LBrace block_item_list RBrace.  | if, )
250 <- (173, 'unary_exp') (unary_exp -> Decrement unary_exp.  | RightShift, unary_exp -> Decrement unary_exp.  | OR, unary_exp -> Decrement unary_exp.  | LE, unary_exp -> Decrement unary_exp.  | Divide, unary_exp -> Decrement unary_exp.  | VerticalBar, unary_exp -> Decrement unary_exp.  | EQ, unary_exp -> Decrement unary_exp.  | Percent, unary_exp -> Decrement unary_exp.  | LT, unary_exp -> Decrement unary_exp.  | GE, unary_exp -> Decrement unary_exp.  | RParen, unary_exp -> Decrement unary_exp.  | Ampersand, unary_exp -> Decrement unary_exp.  | LeftShift, unary_exp -> Decrement unary_exp.  | Question, unary_exp -> Decrement unary_exp.  | Minus, unary_exp -> Decrement unary_exp.  | Plus, unary_exp -> Decrement unary_exp.  | NEQ, unary_exp -> Decrement unary_exp.  | AND, unary_exp -> Decrement unary_exp.  | Times, unary_exp -> Decrement unary_exp.  | Assign, unary_exp -> Decrement unary_exp.  | GT, unary_exp -> Decrement unary_exp.  | Comma, unary_exp -> Decrement unary_exp.  | Caret, )
251 <- (175, 'unary_exp') (unary_exp -> Increment unary_exp.  | Question, unary_exp -> Increment unary_exp.  | GT, unary_exp -> Increment unary_exp.  | LeftShift, unary_exp -> Increment unary_exp.  | Caret, unary_exp -> Increment unary_exp.  | LE, unary_exp -> Increment unary_exp.  | Comma, unary_exp -> Increment unary_exp.  | Divide, unary_exp -> Increment unary_exp.  | OR, unary_exp -> Increment unary_exp.  | Assign, unary_exp -> Increment unary_exp.  | Times, unary_exp -> Increment unary_exp.  | GE, unary_exp -> Increment unary_exp.  | VerticalBar, unary_exp -> Increment unary_exp.  | Ampersand, unary_exp -> Increment unary_exp.  | AND, unary_exp -> Increment unary_exp.  | LT, unary_exp -> Increment unary_exp.  | NEQ, unary_exp -> Increment unary_exp.  | RParen, unary_exp -> Increment unary_exp.  | Plus, unary_exp -> Increment unary_exp.  | EQ, unary_exp -> Increment unary_exp.  | RightShift, unary_exp -> Increment unary_exp.  | Minus, unary_exp -> Increment unary_exp.  | Percent, )
252 <- (176, 'exp') (primary_exp -> LParen exp .RParen  | LeftShift, primary_exp -> LParen exp .RParen  | RightShift, primary_exp -> LParen exp .RParen  | NEQ, primary_exp -> LParen exp .RParen  | Ampersand, primary_exp -> LParen exp .RParen  | Assign, primary_exp -> LParen exp .RParen  | AND, primary_exp -> LParen exp .RParen  | LBrack, primary_exp -> LParen exp .RParen  | LParen, primary_exp -> LParen exp .RParen  | EQ, primary_exp -> LParen exp .RParen  | LE, exp -> exp .Comma assignment_exp  | Comma, primary_exp -> LParen exp .RParen  | Minus, primary_exp -> LParen exp .RParen  | VerticalBar, primary_exp -> LParen exp .RParen  | Percent, primary_exp -> LParen exp .RParen  | Divide, primary_exp -> LParen exp .RParen  | Dot, primary_exp -> LParen exp .RParen  | GT, primary_exp -> LParen exp .RParen  | LT, primary_exp -> LParen exp .RParen  | Comma, primary_exp -> LParen exp .RParen  | Increment, primary_exp -> LParen exp .RParen  | Plus, primary_exp -> LParen exp .RParen  | Times, primary_exp -> LParen exp .RParen  | Decrement, primary_exp -> LParen exp .RParen  | OR, exp -> exp .Comma assignment_exp  | RParen, primary_exp -> LParen exp .RParen  | Question, primary_exp -> LParen exp .RParen  | GE, primary_exp -> LParen exp .RParen  | Caret, primary_exp -> LParen exp .RParen  | RParen, )
253 <- (180, 'Question') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, primary_exp -> .LParen exp RParen  | Colon, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .unary_op unary_exp  | Colon, unary_exp -> .Increment unary_exp  | Colon, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, conditional_exp -> binary_exp Question .exp Colon conditional_exp  | RParen, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, conditional_exp -> .binary_exp  | Colon, binary_exp -> .unary_exp  | EQ, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, primary_exp -> .String  | Colon, unary_exp -> .postfix_exp  | Colon, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, primary_exp -> .ID  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Colon, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Colon, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, postfix_exp -> .postfix_exp Decrement  | Colon, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, conditional_exp -> binary_exp Question .exp Colon conditional_exp  | Comma, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, assignment_exp -> .unary_exp assignment_op assignment_exp  | Colon, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, binary_exp -> .unary_exp  | AND, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Colon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, binary_exp -> .unary_exp  | LT, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | Percent, unary_op -> .Tilde  | Minus, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_op -> .Plus  | Minus, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, primary_exp -> .ID  | Assign, postfix_exp -> .primary_exp  | Decrement, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, postfix_exp -> .postfix_exp Increment  | Colon, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .Tilde  | Number, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Ampersand, postfix_exp -> .primary_exp  | Increment, primary_exp -> .String  | Question, primary_exp -> .Number  | Percent, primary_exp -> .Number  | Colon, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Colon, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_exp -> .Decrement unary_exp  | Colon, exp -> .exp Comma assignment_exp  | Comma, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, assignment_exp -> .conditional_exp  | Colon, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, binary_exp -> .unary_exp  | Colon, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, postfix_exp -> .postfix_exp Dot ID  | Colon, primary_exp -> .Number  | Plus, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Minus, postfix_exp -> .primary_exp  | GT, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, unary_exp -> .Decrement unary_exp  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp Decrement  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Colon, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, exp -> .exp Comma assignment_exp  | Colon, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | Colon, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, primary_exp -> .ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Increment, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_op -> .Minus  | NOT, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Colon, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .String  | GE, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, exp -> .assignment_exp  | Colon, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
254 <- (180, 'binary_op') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | LT, binary_exp -> binary_exp binary_op .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp Increment  | GT, binary_exp -> binary_exp binary_op .unary_exp  | Question, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | Caret, unary_exp -> .Decrement unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | RParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .primary_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Percent, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | GE, binary_exp -> binary_exp binary_op .unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, unary_exp -> .Decrement unary_exp  | Plus, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, primary_exp -> .String  | RightShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Plus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, unary_exp -> .postfix_exp  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, primary_exp -> .ID  | LeftShift, binary_exp -> binary_exp binary_op .unary_exp  | Ampersand, binary_exp -> binary_exp binary_op .unary_exp  | LT, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .Number  | RParen, unary_exp -> .postfix_exp  | GT, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .primary_exp  | LParen, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, primary_exp -> .Number  | Plus, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, binary_exp -> binary_exp binary_op .unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_op -> .Plus  | Minus, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, binary_exp -> binary_exp binary_op .unary_exp  | Comma, postfix_exp -> .primary_exp  | Decrement, binary_exp -> binary_exp binary_op .unary_exp  | OR, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, binary_exp -> binary_exp binary_op .unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Ampersand, postfix_exp -> .primary_exp  | Increment, primary_exp -> .String  | Question, primary_exp -> .Number  | Percent, primary_exp -> .LParen exp RParen  | Question, binary_exp -> binary_exp binary_op .unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, primary_exp -> .LParen exp RParen  | GE, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, postfix_exp -> .postfix_exp Dot ID  | Comma, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, unary_exp -> .postfix_exp  | VerticalBar, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, binary_exp -> binary_exp binary_op .unary_exp  | LeftShift, primary_exp -> .LParen exp RParen  | Minus, postfix_exp -> .primary_exp  | GT, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | RParen, primary_exp -> .ID  | Comma, primary_exp -> .ID  | LBrack, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, binary_exp -> binary_exp binary_op .unary_exp  | AND, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Times, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, binary_exp -> binary_exp binary_op .unary_exp  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, binary_exp -> binary_exp binary_op .unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_op -> .Tilde  | ID, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, binary_exp -> binary_exp binary_op .unary_exp  | Caret, primary_exp -> .String  | Caret, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, binary_exp -> binary_exp binary_op .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Dot ID  | EQ, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, binary_exp -> binary_exp binary_op .unary_exp  | Divide, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, binary_exp -> binary_exp binary_op .unary_exp  | Times, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, binary_exp -> binary_exp binary_op .unary_exp  | Percent, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, postfix_exp -> .postfix_exp Dot ID  | RParen, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Decrement, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .ID  | Dot, binary_exp -> binary_exp binary_op .unary_exp  | EQ, binary_exp -> binary_exp binary_op .unary_exp  | RParen, unary_exp -> .postfix_exp  | LeftShift, )
255 <- (182, 'Comma') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, unary_exp -> .postfix_exp  | RParen, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, postfix_exp -> .postfix_exp LParen RParen  | RParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .Increment unary_exp  | Ampersand, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, exp -> exp Comma .assignment_exp  | RParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, binary_exp -> .unary_exp  | EQ, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, exp -> exp Comma .assignment_exp  | Comma, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, unary_exp -> .unary_op unary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, assignment_exp -> .conditional_exp  | RParen, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, unary_exp -> .Decrement unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, primary_exp -> .String  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .Number  | RParen, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, binary_exp -> .binary_exp binary_op unary_exp  | Question, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Divide, unary_op -> .Minus  | String, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Question, primary_exp -> .LParen exp RParen  | Assign, unary_exp -> .unary_op unary_exp  | Ampersand, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .unary_op unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, primary_exp -> .LParen exp RParen  | GE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, binary_exp -> .unary_exp  | AND, primary_exp -> .String  | Decrement, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, postfix_exp -> .primary_exp  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .ID  | Comma, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, binary_exp -> .binary_exp binary_op unary_exp  | RParen, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .Number  | Plus, unary_op -> .NOT  | Plus, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, binary_exp -> .binary_exp binary_op unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, binary_exp -> .unary_exp  | LT, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .String  | GE, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, primary_exp -> .Number  | GE, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .postfix_exp Dot ID  | RParen, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
256 <- (182, 'RParen') (primary_exp -> LParen exp RParen.  | Percent, primary_exp -> LParen exp RParen.  | Minus, primary_exp -> LParen exp RParen.  | Question, primary_exp -> LParen exp RParen.  | LT, primary_exp -> LParen exp RParen.  | GT, primary_exp -> LParen exp RParen.  | AND, primary_exp -> LParen exp RParen.  | Caret, primary_exp -> LParen exp RParen.  | Increment, primary_exp -> LParen exp RParen.  | NEQ, primary_exp -> LParen exp RParen.  | Divide, primary_exp -> LParen exp RParen.  | Dot, primary_exp -> LParen exp RParen.  | LParen, primary_exp -> LParen exp RParen.  | Plus, primary_exp -> LParen exp RParen.  | GE, primary_exp -> LParen exp RParen.  | VerticalBar, primary_exp -> LParen exp RParen.  | Decrement, primary_exp -> LParen exp RParen.  | LBrack, primary_exp -> LParen exp RParen.  | Semicolon, primary_exp -> LParen exp RParen.  | EQ, primary_exp -> LParen exp RParen.  | LE, primary_exp -> LParen exp RParen.  | Comma, primary_exp -> LParen exp RParen.  | Times, primary_exp -> LParen exp RParen.  | Ampersand, primary_exp -> LParen exp RParen.  | RightShift, primary_exp -> LParen exp RParen.  | LeftShift, primary_exp -> LParen exp RParen.  | Assign, primary_exp -> LParen exp RParen.  | OR, )
257 <- (183, 'Decrement') (postfix_exp -> postfix_exp Decrement.  | OR, postfix_exp -> postfix_exp Decrement.  | RightShift, postfix_exp -> postfix_exp Decrement.  | Caret, postfix_exp -> postfix_exp Decrement.  | LParen, postfix_exp -> postfix_exp Decrement.  | Dot, postfix_exp -> postfix_exp Decrement.  | EQ, postfix_exp -> postfix_exp Decrement.  | GT, postfix_exp -> postfix_exp Decrement.  | RParen, postfix_exp -> postfix_exp Decrement.  | Question, postfix_exp -> postfix_exp Decrement.  | Assign, postfix_exp -> postfix_exp Decrement.  | Plus, postfix_exp -> postfix_exp Decrement.  | Comma, postfix_exp -> postfix_exp Decrement.  | Percent, postfix_exp -> postfix_exp Decrement.  | LT, postfix_exp -> postfix_exp Decrement.  | Divide, postfix_exp -> postfix_exp Decrement.  | Times, postfix_exp -> postfix_exp Decrement.  | Decrement, postfix_exp -> postfix_exp Decrement.  | Increment, postfix_exp -> postfix_exp Decrement.  | NEQ, postfix_exp -> postfix_exp Decrement.  | Minus, postfix_exp -> postfix_exp Decrement.  | LBrack, postfix_exp -> postfix_exp Decrement.  | Ampersand, postfix_exp -> postfix_exp Decrement.  | AND, postfix_exp -> postfix_exp Decrement.  | LE, postfix_exp -> postfix_exp Decrement.  | VerticalBar, postfix_exp -> postfix_exp Decrement.  | LeftShift, postfix_exp -> postfix_exp Decrement.  | GE, )
258 <- (183, 'Dot') (postfix_exp -> postfix_exp Dot .ID  | Percent, postfix_exp -> postfix_exp Dot .ID  | LBrack, postfix_exp -> postfix_exp Dot .ID  | Question, postfix_exp -> postfix_exp Dot .ID  | Divide, postfix_exp -> postfix_exp Dot .ID  | Plus, postfix_exp -> postfix_exp Dot .ID  | AND, postfix_exp -> postfix_exp Dot .ID  | Ampersand, postfix_exp -> postfix_exp Dot .ID  | NEQ, postfix_exp -> postfix_exp Dot .ID  | Assign, postfix_exp -> postfix_exp Dot .ID  | VerticalBar, postfix_exp -> postfix_exp Dot .ID  | Dot, postfix_exp -> postfix_exp Dot .ID  | Decrement, postfix_exp -> postfix_exp Dot .ID  | LE, postfix_exp -> postfix_exp Dot .ID  | Increment, postfix_exp -> postfix_exp Dot .ID  | LT, postfix_exp -> postfix_exp Dot .ID  | Times, postfix_exp -> postfix_exp Dot .ID  | Minus, postfix_exp -> postfix_exp Dot .ID  | OR, postfix_exp -> postfix_exp Dot .ID  | LeftShift, postfix_exp -> postfix_exp Dot .ID  | EQ, postfix_exp -> postfix_exp Dot .ID  | Caret, postfix_exp -> postfix_exp Dot .ID  | LParen, postfix_exp -> postfix_exp Dot .ID  | GT, postfix_exp -> postfix_exp Dot .ID  | GE, postfix_exp -> postfix_exp Dot .ID  | Comma, postfix_exp -> postfix_exp Dot .ID  | RightShift, postfix_exp -> postfix_exp Dot .ID  | RParen, )
259 <- (183, 'Increment') (postfix_exp -> postfix_exp Increment.  | VerticalBar, postfix_exp -> postfix_exp Increment.  | Dot, postfix_exp -> postfix_exp Increment.  | Percent, postfix_exp -> postfix_exp Increment.  | GE, postfix_exp -> postfix_exp Increment.  | Decrement, postfix_exp -> postfix_exp Increment.  | Comma, postfix_exp -> postfix_exp Increment.  | OR, postfix_exp -> postfix_exp Increment.  | LT, postfix_exp -> postfix_exp Increment.  | Times, postfix_exp -> postfix_exp Increment.  | AND, postfix_exp -> postfix_exp Increment.  | GT, postfix_exp -> postfix_exp Increment.  | RightShift, postfix_exp -> postfix_exp Increment.  | Caret, postfix_exp -> postfix_exp Increment.  | LeftShift, postfix_exp -> postfix_exp Increment.  | LBrack, postfix_exp -> postfix_exp Increment.  | Divide, postfix_exp -> postfix_exp Increment.  | Increment, postfix_exp -> postfix_exp Increment.  | Question, postfix_exp -> postfix_exp Increment.  | Ampersand, postfix_exp -> postfix_exp Increment.  | NEQ, postfix_exp -> postfix_exp Increment.  | Minus, postfix_exp -> postfix_exp Increment.  | LE, postfix_exp -> postfix_exp Increment.  | Assign, postfix_exp -> postfix_exp Increment.  | LParen, postfix_exp -> postfix_exp Increment.  | RParen, postfix_exp -> postfix_exp Increment.  | Plus, postfix_exp -> postfix_exp Increment.  | EQ, )
260 <- (183, 'LBrack') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, postfix_exp -> postfix_exp LBrack .exp RBrack  | RightShift, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | LBrack, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .primary_exp  | OR, postfix_exp -> postfix_exp LBrack .exp RBrack  | Question, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, postfix_exp -> postfix_exp LBrack .exp RBrack  | NEQ, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> postfix_exp LBrack .exp RBrack  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, postfix_exp -> .postfix_exp LParen RParen  | AND, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RBrack, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_exp -> .Decrement unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | Minus, postfix_exp -> .primary_exp  | LT, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, postfix_exp -> .postfix_exp LParen RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RBrack, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, postfix_exp -> postfix_exp LBrack .exp RBrack  | OR, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, primary_exp -> .ID  | RBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .NOT  | LParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, postfix_exp -> .postfix_exp Increment  | Divide, primary_exp -> .ID  | Plus, postfix_exp -> postfix_exp LBrack .exp RBrack  | AND, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, binary_exp -> .unary_exp  | LE, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, postfix_exp -> postfix_exp LBrack .exp RBrack  | EQ, postfix_exp -> postfix_exp LBrack .exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, unary_exp -> .postfix_exp  | LE, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | Decrement, postfix_exp -> .postfix_exp Increment  | LeftShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | LT, unary_exp -> .unary_op unary_exp  | Assign, postfix_exp -> .postfix_exp Decrement  | LeftShift, unary_op -> .Minus  | Number, primary_exp -> .Number  | RBrack, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, unary_exp -> .postfix_exp  | RBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> postfix_exp LBrack .exp RBrack  | VerticalBar, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> postfix_exp LBrack .exp RBrack  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | Question, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | RBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, primary_exp -> .Number  | LT, postfix_exp -> postfix_exp LBrack .exp RBrack  | Assign, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, binary_exp -> .unary_exp  | LT, exp -> .exp Comma assignment_exp  | RBrack, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | GT, unary_exp -> .Decrement unary_exp  | RBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | RBrack, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .primary_exp  | Decrement, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .primary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> postfix_exp LBrack .exp RBrack  | Increment, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, conditional_exp -> .binary_exp  | RBrack, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .ID  | EQ, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, postfix_exp -> postfix_exp LBrack .exp RBrack  | RParen, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | RBrack, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, primary_exp -> .ID  | GE, postfix_exp -> .postfix_exp Decrement  | LE, postfix_exp -> postfix_exp LBrack .exp RBrack  | Minus, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, exp -> .assignment_exp  | RBrack, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, binary_exp -> .unary_exp  | AND, primary_exp -> .String  | Decrement, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_op -> .NOT  | Number, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> postfix_exp LBrack .exp RBrack  | GT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, unary_exp -> .postfix_exp  | OR, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> postfix_exp LBrack .exp RBrack  | Ampersand, binary_exp -> .unary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | RBrack, primary_exp -> .LParen exp RParen  | Minus, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .primary_exp  | GT, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> postfix_exp LBrack .exp RBrack  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | RBrack, postfix_exp -> postfix_exp LBrack .exp RBrack  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, primary_exp -> .Number  | Dot, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Assign, primary_exp -> .String  | Assign, postfix_exp -> postfix_exp LBrack .exp RBrack  | Dot, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, assignment_exp -> .conditional_exp  | RBrack, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, primary_exp -> .String  | RBrack, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_op -> .Minus  | Plus, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Caret, unary_exp -> .postfix_exp  | NEQ, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | RBrack, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Dot, postfix_exp -> postfix_exp LBrack .exp RBrack  | Plus, primary_exp -> .Number  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Divide, primary_exp -> .String  | Caret, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .ID  | NEQ, binary_exp -> .unary_exp  | RBrack, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, primary_exp -> .Number  | OR, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | RBrack, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Tilde  | NOT, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Increment  | RBrack, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> postfix_exp LBrack .exp RBrack  | Comma, postfix_exp -> postfix_exp LBrack .exp RBrack  | Caret, postfix_exp -> .primary_exp  | RBrack, primary_exp -> .ID  | Increment, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> postfix_exp LBrack .exp RBrack  | LParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, postfix_exp -> .postfix_exp Decrement  | LT, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, unary_exp -> .Increment unary_exp  | RBrack, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp Decrement  | Assign, postfix_exp -> .postfix_exp Increment  | LBrack, primary_exp -> .ID  | Dot, assignment_exp -> .unary_exp assignment_op assignment_exp  | RBrack, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | GE, )
261 <- (183, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, postfix_exp -> postfix_exp LParen .RParen  | LParen, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Question, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, unary_exp -> .postfix_exp  | Assign, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, unary_exp -> .unary_op unary_exp  | LT, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Ampersand, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, unary_exp -> .postfix_exp  | RParen, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, postfix_exp -> postfix_exp LParen .RParen  | GT, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Plus, primary_exp -> .Number  | Times, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, postfix_exp -> postfix_exp LParen .RParen  | LBrack, unary_exp -> .Increment unary_exp  | Ampersand, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | RightShift, unary_op -> .Tilde  | LParen, postfix_exp -> postfix_exp LParen .RParen  | EQ, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, primary_exp -> .String  | LBrack, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .unary_exp  | Plus, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, conditional_exp -> .binary_exp  | Comma, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Comma, postfix_exp -> postfix_exp LParen .RParen  | Dot, primary_exp -> .String  | LeftShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, unary_exp -> .unary_op unary_exp  | Question, primary_exp -> .String  | LE, postfix_exp -> .primary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, primary_exp -> .ID  | GT, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, postfix_exp -> postfix_exp LParen .RParen  | Divide, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LE, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | LeftShift, postfix_exp -> postfix_exp LParen .RParen  | AND, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, postfix_exp -> postfix_exp LParen .RParen  | LeftShift, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> postfix_exp LParen .RParen  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, postfix_exp -> postfix_exp LParen .RParen  | VerticalBar, postfix_exp -> postfix_exp LParen .RParen  | RParen, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | Percent, postfix_exp -> postfix_exp LParen .RParen  | Minus, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, binary_exp -> .binary_exp binary_op unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, argument_exp_list -> .argument_exp_list Comma assignment_exp  | RParen, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Plus, postfix_exp -> postfix_exp LParen .RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | GT, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> postfix_exp LParen .RParen  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | Ampersand, unary_exp -> .unary_op unary_exp  | Caret, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Divide, postfix_exp -> postfix_exp LParen .RParen  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | Percent, unary_op -> .Tilde  | Minus, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, binary_exp -> .binary_exp binary_op unary_exp  | Question, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .primary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, postfix_exp -> postfix_exp LParen .RParen  | LT, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | AND, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | RParen, postfix_exp -> .postfix_exp Dot ID  | LParen, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Increment, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Question, postfix_exp -> postfix_exp LParen .RParen  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, unary_op -> .Tilde  | NOT, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, primary_exp -> .Number  | RParen, binary_exp -> .unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, binary_exp -> .unary_exp  | AND, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Percent, unary_exp -> .unary_op unary_exp  | Divide, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | RightShift, unary_exp -> .Decrement unary_exp  | NEQ, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Comma, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | GE, primary_exp -> .ID  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Dot, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, postfix_exp -> postfix_exp LParen .RParen  | Caret, unary_exp -> .Decrement unary_exp  | Times, unary_exp -> .unary_op unary_exp  | LE, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, binary_exp -> .unary_exp  | VerticalBar, postfix_exp -> postfix_exp LParen .RParen  | GE, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, postfix_exp -> postfix_exp LParen .RParen  | Assign, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, postfix_exp -> postfix_exp LParen .RParen  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, argument_exp_list -> .argument_exp_list Comma assignment_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Decrement  | RParen, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .Decrement unary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | RParen, primary_exp -> .String  | Assign, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | OR, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> postfix_exp LParen .RParen  | OR, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, primary_exp -> .Number  | NEQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LParen, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, assignment_exp -> .conditional_exp  | RParen, postfix_exp -> .primary_exp  | GE, postfix_exp -> .postfix_exp Decrement  | Percent, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp Increment  | GE, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, argument_exp_list -> .assignment_exp  | RParen, primary_exp -> .Number  | Increment, postfix_exp -> postfix_exp LParen .RParen  | Increment, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LT, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> postfix_exp LParen .RParen  | Percent, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, unary_exp -> .Decrement unary_exp  | OR, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Times, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | VerticalBar, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | RParen, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> postfix_exp LParen .RParen  | Question, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | EQ, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .unary_op unary_exp  | Assign, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .postfix_exp  | Comma, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .postfix_exp Dot ID  | RParen, unary_exp -> .unary_op unary_exp  | Comma, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .NOT  | String, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, primary_exp -> .ID  | VerticalBar, primary_exp -> .Number  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> postfix_exp LParen .RParen  | NEQ, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, argument_exp_list -> .assignment_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | Assign, postfix_exp -> postfix_exp LParen .RParen  | Plus, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
262 <- (185, 'assignment_op') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | RParen, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, assignment_exp -> unary_exp assignment_op .assignment_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .Increment unary_exp  | Ampersand, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, conditional_exp -> .binary_exp  | Comma, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, assignment_exp -> unary_exp assignment_op .assignment_exp  | RParen, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | RParen, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, binary_exp -> .unary_exp  | LE, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Question, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, binary_exp -> .unary_exp  | OR, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .Number  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | RParen, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .Tilde  | Number, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .String  | Question, primary_exp -> .Number  | Percent, assignment_exp -> .conditional_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, primary_exp -> .LParen exp RParen  | GE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, unary_exp -> .Increment unary_exp  | Question, binary_exp -> .unary_exp  | AND, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, postfix_exp -> .postfix_exp Increment  | Percent, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, binary_exp -> .binary_exp binary_op unary_exp  | RParen, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .postfix_exp  | RParen, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, binary_exp -> .unary_exp  | LT, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .unary_op unary_exp  | Assign, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | NEQ, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .String  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
263 <- (186, 'unary_exp') (unary_exp -> unary_op unary_exp.  | NEQ, unary_exp -> unary_op unary_exp.  | GE, unary_exp -> unary_op unary_exp.  | RightShift, unary_exp -> unary_op unary_exp.  | Question, unary_exp -> unary_op unary_exp.  | LeftShift, unary_exp -> unary_op unary_exp.  | Plus, unary_exp -> unary_op unary_exp.  | Divide, unary_exp -> unary_op unary_exp.  | LE, unary_exp -> unary_op unary_exp.  | Caret, unary_exp -> unary_op unary_exp.  | Assign, unary_exp -> unary_op unary_exp.  | GT, unary_exp -> unary_op unary_exp.  | LT, unary_exp -> unary_op unary_exp.  | AND, unary_exp -> unary_op unary_exp.  | Times, unary_exp -> unary_op unary_exp.  | VerticalBar, unary_exp -> unary_op unary_exp.  | Comma, unary_exp -> unary_op unary_exp.  | Ampersand, unary_exp -> unary_op unary_exp.  | EQ, unary_exp -> unary_op unary_exp.  | OR, unary_exp -> unary_op unary_exp.  | RParen, unary_exp -> unary_op unary_exp.  | Percent, unary_exp -> unary_op unary_exp.  | Minus, )
264 <- (202, 'Decrement') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, unary_exp -> Decrement .unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | Caret, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .unary_op unary_exp  | Colon, unary_exp -> .Increment unary_exp  | Colon, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, unary_op -> .NOT  | Tilde, unary_exp -> Decrement .unary_exp  | NEQ, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_exp -> Decrement .unary_exp  | VerticalBar, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_exp -> Decrement .unary_exp  | OR, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, unary_exp -> Decrement .unary_exp  | Plus, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, primary_exp -> .String  | Colon, unary_exp -> .postfix_exp  | Colon, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, unary_exp -> Decrement .unary_exp  | EQ, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, postfix_exp -> .postfix_exp Decrement  | Colon, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .ID  | VerticalBar, unary_exp -> Decrement .unary_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> Decrement .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, primary_exp -> .String  | RightShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, unary_exp -> Decrement .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Colon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, primary_exp -> .LParen exp RParen  | LT, primary_exp -> .ID  | LeftShift, unary_exp -> Decrement .unary_exp  | LT, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Increment, primary_exp -> .LParen exp RParen  | GE, unary_exp -> .postfix_exp  | GT, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .Decrement unary_exp  | Colon, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Times, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, unary_exp -> Decrement .unary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, postfix_exp -> .postfix_exp Increment  | Colon, unary_exp -> .postfix_exp  | Caret, unary_exp -> Decrement .unary_exp  | LE, primary_exp -> .ID  | LT, unary_exp -> Decrement .unary_exp  | GE, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .Number  | Colon, primary_exp -> .LParen exp RParen  | Percent, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Colon, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, primary_exp -> .String  | Divide, primary_exp -> .LParen exp RParen  | Colon, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, postfix_exp -> .postfix_exp Dot ID  | Colon, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> Decrement .unary_exp  | Question, unary_exp -> Decrement .unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | Minus, postfix_exp -> .primary_exp  | GT, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, primary_exp -> .Number  | Plus, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Colon, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, primary_exp -> .String  | Assign, unary_exp -> Decrement .unary_exp  | Colon, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | Percent, unary_exp -> Decrement .unary_exp  | AND, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, unary_exp -> Decrement .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | Colon, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, unary_exp -> Decrement .unary_exp  | Assign, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Colon, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .String  | GE, postfix_exp -> .postfix_exp Increment  | Dot, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, unary_exp -> Decrement .unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .postfix_exp  | Comma, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Decrement, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, postfix_exp -> .primary_exp  | Ampersand, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, unary_exp -> Decrement .unary_exp  | RightShift, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .String  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> Decrement .unary_exp  | GT, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, unary_exp -> .Increment unary_exp  | Question, unary_exp -> .postfix_exp  | LeftShift, )
265 <- (202, 'ID') (primary_exp -> ID.  | Minus, primary_exp -> ID.  | NEQ, primary_exp -> ID.  | LBrack, primary_exp -> ID.  | Decrement, primary_exp -> ID.  | LParen, primary_exp -> ID.  | Comma, primary_exp -> ID.  | Times, primary_exp -> ID.  | Percent, primary_exp -> ID.  | RightShift, primary_exp -> ID.  | Question, primary_exp -> ID.  | LE, primary_exp -> ID.  | GE, primary_exp -> ID.  | LT, primary_exp -> ID.  | VerticalBar, primary_exp -> ID.  | GT, primary_exp -> ID.  | EQ, primary_exp -> ID.  | Increment, primary_exp -> ID.  | Divide, primary_exp -> ID.  | AND, primary_exp -> ID.  | OR, primary_exp -> ID.  | Ampersand, primary_exp -> ID.  | Caret, primary_exp -> ID.  | LeftShift, primary_exp -> ID.  | Plus, primary_exp -> ID.  | Dot, primary_exp -> ID.  | Colon, primary_exp -> ID.  | Assign, )
266 <- (202, 'Increment') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, unary_exp -> Increment .unary_exp  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | Caret, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .unary_op unary_exp  | Colon, unary_exp -> .Increment unary_exp  | Colon, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_exp -> Increment .unary_exp  | Minus, unary_op -> .NOT  | Tilde, unary_exp -> Increment .unary_exp  | Question, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> Increment .unary_exp  | Caret, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, unary_exp -> Increment .unary_exp  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, unary_exp -> Increment .unary_exp  | EQ, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, unary_exp -> Increment .unary_exp  | Plus, primary_exp -> .String  | LE, primary_exp -> .String  | Colon, unary_exp -> .postfix_exp  | Colon, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, postfix_exp -> .postfix_exp Decrement  | Colon, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Percent, primary_exp -> .ID  | VerticalBar, primary_exp -> .String  | Dot, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, unary_exp -> .Decrement unary_exp  | Plus, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, primary_exp -> .String  | RightShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen RParen  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Colon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, primary_exp -> .ID  | LeftShift, primary_exp -> .LParen exp RParen  | GT, unary_exp -> Increment .unary_exp  | Colon, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, unary_exp -> .postfix_exp  | GT, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .Decrement unary_exp  | Colon, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_op -> .Tilde  | Number, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, unary_exp -> Increment .unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | Comma, postfix_exp -> .postfix_exp Increment  | Colon, unary_exp -> Increment .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> Increment .unary_exp  | Assign, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .String  | Question, primary_exp -> .Number  | Percent, primary_exp -> .Number  | Colon, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, unary_op -> .Minus  | LParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | Decrement, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, primary_exp -> .ID  | Assign, unary_exp -> Increment .unary_exp  | AND, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp Decrement  | LT, postfix_exp -> .postfix_exp Dot ID  | Comma, unary_exp -> Increment .unary_exp  | LE, unary_exp -> Increment .unary_exp  | RightShift, unary_exp -> .postfix_exp  | Comma, primary_exp -> .LParen exp RParen  | Colon, unary_exp -> .postfix_exp  | EQ, unary_exp -> .postfix_exp  | VerticalBar, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, unary_exp -> Increment .unary_exp  | GT, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, postfix_exp -> .postfix_exp Dot ID  | Colon, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, unary_exp -> Increment .unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, primary_exp -> .Number  | Plus, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Colon, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, unary_exp -> Increment .unary_exp  | LT, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Increment  | Times, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> Increment .unary_exp  | Divide, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | Colon, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, unary_exp -> Increment .unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, unary_exp -> .Increment unary_exp  | GE, postfix_exp -> .primary_exp  | Decrement, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Colon, unary_op -> .NOT  | NOT, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .Number  | LE, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> Increment .unary_exp  | NEQ, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Colon, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Decrement, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, unary_exp -> Increment .unary_exp  | Comma, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, unary_exp -> Increment .unary_exp  | Times, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, unary_exp -> .Increment unary_exp  | Question, unary_exp -> .postfix_exp  | LeftShift, )
267 <- (202, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, primary_exp -> .LParen exp RParen  | RightShift, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, primary_exp -> LParen .exp RParen  | Dot, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Dot ID  | Decrement, unary_exp -> .Decrement unary_exp  | Ampersand, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, primary_exp -> LParen .exp RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .Increment unary_exp  | Ampersand, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, primary_exp -> LParen .exp RParen  | Decrement, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, conditional_exp -> .binary_exp  | Comma, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> LParen .exp RParen  | GT, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, primary_exp -> LParen .exp RParen  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> LParen .exp RParen  | GE, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, primary_exp -> LParen .exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, exp -> .assignment_exp  | RParen, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> LParen .exp RParen  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, primary_exp -> LParen .exp RParen  | Colon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, primary_exp -> LParen .exp RParen  | Assign, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, primary_exp -> LParen .exp RParen  | Ampersand, primary_exp -> LParen .exp RParen  | Plus, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen RParen  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Increment, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, primary_exp -> LParen .exp RParen  | Increment, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> LParen .exp RParen  | NEQ, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | RParen, postfix_exp -> .postfix_exp Dot ID  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .unary_exp  | Plus, primary_exp -> LParen .exp RParen  | Divide, unary_exp -> .unary_op unary_exp  | Ampersand, unary_op -> .Minus  | Number, primary_exp -> .Number  | Percent, assignment_exp -> .conditional_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, primary_exp -> LParen .exp RParen  | Comma, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, primary_exp -> .Number  | RParen, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | Decrement, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, primary_exp -> LParen .exp RParen  | Minus, exp -> .exp Comma assignment_exp  | RParen, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, primary_exp -> LParen .exp RParen  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, primary_exp -> LParen .exp RParen  | OR, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> LParen .exp RParen  | LeftShift, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, postfix_exp -> .postfix_exp Increment  | Percent, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .Decrement unary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | RParen, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, primary_exp -> LParen .exp RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .postfix_exp  | RParen, primary_exp -> LParen .exp RParen  | LE, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp LParen RParen  | Caret, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, primary_exp -> LParen .exp RParen  | Times, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, primary_exp -> LParen .exp RParen  | EQ, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .primary_exp  | Ampersand, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> LParen .exp RParen  | RightShift, primary_exp -> LParen .exp RParen  | Percent, primary_exp -> .ID  | Decrement, primary_exp -> LParen .exp RParen  | VerticalBar, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .unary_op unary_exp  | Assign, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .postfix_exp  | Comma, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .postfix_exp Dot ID  | RParen, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
268 <- (202, 'Number') (primary_exp -> Number.  | Increment, primary_exp -> Number.  | Question, primary_exp -> Number.  | Divide, primary_exp -> Number.  | Ampersand, primary_exp -> Number.  | Plus, primary_exp -> Number.  | LE, primary_exp -> Number.  | Decrement, primary_exp -> Number.  | Caret, primary_exp -> Number.  | Percent, primary_exp -> Number.  | VerticalBar, primary_exp -> Number.  | EQ, primary_exp -> Number.  | Comma, primary_exp -> Number.  | GT, primary_exp -> Number.  | AND, primary_exp -> Number.  | GE, primary_exp -> Number.  | OR, primary_exp -> Number.  | Minus, primary_exp -> Number.  | LBrack, primary_exp -> Number.  | RightShift, primary_exp -> Number.  | LParen, primary_exp -> Number.  | Colon, primary_exp -> Number.  | Dot, primary_exp -> Number.  | LT, primary_exp -> Number.  | Assign, primary_exp -> Number.  | NEQ, primary_exp -> Number.  | Times, primary_exp -> Number.  | LeftShift, )
269 <- (202, 'String') (primary_exp -> String.  | Plus, primary_exp -> String.  | Ampersand, primary_exp -> String.  | AND, primary_exp -> String.  | Comma, primary_exp -> String.  | LeftShift, primary_exp -> String.  | Colon, primary_exp -> String.  | LE, primary_exp -> String.  | EQ, primary_exp -> String.  | RightShift, primary_exp -> String.  | Increment, primary_exp -> String.  | LParen, primary_exp -> String.  | Minus, primary_exp -> String.  | Question, primary_exp -> String.  | GT, primary_exp -> String.  | GE, primary_exp -> String.  | VerticalBar, primary_exp -> String.  | OR, primary_exp -> String.  | Divide, primary_exp -> String.  | Caret, primary_exp -> String.  | NEQ, primary_exp -> String.  | LBrack, primary_exp -> String.  | Percent, primary_exp -> String.  | Assign, primary_exp -> String.  | LT, primary_exp -> String.  | Dot, primary_exp -> String.  | Times, primary_exp -> String.  | Decrement, )
270 <- (202, 'assignment_exp') (exp -> assignment_exp.  | Colon, exp -> assignment_exp.  | Comma, )
271 <- (202, 'binary_exp') (binary_op -> .GE  | LParen, binary_op -> .LE  | ID, binary_op -> .LeftShift  | Increment, binary_op -> .VerticalBar  | Number, binary_op -> .Caret  | LParen, binary_op -> .Times  | String, binary_op -> .Times  | Decrement, binary_op -> .NEQ  | String, binary_op -> .LE  | Plus, binary_op -> .OR  | Increment, binary_op -> .LeftShift  | Decrement, binary_exp -> binary_exp .binary_op unary_exp  | Ampersand, binary_op -> .RightShift  | Increment, binary_op -> .RightShift  | String, binary_op -> .GE  | Increment, binary_op -> .Times  | LParen, binary_op -> .Percent  | Increment, binary_op -> .Divide  | Tilde, binary_exp -> binary_exp .binary_op unary_exp  | Comma, binary_exp -> binary_exp .binary_op unary_exp  | Percent, binary_op -> .Minus  | String, binary_exp -> binary_exp .binary_op unary_exp  | GE, binary_op -> .Caret  | ID, binary_op -> .LeftShift  | Number, binary_op -> .EQ  | Plus, binary_op -> .GE  | NOT, binary_op -> .OR  | Tilde, binary_op -> .NEQ  | NOT, binary_op -> .GT  | Minus, binary_op -> .LT  | Number, binary_op -> .VerticalBar  | Decrement, binary_op -> .VerticalBar  | String, binary_op -> .Caret  | Plus, binary_op -> .VerticalBar  | LParen, binary_exp -> binary_exp .binary_op unary_exp  | Minus, binary_op -> .VerticalBar  | Plus, binary_op -> .GT  | Increment, binary_op -> .Plus  | LParen, binary_op -> .GE  | Minus, binary_op -> .Plus  | ID, binary_op -> .LT  | Decrement, binary_op -> .Ampersand  | NOT, binary_op -> .Times  | Tilde, binary_op -> .Percent  | Tilde, binary_op -> .Plus  | NOT, binary_op -> .GE  | Decrement, binary_exp -> binary_exp .binary_op unary_exp  | Caret, binary_op -> .EQ  | NOT, binary_op -> .EQ  | Tilde, binary_op -> .VerticalBar  | Tilde, binary_op -> .Ampersand  | Increment, binary_op -> .LT  | NOT, binary_op -> .VerticalBar  | Minus, binary_op -> .Caret  | String, binary_op -> .Times  | ID, binary_op -> .Divide  | NOT, binary_op -> .AND  | Number, binary_op -> .Minus  | Plus, binary_op -> .RightShift  | Decrement, binary_op -> .RightShift  | Plus, binary_op -> .NEQ  | ID, binary_op -> .OR  | NOT, binary_op -> .GT  | Plus, binary_op -> .VerticalBar  | Increment, binary_op -> .EQ  | Number, binary_exp -> binary_exp .binary_op unary_exp  | EQ, binary_op -> .Plus  | Minus, binary_op -> .LE  | LParen, binary_op -> .LeftShift  | Minus, conditional_exp -> binary_exp.  | Colon, binary_exp -> binary_exp .binary_op unary_exp  | AND, binary_op -> .Divide  | String, binary_op -> .Divide  | Increment, binary_exp -> binary_exp .binary_op unary_exp  | LE, binary_exp -> binary_exp .binary_op unary_exp  | GT, binary_op -> .GT  | Number, binary_op -> .Caret  | Number, binary_op -> .Times  | Plus, binary_op -> .LE  | String, binary_op -> .GT  | LParen, binary_op -> .NEQ  | Increment, binary_op -> .AND  | Minus, binary_op -> .LeftShift  | NOT, binary_op -> .OR  | Minus, binary_op -> .Caret  | Minus, binary_op -> .Times  | Number, binary_exp -> binary_exp .binary_op unary_exp  | LT, binary_exp -> binary_exp .binary_op unary_exp  | Divide, binary_op -> .RightShift  | ID, binary_op -> .Ampersand  | String, binary_op -> .RightShift  | NOT, binary_op -> .Caret  | Tilde, binary_op -> .OR  | Number, conditional_exp -> binary_exp .Question exp Colon conditional_exp  | Comma, binary_op -> .Plus  | Decrement, binary_op -> .GT  | NOT, binary_op -> .Ampersand  | Plus, binary_op -> .Divide  | Plus, binary_op -> .Percent  | Number, binary_op -> .EQ  | LParen, binary_op -> .LeftShift  | String, binary_op -> .Ampersand  | LParen, binary_op -> .Percent  | String, binary_exp -> binary_exp .binary_op unary_exp  | LeftShift, binary_op -> .OR  | Decrement, binary_op -> .LeftShift  | Tilde, binary_op -> .NEQ  | Minus, binary_op -> .LE  | Minus, binary_op -> .LE  | Number, binary_op -> .RightShift  | LParen, binary_op -> .Minus  | NOT, binary_exp -> binary_exp .binary_op unary_exp  | Question, binary_op -> .LE  | Decrement, binary_op -> .Plus  | String, binary_op -> .GE  | Tilde, binary_op -> .NEQ  | LParen, binary_op -> .Times  | NOT, binary_op -> .LE  | Tilde, binary_op -> .GT  | ID, binary_op -> .Minus  | Increment, binary_op -> .EQ  | ID, binary_op -> .Percent  | ID, binary_op -> .NEQ  | Decrement, binary_op -> .Percent  | Decrement, binary_op -> .Ampersand  | ID, binary_op -> .NEQ  | Plus, binary_op -> .Percent  | NOT, binary_exp -> binary_exp .binary_op unary_exp  | OR, binary_op -> .GT  | Decrement, binary_op -> .LE  | NOT, binary_op -> .LT  | String, binary_op -> .EQ  | Minus, binary_op -> .Minus  | Tilde, binary_exp -> binary_exp .binary_op unary_exp  | VerticalBar, binary_exp -> binary_exp .binary_op unary_exp  | Plus, binary_op -> .AND  | String, binary_op -> .GE  | Plus, binary_exp -> binary_exp .binary_op unary_exp  | Colon, binary_op -> .Divide  | Minus, binary_op -> .LE  | Increment, binary_op -> .GT  | String, binary_exp -> binary_exp .binary_op unary_exp  | Times, binary_op -> .Plus  | Increment, binary_op -> .AND  | ID, binary_op -> .EQ  | Increment, binary_op -> .VerticalBar  | ID, binary_op -> .Minus  | Minus, binary_op -> .Divide  | Number, binary_op -> .NEQ  | Number, binary_op -> .RightShift  | Minus, binary_op -> .LT  | Tilde, binary_op -> .Plus  | Plus, binary_op -> .LT  | Plus, binary_op -> .AND  | Plus, binary_op -> .Ampersand  | Minus, binary_op -> .Plus  | Number, binary_op -> .Divide  | Decrement, binary_op -> .Ampersand  | Decrement, binary_op -> .Minus  | ID, binary_op -> .LeftShift  | Plus, binary_op -> .AND  | Decrement, binary_op -> .LT  | Increment, conditional_exp -> binary_exp .Question exp Colon conditional_exp  | Colon, binary_op -> .Ampersand  | Number, binary_op -> .OR  | ID, binary_op -> .LeftShift  | LParen, binary_op -> .GE  | Number, binary_op -> .Divide  | ID, binary_op -> .Minus  | LParen, binary_op -> .Percent  | Minus, binary_op -> .OR  | String, binary_exp -> binary_exp .binary_op unary_exp  | NEQ, binary_op -> .LT  | LParen, binary_op -> .Caret  | Increment, binary_op -> .GE  | String, binary_op -> .AND  | Increment, binary_op -> .EQ  | String, binary_op -> .Percent  | Plus, binary_op -> .Caret  | Decrement, binary_op -> .AND  | Tilde, binary_op -> .Times  | Minus, binary_op -> .RightShift  | Tilde, binary_op -> .OR  | Plus, binary_op -> .RightShift  | Number, binary_op -> .GT  | Tilde, binary_op -> .EQ  | Decrement, conditional_exp -> binary_exp.  | Comma, binary_op -> .LeftShift  | ID, binary_op -> .AND  | LParen, binary_op -> .LT  | Minus, binary_op -> .Caret  | NOT, binary_op -> .NEQ  | Tilde, binary_op -> .Minus  | Decrement, binary_op -> .LT  | ID, binary_op -> .Divide  | LParen, binary_exp -> binary_exp .binary_op unary_exp  | RightShift, binary_op -> .AND  | NOT, binary_op -> .Minus  | Number, binary_op -> .OR  | LParen, binary_op -> .GE  | ID, binary_op -> .Ampersand  | Tilde, binary_op -> .Percent  | LParen, binary_op -> .Times  | Increment, binary_op -> .Plus  | Tilde, binary_op -> .VerticalBar  | NOT, )
272 <- (202, 'conditional_exp') (assignment_exp -> conditional_exp.  | Colon, assignment_exp -> conditional_exp.  | Comma, )
273 <- (202, 'exp') (conditional_exp -> binary_exp Question exp .Colon conditional_exp  | Comma, conditional_exp -> binary_exp Question exp .Colon conditional_exp  | Semicolon, exp -> exp .Comma assignment_exp  | Comma, exp -> exp .Comma assignment_exp  | Colon, )
274 <- (202, 'postfix_exp') (unary_exp -> postfix_exp.  | Ampersand, postfix_exp -> postfix_exp .Decrement  | GT, postfix_exp -> postfix_exp .LBrack exp RBrack  | Plus, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | OR, postfix_exp -> postfix_exp .LParen RParen  | OR, postfix_exp -> postfix_exp .LParen RParen  | Assign, postfix_exp -> postfix_exp .Increment  | Divide, postfix_exp -> postfix_exp .LParen RParen  | EQ, postfix_exp -> postfix_exp .LParen RParen  | Caret, postfix_exp -> postfix_exp .Increment  | VerticalBar, unary_exp -> postfix_exp.  | Comma, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Comma, postfix_exp -> postfix_exp .Dot ID  | Assign, postfix_exp -> postfix_exp .Increment  | LeftShift, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Percent, postfix_exp -> postfix_exp .Dot ID  | Dot, postfix_exp -> postfix_exp .LParen RParen  | Minus, postfix_exp -> postfix_exp .Dot ID  | GT, postfix_exp -> postfix_exp .LParen RParen  | NEQ, postfix_exp -> postfix_exp .LParen RParen  | Percent, postfix_exp -> postfix_exp .Decrement  | Caret, postfix_exp -> postfix_exp .LBrack exp RBrack  | LE, postfix_exp -> postfix_exp .Decrement  | RightShift, postfix_exp -> postfix_exp .LParen RParen  | AND, postfix_exp -> postfix_exp .Decrement  | LT, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Minus, unary_exp -> postfix_exp.  | Divide, postfix_exp -> postfix_exp .Decrement  | Assign, postfix_exp -> postfix_exp .Increment  | Minus, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Decrement, postfix_exp -> postfix_exp .Increment  | Percent, postfix_exp -> postfix_exp .Dot ID  | VerticalBar, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | EQ, postfix_exp -> postfix_exp .Increment  | Question, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> postfix_exp .Dot ID  | Times, postfix_exp -> postfix_exp .Decrement  | GE, postfix_exp -> postfix_exp .Increment  | EQ, postfix_exp -> postfix_exp .Dot ID  | Increment, postfix_exp -> postfix_exp .LParen RParen  | LT, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | NEQ, postfix_exp -> postfix_exp .Decrement  | Divide, postfix_exp -> postfix_exp .Dot ID  | Divide, unary_exp -> postfix_exp.  | LeftShift, postfix_exp -> postfix_exp .Decrement  | Dot, postfix_exp -> postfix_exp .Dot ID  | Minus, postfix_exp -> postfix_exp .LBrack exp RBrack  | LT, unary_exp -> postfix_exp.  | OR, postfix_exp -> postfix_exp .LParen RParen  | Colon, postfix_exp -> postfix_exp .Decrement  | Increment, postfix_exp -> postfix_exp .LBrack exp RBrack  | Question, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | GE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LT, unary_exp -> postfix_exp.  | LE, unary_exp -> postfix_exp.  | Times, postfix_exp -> postfix_exp .LBrack exp RBrack  | EQ, postfix_exp -> postfix_exp .Dot ID  | Comma, postfix_exp -> postfix_exp .Increment  | OR, postfix_exp -> postfix_exp .Decrement  | LE, postfix_exp -> postfix_exp .LBrack exp RBrack  | LBrack, postfix_exp -> postfix_exp .LBrack exp RBrack  | GT, postfix_exp -> postfix_exp .LParen RParen  | LBrack, postfix_exp -> postfix_exp .Decrement  | EQ, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Divide, postfix_exp -> postfix_exp .LParen RParen  | Times, postfix_exp -> postfix_exp .LParen RParen  | LE, postfix_exp -> postfix_exp .LParen RParen  | LParen, postfix_exp -> postfix_exp .Dot ID  | Plus, unary_exp -> postfix_exp.  | LT, postfix_exp -> postfix_exp .Dot ID  | LBrack, postfix_exp -> postfix_exp .LBrack exp RBrack  | Dot, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LParen, postfix_exp -> postfix_exp .LBrack exp RBrack  | VerticalBar, postfix_exp -> postfix_exp .LBrack exp RBrack  | OR, postfix_exp -> postfix_exp .Increment  | Decrement, postfix_exp -> postfix_exp .Decrement  | Minus, postfix_exp -> postfix_exp .Increment  | LT, postfix_exp -> postfix_exp .Increment  | Caret, postfix_exp -> postfix_exp .Increment  | LE, postfix_exp -> postfix_exp .Increment  | Times, postfix_exp -> postfix_exp .Decrement  | Decrement, postfix_exp -> postfix_exp .Dot ID  | NEQ, postfix_exp -> postfix_exp .LBrack exp RBrack  | LeftShift, postfix_exp -> postfix_exp .Increment  | Comma, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LeftShift, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Caret, postfix_exp -> postfix_exp .Dot ID  | LE, postfix_exp -> postfix_exp .Decrement  | NEQ, unary_exp -> postfix_exp.  | GE, postfix_exp -> postfix_exp .LBrack exp RBrack  | AND, postfix_exp -> postfix_exp .LBrack exp RBrack  | Decrement, postfix_exp -> postfix_exp .Decrement  | Percent, unary_exp -> postfix_exp.  | Assign, postfix_exp -> postfix_exp .Increment  | Plus, postfix_exp -> postfix_exp .Increment  | AND, unary_exp -> postfix_exp.  | Colon, postfix_exp -> postfix_exp .Decrement  | VerticalBar, postfix_exp -> postfix_exp .Dot ID  | GE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Colon, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | AND, postfix_exp -> postfix_exp .Dot ID  | Ampersand, postfix_exp -> postfix_exp .LBrack exp RBrack  | Divide, unary_exp -> postfix_exp.  | Percent, postfix_exp -> postfix_exp .Dot ID  | Colon, postfix_exp -> postfix_exp .Dot ID  | LParen, unary_exp -> postfix_exp.  | Minus, postfix_exp -> postfix_exp .Dot ID  | RightShift, postfix_exp -> postfix_exp .LBrack exp RBrack  | Increment, postfix_exp -> postfix_exp .LParen RParen  | Increment, postfix_exp -> postfix_exp .Increment  | Increment, postfix_exp -> postfix_exp .Increment  | Colon, postfix_exp -> postfix_exp .Increment  | LBrack, postfix_exp -> postfix_exp .Dot ID  | Decrement, postfix_exp -> postfix_exp .Increment  | NEQ, postfix_exp -> postfix_exp .Increment  | Ampersand, postfix_exp -> postfix_exp .LBrack exp RBrack  | Percent, postfix_exp -> postfix_exp .Increment  | RightShift, unary_exp -> postfix_exp.  | Question, postfix_exp -> postfix_exp .Increment  | LParen, postfix_exp -> postfix_exp .Dot ID  | Question, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Question, postfix_exp -> postfix_exp .LParen RParen  | Ampersand, postfix_exp -> postfix_exp .Dot ID  | EQ, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | RightShift, postfix_exp -> postfix_exp .Decrement  | LBrack, postfix_exp -> postfix_exp .LBrack exp RBrack  | Minus, postfix_exp -> postfix_exp .LBrack exp RBrack  | RightShift, postfix_exp -> postfix_exp .LBrack exp RBrack  | Ampersand, postfix_exp -> postfix_exp .LParen RParen  | GT, postfix_exp -> postfix_exp .LBrack exp RBrack  | LParen, postfix_exp -> postfix_exp .Dot ID  | AND, postfix_exp -> postfix_exp .LParen RParen  | Comma, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | GT, postfix_exp -> postfix_exp .LParen RParen  | Dot, postfix_exp -> postfix_exp .Decrement  | Comma, postfix_exp -> postfix_exp .Decrement  | Times, postfix_exp -> postfix_exp .Decrement  | OR, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LBrack, postfix_exp -> postfix_exp .Dot ID  | LT, postfix_exp -> postfix_exp .LParen RParen  | LeftShift, unary_exp -> postfix_exp.  | VerticalBar, postfix_exp -> postfix_exp .Decrement  | Colon, postfix_exp -> postfix_exp .Decrement  | LParen, postfix_exp -> postfix_exp .Increment  | Dot, unary_exp -> postfix_exp.  | GT, postfix_exp -> postfix_exp .Dot ID  | Caret, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Ampersand, postfix_exp -> postfix_exp .LBrack exp RBrack  | Comma, postfix_exp -> postfix_exp .LBrack exp RBrack  | Assign, postfix_exp -> postfix_exp .Decrement  | LeftShift, postfix_exp -> postfix_exp .LParen RParen  | Divide, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Dot, postfix_exp -> postfix_exp .Decrement  | AND, postfix_exp -> postfix_exp .Dot ID  | LeftShift, unary_exp -> postfix_exp.  | NEQ, unary_exp -> postfix_exp.  | Plus, postfix_exp -> postfix_exp .LParen RParen  | Plus, postfix_exp -> postfix_exp .LParen RParen  | GE, postfix_exp -> postfix_exp .LParen RParen  | Decrement, unary_exp -> postfix_exp.  | AND, postfix_exp -> postfix_exp .LParen RParen  | VerticalBar, postfix_exp -> postfix_exp .LParen RParen  | Question, postfix_exp -> postfix_exp .Decrement  | Question, postfix_exp -> postfix_exp .Increment  | GE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Assign, postfix_exp -> postfix_exp .LBrack exp RBrack  | Times, postfix_exp -> postfix_exp .LBrack exp RBrack  | GE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Plus, postfix_exp -> postfix_exp .Decrement  | Plus, postfix_exp -> postfix_exp .Decrement  | Ampersand, unary_exp -> postfix_exp.  | RightShift, postfix_exp -> postfix_exp .LBrack exp RBrack  | Caret, unary_exp -> postfix_exp.  | Caret, postfix_exp -> postfix_exp .LBrack exp RBrack  | Colon, postfix_exp -> postfix_exp .LBrack exp RBrack  | NEQ, postfix_exp -> postfix_exp .Dot ID  | Percent, postfix_exp -> postfix_exp .Dot ID  | OR, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Times, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Increment, unary_exp -> postfix_exp.  | EQ, postfix_exp -> postfix_exp .Increment  | GT, postfix_exp -> postfix_exp .LParen RParen  | RightShift, postfix_exp -> postfix_exp .Increment  | Assign, )
275 <- (202, 'primary_exp') (postfix_exp -> primary_exp.  | VerticalBar, postfix_exp -> primary_exp.  | OR, postfix_exp -> primary_exp.  | LE, postfix_exp -> primary_exp.  | Decrement, postfix_exp -> primary_exp.  | Times, postfix_exp -> primary_exp.  | Comma, postfix_exp -> primary_exp.  | Question, postfix_exp -> primary_exp.  | LeftShift, postfix_exp -> primary_exp.  | Assign, postfix_exp -> primary_exp.  | Caret, postfix_exp -> primary_exp.  | AND, postfix_exp -> primary_exp.  | Divide, postfix_exp -> primary_exp.  | LParen, postfix_exp -> primary_exp.  | EQ, postfix_exp -> primary_exp.  | Colon, postfix_exp -> primary_exp.  | Minus, postfix_exp -> primary_exp.  | Percent, postfix_exp -> primary_exp.  | Dot, postfix_exp -> primary_exp.  | LBrack, postfix_exp -> primary_exp.  | LT, postfix_exp -> primary_exp.  | GT, postfix_exp -> primary_exp.  | GE, postfix_exp -> primary_exp.  | Increment, postfix_exp -> primary_exp.  | RightShift, postfix_exp -> primary_exp.  | Ampersand, postfix_exp -> primary_exp.  | Plus, postfix_exp -> primary_exp.  | NEQ, )
276 <- (202, 'unary_exp') (binary_exp -> unary_exp.  | Colon, binary_exp -> unary_exp.  | Percent, assignment_exp -> unary_exp .assignment_op assignment_exp  | Comma, binary_exp -> unary_exp.  | GE, assignment_op -> .Assign  | String, binary_exp -> unary_exp.  | Comma, binary_exp -> unary_exp.  | Minus, assignment_op -> .Assign  | Number, binary_exp -> unary_exp.  | GT, binary_exp -> unary_exp.  | LeftShift, binary_exp -> unary_exp.  | AND, binary_exp -> unary_exp.  | LE, assignment_op -> .Assign  | NOT, binary_exp -> unary_exp.  | RightShift, assignment_op -> .Assign  | Decrement, binary_exp -> unary_exp.  | NEQ, assignment_op -> .Assign  | LParen, binary_exp -> unary_exp.  | Ampersand, binary_exp -> unary_exp.  | VerticalBar, binary_exp -> unary_exp.  | Caret, assignment_op -> .Assign  | ID, binary_exp -> unary_exp.  | LT, binary_exp -> unary_exp.  | Times, assignment_op -> .Assign  | Plus, assignment_op -> .Assign  | Increment, binary_exp -> unary_exp.  | EQ, assignment_op -> .Assign  | Minus, binary_exp -> unary_exp.  | Question, assignment_exp -> unary_exp .assignment_op assignment_exp  | Colon, binary_exp -> unary_exp.  | OR, assignment_op -> .Assign  | Tilde, binary_exp -> unary_exp.  | Divide, binary_exp -> unary_exp.  | Plus, )
277 <- (202, 'unary_op') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> unary_op .unary_exp  | VerticalBar, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> unary_op .unary_exp  | Colon, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .unary_op unary_exp  | Colon, unary_exp -> .Increment unary_exp  | Colon, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, unary_exp -> unary_op .unary_exp  | Ampersand, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, unary_exp -> unary_op .unary_exp  | AND, primary_exp -> .String  | Colon, unary_exp -> .postfix_exp  | Colon, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, postfix_exp -> .postfix_exp Decrement  | Colon, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_exp -> unary_op .unary_exp  | Minus, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Percent, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, unary_exp -> unary_op .unary_exp  | NEQ, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, unary_exp -> unary_op .unary_exp  | LE, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Colon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | RightShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> unary_op .unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, unary_exp -> unary_op .unary_exp  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Colon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> unary_op .unary_exp  | Divide, primary_exp -> .ID  | LeftShift, unary_exp -> unary_op .unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, primary_exp -> .LParen exp RParen  | GE, primary_exp -> .LParen exp RParen  | LE, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> unary_op .unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_op -> .Tilde  | Number, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_op -> .Minus  | Decrement, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, postfix_exp -> .postfix_exp Increment  | Colon, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, postfix_exp -> .postfix_exp LParen RParen  | LT, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .String  | Question, primary_exp -> .Number  | Percent, primary_exp -> .Number  | Colon, unary_exp -> .unary_op unary_exp  | Assign, unary_exp -> unary_op .unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, unary_exp -> unary_op .unary_exp  | Percent, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp Decrement  | LT, postfix_exp -> .postfix_exp Dot ID  | Comma, unary_exp -> unary_op .unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, primary_exp -> .LParen exp RParen  | Colon, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, postfix_exp -> .postfix_exp Dot ID  | Colon, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, primary_exp -> .Number  | Plus, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Colon, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> unary_op .unary_exp  | Question, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | Colon, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .postfix_exp  | GT, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_op -> .NOT  | Plus, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, unary_exp -> .Increment unary_exp  | Percent, unary_exp -> unary_op .unary_exp  | Assign, postfix_exp -> .primary_exp  | Decrement, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_exp -> unary_op .unary_exp  | GT, primary_exp -> .String  | Times, unary_exp -> unary_op .unary_exp  | Plus, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | GE, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Colon, unary_op -> .NOT  | NOT, unary_exp -> .Decrement unary_exp  | Colon, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .Minus  | Number, unary_op -> .NOT  | Decrement, postfix_exp -> .primary_exp  | Ampersand, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .String  | GE, postfix_exp -> .postfix_exp Increment  | Dot, unary_exp -> unary_op .unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Decrement, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_exp -> unary_op .unary_exp  | Times, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp Decrement  | Assign, unary_exp -> unary_op .unary_exp  | RightShift, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, unary_exp -> .Increment unary_exp  | Question, unary_exp -> .postfix_exp  | LeftShift, )
278 <- (206, 'Decrement') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, unary_exp -> Decrement .unary_exp  | Divide, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | Caret, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, unary_op -> .NOT  | Tilde, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | RightShift, unary_op -> .Tilde  | LParen, unary_exp -> Decrement .unary_exp  | VerticalBar, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, unary_exp -> .unary_op unary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, unary_exp -> Decrement .unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, primary_exp -> .Number  | AND, unary_exp -> .unary_op unary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Percent, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Question, unary_exp -> Decrement .unary_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> Decrement .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, primary_exp -> .String  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, primary_exp -> .ID  | Plus, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, unary_exp -> Decrement .unary_exp  | Comma, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, primary_exp -> .LParen exp RParen  | LT, primary_exp -> .ID  | LeftShift, unary_exp -> Decrement .unary_exp  | LT, primary_exp -> .String  | AND, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | GE, unary_exp -> .postfix_exp  | GT, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, primary_exp -> .Number  | Plus, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_op -> .Plus  | Minus, unary_exp -> .Increment unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, unary_exp -> Decrement .unary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> .postfix_exp  | Caret, unary_exp -> Decrement .unary_exp  | LE, primary_exp -> .ID  | LT, unary_exp -> Decrement .unary_exp  | GE, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Question, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, unary_op -> .Minus  | LParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, primary_exp -> .Number  | Semicolon, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, unary_exp -> .unary_op unary_exp  | GE, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> Decrement .unary_exp  | Question, unary_exp -> Decrement .unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .ID  | Comma, primary_exp -> .ID  | LBrack, unary_exp -> .postfix_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | Percent, unary_exp -> Decrement .unary_exp  | AND, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, unary_exp -> Decrement .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | LeftShift, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Dot, unary_exp -> Decrement .unary_exp  | OR, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_op -> .Tilde  | Increment, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Ampersand, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, unary_exp -> Decrement .unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Dot ID  | EQ, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, unary_exp -> Decrement .unary_exp  | Caret, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, unary_exp -> Decrement .unary_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Decrement, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Dot, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, unary_exp -> Decrement .unary_exp  | RightShift, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, unary_exp -> Decrement .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> Decrement .unary_exp  | GT, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, unary_exp -> .postfix_exp  | LeftShift, )
279 <- (206, 'ID') (primary_exp -> ID.  | Minus, primary_exp -> ID.  | NEQ, primary_exp -> ID.  | LBrack, primary_exp -> ID.  | Decrement, primary_exp -> ID.  | OR, primary_exp -> ID.  | Comma, primary_exp -> ID.  | Times, primary_exp -> ID.  | Semicolon, primary_exp -> ID.  | RightShift, primary_exp -> ID.  | Question, primary_exp -> ID.  | Percent, primary_exp -> ID.  | LE, primary_exp -> ID.  | GE, primary_exp -> ID.  | LT, primary_exp -> ID.  | VerticalBar, primary_exp -> ID.  | EQ, primary_exp -> ID.  | GT, primary_exp -> ID.  | Caret, primary_exp -> ID.  | Increment, primary_exp -> ID.  | Divide, primary_exp -> ID.  | AND, primary_exp -> ID.  | LParen, primary_exp -> ID.  | Ampersand, primary_exp -> ID.  | LeftShift, primary_exp -> ID.  | Plus, primary_exp -> ID.  | Dot, )
280 <- (206, 'Increment') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, unary_exp -> Increment .unary_exp  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_exp -> Increment .unary_exp  | Minus, unary_op -> .NOT  | Tilde, unary_exp -> Increment .unary_exp  | Question, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, unary_exp -> Increment .unary_exp  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, unary_exp -> Increment .unary_exp  | EQ, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, unary_exp -> Increment .unary_exp  | Comma, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, unary_exp -> Increment .unary_exp  | Plus, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, unary_exp -> .postfix_exp  | Semicolon, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Percent, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .String  | Dot, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, primary_exp -> .String  | RightShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen RParen  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, primary_exp -> .ID  | LeftShift, primary_exp -> .String  | AND, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, unary_exp -> .postfix_exp  | GT, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Times, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> Increment .unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, unary_exp -> Increment .unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> Increment .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Question, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, primary_exp -> .Number  | Semicolon, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> Increment .unary_exp  | AND, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, postfix_exp -> .postfix_exp Dot ID  | Comma, unary_exp -> Increment .unary_exp  | LE, unary_exp -> Increment .unary_exp  | RightShift, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, unary_exp -> .postfix_exp  | VerticalBar, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, unary_exp -> Increment .unary_exp  | GT, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, unary_exp -> Increment .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, unary_exp -> Increment .unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, unary_exp -> .postfix_exp  | Percent, primary_exp -> .Number  | Plus, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .ID  | Comma, primary_exp -> .ID  | LBrack, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .unary_op unary_exp  | EQ, unary_exp -> Increment .unary_exp  | LT, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | Percent, unary_exp -> Increment .unary_exp  | Semicolon, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> Increment .unary_exp  | Divide, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .NOT  | Plus, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, primary_exp -> .ID  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Dot, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_op -> .Tilde  | Increment, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .Number  | LE, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, postfix_exp -> .postfix_exp Increment  | Dot, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> Increment .unary_exp  | NEQ, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Decrement, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | Semicolon, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_exp -> Increment .unary_exp  | Times, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp Decrement  | Dot, unary_exp -> .postfix_exp  | LeftShift, )
281 <- (206, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, primary_exp -> LParen .exp RParen  | Dot, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, primary_exp -> LParen .exp RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .Increment unary_exp  | Ampersand, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, postfix_exp -> .primary_exp  | RParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, primary_exp -> LParen .exp RParen  | Decrement, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> LParen .exp RParen  | GT, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, primary_exp -> LParen .exp RParen  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, binary_exp -> .unary_exp  | LE, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, assignment_exp -> .conditional_exp  | RParen, unary_op -> .Minus  | Number, primary_exp -> LParen .exp RParen  | Percent, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> LParen .exp RParen  | GE, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, primary_exp -> LParen .exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, exp -> .assignment_exp  | RParen, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> LParen .exp RParen  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, primary_exp -> LParen .exp RParen  | Ampersand, primary_exp -> LParen .exp RParen  | Plus, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | GT, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, primary_exp -> LParen .exp RParen  | Semicolon, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, primary_exp -> LParen .exp RParen  | Increment, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | RParen, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .binary_exp binary_op unary_exp  | Percent, primary_exp -> LParen .exp RParen  | Divide, postfix_exp -> .primary_exp  | Increment, primary_exp -> .String  | Question, primary_exp -> .Number  | Percent, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, primary_exp -> LParen .exp RParen  | Comma, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, primary_exp -> .Number  | RParen, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | Decrement, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, primary_exp -> LParen .exp RParen  | Minus, exp -> .exp Comma assignment_exp  | RParen, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, primary_exp -> LParen .exp RParen  | NEQ, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, primary_exp -> LParen .exp RParen  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, primary_exp -> LParen .exp RParen  | OR, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> LParen .exp RParen  | LeftShift, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, postfix_exp -> .postfix_exp Increment  | Percent, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, unary_op -> .Minus  | Tilde, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .Decrement unary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | RParen, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, primary_exp -> LParen .exp RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .postfix_exp  | RParen, primary_exp -> LParen .exp RParen  | LE, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, primary_exp -> LParen .exp RParen  | Times, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, primary_exp -> LParen .exp RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> LParen .exp RParen  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, primary_exp -> LParen .exp RParen  | VerticalBar, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .unary_op unary_exp  | Assign, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .postfix_exp  | Comma, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, postfix_exp -> .primary_exp  | Ampersand, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
282 <- (206, 'Number') (primary_exp -> Number.  | Semicolon, primary_exp -> Number.  | Increment, primary_exp -> Number.  | Question, primary_exp -> Number.  | Divide, primary_exp -> Number.  | Ampersand, primary_exp -> Number.  | Plus, primary_exp -> Number.  | LE, primary_exp -> Number.  | Decrement, primary_exp -> Number.  | Caret, primary_exp -> Number.  | Percent, primary_exp -> Number.  | VerticalBar, primary_exp -> Number.  | EQ, primary_exp -> Number.  | Comma, primary_exp -> Number.  | GT, primary_exp -> Number.  | AND, primary_exp -> Number.  | GE, primary_exp -> Number.  | OR, primary_exp -> Number.  | Minus, primary_exp -> Number.  | LBrack, primary_exp -> Number.  | RightShift, primary_exp -> Number.  | LParen, primary_exp -> Number.  | Dot, primary_exp -> Number.  | LT, primary_exp -> Number.  | NEQ, primary_exp -> Number.  | Times, primary_exp -> Number.  | LeftShift, )
283 <- (206, 'String') (primary_exp -> String.  | Plus, primary_exp -> String.  | Ampersand, primary_exp -> String.  | AND, primary_exp -> String.  | Comma, primary_exp -> String.  | LeftShift, primary_exp -> String.  | Dot, primary_exp -> String.  | LE, primary_exp -> String.  | EQ, primary_exp -> String.  | RightShift, primary_exp -> String.  | Increment, primary_exp -> String.  | LParen, primary_exp -> String.  | Minus, primary_exp -> String.  | Question, primary_exp -> String.  | GT, primary_exp -> String.  | Semicolon, primary_exp -> String.  | GE, primary_exp -> String.  | VerticalBar, primary_exp -> String.  | OR, primary_exp -> String.  | Divide, primary_exp -> String.  | Caret, primary_exp -> String.  | NEQ, primary_exp -> String.  | LBrack, primary_exp -> String.  | Percent, primary_exp -> String.  | LT, primary_exp -> String.  | Times, primary_exp -> String.  | Decrement, )
284 <- (206, 'postfix_exp') (unary_exp -> postfix_exp.  | Ampersand, postfix_exp -> postfix_exp .Decrement  | GT, postfix_exp -> postfix_exp .LBrack exp RBrack  | Plus, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | OR, postfix_exp -> postfix_exp .LParen RParen  | OR, postfix_exp -> postfix_exp .Increment  | Divide, unary_exp -> postfix_exp.  | Semicolon, postfix_exp -> postfix_exp .LParen RParen  | EQ, unary_exp -> postfix_exp.  | AND, postfix_exp -> postfix_exp .Increment  | VerticalBar, unary_exp -> postfix_exp.  | Comma, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Comma, postfix_exp -> postfix_exp .Increment  | LeftShift, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Percent, postfix_exp -> postfix_exp .Dot ID  | Dot, postfix_exp -> postfix_exp .LParen RParen  | Minus, postfix_exp -> postfix_exp .Dot ID  | GT, postfix_exp -> postfix_exp .LParen RParen  | NEQ, postfix_exp -> postfix_exp .LParen RParen  | Percent, postfix_exp -> postfix_exp .Decrement  | Caret, postfix_exp -> postfix_exp .LBrack exp RBrack  | LE, postfix_exp -> postfix_exp .Decrement  | RightShift, postfix_exp -> postfix_exp .LParen RParen  | AND, postfix_exp -> postfix_exp .Decrement  | LT, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Minus, unary_exp -> postfix_exp.  | Divide, postfix_exp -> postfix_exp .Increment  | Minus, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Decrement, postfix_exp -> postfix_exp .Increment  | Percent, postfix_exp -> postfix_exp .Dot ID  | VerticalBar, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | EQ, postfix_exp -> postfix_exp .Increment  | Question, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> postfix_exp .Dot ID  | Times, postfix_exp -> postfix_exp .Decrement  | GE, postfix_exp -> postfix_exp .Increment  | EQ, postfix_exp -> postfix_exp .Dot ID  | Increment, postfix_exp -> postfix_exp .LParen RParen  | LT, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | NEQ, postfix_exp -> postfix_exp .Decrement  | Divide, postfix_exp -> postfix_exp .Dot ID  | Divide, unary_exp -> postfix_exp.  | LeftShift, postfix_exp -> postfix_exp .Decrement  | Dot, postfix_exp -> postfix_exp .Dot ID  | Minus, postfix_exp -> postfix_exp .LBrack exp RBrack  | LT, unary_exp -> postfix_exp.  | OR, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Semicolon, postfix_exp -> postfix_exp .Decrement  | Increment, postfix_exp -> postfix_exp .LBrack exp RBrack  | Question, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | GE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LT, unary_exp -> postfix_exp.  | LE, unary_exp -> postfix_exp.  | Times, postfix_exp -> postfix_exp .LBrack exp RBrack  | EQ, postfix_exp -> postfix_exp .Dot ID  | Comma, postfix_exp -> postfix_exp .Increment  | OR, postfix_exp -> postfix_exp .Decrement  | LE, postfix_exp -> postfix_exp .LBrack exp RBrack  | LBrack, postfix_exp -> postfix_exp .LBrack exp RBrack  | GT, postfix_exp -> postfix_exp .LParen RParen  | LBrack, postfix_exp -> postfix_exp .Decrement  | EQ, postfix_exp -> postfix_exp .Decrement  | Semicolon, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Divide, postfix_exp -> postfix_exp .LParen RParen  | Times, postfix_exp -> postfix_exp .LParen RParen  | LE, postfix_exp -> postfix_exp .LParen RParen  | LParen, postfix_exp -> postfix_exp .Dot ID  | Plus, unary_exp -> postfix_exp.  | LT, postfix_exp -> postfix_exp .Dot ID  | LBrack, postfix_exp -> postfix_exp .LBrack exp RBrack  | Dot, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LParen, postfix_exp -> postfix_exp .LBrack exp RBrack  | VerticalBar, postfix_exp -> postfix_exp .LBrack exp RBrack  | OR, postfix_exp -> postfix_exp .Increment  | Decrement, postfix_exp -> postfix_exp .Decrement  | Minus, postfix_exp -> postfix_exp .Increment  | AND, postfix_exp -> postfix_exp .Increment  | LT, postfix_exp -> postfix_exp .Increment  | Caret, postfix_exp -> postfix_exp .Increment  | LE, postfix_exp -> postfix_exp .Increment  | Times, postfix_exp -> postfix_exp .Decrement  | Decrement, postfix_exp -> postfix_exp .Dot ID  | NEQ, postfix_exp -> postfix_exp .LBrack exp RBrack  | LeftShift, postfix_exp -> postfix_exp .Increment  | Comma, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LeftShift, postfix_exp -> postfix_exp .LParen RParen  | Caret, postfix_exp -> postfix_exp .Dot ID  | LE, postfix_exp -> postfix_exp .Decrement  | NEQ, unary_exp -> postfix_exp.  | GE, postfix_exp -> postfix_exp .LBrack exp RBrack  | AND, postfix_exp -> postfix_exp .LBrack exp RBrack  | Decrement, postfix_exp -> postfix_exp .Decrement  | Percent, postfix_exp -> postfix_exp .Increment  | Plus, postfix_exp -> postfix_exp .Dot ID  | OR, postfix_exp -> postfix_exp .Increment  | LBrack, postfix_exp -> postfix_exp .Decrement  | VerticalBar, postfix_exp -> postfix_exp .Dot ID  | GE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | AND, postfix_exp -> postfix_exp .Dot ID  | Ampersand, postfix_exp -> postfix_exp .Decrement  | Times, unary_exp -> postfix_exp.  | Percent, postfix_exp -> postfix_exp .Dot ID  | LParen, unary_exp -> postfix_exp.  | Minus, postfix_exp -> postfix_exp .Dot ID  | RightShift, postfix_exp -> postfix_exp .LBrack exp RBrack  | Increment, postfix_exp -> postfix_exp .LParen RParen  | Increment, postfix_exp -> postfix_exp .Increment  | Increment, postfix_exp -> postfix_exp .Dot ID  | Decrement, postfix_exp -> postfix_exp .Increment  | NEQ, postfix_exp -> postfix_exp .Increment  | Ampersand, postfix_exp -> postfix_exp .LBrack exp RBrack  | Percent, postfix_exp -> postfix_exp .Increment  | RightShift, unary_exp -> postfix_exp.  | Question, postfix_exp -> postfix_exp .Increment  | LParen, postfix_exp -> postfix_exp .Dot ID  | Question, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Question, postfix_exp -> postfix_exp .LParen RParen  | Ampersand, postfix_exp -> postfix_exp .Dot ID  | EQ, postfix_exp -> postfix_exp .Dot ID  | Semicolon, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | RightShift, postfix_exp -> postfix_exp .Decrement  | LBrack, postfix_exp -> postfix_exp .LBrack exp RBrack  | Minus, postfix_exp -> postfix_exp .LBrack exp RBrack  | Ampersand, postfix_exp -> postfix_exp .LParen RParen  | GT, postfix_exp -> postfix_exp .LParen RParen  | Semicolon, postfix_exp -> postfix_exp .Dot ID  | AND, postfix_exp -> postfix_exp .LParen RParen  | Comma, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | GT, postfix_exp -> postfix_exp .LParen RParen  | Dot, postfix_exp -> postfix_exp .Decrement  | Comma, postfix_exp -> postfix_exp .LBrack exp RBrack  | LParen, postfix_exp -> postfix_exp .LBrack exp RBrack  | Divide, postfix_exp -> postfix_exp .Decrement  | OR, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LBrack, postfix_exp -> postfix_exp .Dot ID  | LT, postfix_exp -> postfix_exp .LParen RParen  | LeftShift, unary_exp -> postfix_exp.  | VerticalBar, postfix_exp -> postfix_exp .Decrement  | LParen, postfix_exp -> postfix_exp .Increment  | Dot, unary_exp -> postfix_exp.  | GT, postfix_exp -> postfix_exp .Dot ID  | Caret, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Ampersand, postfix_exp -> postfix_exp .LBrack exp RBrack  | Comma, postfix_exp -> postfix_exp .Decrement  | LeftShift, postfix_exp -> postfix_exp .LParen RParen  | Divide, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Dot, postfix_exp -> postfix_exp .Decrement  | AND, postfix_exp -> postfix_exp .Dot ID  | LeftShift, unary_exp -> postfix_exp.  | NEQ, unary_exp -> postfix_exp.  | Plus, postfix_exp -> postfix_exp .LParen RParen  | Plus, postfix_exp -> postfix_exp .LParen RParen  | GE, postfix_exp -> postfix_exp .LParen RParen  | Decrement, postfix_exp -> postfix_exp .LParen RParen  | VerticalBar, postfix_exp -> postfix_exp .LParen RParen  | Question, postfix_exp -> postfix_exp .Decrement  | Question, postfix_exp -> postfix_exp .Increment  | GE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Caret, postfix_exp -> postfix_exp .LBrack exp RBrack  | Times, postfix_exp -> postfix_exp .LBrack exp RBrack  | GE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Plus, postfix_exp -> postfix_exp .Decrement  | Plus, postfix_exp -> postfix_exp .Decrement  | Ampersand, postfix_exp -> postfix_exp .Increment  | GT, postfix_exp -> postfix_exp .Increment  | Semicolon, postfix_exp -> postfix_exp .LBrack exp RBrack  | Caret, unary_exp -> postfix_exp.  | Caret, postfix_exp -> postfix_exp .LBrack exp RBrack  | RightShift, postfix_exp -> postfix_exp .LBrack exp RBrack  | NEQ, postfix_exp -> postfix_exp .Dot ID  | Percent, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Times, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Increment, postfix_exp -> postfix_exp .LBrack exp RBrack  | Semicolon, unary_exp -> postfix_exp.  | EQ, unary_exp -> postfix_exp.  | RightShift, postfix_exp -> postfix_exp .LParen RParen  | RightShift, )
285 <- (206, 'primary_exp') (postfix_exp -> primary_exp.  | Semicolon, postfix_exp -> primary_exp.  | VerticalBar, postfix_exp -> primary_exp.  | OR, postfix_exp -> primary_exp.  | LE, postfix_exp -> primary_exp.  | Decrement, postfix_exp -> primary_exp.  | Times, postfix_exp -> primary_exp.  | Comma, postfix_exp -> primary_exp.  | Question, postfix_exp -> primary_exp.  | LeftShift, postfix_exp -> primary_exp.  | Caret, postfix_exp -> primary_exp.  | AND, postfix_exp -> primary_exp.  | Divide, postfix_exp -> primary_exp.  | LParen, postfix_exp -> primary_exp.  | EQ, postfix_exp -> primary_exp.  | Minus, postfix_exp -> primary_exp.  | GE, postfix_exp -> primary_exp.  | Dot, postfix_exp -> primary_exp.  | LBrack, postfix_exp -> primary_exp.  | LT, postfix_exp -> primary_exp.  | GT, postfix_exp -> primary_exp.  | Percent, postfix_exp -> primary_exp.  | Increment, postfix_exp -> primary_exp.  | RightShift, postfix_exp -> primary_exp.  | Ampersand, postfix_exp -> primary_exp.  | Plus, postfix_exp -> primary_exp.  | NEQ, )
286 <- (206, 'unary_exp') (binary_exp -> binary_exp binary_op unary_exp.  | VerticalBar, binary_exp -> binary_exp binary_op unary_exp.  | Percent, binary_exp -> binary_exp binary_op unary_exp.  | Semicolon, binary_exp -> binary_exp binary_op unary_exp.  | Question, binary_exp -> binary_exp binary_op unary_exp.  | Minus, binary_exp -> binary_exp binary_op unary_exp.  | LE, binary_exp -> binary_exp binary_op unary_exp.  | OR, binary_exp -> binary_exp binary_op unary_exp.  | LeftShift, binary_exp -> binary_exp binary_op unary_exp.  | RightShift, binary_exp -> binary_exp binary_op unary_exp.  | GT, binary_exp -> binary_exp binary_op unary_exp.  | Divide, binary_exp -> binary_exp binary_op unary_exp.  | Ampersand, binary_exp -> binary_exp binary_op unary_exp.  | EQ, binary_exp -> binary_exp binary_op unary_exp.  | Caret, binary_exp -> binary_exp binary_op unary_exp.  | GE, binary_exp -> binary_exp binary_op unary_exp.  | Times, binary_exp -> binary_exp binary_op unary_exp.  | Comma, binary_exp -> binary_exp binary_op unary_exp.  | LT, binary_exp -> binary_exp binary_op unary_exp.  | AND, binary_exp -> binary_exp binary_op unary_exp.  | NEQ, binary_exp -> binary_exp binary_op unary_exp.  | Plus, )
287 <- (206, 'unary_op') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, unary_exp -> unary_op .unary_exp  | VerticalBar, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, unary_exp -> unary_op .unary_exp  | Ampersand, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, unary_exp -> .unary_op unary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, unary_exp -> unary_op .unary_exp  | AND, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, primary_exp -> .Number  | AND, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Decrement  | Increment, unary_exp -> unary_op .unary_exp  | Minus, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, unary_exp -> unary_op .unary_exp  | NEQ, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, unary_exp -> unary_op .unary_exp  | LE, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, primary_exp -> .String  | RightShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, primary_exp -> .ID  | Plus, primary_exp -> .LParen exp RParen  | OR, unary_exp -> unary_op .unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, unary_exp -> unary_op .unary_exp  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> unary_op .unary_exp  | Divide, primary_exp -> .ID  | LeftShift, unary_exp -> unary_op .unary_exp  | OR, primary_exp -> .Number  | Semicolon, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, primary_exp -> .LParen exp RParen  | GE, unary_exp -> .postfix_exp  | GT, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, primary_exp -> .Number  | Plus, unary_exp -> unary_op .unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_op -> .Plus  | Minus, unary_exp -> .Increment unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_op -> .Minus  | Decrement, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Ampersand, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Percent, unary_exp -> unary_op .unary_exp  | LT, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, unary_exp -> unary_op .unary_exp  | Percent, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> unary_op .unary_exp  | Semicolon, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, postfix_exp -> .postfix_exp Dot ID  | Comma, unary_exp -> unary_op .unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp Increment  | Percent, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .ID  | Comma, primary_exp -> .ID  | LBrack, unary_exp -> unary_op .unary_exp  | Question, unary_exp -> .postfix_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | ID, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_op -> .Tilde  | Increment, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, unary_exp -> .Increment unary_exp  | Percent, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_exp -> unary_op .unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .String  | Times, unary_exp -> unary_op .unary_exp  | Plus, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .Minus  | Number, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .String  | GE, postfix_exp -> .postfix_exp Increment  | Dot, unary_exp -> unary_op .unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .postfix_exp  | Comma, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Decrement, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Dot, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_exp -> unary_op .unary_exp  | Times, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .Increment unary_exp  | Question, unary_exp -> unary_op .unary_exp  | RightShift, primary_exp -> .ID  | Dot, unary_exp -> .postfix_exp  | LeftShift, )
288 <- (210, 'Semicolon') (dec -> dec_specifier init_dec_list Semicolon.  | -goto-, dec -> dec_specifier init_dec_list Semicolon.  | NOT, dec -> dec_specifier init_dec_list Semicolon.  | if, dec -> dec_specifier init_dec_list Semicolon.  | -float4-, dec -> dec_specifier init_dec_list Semicolon.  | -uniform-, dec -> dec_specifier init_dec_list Semicolon.  | -continue-, dec -> dec_specifier init_dec_list Semicolon.  | Number, dec -> dec_specifier init_dec_list Semicolon.  | LParen, dec -> dec_specifier init_dec_list Semicolon.  | LBrace, dec -> dec_specifier init_dec_list Semicolon.  | Minus, dec -> dec_specifier init_dec_list Semicolon.  | -fixed4-, dec -> dec_specifier init_dec_list Semicolon.  | -short-, dec -> dec_specifier init_dec_list Semicolon.  | Semicolon, dec -> dec_specifier init_dec_list Semicolon.  | while, dec -> dec_specifier init_dec_list Semicolon.  | -half4-, dec -> dec_specifier init_dec_list Semicolon.  | Decrement, dec -> dec_specifier init_dec_list Semicolon.  | -char-, dec -> dec_specifier init_dec_list Semicolon.  | for, dec -> dec_specifier init_dec_list Semicolon.  | Tilde, dec -> dec_specifier init_dec_list Semicolon.  | Plus, dec -> dec_specifier init_dec_list Semicolon.  | String, dec -> dec_specifier init_dec_list Semicolon.  | -long-, dec -> dec_specifier init_dec_list Semicolon.  | break, dec -> dec_specifier init_dec_list Semicolon.  | -half3-, dec -> dec_specifier init_dec_list Semicolon.  | -void-, dec -> dec_specifier init_dec_list Semicolon.  | -half2-, dec -> dec_specifier init_dec_list Semicolon.  | -return-, dec -> dec_specifier init_dec_list Semicolon.  | -double-, dec -> dec_specifier init_dec_list Semicolon.  | -float-, dec -> dec_specifier init_dec_list Semicolon.  | -do-, dec -> dec_specifier init_dec_list Semicolon.  | -sampler2D-, dec -> dec_specifier init_dec_list Semicolon.  | -fixed2-, dec -> dec_specifier init_dec_list Semicolon.  | -struct-, dec -> dec_specifier init_dec_list Semicolon.  | -float2-, dec -> dec_specifier init_dec_list Semicolon.  | ID, dec -> dec_specifier init_dec_list Semicolon.  | Increment, dec -> dec_specifier init_dec_list Semicolon.  | -fixed3-, dec -> dec_specifier init_dec_list Semicolon.  | -float3-, dec -> dec_specifier init_dec_list Semicolon.  | -int-, dec -> dec_specifier init_dec_list Semicolon.  | RBrace, )
289 <- (211, 'assignment_exp') (exp -> exp Comma assignment_exp.  | Semicolon, exp -> exp Comma assignment_exp.  | Comma, )
290 <- (213, 'exp') (iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | break, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -float2-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -half3-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -fixed4-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | Number, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -continue-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | for, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | Minus, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | Tilde, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -void-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | ID, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | LBrace, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | LParen, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | RBrace, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | Increment, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -fixed2-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | Plus, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -do-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -int-, exp -> exp .Comma assignment_exp  | Comma, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -sampler2D-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | String, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -float4-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -struct-, exp -> exp .Comma assignment_exp  | Semicolon, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -uniform-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -long-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -float-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -char-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -half2-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -fixed3-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -float3-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | while, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -double-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | if, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -return-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | Semicolon, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | NOT, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -half4-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -short-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | Decrement, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -goto-, )
291 <- (214, 'exp') (selection_stm -> if LParen exp .RParen stm  | -float4-, selection_stm -> if LParen exp .RParen stm else stm  | -float2-, selection_stm -> if LParen exp .RParen stm  | -float2-, selection_stm -> if LParen exp .RParen stm  | -int-, selection_stm -> if LParen exp .RParen stm else stm  | ID, selection_stm -> if LParen exp .RParen stm else stm  | -half4-, selection_stm -> if LParen exp .RParen stm  | -goto-, selection_stm -> if LParen exp .RParen stm else stm  | -do-, selection_stm -> if LParen exp .RParen stm  | String, selection_stm -> if LParen exp .RParen stm else stm  | for, selection_stm -> if LParen exp .RParen stm  | -float-, selection_stm -> if LParen exp .RParen stm  | -char-, selection_stm -> if LParen exp .RParen stm  | -return-, selection_stm -> if LParen exp .RParen stm  | -half4-, selection_stm -> if LParen exp .RParen stm else stm  | -uniform-, selection_stm -> if LParen exp .RParen stm else stm  | RBrace, exp -> exp .Comma assignment_exp  | Comma, selection_stm -> if LParen exp .RParen stm  | LParen, selection_stm -> if LParen exp .RParen stm else stm  | -struct-, selection_stm -> if LParen exp .RParen stm  | LBrace, selection_stm -> if LParen exp .RParen stm else stm  | -fixed4-, selection_stm -> if LParen exp .RParen stm  | Decrement, selection_stm -> if LParen exp .RParen stm else stm  | LParen, selection_stm -> if LParen exp .RParen stm  | -fixed2-, selection_stm -> if LParen exp .RParen stm else stm  | -float-, selection_stm -> if LParen exp .RParen stm  | if, selection_stm -> if LParen exp .RParen stm else stm  | -double-, selection_stm -> if LParen exp .RParen stm  | -half3-, selection_stm -> if LParen exp .RParen stm else stm  | Plus, selection_stm -> if LParen exp .RParen stm else stm  | -void-, selection_stm -> if LParen exp .RParen stm else stm  | NOT, selection_stm -> if LParen exp .RParen stm  | -fixed3-, selection_stm -> if LParen exp .RParen stm  | -fixed4-, exp -> exp .Comma assignment_exp  | RParen, selection_stm -> if LParen exp .RParen stm  | -struct-, selection_stm -> if LParen exp .RParen stm  | Semicolon, selection_stm -> if LParen exp .RParen stm  | for, selection_stm -> if LParen exp .RParen stm  | Minus, selection_stm -> if LParen exp .RParen stm else stm  | -half3-, selection_stm -> if LParen exp .RParen stm  | Tilde, selection_stm -> if LParen exp .RParen stm  | RBrace, selection_stm -> if LParen exp .RParen stm else stm  | Minus, selection_stm -> if LParen exp .RParen stm else stm  | -return-, selection_stm -> if LParen exp .RParen stm  | Plus, selection_stm -> if LParen exp .RParen stm  | Number, selection_stm -> if LParen exp .RParen stm else stm  | -float4-, selection_stm -> if LParen exp .RParen stm  | while, selection_stm -> if LParen exp .RParen stm else stm  | -short-, selection_stm -> if LParen exp .RParen stm else stm  | -long-, selection_stm -> if LParen exp .RParen stm  | -do-, selection_stm -> if LParen exp .RParen stm  | -void-, selection_stm -> if LParen exp .RParen stm  | ID, selection_stm -> if LParen exp .RParen stm else stm  | Tilde, selection_stm -> if LParen exp .RParen stm else stm  | -fixed2-, selection_stm -> if LParen exp .RParen stm else stm  | -fixed3-, selection_stm -> if LParen exp .RParen stm else stm  | -sampler2D-, selection_stm -> if LParen exp .RParen stm else stm  | -continue-, selection_stm -> if LParen exp .RParen stm else stm  | LBrace, selection_stm -> if LParen exp .RParen stm else stm  | -goto-, selection_stm -> if LParen exp .RParen stm  | break, selection_stm -> if LParen exp .RParen stm  | -continue-, selection_stm -> if LParen exp .RParen stm else stm  | Increment, selection_stm -> if LParen exp .RParen stm  | -double-, selection_stm -> if LParen exp .RParen stm else stm  | while, selection_stm -> if LParen exp .RParen stm else stm  | -half2-, selection_stm -> if LParen exp .RParen stm  | -long-, selection_stm -> if LParen exp .RParen stm else stm  | if, selection_stm -> if LParen exp .RParen stm  | Increment, selection_stm -> if LParen exp .RParen stm  | -float3-, selection_stm -> if LParen exp .RParen stm  | NOT, selection_stm -> if LParen exp .RParen stm else stm  | break, selection_stm -> if LParen exp .RParen stm else stm  | String, selection_stm -> if LParen exp .RParen stm else stm  | Decrement, selection_stm -> if LParen exp .RParen stm else stm  | -char-, selection_stm -> if LParen exp .RParen stm  | -sampler2D-, selection_stm -> if LParen exp .RParen stm  | -uniform-, selection_stm -> if LParen exp .RParen stm else stm  | Semicolon, selection_stm -> if LParen exp .RParen stm else stm  | Number, selection_stm -> if LParen exp .RParen stm else stm  | -float3-, selection_stm -> if LParen exp .RParen stm  | -short-, selection_stm -> if LParen exp .RParen stm  | -half2-, selection_stm -> if LParen exp .RParen stm else stm  | -int-, )
292 <- (216, 'ID') (postfix_exp -> postfix_exp Dot ID.  | Assign, postfix_exp -> postfix_exp Dot ID.  | OR, postfix_exp -> postfix_exp Dot ID.  | Times, postfix_exp -> postfix_exp Dot ID.  | Percent, postfix_exp -> postfix_exp Dot ID.  | Semicolon, postfix_exp -> postfix_exp Dot ID.  | AND, postfix_exp -> postfix_exp Dot ID.  | Plus, postfix_exp -> postfix_exp Dot ID.  | Ampersand, postfix_exp -> postfix_exp Dot ID.  | VerticalBar, postfix_exp -> postfix_exp Dot ID.  | Caret, postfix_exp -> postfix_exp Dot ID.  | LParen, postfix_exp -> postfix_exp Dot ID.  | GT, postfix_exp -> postfix_exp Dot ID.  | Divide, postfix_exp -> postfix_exp Dot ID.  | Increment, postfix_exp -> postfix_exp Dot ID.  | Minus, postfix_exp -> postfix_exp Dot ID.  | EQ, postfix_exp -> postfix_exp Dot ID.  | Decrement, postfix_exp -> postfix_exp Dot ID.  | GE, postfix_exp -> postfix_exp Dot ID.  | LeftShift, postfix_exp -> postfix_exp Dot ID.  | Dot, postfix_exp -> postfix_exp Dot ID.  | LBrack, postfix_exp -> postfix_exp Dot ID.  | Comma, postfix_exp -> postfix_exp Dot ID.  | NEQ, postfix_exp -> postfix_exp Dot ID.  | RightShift, postfix_exp -> postfix_exp Dot ID.  | LT, postfix_exp -> postfix_exp Dot ID.  | LE, postfix_exp -> postfix_exp Dot ID.  | Question, )
293 <- (218, 'Decrement') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, unary_exp -> Decrement .unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | Caret, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, unary_op -> .NOT  | Tilde, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_exp -> Decrement .unary_exp  | VerticalBar, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RBrack, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, primary_exp -> .ID  | RBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, unary_exp -> Decrement .unary_exp  | EQ, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, unary_exp -> .unary_op unary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Question, unary_exp -> Decrement .unary_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> Decrement .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, postfix_exp -> .postfix_exp Decrement  | RBrack, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, unary_exp -> .postfix_exp  | RBrack, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, primary_exp -> .String  | RightShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, unary_exp -> Decrement .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | RBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, primary_exp -> .LParen exp RParen  | LT, primary_exp -> .ID  | LeftShift, unary_exp -> Decrement .unary_exp  | LT, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | RBrack, primary_exp -> .LParen exp RParen  | GE, unary_exp -> .postfix_exp  | GT, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, primary_exp -> .Number  | Plus, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, unary_exp -> Decrement .unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> .Increment unary_exp  | RBrack, unary_exp -> .postfix_exp  | Caret, unary_exp -> Decrement .unary_exp  | LE, primary_exp -> .ID  | LT, unary_exp -> Decrement .unary_exp  | GE, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp Decrement  | Question, primary_exp -> .LParen exp RParen  | Assign, postfix_exp -> .postfix_exp LParen RParen  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | RBrack, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Percent, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, primary_exp -> .String  | Decrement, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RBrack, unary_exp -> Decrement .unary_exp  | Question, unary_exp -> Decrement .unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, postfix_exp -> .postfix_exp Increment  | Percent, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> Decrement .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .ID  | Comma, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Times, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | Percent, unary_exp -> Decrement .unary_exp  | AND, primary_exp -> .String  | RBrack, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, unary_exp -> Decrement .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_exp -> Decrement .unary_exp  | OR, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, unary_exp -> Decrement .unary_exp  | Assign, primary_exp -> .ID  | Times, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, unary_exp -> .Decrement unary_exp  | RBrack, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | RBrack, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .primary_exp  | Ampersand, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> .Number  | RBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, unary_exp -> Decrement .unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Increment  | RBrack, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, unary_exp -> Decrement .unary_exp  | Times, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .primary_exp  | RBrack, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Decrement, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | LBrack, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, unary_exp -> Decrement .unary_exp  | RightShift, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> Decrement .unary_exp  | RBrack, unary_exp -> Decrement .unary_exp  | GT, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, unary_exp -> .Increment unary_exp  | Question, unary_exp -> .postfix_exp  | LeftShift, )
294 <- (218, 'ID') (primary_exp -> ID.  | Minus, primary_exp -> ID.  | NEQ, primary_exp -> ID.  | LeftShift, primary_exp -> ID.  | RBrack, primary_exp -> ID.  | OR, primary_exp -> ID.  | Comma, primary_exp -> ID.  | Times, primary_exp -> ID.  | Percent, primary_exp -> ID.  | RightShift, primary_exp -> ID.  | Question, primary_exp -> ID.  | LE, primary_exp -> ID.  | GE, primary_exp -> ID.  | LT, primary_exp -> ID.  | VerticalBar, primary_exp -> ID.  | GT, primary_exp -> ID.  | EQ, primary_exp -> ID.  | Increment, primary_exp -> ID.  | Divide, primary_exp -> ID.  | Decrement, primary_exp -> ID.  | AND, primary_exp -> ID.  | LParen, primary_exp -> ID.  | Ampersand, primary_exp -> ID.  | Caret, primary_exp -> ID.  | LBrack, primary_exp -> ID.  | Plus, primary_exp -> ID.  | Dot, primary_exp -> ID.  | Assign, )
295 <- (218, 'Increment') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, unary_exp -> Increment .unary_exp  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_exp -> Increment .unary_exp  | Minus, unary_op -> .NOT  | Tilde, unary_exp -> Increment .unary_exp  | Question, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | RightShift, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RBrack, unary_op -> .Plus  | ID, unary_exp -> Increment .unary_exp  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, unary_exp -> Increment .unary_exp  | EQ, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, primary_exp -> .ID  | RBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_exp -> Increment .unary_exp  | Plus, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, unary_exp -> Increment .unary_exp  | RBrack, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Percent, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .String  | Dot, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, postfix_exp -> .postfix_exp Decrement  | RBrack, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, unary_exp -> .postfix_exp  | RBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Increment  | Question, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, primary_exp -> .String  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | RBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, primary_exp -> .ID  | LeftShift, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, postfix_exp -> .postfix_exp LParen RParen  | RBrack, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, unary_exp -> .postfix_exp  | GT, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, primary_exp -> .Number  | Plus, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Times, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_op -> .Tilde  | Number, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Divide, unary_exp -> Increment .unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> Increment .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> .Decrement unary_exp  | RBrack, unary_exp -> Increment .unary_exp  | Assign, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | RBrack, primary_exp -> .String  | Question, primary_exp -> .Number  | Percent, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, primary_exp -> .ID  | Assign, unary_exp -> Increment .unary_exp  | AND, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> Increment .unary_exp  | LE, unary_exp -> Increment .unary_exp  | RightShift, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, unary_exp -> .postfix_exp  | VerticalBar, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, unary_exp -> Increment .unary_exp  | GT, postfix_exp -> .postfix_exp Increment  | Minus, unary_exp -> .Increment unary_exp  | AND, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, unary_exp -> Increment .unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .unary_op unary_exp  | RBrack, primary_exp -> .LParen exp RParen  | Minus, postfix_exp -> .primary_exp  | GT, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, postfix_exp -> .postfix_exp Increment  | Percent, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, postfix_exp -> .primary_exp  | Plus, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, unary_exp -> Increment .unary_exp  | LT, primary_exp -> .Number  | Minus, unary_exp -> Increment .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | Percent, primary_exp -> .String  | RBrack, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> Increment .unary_exp  | Divide, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_op -> .Tilde  | ID, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, unary_exp -> Increment .unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Divide, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, postfix_exp -> .primary_exp  | Decrement, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, unary_op -> .NOT  | NOT, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | RBrack, primary_exp -> .Number  | LE, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .primary_exp  | Ampersand, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> .Number  | RBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Increment  | RBrack, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .primary_exp  | RBrack, primary_exp -> .ID  | Increment, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> Increment .unary_exp  | NEQ, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Decrement, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, unary_exp -> Increment .unary_exp  | Comma, postfix_exp -> .postfix_exp Increment  | LBrack, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, unary_exp -> .Increment unary_exp  | RBrack, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, unary_exp -> Increment .unary_exp  | Times, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .String  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, unary_exp -> .Increment unary_exp  | Question, unary_exp -> .postfix_exp  | LeftShift, )
296 <- (218, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, primary_exp -> .LParen exp RParen  | RightShift, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, primary_exp -> LParen .exp RParen  | Dot, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp Dot ID  | Decrement, unary_exp -> .Decrement unary_exp  | Ampersand, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, primary_exp -> LParen .exp RParen  | LBrack, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, postfix_exp -> .postfix_exp LParen RParen  | RParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .Increment unary_exp  | Ampersand, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, postfix_exp -> .primary_exp  | LT, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, primary_exp -> LParen .exp RParen  | Decrement, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, conditional_exp -> .binary_exp  | Comma, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> LParen .exp RParen  | RBrack, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> LParen .exp RParen  | GT, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, primary_exp -> LParen .exp RParen  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, binary_exp -> .unary_exp  | LE, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .String  | Question, primary_exp -> LParen .exp RParen  | Percent, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> LParen .exp RParen  | GE, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, primary_exp -> LParen .exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, exp -> .assignment_exp  | RParen, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> LParen .exp RParen  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, primary_exp -> LParen .exp RParen  | Assign, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, primary_exp -> LParen .exp RParen  | Ampersand, primary_exp -> LParen .exp RParen  | Plus, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen RParen  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Increment, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, primary_exp -> LParen .exp RParen  | Increment, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> LParen .exp RParen  | NEQ, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .unary_exp  | Plus, primary_exp -> LParen .exp RParen  | Divide, unary_exp -> .unary_op unary_exp  | Ampersand, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Minus  | Number, primary_exp -> .Number  | Percent, assignment_exp -> .conditional_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, primary_exp -> LParen .exp RParen  | Comma, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, primary_exp -> .Number  | RParen, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, primary_exp -> LParen .exp RParen  | Minus, exp -> .exp Comma assignment_exp  | RParen, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, primary_exp -> LParen .exp RParen  | Caret, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, primary_exp -> LParen .exp RParen  | OR, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> LParen .exp RParen  | LeftShift, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp Decrement  | Assign, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, primary_exp -> .Number  | Dot, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .Decrement unary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | RParen, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, primary_exp -> LParen .exp RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .postfix_exp  | RParen, primary_exp -> LParen .exp RParen  | LE, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, primary_exp -> LParen .exp RParen  | Times, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, primary_exp -> LParen .exp RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> LParen .exp RParen  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, primary_exp -> LParen .exp RParen  | VerticalBar, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .unary_op unary_exp  | Assign, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .postfix_exp  | Comma, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
297 <- (218, 'Number') (primary_exp -> Number.  | Increment, primary_exp -> Number.  | Question, primary_exp -> Number.  | Divide, primary_exp -> Number.  | Ampersand, primary_exp -> Number.  | Plus, primary_exp -> Number.  | LE, primary_exp -> Number.  | Decrement, primary_exp -> Number.  | Caret, primary_exp -> Number.  | Percent, primary_exp -> Number.  | VerticalBar, primary_exp -> Number.  | LParen, primary_exp -> Number.  | Comma, primary_exp -> Number.  | GT, primary_exp -> Number.  | AND, primary_exp -> Number.  | GE, primary_exp -> Number.  | RBrack, primary_exp -> Number.  | OR, primary_exp -> Number.  | Minus, primary_exp -> Number.  | LBrack, primary_exp -> Number.  | RightShift, primary_exp -> Number.  | Dot, primary_exp -> Number.  | LT, primary_exp -> Number.  | LeftShift, primary_exp -> Number.  | Assign, primary_exp -> Number.  | NEQ, primary_exp -> Number.  | Times, primary_exp -> Number.  | EQ, )
298 <- (218, 'String') (primary_exp -> String.  | Plus, primary_exp -> String.  | Ampersand, primary_exp -> String.  | AND, primary_exp -> String.  | Comma, primary_exp -> String.  | Caret, primary_exp -> String.  | LeftShift, primary_exp -> String.  | Dot, primary_exp -> String.  | LE, primary_exp -> String.  | EQ, primary_exp -> String.  | RightShift, primary_exp -> String.  | Increment, primary_exp -> String.  | LParen, primary_exp -> String.  | Minus, primary_exp -> String.  | Question, primary_exp -> String.  | GE, primary_exp -> String.  | GT, primary_exp -> String.  | OR, primary_exp -> String.  | Divide, primary_exp -> String.  | VerticalBar, primary_exp -> String.  | NEQ, primary_exp -> String.  | LBrack, primary_exp -> String.  | Percent, primary_exp -> String.  | Assign, primary_exp -> String.  | LT, primary_exp -> String.  | Times, primary_exp -> String.  | Decrement, primary_exp -> String.  | RBrack, )
299 <- (218, 'assignment_exp') (exp -> assignment_exp.  | RBrack, exp -> assignment_exp.  | Comma, )
300 <- (218, 'binary_exp') (binary_op -> .GE  | LParen, binary_op -> .LE  | ID, binary_op -> .LeftShift  | Increment, binary_op -> .VerticalBar  | Number, binary_op -> .Caret  | LParen, binary_op -> .Times  | String, binary_op -> .Times  | Decrement, binary_op -> .NEQ  | String, binary_op -> .LE  | Plus, binary_op -> .OR  | Increment, binary_op -> .LeftShift  | Decrement, binary_exp -> binary_exp .binary_op unary_exp  | Ampersand, binary_op -> .RightShift  | Increment, binary_op -> .RightShift  | String, binary_op -> .Minus  | Decrement, binary_op -> .Times  | LParen, binary_op -> .Percent  | Increment, binary_op -> .Divide  | Tilde, binary_exp -> binary_exp .binary_op unary_exp  | Comma, binary_exp -> binary_exp .binary_op unary_exp  | Percent, binary_op -> .Minus  | String, binary_exp -> binary_exp .binary_op unary_exp  | GE, binary_op -> .Caret  | ID, binary_op -> .LeftShift  | Number, binary_op -> .EQ  | Plus, conditional_exp -> binary_exp .Question exp Colon conditional_exp  | RBrack, binary_op -> .GE  | NOT, binary_op -> .OR  | Tilde, binary_op -> .GT  | Minus, binary_op -> .LT  | Number, binary_op -> .VerticalBar  | Decrement, binary_op -> .VerticalBar  | String, binary_op -> .Caret  | Plus, binary_op -> .VerticalBar  | LParen, binary_op -> .GE  | Minus, binary_op -> .VerticalBar  | Plus, binary_op -> .GT  | Increment, binary_op -> .Plus  | LParen, binary_exp -> binary_exp .binary_op unary_exp  | Minus, binary_op -> .Plus  | ID, binary_op -> .Minus  | Plus, binary_op -> .Ampersand  | NOT, binary_op -> .Times  | Tilde, binary_op -> .Percent  | Tilde, binary_op -> .Plus  | NOT, binary_op -> .GE  | Decrement, binary_exp -> binary_exp .binary_op unary_exp  | Caret, binary_op -> .EQ  | NOT, binary_op -> .EQ  | Tilde, binary_op -> .VerticalBar  | Tilde, binary_op -> .Ampersand  | Increment, conditional_exp -> binary_exp.  | RBrack, binary_op -> .LT  | NOT, binary_op -> .VerticalBar  | Minus, binary_op -> .Caret  | String, binary_op -> .Times  | ID, binary_op -> .Divide  | NOT, binary_op -> .AND  | Number, binary_op -> .LT  | Decrement, binary_op -> .RightShift  | Decrement, binary_op -> .RightShift  | Plus, binary_op -> .NEQ  | ID, binary_op -> .OR  | NOT, binary_op -> .GT  | Plus, binary_op -> .VerticalBar  | Increment, binary_op -> .EQ  | Number, binary_exp -> binary_exp .binary_op unary_exp  | EQ, binary_op -> .Plus  | Minus, binary_op -> .LE  | LParen, binary_op -> .LeftShift  | Minus, binary_op -> .GE  | Increment, binary_exp -> binary_exp .binary_op unary_exp  | AND, binary_op -> .Divide  | String, binary_op -> .Divide  | Increment, binary_exp -> binary_exp .binary_op unary_exp  | LE, binary_exp -> binary_exp .binary_op unary_exp  | GT, binary_op -> .GT  | Number, binary_op -> .Caret  | Number, binary_op -> .Times  | Plus, binary_op -> .LE  | String, binary_op -> .GT  | LParen, binary_op -> .NEQ  | Increment, binary_op -> .AND  | Minus, binary_op -> .LeftShift  | NOT, binary_op -> .OR  | Minus, binary_op -> .Caret  | Minus, binary_op -> .Times  | Number, binary_exp -> binary_exp .binary_op unary_exp  | Divide, binary_op -> .Ampersand  | Number, binary_op -> .RightShift  | ID, binary_op -> .Ampersand  | String, binary_op -> .RightShift  | NOT, binary_op -> .Caret  | Tilde, binary_op -> .OR  | Number, conditional_exp -> binary_exp .Question exp Colon conditional_exp  | Comma, binary_op -> .Divide  | Decrement, binary_op -> .GT  | NOT, binary_op -> .Ampersand  | Plus, binary_op -> .Divide  | Plus, binary_op -> .Percent  | Number, binary_op -> .EQ  | LParen, binary_op -> .LeftShift  | String, binary_op -> .Ampersand  | LParen, binary_op -> .Percent  | String, binary_exp -> binary_exp .binary_op unary_exp  | LeftShift, binary_op -> .OR  | Decrement, binary_op -> .LeftShift  | Tilde, binary_op -> .NEQ  | Minus, binary_op -> .LE  | Minus, binary_op -> .Percent  | ID, binary_op -> .RightShift  | LParen, binary_exp -> binary_exp .binary_op unary_exp  | RBrack, binary_op -> .Minus  | NOT, binary_exp -> binary_exp .binary_op unary_exp  | Question, binary_op -> .LE  | Decrement, binary_op -> .Plus  | String, binary_op -> .GE  | Tilde, binary_op -> .NEQ  | LParen, binary_op -> .Times  | NOT, binary_op -> .LE  | Tilde, binary_op -> .GT  | ID, binary_op -> .Minus  | Increment, binary_op -> .EQ  | ID, binary_op -> .LE  | Number, binary_op -> .NEQ  | Decrement, binary_op -> .Percent  | Decrement, binary_op -> .Ampersand  | ID, binary_op -> .NEQ  | Plus, binary_op -> .Percent  | NOT, binary_exp -> binary_exp .binary_op unary_exp  | OR, binary_op -> .GT  | Decrement, binary_op -> .LE  | NOT, binary_op -> .LT  | String, binary_op -> .EQ  | Minus, binary_op -> .Minus  | Tilde, binary_exp -> binary_exp .binary_op unary_exp  | VerticalBar, binary_exp -> binary_exp .binary_op unary_exp  | Plus, binary_op -> .AND  | String, binary_op -> .GE  | Plus, binary_op -> .NEQ  | NOT, binary_op -> .Divide  | Minus, binary_op -> .LE  | Increment, binary_op -> .GT  | String, binary_exp -> binary_exp .binary_op unary_exp  | Times, binary_op -> .Plus  | Increment, binary_op -> .AND  | ID, binary_op -> .EQ  | Increment, binary_op -> .VerticalBar  | ID, binary_op -> .Minus  | Minus, binary_op -> .Divide  | Number, binary_op -> .NEQ  | Number, binary_op -> .RightShift  | Minus, binary_op -> .LT  | Tilde, binary_exp -> binary_exp .binary_op unary_exp  | LT, binary_op -> .LT  | Plus, binary_op -> .AND  | Plus, binary_op -> .Ampersand  | Minus, binary_op -> .Plus  | Number, binary_op -> .Plus  | Decrement, binary_op -> .Ampersand  | Decrement, binary_op -> .Minus  | ID, binary_op -> .LeftShift  | Plus, binary_op -> .AND  | Decrement, binary_op -> .LT  | Increment, binary_op -> .Plus  | Plus, binary_op -> .OR  | ID, binary_op -> .LeftShift  | LParen, binary_op -> .GE  | Number, binary_op -> .Divide  | ID, binary_op -> .Minus  | LParen, binary_op -> .Percent  | Minus, binary_op -> .OR  | String, binary_exp -> binary_exp .binary_op unary_exp  | NEQ, binary_op -> .LT  | LParen, binary_op -> .Caret  | Increment, binary_op -> .GE  | String, binary_op -> .AND  | Increment, binary_op -> .EQ  | String, binary_op -> .Percent  | Plus, binary_op -> .Caret  | Decrement, binary_op -> .AND  | Tilde, binary_op -> .Times  | Minus, binary_op -> .RightShift  | Tilde, binary_op -> .OR  | Plus, binary_op -> .RightShift  | Number, binary_op -> .GT  | Tilde, binary_op -> .EQ  | Decrement, conditional_exp -> binary_exp.  | Comma, binary_op -> .LeftShift  | ID, binary_op -> .AND  | LParen, binary_op -> .LT  | Minus, binary_op -> .Caret  | NOT, binary_op -> .NEQ  | Tilde, binary_op -> .LT  | ID, binary_op -> .Divide  | LParen, binary_exp -> binary_exp .binary_op unary_exp  | RightShift, binary_op -> .AND  | NOT, binary_op -> .Minus  | Number, binary_op -> .OR  | LParen, binary_op -> .GE  | ID, binary_op -> .Ampersand  | Tilde, binary_op -> .Percent  | LParen, binary_op -> .Times  | Increment, binary_op -> .Plus  | Tilde, binary_op -> .VerticalBar  | NOT, )
301 <- (218, 'conditional_exp') (assignment_exp -> conditional_exp.  | RBrack, assignment_exp -> conditional_exp.  | Comma, )
302 <- (218, 'exp') (postfix_exp -> postfix_exp LBrack exp .RBrack  | Caret, postfix_exp -> postfix_exp LBrack exp .RBrack  | Assign, postfix_exp -> postfix_exp LBrack exp .RBrack  | Question, postfix_exp -> postfix_exp LBrack exp .RBrack  | EQ, postfix_exp -> postfix_exp LBrack exp .RBrack  | LBrack, postfix_exp -> postfix_exp LBrack exp .RBrack  | AND, postfix_exp -> postfix_exp LBrack exp .RBrack  | Decrement, postfix_exp -> postfix_exp LBrack exp .RBrack  | LeftShift, exp -> exp .Comma assignment_exp  | RBrack, postfix_exp -> postfix_exp LBrack exp .RBrack  | Percent, postfix_exp -> postfix_exp LBrack exp .RBrack  | Increment, postfix_exp -> postfix_exp LBrack exp .RBrack  | Ampersand, postfix_exp -> postfix_exp LBrack exp .RBrack  | RightShift, postfix_exp -> postfix_exp LBrack exp .RBrack  | OR, postfix_exp -> postfix_exp LBrack exp .RBrack  | Divide, postfix_exp -> postfix_exp LBrack exp .RBrack  | Minus, postfix_exp -> postfix_exp LBrack exp .RBrack  | GT, postfix_exp -> postfix_exp LBrack exp .RBrack  | Comma, postfix_exp -> postfix_exp LBrack exp .RBrack  | NEQ, postfix_exp -> postfix_exp LBrack exp .RBrack  | Semicolon, postfix_exp -> postfix_exp LBrack exp .RBrack  | Plus, postfix_exp -> postfix_exp LBrack exp .RBrack  | LParen, postfix_exp -> postfix_exp LBrack exp .RBrack  | LT, postfix_exp -> postfix_exp LBrack exp .RBrack  | Times, postfix_exp -> postfix_exp LBrack exp .RBrack  | LE, postfix_exp -> postfix_exp LBrack exp .RBrack  | VerticalBar, exp -> exp .Comma assignment_exp  | Comma, postfix_exp -> postfix_exp LBrack exp .RBrack  | GE, postfix_exp -> postfix_exp LBrack exp .RBrack  | Dot, )
303 <- (218, 'postfix_exp') (unary_exp -> postfix_exp.  | Ampersand, postfix_exp -> postfix_exp .Decrement  | GT, postfix_exp -> postfix_exp .LBrack exp RBrack  | Plus, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | OR, postfix_exp -> postfix_exp .LParen RParen  | OR, postfix_exp -> postfix_exp .LParen RParen  | Assign, postfix_exp -> postfix_exp .Increment  | Divide, postfix_exp -> postfix_exp .LParen RParen  | EQ, postfix_exp -> postfix_exp .LParen RParen  | Caret, postfix_exp -> postfix_exp .Increment  | VerticalBar, unary_exp -> postfix_exp.  | Comma, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Comma, postfix_exp -> postfix_exp .Dot ID  | Assign, postfix_exp -> postfix_exp .Increment  | LeftShift, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Percent, postfix_exp -> postfix_exp .Dot ID  | Dot, postfix_exp -> postfix_exp .LParen RParen  | Minus, postfix_exp -> postfix_exp .Dot ID  | GT, postfix_exp -> postfix_exp .LParen RParen  | NEQ, postfix_exp -> postfix_exp .LParen RParen  | Percent, postfix_exp -> postfix_exp .Decrement  | Caret, postfix_exp -> postfix_exp .LBrack exp RBrack  | LE, postfix_exp -> postfix_exp .Decrement  | RightShift, postfix_exp -> postfix_exp .LParen RParen  | AND, postfix_exp -> postfix_exp .Decrement  | LT, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Minus, unary_exp -> postfix_exp.  | Divide, postfix_exp -> postfix_exp .Decrement  | Assign, postfix_exp -> postfix_exp .Increment  | Minus, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Decrement, postfix_exp -> postfix_exp .Increment  | Percent, postfix_exp -> postfix_exp .Dot ID  | VerticalBar, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | EQ, postfix_exp -> postfix_exp .Increment  | Question, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> postfix_exp .Dot ID  | Times, postfix_exp -> postfix_exp .Decrement  | GE, postfix_exp -> postfix_exp .Increment  | EQ, unary_exp -> postfix_exp.  | Question, postfix_exp -> postfix_exp .LParen RParen  | LT, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | NEQ, postfix_exp -> postfix_exp .Decrement  | Divide, postfix_exp -> postfix_exp .LBrack exp RBrack  | RBrack, postfix_exp -> postfix_exp .Dot ID  | Divide, unary_exp -> postfix_exp.  | LeftShift, postfix_exp -> postfix_exp .Decrement  | Dot, postfix_exp -> postfix_exp .Dot ID  | Minus, postfix_exp -> postfix_exp .LBrack exp RBrack  | LT, unary_exp -> postfix_exp.  | OR, postfix_exp -> postfix_exp .Decrement  | Increment, postfix_exp -> postfix_exp .LBrack exp RBrack  | Question, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | GE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LT, unary_exp -> postfix_exp.  | LE, unary_exp -> postfix_exp.  | Times, postfix_exp -> postfix_exp .LBrack exp RBrack  | EQ, postfix_exp -> postfix_exp .Dot ID  | Comma, postfix_exp -> postfix_exp .Increment  | OR, postfix_exp -> postfix_exp .Decrement  | LE, postfix_exp -> postfix_exp .LBrack exp RBrack  | LBrack, postfix_exp -> postfix_exp .LBrack exp RBrack  | GT, postfix_exp -> postfix_exp .Dot ID  | LE, postfix_exp -> postfix_exp .Decrement  | EQ, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Divide, postfix_exp -> postfix_exp .LParen RParen  | Times, postfix_exp -> postfix_exp .LParen RParen  | LE, postfix_exp -> postfix_exp .LParen RParen  | LParen, postfix_exp -> postfix_exp .Dot ID  | Plus, unary_exp -> postfix_exp.  | LT, postfix_exp -> postfix_exp .Dot ID  | LBrack, postfix_exp -> postfix_exp .LBrack exp RBrack  | Dot, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LParen, postfix_exp -> postfix_exp .LBrack exp RBrack  | VerticalBar, postfix_exp -> postfix_exp .LBrack exp RBrack  | OR, postfix_exp -> postfix_exp .Increment  | Decrement, postfix_exp -> postfix_exp .Decrement  | Minus, postfix_exp -> postfix_exp .Increment  | LT, postfix_exp -> postfix_exp .Increment  | Caret, postfix_exp -> postfix_exp .Increment  | LE, postfix_exp -> postfix_exp .Increment  | Times, postfix_exp -> postfix_exp .Decrement  | Decrement, postfix_exp -> postfix_exp .Dot ID  | NEQ, postfix_exp -> postfix_exp .LBrack exp RBrack  | LeftShift, postfix_exp -> postfix_exp .Increment  | Comma, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LeftShift, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Caret, postfix_exp -> postfix_exp .LParen RParen  | LBrack, postfix_exp -> postfix_exp .Decrement  | NEQ, unary_exp -> postfix_exp.  | GE, postfix_exp -> postfix_exp .LBrack exp RBrack  | AND, postfix_exp -> postfix_exp .LBrack exp RBrack  | Decrement, postfix_exp -> postfix_exp .Decrement  | Percent, unary_exp -> postfix_exp.  | Assign, postfix_exp -> postfix_exp .Increment  | Plus, postfix_exp -> postfix_exp .Increment  | AND, postfix_exp -> postfix_exp .LParen RParen  | RBrack, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | RBrack, postfix_exp -> postfix_exp .Decrement  | VerticalBar, postfix_exp -> postfix_exp .Dot ID  | GE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | AND, postfix_exp -> postfix_exp .Dot ID  | Ampersand, postfix_exp -> postfix_exp .LBrack exp RBrack  | Divide, postfix_exp -> postfix_exp .Decrement  | RBrack, postfix_exp -> postfix_exp .Dot ID  | LParen, unary_exp -> postfix_exp.  | Minus, postfix_exp -> postfix_exp .Dot ID  | RightShift, postfix_exp -> postfix_exp .LBrack exp RBrack  | Increment, postfix_exp -> postfix_exp .LParen RParen  | Increment, postfix_exp -> postfix_exp .Increment  | Increment, postfix_exp -> postfix_exp .Increment  | LBrack, postfix_exp -> postfix_exp .Dot ID  | Decrement, postfix_exp -> postfix_exp .Increment  | NEQ, postfix_exp -> postfix_exp .Dot ID  | Increment, postfix_exp -> postfix_exp .Increment  | Ampersand, postfix_exp -> postfix_exp .LBrack exp RBrack  | Percent, postfix_exp -> postfix_exp .Increment  | RightShift, postfix_exp -> postfix_exp .Increment  | LParen, postfix_exp -> postfix_exp .Dot ID  | Question, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Question, postfix_exp -> postfix_exp .LParen RParen  | Ampersand, postfix_exp -> postfix_exp .Dot ID  | EQ, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | RightShift, postfix_exp -> postfix_exp .Dot ID  | RBrack, postfix_exp -> postfix_exp .Decrement  | LBrack, postfix_exp -> postfix_exp .LBrack exp RBrack  | Minus, postfix_exp -> postfix_exp .LBrack exp RBrack  | Ampersand, postfix_exp -> postfix_exp .LParen RParen  | GT, postfix_exp -> postfix_exp .LBrack exp RBrack  | LParen, postfix_exp -> postfix_exp .Dot ID  | AND, postfix_exp -> postfix_exp .LParen RParen  | Comma, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | GT, postfix_exp -> postfix_exp .LParen RParen  | Dot, postfix_exp -> postfix_exp .Decrement  | Comma, postfix_exp -> postfix_exp .Decrement  | Times, postfix_exp -> postfix_exp .Decrement  | OR, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LBrack, postfix_exp -> postfix_exp .Dot ID  | LT, postfix_exp -> postfix_exp .LParen RParen  | LeftShift, unary_exp -> postfix_exp.  | VerticalBar, unary_exp -> postfix_exp.  | RBrack, postfix_exp -> postfix_exp .Decrement  | LParen, postfix_exp -> postfix_exp .Increment  | Dot, unary_exp -> postfix_exp.  | GT, postfix_exp -> postfix_exp .Dot ID  | Caret, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Ampersand, postfix_exp -> postfix_exp .LBrack exp RBrack  | Comma, postfix_exp -> postfix_exp .LBrack exp RBrack  | Assign, postfix_exp -> postfix_exp .LBrack exp RBrack  | NEQ, postfix_exp -> postfix_exp .LParen RParen  | Divide, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Dot, postfix_exp -> postfix_exp .Decrement  | AND, postfix_exp -> postfix_exp .Dot ID  | LeftShift, postfix_exp -> postfix_exp .Increment  | RBrack, unary_exp -> postfix_exp.  | NEQ, unary_exp -> postfix_exp.  | Plus, postfix_exp -> postfix_exp .LParen RParen  | Plus, postfix_exp -> postfix_exp .LParen RParen  | GE, postfix_exp -> postfix_exp .LParen RParen  | Decrement, unary_exp -> postfix_exp.  | AND, postfix_exp -> postfix_exp .LParen RParen  | VerticalBar, postfix_exp -> postfix_exp .LParen RParen  | Question, postfix_exp -> postfix_exp .Decrement  | Question, postfix_exp -> postfix_exp .Increment  | GE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Assign, postfix_exp -> postfix_exp .LBrack exp RBrack  | Times, postfix_exp -> postfix_exp .LBrack exp RBrack  | GE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Plus, postfix_exp -> postfix_exp .Decrement  | Plus, postfix_exp -> postfix_exp .Decrement  | Ampersand, postfix_exp -> postfix_exp .Increment  | GT, postfix_exp -> postfix_exp .LBrack exp RBrack  | Caret, unary_exp -> postfix_exp.  | Caret, postfix_exp -> postfix_exp .LBrack exp RBrack  | RightShift, postfix_exp -> postfix_exp .Decrement  | LeftShift, postfix_exp -> postfix_exp .Dot ID  | Percent, postfix_exp -> postfix_exp .Dot ID  | OR, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Times, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Increment, unary_exp -> postfix_exp.  | EQ, unary_exp -> postfix_exp.  | RightShift, postfix_exp -> postfix_exp .LParen RParen  | RightShift, postfix_exp -> postfix_exp .Increment  | Assign, unary_exp -> postfix_exp.  | Percent, )
304 <- (218, 'primary_exp') (postfix_exp -> primary_exp.  | LBrack, postfix_exp -> primary_exp.  | OR, postfix_exp -> primary_exp.  | LE, postfix_exp -> primary_exp.  | Decrement, postfix_exp -> primary_exp.  | Times, postfix_exp -> primary_exp.  | Comma, postfix_exp -> primary_exp.  | Question, postfix_exp -> primary_exp.  | LeftShift, postfix_exp -> primary_exp.  | Assign, postfix_exp -> primary_exp.  | Caret, postfix_exp -> primary_exp.  | AND, postfix_exp -> primary_exp.  | Divide, postfix_exp -> primary_exp.  | RBrack, postfix_exp -> primary_exp.  | LParen, postfix_exp -> primary_exp.  | EQ, postfix_exp -> primary_exp.  | Minus, postfix_exp -> primary_exp.  | Percent, postfix_exp -> primary_exp.  | Dot, postfix_exp -> primary_exp.  | VerticalBar, postfix_exp -> primary_exp.  | LT, postfix_exp -> primary_exp.  | GT, postfix_exp -> primary_exp.  | GE, postfix_exp -> primary_exp.  | Increment, postfix_exp -> primary_exp.  | RightShift, postfix_exp -> primary_exp.  | Ampersand, postfix_exp -> primary_exp.  | Plus, postfix_exp -> primary_exp.  | NEQ, )
305 <- (218, 'unary_exp') (binary_exp -> unary_exp.  | Percent, assignment_exp -> unary_exp .assignment_op assignment_exp  | Comma, binary_exp -> unary_exp.  | GE, assignment_op -> .Assign  | String, binary_exp -> unary_exp.  | Comma, binary_exp -> unary_exp.  | Minus, assignment_op -> .Assign  | Number, binary_exp -> unary_exp.  | GT, binary_exp -> unary_exp.  | LeftShift, binary_exp -> unary_exp.  | AND, binary_exp -> unary_exp.  | LE, binary_exp -> unary_exp.  | LT, binary_exp -> unary_exp.  | RightShift, assignment_op -> .Assign  | Decrement, binary_exp -> unary_exp.  | RBrack, assignment_op -> .Assign  | LParen, binary_exp -> unary_exp.  | NEQ, binary_exp -> unary_exp.  | Ampersand, binary_exp -> unary_exp.  | VerticalBar, binary_exp -> unary_exp.  | Caret, assignment_op -> .Assign  | ID, assignment_op -> .Assign  | NOT, binary_exp -> unary_exp.  | Times, assignment_op -> .Assign  | Plus, assignment_op -> .Assign  | Increment, binary_exp -> unary_exp.  | EQ, assignment_exp -> unary_exp .assignment_op assignment_exp  | RBrack, assignment_op -> .Assign  | Minus, binary_exp -> unary_exp.  | Question, binary_exp -> unary_exp.  | OR, assignment_op -> .Assign  | Tilde, binary_exp -> unary_exp.  | Divide, binary_exp -> unary_exp.  | Plus, )
306 <- (218, 'unary_op') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_op -> .Tilde  | String, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | RightShift, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RBrack, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, unary_exp -> unary_op .unary_exp  | Ampersand, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, primary_exp -> .ID  | RBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, unary_exp -> unary_op .unary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, unary_exp -> .unary_op unary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_exp -> unary_op .unary_exp  | Minus, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .ID  | VerticalBar, primary_exp -> .Number  | RBrack, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, unary_exp -> unary_op .unary_exp  | NEQ, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, postfix_exp -> .postfix_exp Decrement  | RBrack, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, unary_exp -> unary_op .unary_exp  | LE, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, unary_exp -> .postfix_exp  | RBrack, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Increment  | Question, unary_exp -> .Decrement unary_exp  | Question, unary_exp -> unary_op .unary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> unary_op .unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, unary_exp -> unary_op .unary_exp  | LeftShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | RBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> unary_op .unary_exp  | Divide, primary_exp -> .ID  | LeftShift, unary_exp -> unary_op .unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp LParen RParen  | OR, postfix_exp -> .postfix_exp LParen RParen  | RBrack, primary_exp -> .LParen exp RParen  | GE, unary_exp -> .postfix_exp  | GT, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> unary_op .unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_op -> .Minus  | Decrement, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> .Increment unary_exp  | RBrack, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> .Decrement unary_exp  | RBrack, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | RBrack, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Percent, unary_exp -> unary_op .unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, unary_exp -> unary_op .unary_exp  | Percent, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> unary_op .unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .unary_op unary_exp  | RBrack, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, primary_exp -> .Number  | Plus, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> unary_op .unary_exp  | Question, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | Percent, primary_exp -> .String  | RBrack, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | Percent, unary_exp -> unary_op .unary_exp  | Assign, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, unary_exp -> unary_op .unary_exp  | GT, primary_exp -> .String  | Times, unary_exp -> unary_op .unary_exp  | Plus, unary_exp -> unary_op .unary_exp  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | GE, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | RBrack, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> unary_op .unary_exp  | RBrack, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .String  | GE, postfix_exp -> .postfix_exp Increment  | Dot, unary_exp -> unary_op .unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | RBrack, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .primary_exp  | RBrack, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Decrement, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | LBrack, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, unary_exp -> unary_op .unary_exp  | RightShift, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, unary_exp -> .Increment unary_exp  | Question, unary_exp -> .postfix_exp  | LeftShift, )
307 <- (219, 'RParen') (postfix_exp -> postfix_exp LParen RParen.  | Semicolon, postfix_exp -> postfix_exp LParen RParen.  | GE, postfix_exp -> postfix_exp LParen RParen.  | Decrement, postfix_exp -> postfix_exp LParen RParen.  | Comma, postfix_exp -> postfix_exp LParen RParen.  | Divide, postfix_exp -> postfix_exp LParen RParen.  | Question, postfix_exp -> postfix_exp LParen RParen.  | LE, postfix_exp -> postfix_exp LParen RParen.  | LT, postfix_exp -> postfix_exp LParen RParen.  | LeftShift, postfix_exp -> postfix_exp LParen RParen.  | Percent, postfix_exp -> postfix_exp LParen RParen.  | Assign, postfix_exp -> postfix_exp LParen RParen.  | GT, postfix_exp -> postfix_exp LParen RParen.  | RightShift, postfix_exp -> postfix_exp LParen RParen.  | Ampersand, postfix_exp -> postfix_exp LParen RParen.  | Minus, postfix_exp -> postfix_exp LParen RParen.  | Plus, postfix_exp -> postfix_exp LParen RParen.  | LParen, postfix_exp -> postfix_exp LParen RParen.  | OR, postfix_exp -> postfix_exp LParen RParen.  | NEQ, postfix_exp -> postfix_exp LParen RParen.  | LBrack, postfix_exp -> postfix_exp LParen RParen.  | Increment, postfix_exp -> postfix_exp LParen RParen.  | Caret, postfix_exp -> postfix_exp LParen RParen.  | AND, postfix_exp -> postfix_exp LParen RParen.  | Dot, postfix_exp -> postfix_exp LParen RParen.  | EQ, postfix_exp -> postfix_exp LParen RParen.  | Times, postfix_exp -> postfix_exp LParen RParen.  | VerticalBar, )
308 <- (219, 'argument_exp_list') (postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LBrack, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | GE, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | NEQ, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Times, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Plus, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Divide, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | GT, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Increment, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | EQ, argument_exp_list -> argument_exp_list .Comma assignment_exp  | RParen, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | VerticalBar, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Assign, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LT, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Dot, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Decrement, argument_exp_list -> argument_exp_list .Comma assignment_exp  | Comma, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Caret, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Percent, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LeftShift, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | RightShift, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LParen, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Question, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Minus, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Semicolon, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | OR, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Comma, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Ampersand, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LE, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | AND, )
309 <- (219, 'assignment_exp') (argument_exp_list -> assignment_exp.  | RParen, argument_exp_list -> assignment_exp.  | Comma, )
310 <- (224, 'assignment_exp') (assignment_exp -> unary_exp assignment_op assignment_exp.  | Semicolon, assignment_exp -> unary_exp assignment_op assignment_exp.  | Comma, )
311 <- (226, 'exp') (iteration_stm -> while LParen exp .RParen stm  | LParen, iteration_stm -> while LParen exp .RParen stm  | -continue-, iteration_stm -> while LParen exp .RParen stm  | -return-, iteration_stm -> while LParen exp .RParen stm  | -struct-, iteration_stm -> while LParen exp .RParen stm  | NOT, iteration_stm -> while LParen exp .RParen stm  | -int-, iteration_stm -> while LParen exp .RParen stm  | -fixed4-, iteration_stm -> while LParen exp .RParen stm  | -float2-, iteration_stm -> while LParen exp .RParen stm  | -half4-, iteration_stm -> while LParen exp .RParen stm  | LBrace, iteration_stm -> while LParen exp .RParen stm  | break, iteration_stm -> while LParen exp .RParen stm  | String, iteration_stm -> while LParen exp .RParen stm  | -fixed3-, iteration_stm -> while LParen exp .RParen stm  | Tilde, iteration_stm -> while LParen exp .RParen stm  | -char-, iteration_stm -> while LParen exp .RParen stm  | -float-, iteration_stm -> while LParen exp .RParen stm  | -void-, iteration_stm -> while LParen exp .RParen stm  | -double-, exp -> exp .Comma assignment_exp  | Comma, iteration_stm -> while LParen exp .RParen stm  | -float3-, iteration_stm -> while LParen exp .RParen stm  | -do-, iteration_stm -> while LParen exp .RParen stm  | if, iteration_stm -> while LParen exp .RParen stm  | ID, iteration_stm -> while LParen exp .RParen stm  | -fixed2-, iteration_stm -> while LParen exp .RParen stm  | -sampler2D-, iteration_stm -> while LParen exp .RParen stm  | -half3-, iteration_stm -> while LParen exp .RParen stm  | -short-, iteration_stm -> while LParen exp .RParen stm  | Semicolon, iteration_stm -> while LParen exp .RParen stm  | RBrace, iteration_stm -> while LParen exp .RParen stm  | -float4-, iteration_stm -> while LParen exp .RParen stm  | -half2-, iteration_stm -> while LParen exp .RParen stm  | -goto-, iteration_stm -> while LParen exp .RParen stm  | Minus, iteration_stm -> while LParen exp .RParen stm  | Increment, iteration_stm -> while LParen exp .RParen stm  | for, iteration_stm -> while LParen exp .RParen stm  | Number, exp -> exp .Comma assignment_exp  | RParen, iteration_stm -> while LParen exp .RParen stm  | Decrement, iteration_stm -> while LParen exp .RParen stm  | -uniform-, iteration_stm -> while LParen exp .RParen stm  | -long-, iteration_stm -> while LParen exp .RParen stm  | Plus, iteration_stm -> while LParen exp .RParen stm  | while, )
312 <- (227, 'parameter_dec') (parameter_list -> parameter_list Comma parameter_dec.  | Comma, parameter_list -> parameter_list Comma parameter_dec.  | RParen, )
313 <- (230, 'declarator') (declarator -> LParen declarator .RParen  | LParen, declarator -> LParen declarator .RParen  | Comma, declarator -> declarator .LParen parameter_list RParen  | LParen, declarator -> LParen declarator .RParen  | RParen, declarator -> declarator .LParen parameter_list RParen  | RParen, )
314 <- (231, 'LParen') (type_specifier -> .-fixed3-  | ID, parameter_list -> .parameter_list Comma parameter_dec  | RParen, type_specifier -> .-fixed3-  | LParen, type_specifier -> .-int-  | LParen, type_specifier -> .-short-  | LParen, type_specifier -> .typedef_name  | ID, type_specifier -> .-fixed4-  | LParen, type_specifier -> .-long-  | LParen, type_specifier -> .-float4-  | ID, type_specifier -> .-char-  | LParen, type_specifier -> .-float3-  | ID, type_specifier -> .typedef_name  | LParen, type_specifier -> .-float2-  | ID, declarator -> declarator LParen .parameter_list RParen  | Comma, type_specifier -> .-long-  | ID, type_specifier -> .-half4-  | ID, parameter_list -> .parameter_list Comma parameter_dec  | Comma, type_specifier -> .-half3-  | LParen, type_specifier -> .-short-  | ID, type_specifier -> .-float2-  | LParen, type_specifier -> .-sampler2D-  | LParen, declarator -> declarator LParen .parameter_list RParen  | RParen, declarator -> declarator LParen .parameter_list RParen  | LParen, type_specifier -> .-float-  | LParen, parameter_list -> .parameter_dec  | Comma, type_specifier -> .-void-  | ID, type_specifier -> .-double-  | LParen, type_specifier -> .-double-  | ID, parameter_list -> .parameter_dec  | RParen, parameter_dec -> .type_specifier declarator  | Comma, type_specifier -> .-half2-  | LParen, typedef_name -> .ID  | ID, type_specifier -> .-half3-  | ID, type_specifier -> .-half4-  | LParen, type_specifier -> .-fixed4-  | ID, typedef_name -> .ID  | LParen, type_specifier -> .-half2-  | ID, parameter_dec -> .type_specifier declarator  | RParen, type_specifier -> .-int-  | ID, type_specifier -> .-float3-  | LParen, type_specifier -> .-sampler2D-  | ID, type_specifier -> .-void-  | LParen, type_specifier -> .-char-  | ID, type_specifier -> .-fixed2-  | ID, type_specifier -> .-float-  | ID, type_specifier -> .-float4-  | LParen, type_specifier -> .-fixed2-  | LParen, )
315 <- (232, 'RParen') (declarator -> LParen declarator RParen.  | Semicolon, declarator -> LParen declarator RParen.  | Colon, declarator -> LParen declarator RParen.  | LParen, declarator -> LParen declarator RParen.  | Comma, )
316 <- (233, 'ID') (struct_declarator -> declarator Colon ID.  | Comma, struct_declarator -> declarator Colon ID.  | Semicolon, )
317 <- (234, 'parameter_list') (declarator -> declarator LParen parameter_list .RParen  | LParen, parameter_list -> parameter_list .Comma parameter_dec  | RParen, parameter_list -> parameter_list .Comma parameter_dec  | Comma, declarator -> declarator LParen parameter_list .RParen  | Colon, declarator -> declarator LParen parameter_list .RParen  | Comma, declarator -> declarator LParen parameter_list .RParen  | Semicolon, )
318 <- (235, 'struct_declarator') (struct_declarator_list -> struct_declarator_list Comma struct_declarator.  | Semicolon, struct_declarator_list -> struct_declarator_list Comma struct_declarator.  | Comma, )
319 <- (238, 'while') (iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | while, )
320 <- (240, 'Semicolon') (jump_stm -> -return- exp Semicolon.  | while, )
321 <- (242, 'RBrace') (compound_stm -> LBrace block_item_list RBrace.  | while, )
322 <- (244, 'exp') (exp -> exp .Comma assignment_exp  | Comma, exp -> exp .Comma assignment_exp  | Semicolon, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | while, )
323 <- (245, 'exp') (exp -> exp .Comma assignment_exp  | Comma, exp -> exp .Comma assignment_exp  | RParen, selection_stm -> if LParen exp .RParen stm  | while, selection_stm -> if LParen exp .RParen stm else stm  | while, )
324 <- (246, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -float4-, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -fixed2-, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, unary_exp -> .unary_op unary_exp  | Divide, unary_exp -> .postfix_exp  | RParen, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -int-, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_exp -> .Increment unary_exp  | Divide, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .Increment unary_exp  | Ampersand, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, postfix_exp -> .postfix_exp LParen RParen  | AND, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -char-, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -half2-, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | LBrace, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, primary_exp -> .String  | LeftShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .primary_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | break, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, binary_exp -> .unary_exp  | LE, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, unary_exp -> .postfix_exp  | LE, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, assignment_exp -> .conditional_exp  | RParen, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | ID, unary_op -> .Minus  | Number, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -fixed4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, primary_exp -> .LParen exp RParen  | Ampersand, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .String  | Comma, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -long-, postfix_exp -> .primary_exp  | LE, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -float-, exp -> .assignment_exp  | RParen, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -float3-, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -void-, binary_exp -> .unary_exp  | NEQ, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | LParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, unary_exp -> .Decrement unary_exp  | Plus, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -sampler2D-, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, postfix_exp -> .primary_exp  | Minus, unary_exp -> .unary_op unary_exp  | VerticalBar, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -uniform-, primary_exp -> .LParen exp RParen  | GT, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | Semicolon, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | Increment, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | NOT, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | Percent, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -return-, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | RParen, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .Tilde  | Number, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -half4-, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .primary_exp  | Ampersand, postfix_exp -> .primary_exp  | Increment, primary_exp -> .String  | Question, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | for, primary_exp -> .Number  | Percent, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, primary_exp -> .Number  | RParen, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | Minus, unary_op -> .NOT  | Minus, binary_exp -> .unary_exp  | AND, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, exp -> .exp Comma assignment_exp  | RParen, conditional_exp -> .binary_exp  | Comma, unary_op -> .Tilde  | Minus, unary_op -> .NOT  | Number, primary_exp -> .ID  | Assign, primary_exp -> .LParen exp RParen  | Caret, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -do-, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | while, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -float2-, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp Decrement  | Assign, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -double-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Decrement  | RParen, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | Plus, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | RParen, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | String, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, primary_exp -> .ID  | LeftShift, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | Tilde, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -continue-, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | if, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -short-, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -half3-, unary_exp -> .unary_op unary_exp  | AND, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .Number  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, unary_exp -> .postfix_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Decrement  | RightShift, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -fixed3-, primary_exp -> .String  | Divide, binary_exp -> .unary_exp  | LT, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | RBrace, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | Number, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .unary_op unary_exp  | Assign, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -goto-, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .postfix_exp Dot ID  | RParen, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -struct-, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
325 <- (247, 'exp') (exp -> exp .Comma assignment_exp  | Comma, iteration_stm -> while LParen exp .RParen stm  | while, exp -> exp .Comma assignment_exp  | RParen, )
326 <- (252, 'RParen') (primary_exp -> LParen exp RParen.  | Percent, primary_exp -> LParen exp RParen.  | Minus, primary_exp -> LParen exp RParen.  | Increment, primary_exp -> LParen exp RParen.  | Question, primary_exp -> LParen exp RParen.  | RParen, primary_exp -> LParen exp RParen.  | LT, primary_exp -> LParen exp RParen.  | GT, primary_exp -> LParen exp RParen.  | AND, primary_exp -> LParen exp RParen.  | Caret, primary_exp -> LParen exp RParen.  | Decrement, primary_exp -> LParen exp RParen.  | NEQ, primary_exp -> LParen exp RParen.  | Divide, primary_exp -> LParen exp RParen.  | Dot, primary_exp -> LParen exp RParen.  | LParen, primary_exp -> LParen exp RParen.  | GE, primary_exp -> LParen exp RParen.  | VerticalBar, primary_exp -> LParen exp RParen.  | LBrack, primary_exp -> LParen exp RParen.  | OR, primary_exp -> LParen exp RParen.  | EQ, primary_exp -> LParen exp RParen.  | LE, primary_exp -> LParen exp RParen.  | Comma, primary_exp -> LParen exp RParen.  | Times, primary_exp -> LParen exp RParen.  | Ampersand, primary_exp -> LParen exp RParen.  | RightShift, primary_exp -> LParen exp RParen.  | LeftShift, primary_exp -> LParen exp RParen.  | Assign, primary_exp -> LParen exp RParen.  | Plus, )
327 <- (253, 'exp') (conditional_exp -> binary_exp Question exp .Colon conditional_exp  | Comma, exp -> exp .Comma assignment_exp  | Comma, conditional_exp -> binary_exp Question exp .Colon conditional_exp  | RParen, exp -> exp .Comma assignment_exp  | Colon, )
328 <- (254, 'Decrement') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, unary_exp -> Decrement .unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | Caret, unary_exp -> .Decrement unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | RParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_exp -> Decrement .unary_exp  | LE, unary_op -> .NOT  | Tilde, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_exp -> Decrement .unary_exp  | VerticalBar, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_exp -> Decrement .unary_exp  | OR, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .primary_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, unary_exp -> Decrement .unary_exp  | EQ, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .ID  | VerticalBar, unary_exp -> Decrement .unary_exp  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> Decrement .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, primary_exp -> .String  | RightShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, unary_exp -> Decrement .unary_exp  | Comma, unary_exp -> .postfix_exp  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, primary_exp -> .LParen exp RParen  | LT, primary_exp -> .ID  | LeftShift, unary_exp -> Decrement .unary_exp  | LT, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .Number  | RParen, unary_exp -> .postfix_exp  | GT, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .primary_exp  | LParen, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, primary_exp -> .Number  | Plus, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_op -> .Plus  | Minus, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, unary_exp -> Decrement .unary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> Decrement .unary_exp  | GE, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Ampersand, postfix_exp -> .primary_exp  | Increment, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, primary_exp -> .LParen exp RParen  | GE, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, unary_exp -> .unary_op unary_exp  | GE, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, unary_exp -> Decrement .unary_exp  | Question, unary_exp -> Decrement .unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | RParen, primary_exp -> .ID  | Comma, primary_exp -> .ID  | LBrack, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | Percent, unary_exp -> Decrement .unary_exp  | AND, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, unary_exp -> Decrement .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | LeftShift, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_exp -> Decrement .unary_exp  | RParen, unary_op -> .NOT  | Plus, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Divide, primary_exp -> .String  | Caret, unary_op -> .Tilde  | ID, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, unary_exp -> Decrement .unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Dot ID  | EQ, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, unary_exp -> Decrement .unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, postfix_exp -> .postfix_exp Dot ID  | RParen, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Decrement, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, unary_exp -> Decrement .unary_exp  | RightShift, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, unary_exp -> Decrement .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> Decrement .unary_exp  | GT, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, unary_exp -> .postfix_exp  | LeftShift, )
329 <- (254, 'ID') (primary_exp -> ID.  | Minus, primary_exp -> ID.  | NEQ, primary_exp -> ID.  | LBrack, primary_exp -> ID.  | Decrement, primary_exp -> ID.  | OR, primary_exp -> ID.  | Comma, primary_exp -> ID.  | Times, primary_exp -> ID.  | Percent, primary_exp -> ID.  | RightShift, primary_exp -> ID.  | Question, primary_exp -> ID.  | LE, primary_exp -> ID.  | GE, primary_exp -> ID.  | LT, primary_exp -> ID.  | EQ, primary_exp -> ID.  | GT, primary_exp -> ID.  | LParen, primary_exp -> ID.  | Caret, primary_exp -> ID.  | Increment, primary_exp -> ID.  | Divide, primary_exp -> ID.  | RParen, primary_exp -> ID.  | AND, primary_exp -> ID.  | VerticalBar, primary_exp -> ID.  | Ampersand, primary_exp -> ID.  | LeftShift, primary_exp -> ID.  | Plus, primary_exp -> ID.  | Dot, )
330 <- (254, 'Increment') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, unary_exp -> Increment .unary_exp  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | RParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_exp -> Increment .unary_exp  | Minus, unary_op -> .NOT  | Tilde, unary_exp -> Increment .unary_exp  | Question, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, unary_exp -> Increment .unary_exp  | EQ, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, unary_exp -> Increment .unary_exp  | Comma, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, unary_exp -> Increment .unary_exp  | Plus, primary_exp -> .String  | LE, postfix_exp -> .primary_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Percent, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, primary_exp -> .String  | RightShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, unary_exp -> .postfix_exp  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, primary_exp -> .ID  | LeftShift, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .Number  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, unary_exp -> .postfix_exp  | GT, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .primary_exp  | LParen, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, primary_exp -> .Number  | Plus, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> Increment .unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Divide, unary_exp -> Increment .unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> Increment .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .String  | Question, primary_exp -> .Number  | Percent, primary_exp -> .LParen exp RParen  | Question, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, primary_exp -> .LParen exp RParen  | GE, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> Increment .unary_exp  | AND, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> Increment .unary_exp  | LE, unary_exp -> Increment .unary_exp  | RightShift, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, unary_exp -> Increment .unary_exp  | GT, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, unary_exp -> Increment .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, unary_exp -> Increment .unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | Minus, postfix_exp -> .primary_exp  | GT, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | RParen, primary_exp -> .ID  | Comma, primary_exp -> .ID  | LBrack, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .unary_op unary_exp  | EQ, unary_exp -> Increment .unary_exp  | LT, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Times, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> Increment .unary_exp  | Divide, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_op -> .Tilde  | ID, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, primary_exp -> .ID  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, postfix_exp -> .postfix_exp Increment  | Dot, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, unary_exp -> Increment .unary_exp  | RParen, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, postfix_exp -> .postfix_exp Dot ID  | RParen, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> Increment .unary_exp  | NEQ, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Decrement, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Dot, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_exp -> Increment .unary_exp  | Times, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, unary_exp -> Increment .unary_exp  | GE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, unary_exp -> .postfix_exp  | LeftShift, )
331 <- (254, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, primary_exp -> LParen .exp RParen  | Dot, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, primary_exp -> LParen .exp RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .Increment unary_exp  | Ampersand, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, postfix_exp -> .primary_exp  | RParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, postfix_exp -> .primary_exp  | LT, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, primary_exp -> LParen .exp RParen  | Decrement, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> LParen .exp RParen  | GT, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | RParen, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, primary_exp -> LParen .exp RParen  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, binary_exp -> .unary_exp  | LE, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, unary_op -> .Minus  | Number, primary_exp -> LParen .exp RParen  | Percent, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, primary_exp -> LParen .exp RParen  | GE, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, primary_exp -> LParen .exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, exp -> .assignment_exp  | RParen, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> LParen .exp RParen  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, unary_exp -> .Decrement unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, primary_exp -> LParen .exp RParen  | Ampersand, primary_exp -> LParen .exp RParen  | Plus, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .Number  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> LParen .exp RParen  | LE, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, primary_exp -> LParen .exp RParen  | Increment, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | RParen, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Divide, unary_op -> .Minus  | String, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .unary_exp  | Plus, primary_exp -> LParen .exp RParen  | Divide, postfix_exp -> .primary_exp  | Ampersand, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .String  | Question, primary_exp -> .Number  | Percent, assignment_exp -> .conditional_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, primary_exp -> LParen .exp RParen  | Comma, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, primary_exp -> .LParen exp RParen  | GE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, primary_exp -> LParen .exp RParen  | Minus, exp -> .exp Comma assignment_exp  | RParen, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, primary_exp -> LParen .exp RParen  | NEQ, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, primary_exp -> LParen .exp RParen  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, primary_exp -> LParen .exp RParen  | OR, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> LParen .exp RParen  | LeftShift, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, postfix_exp -> .postfix_exp Increment  | Percent, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp Decrement  | Assign, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, primary_exp -> .Number  | Dot, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, unary_op -> .Minus  | Tilde, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .Decrement unary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | RParen, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, primary_exp -> LParen .exp RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .postfix_exp  | RParen, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, primary_exp -> LParen .exp RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, primary_exp -> LParen .exp RParen  | RParen, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, primary_exp -> LParen .exp RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> LParen .exp RParen  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, primary_exp -> LParen .exp RParen  | VerticalBar, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .postfix_exp  | Comma, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, primary_exp -> .Number  | GE, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .postfix_exp Dot ID  | RParen, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .String  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
332 <- (254, 'Number') (primary_exp -> Number.  | Increment, primary_exp -> Number.  | Question, primary_exp -> Number.  | Divide, primary_exp -> Number.  | Ampersand, primary_exp -> Number.  | Plus, primary_exp -> Number.  | LE, primary_exp -> Number.  | Decrement, primary_exp -> Number.  | Caret, primary_exp -> Number.  | Percent, primary_exp -> Number.  | VerticalBar, primary_exp -> Number.  | EQ, primary_exp -> Number.  | Comma, primary_exp -> Number.  | GT, primary_exp -> Number.  | AND, primary_exp -> Number.  | GE, primary_exp -> Number.  | OR, primary_exp -> Number.  | Minus, primary_exp -> Number.  | LBrack, primary_exp -> Number.  | RightShift, primary_exp -> Number.  | LParen, primary_exp -> Number.  | Dot, primary_exp -> Number.  | LT, primary_exp -> Number.  | RParen, primary_exp -> Number.  | NEQ, primary_exp -> Number.  | Times, primary_exp -> Number.  | LeftShift, )
333 <- (254, 'String') (primary_exp -> String.  | Plus, primary_exp -> String.  | Ampersand, primary_exp -> String.  | AND, primary_exp -> String.  | Comma, primary_exp -> String.  | LeftShift, primary_exp -> String.  | RParen, primary_exp -> String.  | LE, primary_exp -> String.  | EQ, primary_exp -> String.  | RightShift, primary_exp -> String.  | Increment, primary_exp -> String.  | LParen, primary_exp -> String.  | Minus, primary_exp -> String.  | Question, primary_exp -> String.  | GT, primary_exp -> String.  | GE, primary_exp -> String.  | VerticalBar, primary_exp -> String.  | OR, primary_exp -> String.  | Divide, primary_exp -> String.  | Caret, primary_exp -> String.  | NEQ, primary_exp -> String.  | LBrack, primary_exp -> String.  | Percent, primary_exp -> String.  | LT, primary_exp -> String.  | Dot, primary_exp -> String.  | Times, primary_exp -> String.  | Decrement, )
334 <- (254, 'postfix_exp') (unary_exp -> postfix_exp.  | Ampersand, postfix_exp -> postfix_exp .Decrement  | GT, postfix_exp -> postfix_exp .LBrack exp RBrack  | Plus, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | OR, postfix_exp -> postfix_exp .LParen RParen  | OR, postfix_exp -> postfix_exp .Increment  | Divide, postfix_exp -> postfix_exp .LParen RParen  | EQ, postfix_exp -> postfix_exp .LParen RParen  | Caret, postfix_exp -> postfix_exp .Increment  | VerticalBar, unary_exp -> postfix_exp.  | Comma, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Comma, postfix_exp -> postfix_exp .Increment  | LeftShift, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Percent, postfix_exp -> postfix_exp .Dot ID  | Dot, postfix_exp -> postfix_exp .Increment  | Percent, postfix_exp -> postfix_exp .Dot ID  | GT, postfix_exp -> postfix_exp .LParen RParen  | NEQ, postfix_exp -> postfix_exp .LBrack exp RBrack  | RParen, postfix_exp -> postfix_exp .Decrement  | Caret, postfix_exp -> postfix_exp .LBrack exp RBrack  | LE, postfix_exp -> postfix_exp .Decrement  | RightShift, postfix_exp -> postfix_exp .LParen RParen  | AND, postfix_exp -> postfix_exp .LParen RParen  | RParen, postfix_exp -> postfix_exp .Decrement  | LT, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Minus, unary_exp -> postfix_exp.  | Divide, postfix_exp -> postfix_exp .Increment  | Minus, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Decrement, postfix_exp -> postfix_exp .LParen RParen  | Minus, postfix_exp -> postfix_exp .Dot ID  | VerticalBar, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | EQ, postfix_exp -> postfix_exp .Increment  | Question, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> postfix_exp .Dot ID  | Times, postfix_exp -> postfix_exp .Decrement  | GE, postfix_exp -> postfix_exp .Increment  | EQ, postfix_exp -> postfix_exp .Decrement  | RParen, postfix_exp -> postfix_exp .LParen RParen  | LT, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | NEQ, postfix_exp -> postfix_exp .Decrement  | Divide, postfix_exp -> postfix_exp .Dot ID  | Divide, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Increment, postfix_exp -> postfix_exp .Decrement  | Dot, postfix_exp -> postfix_exp .Dot ID  | Minus, postfix_exp -> postfix_exp .LBrack exp RBrack  | LT, unary_exp -> postfix_exp.  | OR, postfix_exp -> postfix_exp .Decrement  | Increment, postfix_exp -> postfix_exp .LBrack exp RBrack  | Question, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | GE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LT, unary_exp -> postfix_exp.  | LE, postfix_exp -> postfix_exp .Dot ID  | Increment, postfix_exp -> postfix_exp .LBrack exp RBrack  | EQ, postfix_exp -> postfix_exp .Dot ID  | Comma, postfix_exp -> postfix_exp .Increment  | OR, postfix_exp -> postfix_exp .Decrement  | LE, postfix_exp -> postfix_exp .LBrack exp RBrack  | LBrack, postfix_exp -> postfix_exp .LBrack exp RBrack  | GT, postfix_exp -> postfix_exp .LParen RParen  | LBrack, postfix_exp -> postfix_exp .Decrement  | EQ, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Divide, postfix_exp -> postfix_exp .LParen RParen  | Times, postfix_exp -> postfix_exp .LParen RParen  | LE, postfix_exp -> postfix_exp .LParen RParen  | LParen, postfix_exp -> postfix_exp .Dot ID  | Plus, unary_exp -> postfix_exp.  | LT, postfix_exp -> postfix_exp .Dot ID  | LBrack, postfix_exp -> postfix_exp .LBrack exp RBrack  | Dot, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LParen, postfix_exp -> postfix_exp .LBrack exp RBrack  | VerticalBar, postfix_exp -> postfix_exp .Increment  | Decrement, postfix_exp -> postfix_exp .Decrement  | Minus, postfix_exp -> postfix_exp .Increment  | LT, postfix_exp -> postfix_exp .Increment  | Caret, postfix_exp -> postfix_exp .Increment  | LE, postfix_exp -> postfix_exp .Increment  | Times, unary_exp -> postfix_exp.  | Times, postfix_exp -> postfix_exp .LParen RParen  | GT, postfix_exp -> postfix_exp .LBrack exp RBrack  | LeftShift, postfix_exp -> postfix_exp .Increment  | Comma, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | RParen, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LeftShift, postfix_exp -> postfix_exp .Dot ID  | LE, postfix_exp -> postfix_exp .Decrement  | NEQ, unary_exp -> postfix_exp.  | GE, postfix_exp -> postfix_exp .LBrack exp RBrack  | AND, postfix_exp -> postfix_exp .LBrack exp RBrack  | Decrement, postfix_exp -> postfix_exp .Decrement  | Percent, postfix_exp -> postfix_exp .Increment  | Plus, postfix_exp -> postfix_exp .Increment  | AND, postfix_exp -> postfix_exp .Increment  | LBrack, postfix_exp -> postfix_exp .Decrement  | VerticalBar, postfix_exp -> postfix_exp .Dot ID  | GE, postfix_exp -> postfix_exp .Decrement  | Plus, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | AND, postfix_exp -> postfix_exp .Dot ID  | Ampersand, postfix_exp -> postfix_exp .Decrement  | Times, unary_exp -> postfix_exp.  | Percent, postfix_exp -> postfix_exp .Dot ID  | LParen, unary_exp -> postfix_exp.  | Minus, postfix_exp -> postfix_exp .Decrement  | Decrement, postfix_exp -> postfix_exp .Dot ID  | RightShift, postfix_exp -> postfix_exp .Dot ID  | NEQ, postfix_exp -> postfix_exp .LBrack exp RBrack  | Increment, postfix_exp -> postfix_exp .LParen RParen  | Increment, postfix_exp -> postfix_exp .Increment  | Increment, postfix_exp -> postfix_exp .Dot ID  | RParen, postfix_exp -> postfix_exp .Dot ID  | Decrement, postfix_exp -> postfix_exp .Increment  | NEQ, postfix_exp -> postfix_exp .Increment  | Ampersand, postfix_exp -> postfix_exp .LBrack exp RBrack  | Percent, postfix_exp -> postfix_exp .Increment  | RightShift, unary_exp -> postfix_exp.  | Question, postfix_exp -> postfix_exp .Increment  | LParen, postfix_exp -> postfix_exp .Dot ID  | Question, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Question, postfix_exp -> postfix_exp .LParen RParen  | Ampersand, postfix_exp -> postfix_exp .Dot ID  | EQ, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | RightShift, postfix_exp -> postfix_exp .Decrement  | LBrack, unary_exp -> postfix_exp.  | RParen, postfix_exp -> postfix_exp .LBrack exp RBrack  | Minus, postfix_exp -> postfix_exp .LBrack exp RBrack  | Ampersand, postfix_exp -> postfix_exp .LParen RParen  | Percent, postfix_exp -> postfix_exp .Dot ID  | AND, postfix_exp -> postfix_exp .LParen RParen  | Comma, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | GT, postfix_exp -> postfix_exp .LParen RParen  | Dot, postfix_exp -> postfix_exp .Decrement  | Comma, postfix_exp -> postfix_exp .LBrack exp RBrack  | Divide, postfix_exp -> postfix_exp .Decrement  | OR, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LBrack, postfix_exp -> postfix_exp .LBrack exp RBrack  | LParen, postfix_exp -> postfix_exp .LParen RParen  | LeftShift, unary_exp -> postfix_exp.  | VerticalBar, postfix_exp -> postfix_exp .Decrement  | LParen, postfix_exp -> postfix_exp .Increment  | Dot, unary_exp -> postfix_exp.  | GT, postfix_exp -> postfix_exp .Dot ID  | Caret, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Ampersand, postfix_exp -> postfix_exp .LBrack exp RBrack  | Comma, postfix_exp -> postfix_exp .Decrement  | LeftShift, postfix_exp -> postfix_exp .LParen RParen  | Divide, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Dot, postfix_exp -> postfix_exp .Decrement  | AND, unary_exp -> postfix_exp.  | LeftShift, postfix_exp -> postfix_exp .Dot ID  | LeftShift, unary_exp -> postfix_exp.  | NEQ, postfix_exp -> postfix_exp .LBrack exp RBrack  | OR, postfix_exp -> postfix_exp .LParen RParen  | Plus, postfix_exp -> postfix_exp .LParen RParen  | GE, postfix_exp -> postfix_exp .LParen RParen  | Decrement, unary_exp -> postfix_exp.  | AND, postfix_exp -> postfix_exp .LParen RParen  | VerticalBar, postfix_exp -> postfix_exp .LParen RParen  | Question, postfix_exp -> postfix_exp .Decrement  | Question, postfix_exp -> postfix_exp .Increment  | RParen, postfix_exp -> postfix_exp .Increment  | GE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Caret, postfix_exp -> postfix_exp .LBrack exp RBrack  | Times, postfix_exp -> postfix_exp .LBrack exp RBrack  | GE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Plus, postfix_exp -> postfix_exp .Dot ID  | LT, postfix_exp -> postfix_exp .Decrement  | Ampersand, postfix_exp -> postfix_exp .Increment  | GT, postfix_exp -> postfix_exp .LBrack exp RBrack  | Caret, unary_exp -> postfix_exp.  | Caret, postfix_exp -> postfix_exp .LBrack exp RBrack  | RightShift, unary_exp -> postfix_exp.  | Plus, postfix_exp -> postfix_exp .LBrack exp RBrack  | NEQ, postfix_exp -> postfix_exp .Dot ID  | Percent, postfix_exp -> postfix_exp .Dot ID  | OR, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Times, unary_exp -> postfix_exp.  | EQ, unary_exp -> postfix_exp.  | RightShift, postfix_exp -> postfix_exp .LParen RParen  | RightShift, )
335 <- (254, 'primary_exp') (postfix_exp -> primary_exp.  | VerticalBar, postfix_exp -> primary_exp.  | OR, postfix_exp -> primary_exp.  | LE, postfix_exp -> primary_exp.  | Decrement, postfix_exp -> primary_exp.  | Times, postfix_exp -> primary_exp.  | Comma, postfix_exp -> primary_exp.  | Question, postfix_exp -> primary_exp.  | LeftShift, postfix_exp -> primary_exp.  | Caret, postfix_exp -> primary_exp.  | AND, postfix_exp -> primary_exp.  | Divide, postfix_exp -> primary_exp.  | LParen, postfix_exp -> primary_exp.  | EQ, postfix_exp -> primary_exp.  | Minus, postfix_exp -> primary_exp.  | GE, postfix_exp -> primary_exp.  | Dot, postfix_exp -> primary_exp.  | LBrack, postfix_exp -> primary_exp.  | LT, postfix_exp -> primary_exp.  | GT, postfix_exp -> primary_exp.  | Percent, postfix_exp -> primary_exp.  | RParen, postfix_exp -> primary_exp.  | Increment, postfix_exp -> primary_exp.  | RightShift, postfix_exp -> primary_exp.  | Ampersand, postfix_exp -> primary_exp.  | Plus, postfix_exp -> primary_exp.  | NEQ, )
336 <- (254, 'unary_exp') (binary_exp -> binary_exp binary_op unary_exp.  | VerticalBar, binary_exp -> binary_exp binary_op unary_exp.  | Percent, binary_exp -> binary_exp binary_op unary_exp.  | Question, binary_exp -> binary_exp binary_op unary_exp.  | Minus, binary_exp -> binary_exp binary_op unary_exp.  | LE, binary_exp -> binary_exp binary_op unary_exp.  | OR, binary_exp -> binary_exp binary_op unary_exp.  | LeftShift, binary_exp -> binary_exp binary_op unary_exp.  | RightShift, binary_exp -> binary_exp binary_op unary_exp.  | GT, binary_exp -> binary_exp binary_op unary_exp.  | Divide, binary_exp -> binary_exp binary_op unary_exp.  | Ampersand, binary_exp -> binary_exp binary_op unary_exp.  | EQ, binary_exp -> binary_exp binary_op unary_exp.  | Caret, binary_exp -> binary_exp binary_op unary_exp.  | RParen, binary_exp -> binary_exp binary_op unary_exp.  | GE, binary_exp -> binary_exp binary_op unary_exp.  | Times, binary_exp -> binary_exp binary_op unary_exp.  | Comma, binary_exp -> binary_exp binary_op unary_exp.  | LT, binary_exp -> binary_exp binary_op unary_exp.  | AND, binary_exp -> binary_exp binary_op unary_exp.  | NEQ, binary_exp -> binary_exp binary_op unary_exp.  | Plus, )
337 <- (254, 'unary_op') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> unary_op .unary_exp  | VerticalBar, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | RParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | RightShift, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, unary_exp -> unary_op .unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Decrement  | Increment, unary_exp -> unary_op .unary_exp  | Minus, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, unary_exp -> unary_op .unary_exp  | NEQ, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, unary_exp -> unary_op .unary_exp  | LE, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, primary_exp -> .String  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, primary_exp -> .ID  | Plus, primary_exp -> .LParen exp RParen  | OR, unary_exp -> unary_op .unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, unary_exp -> unary_op .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> unary_op .unary_exp  | Divide, primary_exp -> .ID  | LeftShift, unary_exp -> unary_op .unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .Number  | RParen, unary_exp -> .postfix_exp  | GT, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .primary_exp  | LParen, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> unary_op .unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_op -> .Plus  | Minus, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_op -> .Minus  | Decrement, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Ampersand, postfix_exp -> .primary_exp  | Increment, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Percent, unary_exp -> unary_op .unary_exp  | LT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, primary_exp -> .LParen exp RParen  | GE, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, unary_exp -> unary_op .unary_exp  | Percent, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> unary_op .unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | Minus, postfix_exp -> .primary_exp  | GT, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, primary_exp -> .Number  | Plus, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | RParen, primary_exp -> .ID  | Comma, primary_exp -> .ID  | LBrack, unary_exp -> unary_op .unary_exp  | Question, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, unary_exp -> unary_op .unary_exp  | RParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_op -> .Tilde  | ID, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | Percent, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, unary_exp -> unary_op .unary_exp  | GT, primary_exp -> .String  | Times, unary_exp -> unary_op .unary_exp  | Plus, primary_exp -> .LParen exp RParen  | Divide, primary_exp -> .LParen exp RParen  | RParen, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .Minus  | Number, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, unary_exp -> unary_op .unary_exp  | Ampersand, postfix_exp -> .postfix_exp Increment  | Dot, unary_exp -> unary_op .unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, postfix_exp -> .postfix_exp Dot ID  | RParen, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Decrement, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_exp -> unary_op .unary_exp  | Times, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, unary_exp -> .postfix_exp  | LeftShift, primary_exp -> .ID  | Dot, primary_exp -> .LParen exp RParen  | LParen, unary_exp -> unary_op .unary_exp  | RightShift, )
338 <- (255, 'assignment_exp') (exp -> exp Comma assignment_exp.  | RParen, exp -> exp Comma assignment_exp.  | Comma, )
339 <- (258, 'ID') (postfix_exp -> postfix_exp Dot ID.  | Assign, postfix_exp -> postfix_exp Dot ID.  | OR, postfix_exp -> postfix_exp Dot ID.  | Times, postfix_exp -> postfix_exp Dot ID.  | Percent, postfix_exp -> postfix_exp Dot ID.  | Minus, postfix_exp -> postfix_exp Dot ID.  | AND, postfix_exp -> postfix_exp Dot ID.  | Plus, postfix_exp -> postfix_exp Dot ID.  | Ampersand, postfix_exp -> postfix_exp Dot ID.  | VerticalBar, postfix_exp -> postfix_exp Dot ID.  | Caret, postfix_exp -> postfix_exp Dot ID.  | LT, postfix_exp -> postfix_exp Dot ID.  | GT, postfix_exp -> postfix_exp Dot ID.  | Divide, postfix_exp -> postfix_exp Dot ID.  | Increment, postfix_exp -> postfix_exp Dot ID.  | RParen, postfix_exp -> postfix_exp Dot ID.  | EQ, postfix_exp -> postfix_exp Dot ID.  | Decrement, postfix_exp -> postfix_exp Dot ID.  | GE, postfix_exp -> postfix_exp Dot ID.  | LeftShift, postfix_exp -> postfix_exp Dot ID.  | Dot, postfix_exp -> postfix_exp Dot ID.  | LBrack, postfix_exp -> postfix_exp Dot ID.  | Comma, postfix_exp -> postfix_exp Dot ID.  | NEQ, postfix_exp -> postfix_exp Dot ID.  | RightShift, postfix_exp -> postfix_exp Dot ID.  | LParen, postfix_exp -> postfix_exp Dot ID.  | LE, postfix_exp -> postfix_exp Dot ID.  | Question, )
340 <- (260, 'exp') (postfix_exp -> postfix_exp LBrack exp .RBrack  | Caret, postfix_exp -> postfix_exp LBrack exp .RBrack  | Assign, postfix_exp -> postfix_exp LBrack exp .RBrack  | Question, postfix_exp -> postfix_exp LBrack exp .RBrack  | EQ, postfix_exp -> postfix_exp LBrack exp .RBrack  | LBrack, postfix_exp -> postfix_exp LBrack exp .RBrack  | AND, postfix_exp -> postfix_exp LBrack exp .RBrack  | Decrement, postfix_exp -> postfix_exp LBrack exp .RBrack  | LeftShift, exp -> exp .Comma assignment_exp  | RBrack, postfix_exp -> postfix_exp LBrack exp .RBrack  | Percent, postfix_exp -> postfix_exp LBrack exp .RBrack  | Increment, exp -> exp .Comma assignment_exp  | Comma, postfix_exp -> postfix_exp LBrack exp .RBrack  | RightShift, postfix_exp -> postfix_exp LBrack exp .RBrack  | Ampersand, postfix_exp -> postfix_exp LBrack exp .RBrack  | OR, postfix_exp -> postfix_exp LBrack exp .RBrack  | Divide, postfix_exp -> postfix_exp LBrack exp .RBrack  | Minus, postfix_exp -> postfix_exp LBrack exp .RBrack  | GT, postfix_exp -> postfix_exp LBrack exp .RBrack  | Comma, postfix_exp -> postfix_exp LBrack exp .RBrack  | NEQ, postfix_exp -> postfix_exp LBrack exp .RBrack  | Plus, postfix_exp -> postfix_exp LBrack exp .RBrack  | LParen, postfix_exp -> postfix_exp LBrack exp .RBrack  | LT, postfix_exp -> postfix_exp LBrack exp .RBrack  | Times, postfix_exp -> postfix_exp LBrack exp .RBrack  | RParen, postfix_exp -> postfix_exp LBrack exp .RBrack  | LE, postfix_exp -> postfix_exp LBrack exp .RBrack  | VerticalBar, postfix_exp -> postfix_exp LBrack exp .RBrack  | GE, postfix_exp -> postfix_exp LBrack exp .RBrack  | Dot, )
341 <- (261, 'RParen') (postfix_exp -> postfix_exp LParen RParen.  | Comma, postfix_exp -> postfix_exp LParen RParen.  | GE, postfix_exp -> postfix_exp LParen RParen.  | Decrement, postfix_exp -> postfix_exp LParen RParen.  | Divide, postfix_exp -> postfix_exp LParen RParen.  | Question, postfix_exp -> postfix_exp LParen RParen.  | LE, postfix_exp -> postfix_exp LParen RParen.  | LT, postfix_exp -> postfix_exp LParen RParen.  | LeftShift, postfix_exp -> postfix_exp LParen RParen.  | Percent, postfix_exp -> postfix_exp LParen RParen.  | Assign, postfix_exp -> postfix_exp LParen RParen.  | GT, postfix_exp -> postfix_exp LParen RParen.  | RightShift, postfix_exp -> postfix_exp LParen RParen.  | Ampersand, postfix_exp -> postfix_exp LParen RParen.  | Minus, postfix_exp -> postfix_exp LParen RParen.  | Plus, postfix_exp -> postfix_exp LParen RParen.  | LParen, postfix_exp -> postfix_exp LParen RParen.  | OR, postfix_exp -> postfix_exp LParen RParen.  | NEQ, postfix_exp -> postfix_exp LParen RParen.  | LBrack, postfix_exp -> postfix_exp LParen RParen.  | Increment, postfix_exp -> postfix_exp LParen RParen.  | Caret, postfix_exp -> postfix_exp LParen RParen.  | AND, postfix_exp -> postfix_exp LParen RParen.  | Dot, postfix_exp -> postfix_exp LParen RParen.  | RParen, postfix_exp -> postfix_exp LParen RParen.  | EQ, postfix_exp -> postfix_exp LParen RParen.  | Times, postfix_exp -> postfix_exp LParen RParen.  | VerticalBar, )
342 <- (261, 'argument_exp_list') (postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LBrack, argument_exp_list -> argument_exp_list .Comma assignment_exp  | RParen, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | NEQ, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Times, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Plus, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Divide, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | EQ, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Increment, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | OR, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | GT, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | GE, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | VerticalBar, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Assign, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LT, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Dot, argument_exp_list -> argument_exp_list .Comma assignment_exp  | Comma, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Caret, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Percent, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | RParen, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LeftShift, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | RightShift, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LParen, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Question, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Minus, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Decrement, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Comma, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Ampersand, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LE, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | AND, )
343 <- (262, 'assignment_exp') (assignment_exp -> unary_exp assignment_op assignment_exp.  | RParen, assignment_exp -> unary_exp assignment_op assignment_exp.  | Comma, )
344 <- (264, 'unary_exp') (unary_exp -> Decrement unary_exp.  | RightShift, unary_exp -> Decrement unary_exp.  | OR, unary_exp -> Decrement unary_exp.  | LE, unary_exp -> Decrement unary_exp.  | Colon, unary_exp -> Decrement unary_exp.  | Divide, unary_exp -> Decrement unary_exp.  | Caret, unary_exp -> Decrement unary_exp.  | EQ, unary_exp -> Decrement unary_exp.  | Percent, unary_exp -> Decrement unary_exp.  | LT, unary_exp -> Decrement unary_exp.  | GE, unary_exp -> Decrement unary_exp.  | Ampersand, unary_exp -> Decrement unary_exp.  | LeftShift, unary_exp -> Decrement unary_exp.  | Question, unary_exp -> Decrement unary_exp.  | Minus, unary_exp -> Decrement unary_exp.  | Plus, unary_exp -> Decrement unary_exp.  | NEQ, unary_exp -> Decrement unary_exp.  | AND, unary_exp -> Decrement unary_exp.  | Times, unary_exp -> Decrement unary_exp.  | Assign, unary_exp -> Decrement unary_exp.  | GT, unary_exp -> Decrement unary_exp.  | Comma, unary_exp -> Decrement unary_exp.  | VerticalBar, )
345 <- (266, 'unary_exp') (unary_exp -> Increment unary_exp.  | Question, unary_exp -> Increment unary_exp.  | GT, unary_exp -> Increment unary_exp.  | LeftShift, unary_exp -> Increment unary_exp.  | Caret, unary_exp -> Increment unary_exp.  | LE, unary_exp -> Increment unary_exp.  | Comma, unary_exp -> Increment unary_exp.  | Divide, unary_exp -> Increment unary_exp.  | OR, unary_exp -> Increment unary_exp.  | Assign, unary_exp -> Increment unary_exp.  | VerticalBar, unary_exp -> Increment unary_exp.  | GE, unary_exp -> Increment unary_exp.  | Times, unary_exp -> Increment unary_exp.  | Ampersand, unary_exp -> Increment unary_exp.  | AND, unary_exp -> Increment unary_exp.  | LT, unary_exp -> Increment unary_exp.  | NEQ, unary_exp -> Increment unary_exp.  | Colon, unary_exp -> Increment unary_exp.  | Plus, unary_exp -> Increment unary_exp.  | EQ, unary_exp -> Increment unary_exp.  | RightShift, unary_exp -> Increment unary_exp.  | Minus, unary_exp -> Increment unary_exp.  | Percent, )
346 <- (267, 'exp') (primary_exp -> LParen exp .RParen  | LeftShift, primary_exp -> LParen exp .RParen  | RightShift, primary_exp -> LParen exp .RParen  | NEQ, primary_exp -> LParen exp .RParen  | Ampersand, primary_exp -> LParen exp .RParen  | Assign, primary_exp -> LParen exp .RParen  | AND, primary_exp -> LParen exp .RParen  | LBrack, primary_exp -> LParen exp .RParen  | LParen, primary_exp -> LParen exp .RParen  | EQ, primary_exp -> LParen exp .RParen  | LE, exp -> exp .Comma assignment_exp  | Comma, primary_exp -> LParen exp .RParen  | Minus, primary_exp -> LParen exp .RParen  | VerticalBar, primary_exp -> LParen exp .RParen  | Percent, primary_exp -> LParen exp .RParen  | Divide, primary_exp -> LParen exp .RParen  | Dot, primary_exp -> LParen exp .RParen  | GT, primary_exp -> LParen exp .RParen  | LT, primary_exp -> LParen exp .RParen  | Comma, primary_exp -> LParen exp .RParen  | Increment, primary_exp -> LParen exp .RParen  | Plus, primary_exp -> LParen exp .RParen  | Times, primary_exp -> LParen exp .RParen  | Colon, primary_exp -> LParen exp .RParen  | Decrement, primary_exp -> LParen exp .RParen  | OR, exp -> exp .Comma assignment_exp  | RParen, primary_exp -> LParen exp .RParen  | Question, primary_exp -> LParen exp .RParen  | GE, primary_exp -> LParen exp .RParen  | Caret, )
347 <- (271, 'Question') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Dot ID  | Decrement, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .unary_op unary_exp  | Colon, unary_exp -> .Increment unary_exp  | Colon, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | Number, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, conditional_exp -> .binary_exp  | Colon, binary_exp -> .unary_exp  | EQ, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, conditional_exp -> .binary_exp  | Comma, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, primary_exp -> .String  | Colon, unary_exp -> .postfix_exp  | Colon, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, primary_exp -> .ID  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Colon, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, postfix_exp -> .postfix_exp Decrement  | Colon, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Question, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Colon, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, conditional_exp -> binary_exp Question .exp Colon conditional_exp  | Comma, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, assignment_exp -> .unary_exp assignment_op assignment_exp  | Colon, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, binary_exp -> .unary_exp  | AND, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Colon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .Decrement unary_exp  | Colon, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_op -> .Plus  | Minus, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .primary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | EQ, postfix_exp -> .postfix_exp Decrement  | Comma, postfix_exp -> .postfix_exp Increment  | Colon, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Increment, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .Number  | Colon, unary_exp -> .unary_op unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, unary_exp -> .Increment unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | Colon, primary_exp -> .String  | Decrement, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, conditional_exp -> binary_exp Question .exp Colon conditional_exp  | Colon, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, assignment_exp -> .conditional_exp  | Colon, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, primary_exp -> .LParen exp RParen  | Colon, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, binary_exp -> .unary_exp  | Colon, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, postfix_exp -> .postfix_exp Dot ID  | Colon, primary_exp -> .Number  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Colon, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, exp -> .exp Comma assignment_exp  | Colon, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .Decrement unary_exp  | AND, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | Colon, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, primary_exp -> .ID  | Percent, binary_exp -> .unary_exp  | VerticalBar, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_op -> .Minus  | NOT, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Colon, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .primary_exp  | Ampersand, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .String  | GE, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, primary_exp -> .ID  | Assign, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, exp -> .assignment_exp  | Colon, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
348 <- (271, 'binary_op') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | LT, binary_exp -> binary_exp binary_op .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, binary_exp -> binary_exp binary_op .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp Increment  | GT, binary_exp -> binary_exp binary_op .unary_exp  | Question, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | Caret, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .unary_op unary_exp  | Colon, unary_exp -> .Increment unary_exp  | Colon, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, postfix_exp -> .postfix_exp LParen RParen  | LT, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, primary_exp -> .String  | Colon, unary_exp -> .postfix_exp  | Colon, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, postfix_exp -> .postfix_exp Decrement  | Colon, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | GE, binary_exp -> binary_exp binary_op .unary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | Plus, binary_exp -> binary_exp binary_op .unary_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Increment  | Question, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, primary_exp -> .String  | RightShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Plus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen RParen  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Colon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, primary_exp -> .ID  | LeftShift, binary_exp -> binary_exp binary_op .unary_exp  | Ampersand, binary_exp -> binary_exp binary_op .unary_exp  | LT, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, primary_exp -> .LParen exp RParen  | GE, unary_exp -> .postfix_exp  | GT, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .Decrement unary_exp  | Colon, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_op -> .Plus  | Minus, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, binary_exp -> binary_exp binary_op .unary_exp  | Comma, postfix_exp -> .primary_exp  | Decrement, binary_exp -> binary_exp binary_op .unary_exp  | OR, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, binary_exp -> binary_exp binary_op .unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, postfix_exp -> .postfix_exp Increment  | Colon, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .Number  | Colon, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> binary_exp binary_op .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Colon, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp Decrement  | LT, postfix_exp -> .postfix_exp Dot ID  | Comma, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .postfix_exp  | Comma, primary_exp -> .LParen exp RParen  | Colon, unary_exp -> .postfix_exp  | EQ, unary_exp -> .postfix_exp  | VerticalBar, binary_exp -> binary_exp binary_op .unary_exp  | Colon, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, postfix_exp -> .postfix_exp Dot ID  | Colon, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, binary_exp -> binary_exp binary_op .unary_exp  | LeftShift, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, primary_exp -> .Number  | Plus, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Colon, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .ID  | Comma, primary_exp -> .ID  | LBrack, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, binary_exp -> binary_exp binary_op .unary_exp  | AND, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Times, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, binary_exp -> binary_exp binary_op .unary_exp  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | Colon, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, binary_exp -> binary_exp binary_op .unary_exp  | LE, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, binary_exp -> binary_exp binary_op .unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_op -> .NOT  | Plus, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, postfix_exp -> .postfix_exp Decrement  | Percent, primary_exp -> .String  | Divide, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .Tilde  | ID, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Colon, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .primary_exp  | Ampersand, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, postfix_exp -> .postfix_exp Increment  | Dot, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, binary_exp -> binary_exp binary_op .unary_exp  | Divide, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, binary_exp -> binary_exp binary_op .unary_exp  | Times, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, binary_exp -> binary_exp binary_op .unary_exp  | Percent, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Decrement, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .ID  | Dot, binary_exp -> binary_exp binary_op .unary_exp  | EQ, unary_exp -> .postfix_exp  | LeftShift, )
349 <- (273, 'Colon') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, primary_exp -> .ID  | LT, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, binary_exp -> .unary_exp  | EQ, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, unary_exp -> .unary_op unary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Dot ID  | Increment, postfix_exp -> .primary_exp  | Increment, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .postfix_exp  | Semicolon, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Percent, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | Question, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, binary_exp -> .unary_exp  | LE, primary_exp -> .Number  | Semicolon, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, primary_exp -> .Number  | Plus, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_op -> .Plus  | Minus, unary_exp -> .Increment unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Semicolon, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .Tilde  | Number, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .String  | Question, primary_exp -> .Number  | Percent, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, postfix_exp -> .postfix_exp Dot ID  | LBrack, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, binary_exp -> .unary_exp  | AND, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, conditional_exp -> binary_exp Question exp Colon .conditional_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp Decrement  | LT, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp Increment  | Percent, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .ID  | Comma, primary_exp -> .ID  | LBrack, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Times, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_op -> .NOT  | Plus, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | Comma, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, unary_op -> .NOT  | String, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, conditional_exp -> .binary_exp  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, binary_exp -> .unary_exp  | LT, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .primary_exp  | Ampersand, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .String  | GE, postfix_exp -> .postfix_exp Increment  | Dot, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | Dot, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, unary_exp -> .postfix_exp  | LeftShift, primary_exp -> .ID  | Dot, binary_exp -> .unary_exp  | Ampersand, conditional_exp -> binary_exp Question exp Colon .conditional_exp  | Semicolon, )
350 <- (273, 'Comma') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Dot ID  | Decrement, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .unary_op unary_exp  | Colon, unary_exp -> .Increment unary_exp  | Colon, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, conditional_exp -> .binary_exp  | Colon, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, conditional_exp -> .binary_exp  | Comma, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, exp -> exp Comma .assignment_exp  | Comma, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, primary_exp -> .String  | Colon, unary_exp -> .postfix_exp  | Colon, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | Colon, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, postfix_exp -> .postfix_exp Decrement  | Colon, binary_exp -> .unary_exp  | LE, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Colon, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, binary_exp -> .unary_exp  | Ampersand, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, assignment_exp -> .unary_exp assignment_op assignment_exp  | Colon, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Question, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Colon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | Question, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Colon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .Decrement unary_exp  | Colon, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_op -> .Plus  | Minus, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, primary_exp -> .ID  | Assign, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, postfix_exp -> .postfix_exp Increment  | Colon, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .Tilde  | Number, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .String  | Question, primary_exp -> .Number  | Percent, primary_exp -> .Number  | Colon, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, binary_exp -> .unary_exp  | AND, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, assignment_exp -> .conditional_exp  | Colon, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, primary_exp -> .LParen exp RParen  | Colon, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, binary_exp -> .unary_exp  | Colon, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, postfix_exp -> .postfix_exp Dot ID  | Colon, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .Decrement unary_exp  | Percent, primary_exp -> .LParen exp RParen  | LE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, primary_exp -> .Number  | Plus, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Colon, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | Colon, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Increment, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Colon, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, binary_exp -> .unary_exp  | LT, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .primary_exp  | LE, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, postfix_exp -> .primary_exp  | Ampersand, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, exp -> exp Comma .assignment_exp  | Colon, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, unary_exp -> .Increment unary_exp  | Question, unary_exp -> .postfix_exp  | LeftShift, )
351 <- (274, 'Decrement') (postfix_exp -> postfix_exp Decrement.  | OR, postfix_exp -> postfix_exp Decrement.  | RightShift, postfix_exp -> postfix_exp Decrement.  | Caret, postfix_exp -> postfix_exp Decrement.  | LParen, postfix_exp -> postfix_exp Decrement.  | Dot, postfix_exp -> postfix_exp Decrement.  | EQ, postfix_exp -> postfix_exp Decrement.  | GT, postfix_exp -> postfix_exp Decrement.  | LT, postfix_exp -> postfix_exp Decrement.  | Question, postfix_exp -> postfix_exp Decrement.  | Assign, postfix_exp -> postfix_exp Decrement.  | Plus, postfix_exp -> postfix_exp Decrement.  | Comma, postfix_exp -> postfix_exp Decrement.  | Percent, postfix_exp -> postfix_exp Decrement.  | GE, postfix_exp -> postfix_exp Decrement.  | Divide, postfix_exp -> postfix_exp Decrement.  | Colon, postfix_exp -> postfix_exp Decrement.  | Times, postfix_exp -> postfix_exp Decrement.  | Decrement, postfix_exp -> postfix_exp Decrement.  | Increment, postfix_exp -> postfix_exp Decrement.  | NEQ, postfix_exp -> postfix_exp Decrement.  | Minus, postfix_exp -> postfix_exp Decrement.  | LBrack, postfix_exp -> postfix_exp Decrement.  | Ampersand, postfix_exp -> postfix_exp Decrement.  | AND, postfix_exp -> postfix_exp Decrement.  | LE, postfix_exp -> postfix_exp Decrement.  | VerticalBar, postfix_exp -> postfix_exp Decrement.  | LeftShift, )
352 <- (274, 'Dot') (postfix_exp -> postfix_exp Dot .ID  | Percent, postfix_exp -> postfix_exp Dot .ID  | LBrack, postfix_exp -> postfix_exp Dot .ID  | Question, postfix_exp -> postfix_exp Dot .ID  | Divide, postfix_exp -> postfix_exp Dot .ID  | Plus, postfix_exp -> postfix_exp Dot .ID  | AND, postfix_exp -> postfix_exp Dot .ID  | Ampersand, postfix_exp -> postfix_exp Dot .ID  | NEQ, postfix_exp -> postfix_exp Dot .ID  | Assign, postfix_exp -> postfix_exp Dot .ID  | VerticalBar, postfix_exp -> postfix_exp Dot .ID  | Dot, postfix_exp -> postfix_exp Dot .ID  | Decrement, postfix_exp -> postfix_exp Dot .ID  | LE, postfix_exp -> postfix_exp Dot .ID  | Increment, postfix_exp -> postfix_exp Dot .ID  | LT, postfix_exp -> postfix_exp Dot .ID  | Times, postfix_exp -> postfix_exp Dot .ID  | Minus, postfix_exp -> postfix_exp Dot .ID  | OR, postfix_exp -> postfix_exp Dot .ID  | LeftShift, postfix_exp -> postfix_exp Dot .ID  | Colon, postfix_exp -> postfix_exp Dot .ID  | EQ, postfix_exp -> postfix_exp Dot .ID  | Caret, postfix_exp -> postfix_exp Dot .ID  | GT, postfix_exp -> postfix_exp Dot .ID  | GE, postfix_exp -> postfix_exp Dot .ID  | LParen, postfix_exp -> postfix_exp Dot .ID  | RightShift, postfix_exp -> postfix_exp Dot .ID  | Comma, )
353 <- (274, 'Increment') (postfix_exp -> postfix_exp Increment.  | VerticalBar, postfix_exp -> postfix_exp Increment.  | Dot, postfix_exp -> postfix_exp Increment.  | Percent, postfix_exp -> postfix_exp Increment.  | GE, postfix_exp -> postfix_exp Increment.  | Decrement, postfix_exp -> postfix_exp Increment.  | Comma, postfix_exp -> postfix_exp Increment.  | OR, postfix_exp -> postfix_exp Increment.  | LT, postfix_exp -> postfix_exp Increment.  | LE, postfix_exp -> postfix_exp Increment.  | AND, postfix_exp -> postfix_exp Increment.  | GT, postfix_exp -> postfix_exp Increment.  | RightShift, postfix_exp -> postfix_exp Increment.  | Caret, postfix_exp -> postfix_exp Increment.  | LeftShift, postfix_exp -> postfix_exp Increment.  | LBrack, postfix_exp -> postfix_exp Increment.  | Increment, postfix_exp -> postfix_exp Increment.  | Question, postfix_exp -> postfix_exp Increment.  | Ampersand, postfix_exp -> postfix_exp Increment.  | NEQ, postfix_exp -> postfix_exp Increment.  | Minus, postfix_exp -> postfix_exp Increment.  | Colon, postfix_exp -> postfix_exp Increment.  | Assign, postfix_exp -> postfix_exp Increment.  | LParen, postfix_exp -> postfix_exp Increment.  | Divide, postfix_exp -> postfix_exp Increment.  | Plus, postfix_exp -> postfix_exp Increment.  | EQ, postfix_exp -> postfix_exp Increment.  | Times, )
354 <- (274, 'LBrack') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, postfix_exp -> postfix_exp LBrack .exp RBrack  | RightShift, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | LBrack, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_exp -> .Increment unary_exp  | Divide, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> postfix_exp LBrack .exp RBrack  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, postfix_exp -> .postfix_exp LParen RParen  | AND, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RBrack, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, postfix_exp -> .postfix_exp LParen RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RBrack, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, postfix_exp -> postfix_exp LBrack .exp RBrack  | OR, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, postfix_exp -> postfix_exp LBrack .exp RBrack  | NEQ, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, primary_exp -> .ID  | RBrack, postfix_exp -> .postfix_exp Increment  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | LParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> postfix_exp LBrack .exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, postfix_exp -> postfix_exp LBrack .exp RBrack  | EQ, postfix_exp -> postfix_exp LBrack .exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | Decrement, postfix_exp -> .postfix_exp Increment  | LeftShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | LT, primary_exp -> .LParen exp RParen  | Question, postfix_exp -> .postfix_exp Decrement  | LeftShift, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, postfix_exp -> .postfix_exp Decrement  | RBrack, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, unary_exp -> .postfix_exp  | RBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, unary_exp -> .Decrement unary_exp  | Ampersand, postfix_exp -> postfix_exp LBrack .exp RBrack  | VerticalBar, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> postfix_exp LBrack .exp RBrack  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | Question, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, unary_exp -> .Decrement unary_exp  | Plus, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | RBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, primary_exp -> .Number  | LT, postfix_exp -> postfix_exp LBrack .exp RBrack  | Assign, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, binary_exp -> .unary_exp  | LT, exp -> .exp Comma assignment_exp  | RBrack, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, unary_exp -> .Decrement unary_exp  | RBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, postfix_exp -> .primary_exp  | Increment, postfix_exp -> .postfix_exp LParen RParen  | RBrack, primary_exp -> .LParen exp RParen  | GE, unary_exp -> .Decrement unary_exp  | OR, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .primary_exp  | Decrement, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .primary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> postfix_exp LBrack .exp RBrack  | Increment, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, conditional_exp -> .binary_exp  | RBrack, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | EQ, unary_op -> .Minus  | String, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | RBrack, primary_exp -> .String  | Question, primary_exp -> .Number  | Percent, unary_exp -> .unary_op unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, primary_exp -> .ID  | GE, postfix_exp -> .postfix_exp Decrement  | LE, postfix_exp -> postfix_exp LBrack .exp RBrack  | Minus, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, exp -> .assignment_exp  | RBrack, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | Decrement, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> postfix_exp LBrack .exp RBrack  | GT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, unary_exp -> .postfix_exp  | OR, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> postfix_exp LBrack .exp RBrack  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_exp -> .unary_op unary_exp  | RBrack, primary_exp -> .LParen exp RParen  | Minus, postfix_exp -> .primary_exp  | VerticalBar, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> postfix_exp LBrack .exp RBrack  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | RBrack, postfix_exp -> postfix_exp LBrack .exp RBrack  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp Decrement  | Assign, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, primary_exp -> .String  | Assign, postfix_exp -> postfix_exp LBrack .exp RBrack  | Dot, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, assignment_exp -> .conditional_exp  | RBrack, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, primary_exp -> .String  | RBrack, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .primary_exp  | GT, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Caret, unary_exp -> .postfix_exp  | NEQ, primary_exp -> .ID  | AND, postfix_exp -> postfix_exp LBrack .exp RBrack  | Caret, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Dot, postfix_exp -> postfix_exp LBrack .exp RBrack  | Plus, primary_exp -> .Number  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Caret, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .ID  | NEQ, binary_exp -> .unary_exp  | RBrack, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, primary_exp -> .Number  | OR, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | RBrack, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> .Number  | RBrack, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Increment  | RBrack, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> postfix_exp LBrack .exp RBrack  | Comma, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .primary_exp  | RBrack, primary_exp -> .ID  | Increment, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, primary_exp -> .Number  | GE, postfix_exp -> postfix_exp LBrack .exp RBrack  | Question, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> postfix_exp LBrack .exp RBrack  | LParen, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, postfix_exp -> postfix_exp LBrack .exp RBrack  | Colon, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, postfix_exp -> .postfix_exp Decrement  | LT, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, unary_exp -> .Increment unary_exp  | RBrack, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Increment  | LBrack, primary_exp -> .ID  | Dot, assignment_exp -> .unary_exp assignment_op assignment_exp  | RBrack, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | GE, )
355 <- (274, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, postfix_exp -> postfix_exp LParen .RParen  | LParen, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Question, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, unary_exp -> .postfix_exp  | Assign, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, unary_op -> .Plus  | Decrement, unary_exp -> .postfix_exp  | LE, postfix_exp -> .postfix_exp Dot ID  | Decrement, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Ampersand, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, unary_exp -> .postfix_exp  | RParen, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, postfix_exp -> postfix_exp LParen .RParen  | GT, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, postfix_exp -> postfix_exp LParen .RParen  | Colon, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Plus, primary_exp -> .Number  | Times, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, postfix_exp -> postfix_exp LParen .RParen  | LBrack, unary_exp -> .Increment unary_exp  | Ampersand, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | RightShift, unary_op -> .Tilde  | LParen, postfix_exp -> postfix_exp LParen .RParen  | EQ, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, primary_exp -> .String  | LBrack, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .unary_exp  | Plus, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, conditional_exp -> .binary_exp  | Comma, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Comma, postfix_exp -> postfix_exp LParen .RParen  | Dot, primary_exp -> .String  | LeftShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> postfix_exp LParen .RParen  | LE, primary_exp -> .String  | LE, postfix_exp -> .primary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .NOT  | ID, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Increment, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, primary_exp -> .ID  | GT, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, postfix_exp -> postfix_exp LParen .RParen  | Divide, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LE, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | LeftShift, postfix_exp -> postfix_exp LParen .RParen  | AND, primary_exp -> .String  | Question, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, postfix_exp -> postfix_exp LParen .RParen  | LeftShift, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> postfix_exp LParen .RParen  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, postfix_exp -> postfix_exp LParen .RParen  | VerticalBar, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | Percent, postfix_exp -> postfix_exp LParen .RParen  | Minus, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, argument_exp_list -> .argument_exp_list Comma assignment_exp  | RParen, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Plus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | GT, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, primary_exp -> .ID  | Divide, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, binary_exp -> .unary_exp  | LT, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, unary_exp -> .unary_op unary_exp  | Caret, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Divide, postfix_exp -> postfix_exp LParen .RParen  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, binary_exp -> .unary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | GT, binary_exp -> .binary_exp binary_op unary_exp  | RParen, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, binary_exp -> .binary_exp binary_op unary_exp  | Question, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .primary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Comma, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | AND, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | RParen, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, unary_exp -> .Decrement unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .Tilde  | Number, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Question, postfix_exp -> postfix_exp LParen .RParen  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, unary_op -> .Tilde  | NOT, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, primary_exp -> .Number  | RParen, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, unary_exp -> .Increment unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Percent, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, primary_exp -> .ID  | Assign, postfix_exp -> postfix_exp LParen .RParen  | LT, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | GE, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Dot, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, postfix_exp -> postfix_exp LParen .RParen  | Caret, unary_exp -> .Decrement unary_exp  | Times, unary_exp -> .unary_op unary_exp  | LE, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, binary_exp -> .unary_exp  | VerticalBar, postfix_exp -> postfix_exp LParen .RParen  | GE, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, postfix_exp -> postfix_exp LParen .RParen  | Assign, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, primary_exp -> .ID  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, postfix_exp -> postfix_exp LParen .RParen  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, argument_exp_list -> .argument_exp_list Comma assignment_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Decrement  | RParen, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Assign, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, primary_exp -> .String  | Assign, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | OR, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, primary_exp -> .ID  | LeftShift, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Caret, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Colon, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LParen, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, assignment_exp -> .conditional_exp  | RParen, postfix_exp -> .primary_exp  | GE, postfix_exp -> .postfix_exp Decrement  | Percent, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, postfix_exp -> postfix_exp LParen .RParen  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, postfix_exp -> .postfix_exp Increment  | GE, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, argument_exp_list -> .assignment_exp  | RParen, primary_exp -> .Number  | Increment, postfix_exp -> postfix_exp LParen .RParen  | Increment, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LT, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> postfix_exp LParen .RParen  | Percent, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Times, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | VerticalBar, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> postfix_exp LParen .RParen  | Question, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | EQ, postfix_exp -> postfix_exp LParen .RParen  | Decrement, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .unary_op unary_exp  | Assign, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .postfix_exp  | Comma, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .postfix_exp Dot ID  | RParen, unary_exp -> .unary_op unary_exp  | Comma, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, postfix_exp -> .primary_exp  | Ampersand, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, primary_exp -> .Number  | NEQ, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .NOT  | String, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .ID  | VerticalBar, primary_exp -> .Number  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Decrement, primary_exp -> .String  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> postfix_exp LParen .RParen  | NEQ, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, argument_exp_list -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Percent, unary_exp -> .postfix_exp  | LeftShift, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, postfix_exp -> postfix_exp LParen .RParen  | Plus, )
356 <- (276, 'assignment_op') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, assignment_exp -> unary_exp assignment_op .assignment_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, primary_exp -> .LParen exp RParen  | Colon, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .unary_op unary_exp  | Colon, unary_exp -> .Increment unary_exp  | Colon, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, conditional_exp -> .binary_exp  | Colon, binary_exp -> .unary_exp  | EQ, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, conditional_exp -> .binary_exp  | Comma, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, primary_exp -> .String  | Colon, unary_exp -> .postfix_exp  | Colon, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, primary_exp -> .ID  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Colon, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, postfix_exp -> .postfix_exp Decrement  | Colon, unary_exp -> .unary_op unary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, unary_exp -> .postfix_exp  | LE, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Colon, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, assignment_exp -> .unary_exp assignment_op assignment_exp  | Colon, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Colon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Colon, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | Percent, unary_op -> .Tilde  | Minus, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_op -> .Plus  | Minus, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, primary_exp -> .ID  | Assign, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, postfix_exp -> .postfix_exp Increment  | Colon, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .Tilde  | Number, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .Number  | Colon, unary_exp -> .unary_op unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_exp -> .Decrement unary_exp  | Colon, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, assignment_exp -> .conditional_exp  | Colon, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, binary_exp -> .unary_exp  | Colon, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, postfix_exp -> .postfix_exp Dot ID  | Colon, primary_exp -> .Number  | Plus, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Colon, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Assign, unary_exp -> .Decrement unary_exp  | AND, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | Colon, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, primary_exp -> .ID  | Percent, binary_exp -> .unary_exp  | VerticalBar, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Increment, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Colon, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .String  | GE, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> unary_exp assignment_op .assignment_exp  | Colon, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
357 <- (277, 'unary_exp') (unary_exp -> unary_op unary_exp.  | NEQ, unary_exp -> unary_op unary_exp.  | GE, unary_exp -> unary_op unary_exp.  | RightShift, unary_exp -> unary_op unary_exp.  | Question, unary_exp -> unary_op unary_exp.  | LeftShift, unary_exp -> unary_op unary_exp.  | Plus, unary_exp -> unary_op unary_exp.  | Divide, unary_exp -> unary_op unary_exp.  | LE, unary_exp -> unary_op unary_exp.  | Caret, unary_exp -> unary_op unary_exp.  | Assign, unary_exp -> unary_op unary_exp.  | GT, unary_exp -> unary_op unary_exp.  | LT, unary_exp -> unary_op unary_exp.  | Colon, unary_exp -> unary_op unary_exp.  | AND, unary_exp -> unary_op unary_exp.  | Times, unary_exp -> unary_op unary_exp.  | VerticalBar, unary_exp -> unary_op unary_exp.  | Comma, unary_exp -> unary_op unary_exp.  | Ampersand, unary_exp -> unary_op unary_exp.  | EQ, unary_exp -> unary_op unary_exp.  | OR, unary_exp -> unary_op unary_exp.  | Percent, unary_exp -> unary_op unary_exp.  | Minus, )
358 <- (278, 'unary_exp') (unary_exp -> Decrement unary_exp.  | RightShift, unary_exp -> Decrement unary_exp.  | LeftShift, unary_exp -> Decrement unary_exp.  | Question, unary_exp -> Decrement unary_exp.  | Minus, unary_exp -> Decrement unary_exp.  | GT, unary_exp -> Decrement unary_exp.  | Plus, unary_exp -> Decrement unary_exp.  | Semicolon, unary_exp -> Decrement unary_exp.  | LE, unary_exp -> Decrement unary_exp.  | Times, unary_exp -> Decrement unary_exp.  | Divide, unary_exp -> Decrement unary_exp.  | Caret, unary_exp -> Decrement unary_exp.  | AND, unary_exp -> Decrement unary_exp.  | Percent, unary_exp -> Decrement unary_exp.  | EQ, unary_exp -> Decrement unary_exp.  | OR, unary_exp -> Decrement unary_exp.  | VerticalBar, unary_exp -> Decrement unary_exp.  | GE, unary_exp -> Decrement unary_exp.  | Comma, unary_exp -> Decrement unary_exp.  | LT, unary_exp -> Decrement unary_exp.  | Ampersand, unary_exp -> Decrement unary_exp.  | NEQ, )
359 <- (280, 'unary_exp') (unary_exp -> Increment unary_exp.  | Minus, unary_exp -> Increment unary_exp.  | AND, unary_exp -> Increment unary_exp.  | GT, unary_exp -> Increment unary_exp.  | LT, unary_exp -> Increment unary_exp.  | Caret, unary_exp -> Increment unary_exp.  | NEQ, unary_exp -> Increment unary_exp.  | LE, unary_exp -> Increment unary_exp.  | Comma, unary_exp -> Increment unary_exp.  | LeftShift, unary_exp -> Increment unary_exp.  | EQ, unary_exp -> Increment unary_exp.  | Divide, unary_exp -> Increment unary_exp.  | Question, unary_exp -> Increment unary_exp.  | Plus, unary_exp -> Increment unary_exp.  | OR, unary_exp -> Increment unary_exp.  | VerticalBar, unary_exp -> Increment unary_exp.  | GE, unary_exp -> Increment unary_exp.  | Times, unary_exp -> Increment unary_exp.  | RightShift, unary_exp -> Increment unary_exp.  | Ampersand, unary_exp -> Increment unary_exp.  | Percent, unary_exp -> Increment unary_exp.  | Semicolon, )
360 <- (281, 'exp') (primary_exp -> LParen exp .RParen  | LeftShift, primary_exp -> LParen exp .RParen  | RightShift, primary_exp -> LParen exp .RParen  | Question, primary_exp -> LParen exp .RParen  | NEQ, primary_exp -> LParen exp .RParen  | Ampersand, primary_exp -> LParen exp .RParen  | AND, primary_exp -> LParen exp .RParen  | LBrack, primary_exp -> LParen exp .RParen  | LParen, primary_exp -> LParen exp .RParen  | EQ, primary_exp -> LParen exp .RParen  | LE, exp -> exp .Comma assignment_exp  | Comma, primary_exp -> LParen exp .RParen  | Minus, primary_exp -> LParen exp .RParen  | VerticalBar, primary_exp -> LParen exp .RParen  | Percent, primary_exp -> LParen exp .RParen  | Divide, primary_exp -> LParen exp .RParen  | Dot, primary_exp -> LParen exp .RParen  | GT, primary_exp -> LParen exp .RParen  | LT, primary_exp -> LParen exp .RParen  | Comma, primary_exp -> LParen exp .RParen  | Increment, primary_exp -> LParen exp .RParen  | Plus, primary_exp -> LParen exp .RParen  | Times, primary_exp -> LParen exp .RParen  | Decrement, primary_exp -> LParen exp .RParen  | OR, exp -> exp .Comma assignment_exp  | RParen, primary_exp -> LParen exp .RParen  | Semicolon, primary_exp -> LParen exp .RParen  | GE, primary_exp -> LParen exp .RParen  | Caret, )
361 <- (284, 'Decrement') (postfix_exp -> postfix_exp Decrement.  | OR, postfix_exp -> postfix_exp Decrement.  | RightShift, postfix_exp -> postfix_exp Decrement.  | Caret, postfix_exp -> postfix_exp Decrement.  | LParen, postfix_exp -> postfix_exp Decrement.  | Dot, postfix_exp -> postfix_exp Decrement.  | EQ, postfix_exp -> postfix_exp Decrement.  | GT, postfix_exp -> postfix_exp Decrement.  | LT, postfix_exp -> postfix_exp Decrement.  | Question, postfix_exp -> postfix_exp Decrement.  | Plus, postfix_exp -> postfix_exp Decrement.  | Comma, postfix_exp -> postfix_exp Decrement.  | Percent, postfix_exp -> postfix_exp Decrement.  | GE, postfix_exp -> postfix_exp Decrement.  | Semicolon, postfix_exp -> postfix_exp Decrement.  | Divide, postfix_exp -> postfix_exp Decrement.  | Times, postfix_exp -> postfix_exp Decrement.  | Decrement, postfix_exp -> postfix_exp Decrement.  | Increment, postfix_exp -> postfix_exp Decrement.  | NEQ, postfix_exp -> postfix_exp Decrement.  | Minus, postfix_exp -> postfix_exp Decrement.  | LBrack, postfix_exp -> postfix_exp Decrement.  | Ampersand, postfix_exp -> postfix_exp Decrement.  | AND, postfix_exp -> postfix_exp Decrement.  | LE, postfix_exp -> postfix_exp Decrement.  | VerticalBar, postfix_exp -> postfix_exp Decrement.  | LeftShift, )
362 <- (284, 'Dot') (postfix_exp -> postfix_exp Dot .ID  | Percent, postfix_exp -> postfix_exp Dot .ID  | LBrack, postfix_exp -> postfix_exp Dot .ID  | Question, postfix_exp -> postfix_exp Dot .ID  | Divide, postfix_exp -> postfix_exp Dot .ID  | Plus, postfix_exp -> postfix_exp Dot .ID  | AND, postfix_exp -> postfix_exp Dot .ID  | Ampersand, postfix_exp -> postfix_exp Dot .ID  | NEQ, postfix_exp -> postfix_exp Dot .ID  | VerticalBar, postfix_exp -> postfix_exp Dot .ID  | Dot, postfix_exp -> postfix_exp Dot .ID  | Decrement, postfix_exp -> postfix_exp Dot .ID  | LE, postfix_exp -> postfix_exp Dot .ID  | Increment, postfix_exp -> postfix_exp Dot .ID  | LT, postfix_exp -> postfix_exp Dot .ID  | Times, postfix_exp -> postfix_exp Dot .ID  | Minus, postfix_exp -> postfix_exp Dot .ID  | OR, postfix_exp -> postfix_exp Dot .ID  | LeftShift, postfix_exp -> postfix_exp Dot .ID  | EQ, postfix_exp -> postfix_exp Dot .ID  | Caret, postfix_exp -> postfix_exp Dot .ID  | GT, postfix_exp -> postfix_exp Dot .ID  | GE, postfix_exp -> postfix_exp Dot .ID  | LParen, postfix_exp -> postfix_exp Dot .ID  | Semicolon, postfix_exp -> postfix_exp Dot .ID  | RightShift, postfix_exp -> postfix_exp Dot .ID  | Comma, )
363 <- (284, 'Increment') (postfix_exp -> postfix_exp Increment.  | VerticalBar, postfix_exp -> postfix_exp Increment.  | Dot, postfix_exp -> postfix_exp Increment.  | Percent, postfix_exp -> postfix_exp Increment.  | GE, postfix_exp -> postfix_exp Increment.  | Comma, postfix_exp -> postfix_exp Increment.  | Semicolon, postfix_exp -> postfix_exp Increment.  | OR, postfix_exp -> postfix_exp Increment.  | LT, postfix_exp -> postfix_exp Increment.  | LE, postfix_exp -> postfix_exp Increment.  | AND, postfix_exp -> postfix_exp Increment.  | GT, postfix_exp -> postfix_exp Increment.  | RightShift, postfix_exp -> postfix_exp Increment.  | Caret, postfix_exp -> postfix_exp Increment.  | LeftShift, postfix_exp -> postfix_exp Increment.  | LBrack, postfix_exp -> postfix_exp Increment.  | Increment, postfix_exp -> postfix_exp Increment.  | Question, postfix_exp -> postfix_exp Increment.  | Ampersand, postfix_exp -> postfix_exp Increment.  | NEQ, postfix_exp -> postfix_exp Increment.  | Minus, postfix_exp -> postfix_exp Increment.  | Decrement, postfix_exp -> postfix_exp Increment.  | LParen, postfix_exp -> postfix_exp Increment.  | Divide, postfix_exp -> postfix_exp Increment.  | Plus, postfix_exp -> postfix_exp Increment.  | EQ, postfix_exp -> postfix_exp Increment.  | Times, )
364 <- (284, 'LBrack') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, postfix_exp -> postfix_exp LBrack .exp RBrack  | RightShift, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, primary_exp -> .ID  | EQ, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | LBrack, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_exp -> .Increment unary_exp  | Divide, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> postfix_exp LBrack .exp RBrack  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RBrack, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, primary_exp -> .String  | Ampersand, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, postfix_exp -> .primary_exp  | LT, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RBrack, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, postfix_exp -> postfix_exp LBrack .exp RBrack  | OR, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, postfix_exp -> postfix_exp LBrack .exp RBrack  | NEQ, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, primary_exp -> .ID  | RBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .NOT  | LParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> postfix_exp LBrack .exp RBrack  | AND, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, binary_exp -> .unary_exp  | LE, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, postfix_exp -> postfix_exp LBrack .exp RBrack  | EQ, postfix_exp -> postfix_exp LBrack .exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | Decrement, postfix_exp -> .postfix_exp Increment  | LeftShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | LT, primary_exp -> .LParen exp RParen  | Question, postfix_exp -> .postfix_exp Decrement  | LeftShift, unary_op -> .Minus  | Number, primary_exp -> .Number  | RBrack, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, unary_exp -> .postfix_exp  | RBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, unary_exp -> .Decrement unary_exp  | Ampersand, postfix_exp -> postfix_exp LBrack .exp RBrack  | VerticalBar, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, primary_exp -> .String  | Minus, postfix_exp -> postfix_exp LBrack .exp RBrack  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | RBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, binary_exp -> .unary_exp  | LT, exp -> .exp Comma assignment_exp  | RBrack, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | GT, unary_exp -> .Increment unary_exp  | GT, unary_exp -> .Decrement unary_exp  | RBrack, postfix_exp -> .primary_exp  | Increment, postfix_exp -> .postfix_exp LParen RParen  | RBrack, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .primary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> postfix_exp LBrack .exp RBrack  | Increment, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, unary_op -> .Minus  | String, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, postfix_exp -> .postfix_exp LParen RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | RBrack, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .unary_op unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, primary_exp -> .ID  | GE, postfix_exp -> .postfix_exp Decrement  | LE, postfix_exp -> postfix_exp LBrack .exp RBrack  | Minus, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, exp -> .assignment_exp  | RBrack, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, unary_exp -> .Increment unary_exp  | Question, binary_exp -> .unary_exp  | AND, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> postfix_exp LBrack .exp RBrack  | GT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> postfix_exp LBrack .exp RBrack  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_exp -> .unary_op unary_exp  | RBrack, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> postfix_exp LBrack .exp RBrack  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | RBrack, unary_op -> .Plus  | Decrement, postfix_exp -> postfix_exp LBrack .exp RBrack  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, primary_exp -> .Number  | Dot, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, primary_exp -> .String  | Assign, postfix_exp -> postfix_exp LBrack .exp RBrack  | Dot, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | Caret, assignment_exp -> .conditional_exp  | RBrack, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, primary_exp -> .String  | RBrack, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .postfix_exp  | NEQ, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> postfix_exp LBrack .exp RBrack  | Caret, postfix_exp -> .postfix_exp Decrement  | RBrack, unary_exp -> .unary_op unary_exp  | AND, binary_exp -> .unary_exp  | VerticalBar, postfix_exp -> postfix_exp LBrack .exp RBrack  | Plus, primary_exp -> .Number  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Caret, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .ID  | NEQ, binary_exp -> .unary_exp  | RBrack, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | RBrack, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Tilde  | NOT, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Increment  | RBrack, postfix_exp -> postfix_exp LBrack .exp RBrack  | Semicolon, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Increment, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> postfix_exp LBrack .exp RBrack  | Comma, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .primary_exp  | RBrack, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, conditional_exp -> .binary_exp  | RBrack, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, primary_exp -> .Number  | GE, postfix_exp -> postfix_exp LBrack .exp RBrack  | Question, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> postfix_exp LBrack .exp RBrack  | LParen, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, postfix_exp -> .postfix_exp Decrement  | LT, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, unary_exp -> .Increment unary_exp  | RBrack, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Increment  | LBrack, primary_exp -> .ID  | Dot, assignment_exp -> .unary_exp assignment_op assignment_exp  | RBrack, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | GE, )
365 <- (284, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, postfix_exp -> postfix_exp LParen .RParen  | LParen, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Question, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, unary_exp -> .postfix_exp  | Assign, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, unary_exp -> .postfix_exp  | LE, postfix_exp -> .postfix_exp Dot ID  | Decrement, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Ampersand, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, unary_exp -> .postfix_exp  | RParen, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, postfix_exp -> postfix_exp LParen .RParen  | GT, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | AND, primary_exp -> .ID  | LParen, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Plus, primary_exp -> .Number  | Times, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, postfix_exp -> postfix_exp LParen .RParen  | LBrack, unary_exp -> .Increment unary_exp  | Ampersand, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, postfix_exp -> postfix_exp LParen .RParen  | EQ, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, postfix_exp -> postfix_exp LParen .RParen  | RightShift, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, conditional_exp -> .binary_exp  | Comma, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Decrement, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, argument_exp_list -> .argument_exp_list Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, unary_exp -> .unary_op unary_exp  | Question, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | RParen, postfix_exp -> .postfix_exp Decrement  | Ampersand, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Times, unary_op -> .NOT  | ID, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Increment, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, postfix_exp -> postfix_exp LParen .RParen  | Divide, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LE, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, postfix_exp -> .postfix_exp Increment  | LeftShift, postfix_exp -> postfix_exp LParen .RParen  | AND, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, postfix_exp -> postfix_exp LParen .RParen  | LeftShift, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> postfix_exp LParen .RParen  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, primary_exp -> .ID  | GT, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, postfix_exp -> postfix_exp LParen .RParen  | VerticalBar, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | Percent, postfix_exp -> postfix_exp LParen .RParen  | Minus, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, argument_exp_list -> .argument_exp_list Comma assignment_exp  | RParen, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Plus, postfix_exp -> postfix_exp LParen .RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | GT, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, primary_exp -> .ID  | Divide, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, binary_exp -> .unary_exp  | LT, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Increment, unary_exp -> .unary_op unary_exp  | Caret, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Divide, postfix_exp -> postfix_exp LParen .RParen  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | GT, binary_exp -> .binary_exp binary_op unary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, binary_exp -> .binary_exp binary_op unary_exp  | Question, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, postfix_exp -> postfix_exp LParen .RParen  | LT, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | RParen, postfix_exp -> .postfix_exp LParen RParen  | Divide, unary_op -> .Minus  | String, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Ampersand, unary_exp -> .unary_op unary_exp  | Ampersand, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Dot ID  | LT, assignment_exp -> .conditional_exp  | RParen, postfix_exp -> postfix_exp LParen .RParen  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, primary_exp -> .Number  | RParen, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, binary_exp -> .unary_exp  | AND, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Percent, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Comma, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | GE, primary_exp -> .ID  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Dot, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, postfix_exp -> postfix_exp LParen .RParen  | Caret, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, postfix_exp -> postfix_exp LParen .RParen  | GE, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, unary_op -> .Minus  | Tilde, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Assign, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, primary_exp -> .String  | Assign, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | OR, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, primary_exp -> .Number  | NEQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Caret, binary_exp -> .unary_exp  | VerticalBar, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LParen, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, postfix_exp -> postfix_exp LParen .RParen  | Semicolon, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, postfix_exp -> postfix_exp LParen .RParen  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, argument_exp_list -> .assignment_exp  | RParen, primary_exp -> .Number  | Increment, postfix_exp -> postfix_exp LParen .RParen  | Increment, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LT, unary_exp -> .Increment unary_exp  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> postfix_exp LParen .RParen  | Percent, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | VerticalBar, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> postfix_exp LParen .RParen  | Question, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> postfix_exp LParen .RParen  | Decrement, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .unary_op unary_exp  | Assign, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .postfix_exp  | Comma, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, primary_exp -> .ID  | LeftShift, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .postfix_exp Dot ID  | RParen, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> postfix_exp LParen .RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, primary_exp -> .ID  | VerticalBar, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Semicolon, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> postfix_exp LParen .RParen  | NEQ, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, argument_exp_list -> .assignment_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | Assign, unary_exp -> .postfix_exp  | LeftShift, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, postfix_exp -> postfix_exp LParen .RParen  | Plus, )
366 <- (287, 'unary_exp') (unary_exp -> unary_op unary_exp.  | NEQ, unary_exp -> unary_op unary_exp.  | GE, unary_exp -> unary_op unary_exp.  | Semicolon, unary_exp -> unary_op unary_exp.  | RightShift, unary_exp -> unary_op unary_exp.  | Question, unary_exp -> unary_op unary_exp.  | LeftShift, unary_exp -> unary_op unary_exp.  | Plus, unary_exp -> unary_op unary_exp.  | Ampersand, unary_exp -> unary_op unary_exp.  | Divide, unary_exp -> unary_op unary_exp.  | Comma, unary_exp -> unary_op unary_exp.  | EQ, unary_exp -> unary_op unary_exp.  | LE, unary_exp -> unary_op unary_exp.  | OR, unary_exp -> unary_op unary_exp.  | GT, unary_exp -> unary_op unary_exp.  | Percent, unary_exp -> unary_op unary_exp.  | LT, unary_exp -> unary_op unary_exp.  | AND, unary_exp -> unary_op unary_exp.  | Caret, unary_exp -> unary_op unary_exp.  | Times, unary_exp -> unary_op unary_exp.  | VerticalBar, unary_exp -> unary_op unary_exp.  | Minus, )
367 <- (290, 'Semicolon') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -float2-, unary_exp -> .postfix_exp  | Ampersand, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -long-, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, primary_exp -> .String  | LT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | Decrement, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | String, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -struct-, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -fixed4-, unary_exp -> .postfix_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, conditional_exp -> .binary_exp  | Comma, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | Plus, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp Increment  | Semicolon, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -half4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | Ampersand, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, unary_exp -> .postfix_exp  | Semicolon, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -float3-, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, binary_exp -> .unary_exp  | Ampersand, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -uniform-, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -char-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | Minus, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | Semicolon, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -int-, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -half2-, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, binary_exp -> .unary_exp  | LE, primary_exp -> .String  | AND, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | Number, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, unary_exp -> .Decrement unary_exp  | Ampersand, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -half3-, unary_op -> .Plus  | Minus, unary_exp -> .Increment unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, primary_exp -> .ID  | Assign, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | LParen, unary_op -> .Minus  | ID, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -float-, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | RBrace, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | Tilde, unary_op -> .Tilde  | Number, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, binary_exp -> .unary_exp  | AND, primary_exp -> .Number  | Semicolon, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_op -> .NOT  | Number, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .Decrement unary_exp  | Percent, primary_exp -> .LParen exp RParen  | LE, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | LBrace, postfix_exp -> .postfix_exp Decrement  | Minus, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -double-, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, postfix_exp -> .postfix_exp Increment  | Percent, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, binary_exp -> .unary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .Decrement unary_exp  | AND, primary_exp -> .String  | Assign, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -return-, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | NOT, primary_exp -> .LParen exp RParen  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | while, unary_exp -> .unary_op unary_exp  | GT, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -fixed3-, primary_exp -> .ID  | OR, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -sampler2D-, unary_exp -> .Increment unary_exp  | VerticalBar, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -float4-, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, unary_op -> .Plus  | Increment, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -goto-, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Dot, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | Comma, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | Increment, unary_exp -> .Increment unary_exp  | GE, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | Semicolon, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, unary_exp -> .unary_op unary_exp  | Percent, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -fixed2-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -short-, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, conditional_exp -> .binary_exp  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .postfix_exp LParen RParen  | EQ, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | for, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -continue-, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | ID, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -do-, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -void-, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | break, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, postfix_exp -> .primary_exp  | Ampersand, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, unary_exp -> .unary_op unary_exp  | Semicolon, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .Number  | Caret, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | if, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | LE, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, unary_exp -> .Increment unary_exp  | Question, unary_exp -> .postfix_exp  | LeftShift, )
368 <- (291, 'RParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, exp_stm -> .Semicolon  | -half2-, iteration_stm -> .while LParen exp RParen stm  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | -char-, exp_stm -> .Semicolon  | Plus, exp_stm -> .exp Semicolon  | LParen, stm -> .iteration_stm  | String, compound_stm -> .LBrace RBrace  | Tilde, compound_stm -> .LBrace RBrace  | -float3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -char-, stm -> .selection_stm  | -half2-, jump_stm -> .break  | -continue-, exp_stm -> .exp Semicolon  | -float4-, unary_exp -> .Increment unary_exp  | Ampersand, selection_stm -> if LParen exp RParen .stm else stm  | -int-, compound_stm -> .LBrace block_item_list RBrace  | -half4-, jump_stm -> .break  | LBrace, stm -> .iteration_stm  | Number, unary_exp -> .postfix_exp  | Ampersand, selection_stm -> .if LParen exp RParen stm  | -fixed3-, compound_stm -> .LBrace RBrace  | -do-, stm -> .jump_stm  | else, selection_stm -> if LParen exp RParen .stm  | -char-, jump_stm -> .-continue-  | Minus, jump_stm -> .-continue-  | String, unary_op -> .Minus  | Minus, jump_stm -> .-goto- ID  | -half3-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, selection_stm -> .if LParen exp RParen stm  | Plus, exp_stm -> .Semicolon  | -struct-, unary_exp -> .postfix_exp  | Assign, unary_op -> .Tilde  | String, primary_exp -> .String  | OR, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -long-, postfix_exp -> .postfix_exp LParen RParen  | Percent, stm -> .compound_stm  | else, unary_exp -> .Decrement unary_exp  | Minus, stm -> .selection_stm  | for, postfix_exp -> .postfix_exp Decrement  | EQ, jump_stm -> .-goto- ID  | LParen, jump_stm -> .-goto- ID  | -fixed4-, compound_stm -> .LBrace block_item_list RBrace  | Increment, selection_stm -> if LParen exp RParen .stm  | -float-, stm -> .jump_stm  | Tilde, stm -> .jump_stm  | -half2-, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, stm -> .jump_stm  | -goto-, unary_exp -> .postfix_exp  | GT, compound_stm -> .LBrace RBrace  | ID, unary_exp -> .Decrement unary_exp  | LE, compound_stm -> .LBrace block_item_list RBrace  | -float3-, postfix_exp -> .postfix_exp LParen RParen  | GT, selection_stm -> .if LParen exp RParen stm else stm  | while, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -struct-, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | GE, exp_stm -> .Semicolon  | -float3-, unary_exp -> .unary_op unary_exp  | LT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LParen, compound_stm -> .LBrace block_item_list RBrace  | Number, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float4-, jump_stm -> .-return- exp Semicolon  | -float-, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Increment  | OR, compound_stm -> .LBrace block_item_list RBrace  | -fixed3-, exp_stm -> .exp Semicolon  | Increment, exp_stm -> .Semicolon  | -long-, iteration_stm -> .while LParen exp RParen stm  | -fixed4-, unary_op -> .NOT  | Tilde, stm -> .exp_stm  | break, binary_exp -> .unary_exp  | Divide, selection_stm -> if LParen exp RParen .stm else stm  | -do-, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, unary_op -> .Tilde  | LParen, stm -> .jump_stm  | -fixed2-, stm -> .compound_stm  | -return-, unary_exp -> .Decrement unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | Minus, postfix_exp -> .primary_exp  | LT, primary_exp -> .LParen exp RParen  | AND, exp_stm -> .Semicolon  | Minus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, compound_stm -> .LBrace block_item_list RBrace  | -goto-, compound_stm -> .LBrace RBrace  | -float2-, exp_stm -> .exp Semicolon  | -do-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -do-, exp_stm -> .exp Semicolon  | Minus, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, compound_stm -> .LBrace block_item_list RBrace  | else, stm -> .selection_stm  | -continue-, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, jump_stm -> .break  | -half2-, jump_stm -> .-continue-  | Number, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_exp -> .unary_op unary_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | -struct-, postfix_exp -> .postfix_exp Increment  | LE, jump_stm -> .break  | else, primary_exp -> .LParen exp RParen  | VerticalBar, jump_stm -> .-return- exp Semicolon  | Plus, selection_stm -> .if LParen exp RParen stm else stm  | LBrace, jump_stm -> .break  | break, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, jump_stm -> .-continue-  | -fixed4-, compound_stm -> .LBrace RBrace  | -double-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, exp_stm -> .Semicolon  | while, compound_stm -> .LBrace block_item_list RBrace  | -half3-, stm -> .exp_stm  | -float3-, selection_stm -> .if LParen exp RParen stm  | -float-, jump_stm -> .-return- exp Semicolon  | while, stm -> .compound_stm  | Minus, stm -> .jump_stm  | -sampler2D-, iteration_stm -> .while LParen exp RParen stm  | -sampler2D-, jump_stm -> .break  | String, exp_stm -> .exp Semicolon  | -float3-, selection_stm -> if LParen exp RParen .stm  | -half2-, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .primary_exp  | LeftShift, primary_exp -> .String  | Semicolon, stm -> .jump_stm  | -long-, stm -> .exp_stm  | -half2-, primary_exp -> .ID  | GT, jump_stm -> .-return- exp Semicolon  | -struct-, compound_stm -> .LBrace block_item_list RBrace  | -double-, selection_stm -> .if LParen exp RParen stm else stm  | else, jump_stm -> .break  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | break, unary_exp -> .postfix_exp  | Times, stm -> .compound_stm  | -half3-, selection_stm -> .if LParen exp RParen stm  | if, unary_exp -> .postfix_exp  | Semicolon, jump_stm -> .-continue-  | if, jump_stm -> .-goto- ID  | -return-, compound_stm -> .LBrace block_item_list RBrace  | Decrement, unary_exp -> .postfix_exp  | LE, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -goto-, postfix_exp -> .primary_exp  | RightShift, stm -> .iteration_stm  | RBrace, selection_stm -> if LParen exp RParen .stm else stm  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | if, binary_exp -> .binary_exp binary_op unary_exp  | AND, compound_stm -> .LBrace block_item_list RBrace  | for, primary_exp -> .Number  | EQ, primary_exp -> .Number  | Question, exp_stm -> .exp Semicolon  | -struct-, jump_stm -> .-goto- ID  | -long-, selection_stm -> .if LParen exp RParen stm  | String, postfix_exp -> .postfix_exp Dot ID  | GE, jump_stm -> .-continue-  | -struct-, jump_stm -> .-return- exp Semicolon  | -int-, selection_stm -> if LParen exp RParen .stm else stm  | ID, selection_stm -> .if LParen exp RParen stm  | -int-, unary_exp -> .postfix_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | LeftShift, binary_exp -> .unary_exp  | Ampersand, stm -> .jump_stm  | String, stm -> .iteration_stm  | -half2-, selection_stm -> if LParen exp RParen .stm  | Decrement, stm -> .exp_stm  | ID, stm -> .exp_stm  | -long-, jump_stm -> .-return- exp Semicolon  | -return-, postfix_exp -> .postfix_exp LParen RParen  | LParen, selection_stm -> .if LParen exp RParen stm  | else, iteration_stm -> .while LParen exp RParen stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Comma, exp_stm -> .Semicolon  | if, jump_stm -> .-goto- ID  | -half4-, selection_stm -> if LParen exp RParen .stm  | -float3-, selection_stm -> .if LParen exp RParen stm else stm  | -do-, primary_exp -> .LParen exp RParen  | Question, selection_stm -> if LParen exp RParen .stm else stm  | -half2-, jump_stm -> .-goto- ID  | -fixed2-, stm -> .exp_stm  | Tilde, postfix_exp -> .primary_exp  | LE, compound_stm -> .LBrace block_item_list RBrace  | LParen, exp_stm -> .exp Semicolon  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | String, compound_stm -> .LBrace block_item_list RBrace  | -float-, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, selection_stm -> .if LParen exp RParen stm  | -void-, stm -> .exp_stm  | -do-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Tilde, jump_stm -> .-return- exp Semicolon  | -do-, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, postfix_exp -> .postfix_exp Increment  | Question, stm -> .compound_stm  | NOT, unary_exp -> .Decrement unary_exp  | Ampersand, unary_exp -> .postfix_exp  | AND, stm -> .compound_stm  | -float-, compound_stm -> .LBrace block_item_list RBrace  | Plus, unary_exp -> .Decrement unary_exp  | Assign, iteration_stm -> .while LParen exp RParen stm  | -do-, stm -> .jump_stm  | Decrement, jump_stm -> .-return- exp Semicolon  | Number, primary_exp -> .String  | NEQ, exp_stm -> .Semicolon  | -half4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, iteration_stm -> .while LParen exp RParen stm  | Tilde, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .primary_exp  | Semicolon, selection_stm -> if LParen exp RParen .stm else stm  | -float3-, exp_stm -> .Semicolon  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | -uniform-, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, exp_stm -> .exp Semicolon  | -continue-, selection_stm -> .if LParen exp RParen stm else stm  | Plus, postfix_exp -> .primary_exp  | Times, jump_stm -> .-goto- ID  | if, stm -> .iteration_stm  | -do-, selection_stm -> if LParen exp RParen .stm  | -uniform-, binary_exp -> .unary_exp  | NEQ, jump_stm -> .-continue-  | break, iteration_stm -> .while LParen exp RParen stm  | Minus, selection_stm -> if LParen exp RParen .stm  | -long-, selection_stm -> if LParen exp RParen .stm else stm  | -float-, selection_stm -> if LParen exp RParen .stm  | -float2-, postfix_exp -> .postfix_exp LParen RParen  | LBrack, selection_stm -> if LParen exp RParen .stm  | Tilde, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Minus, selection_stm -> .if LParen exp RParen stm  | -sampler2D-, selection_stm -> .if LParen exp RParen stm else stm  | -float4-, selection_stm -> if LParen exp RParen .stm else stm  | -long-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, selection_stm -> if LParen exp RParen .stm else stm  | -sampler2D-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed3-, selection_stm -> .if LParen exp RParen stm else stm  | -short-, jump_stm -> .-continue-  | -void-, selection_stm -> .if LParen exp RParen stm  | RBrace, jump_stm -> .break  | RBrace, selection_stm -> .if LParen exp RParen stm  | -float2-, compound_stm -> .LBrace block_item_list RBrace  | -half2-, jump_stm -> .-return- exp Semicolon  | -double-, primary_exp -> .LParen exp RParen  | GT, stm -> .iteration_stm  | LBrace, postfix_exp -> .primary_exp  | Increment, jump_stm -> .-goto- ID  | while, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | NEQ, compound_stm -> .LBrace block_item_list RBrace  | -float4-, stm -> .jump_stm  | -do-, postfix_exp -> .postfix_exp Decrement  | Plus, exp_stm -> .exp Semicolon  | -half4-, selection_stm -> if LParen exp RParen .stm  | for, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, primary_exp -> .ID  | OR, stm -> .jump_stm  | break, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float-, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, jump_stm -> .-return- exp Semicolon  | NOT, postfix_exp -> .postfix_exp Increment  | Times, selection_stm -> .if LParen exp RParen stm else stm  | Decrement, stm -> .selection_stm  | -fixed3-, jump_stm -> .-goto- ID  | String, stm -> .compound_stm  | -double-, stm -> .exp_stm  | if, iteration_stm -> .while LParen exp RParen stm  | -half2-, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, binary_exp -> .unary_exp  | GE, selection_stm -> .if LParen exp RParen stm  | Minus, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, compound_stm -> .LBrace block_item_list RBrace  | -return-, postfix_exp -> .postfix_exp Decrement  | LeftShift, selection_stm -> .if LParen exp RParen stm else stm  | Tilde, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, selection_stm -> if LParen exp RParen .stm else stm  | Tilde, stm -> .iteration_stm  | Minus, selection_stm -> if LParen exp RParen .stm  | break, jump_stm -> .-goto- ID  | -short-, exp_stm -> .Semicolon  | -int-, unary_op -> .Minus  | ID, stm -> .selection_stm  | -uniform-, stm -> .selection_stm  | -do-, selection_stm -> if LParen exp RParen .stm else stm  | RBrace, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, compound_stm -> .LBrace RBrace  | while, stm -> .exp_stm  | -float-, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .primary_exp  | Decrement, stm -> .iteration_stm  | Plus, stm -> .selection_stm  | -void-, jump_stm -> .break  | Plus, stm -> .exp_stm  | -double-, stm -> .selection_stm  | Minus, jump_stm -> .-continue-  | -return-, stm -> .exp_stm  | -struct-, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Semicolon, stm -> .exp_stm  | while, unary_op -> .Tilde  | Number, exp_stm -> .exp Semicolon  | -goto-, stm -> .jump_stm  | while, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, stm -> .iteration_stm  | Semicolon, stm -> .exp_stm  | -float4-, jump_stm -> .break  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | if, postfix_exp -> .postfix_exp Dot ID  | LT, jump_stm -> .-continue-  | for, unary_exp -> .unary_op unary_exp  | Assign, selection_stm -> if LParen exp RParen .stm  | -fixed3-, jump_stm -> .-return- exp Semicolon  | -half2-, jump_stm -> .-return- exp Semicolon  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, stm -> .iteration_stm  | -continue-, selection_stm -> .if LParen exp RParen stm else stm  | -float-, unary_op -> .Plus  | Plus, jump_stm -> .-goto- ID  | -half2-, primary_exp -> .ID  | LE, stm -> .exp_stm  | Semicolon, binary_exp -> .unary_exp  | RightShift, selection_stm -> .if LParen exp RParen stm else stm  | -sampler2D-, unary_op -> .Minus  | LParen, selection_stm -> if LParen exp RParen .stm  | -double-, exp_stm -> .Semicolon  | -float-, selection_stm -> if LParen exp RParen .stm else stm  | -fixed2-, unary_op -> .NOT  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | String, primary_exp -> .ID  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float4-, jump_stm -> .break  | -uniform-, jump_stm -> .-goto- ID  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | String, stm -> .jump_stm  | LBrace, exp -> .exp Comma assignment_exp  | Comma, primary_exp -> .ID  | Assign, stm -> .exp_stm  | Number, stm -> .iteration_stm  | -half4-, stm -> .compound_stm  | -half2-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, selection_stm -> if LParen exp RParen .stm else stm  | String, postfix_exp -> .postfix_exp Dot ID  | Comma, unary_exp -> .Increment unary_exp  | NEQ, stm -> .compound_stm  | String, unary_exp -> .unary_op unary_exp  | LeftShift, compound_stm -> .LBrace RBrace  | -return-, stm -> .exp_stm  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, jump_stm -> .break  | Number, primary_exp -> .ID  | Percent, postfix_exp -> .postfix_exp LParen RParen  | LE, jump_stm -> .-return- exp Semicolon  | LParen, iteration_stm -> .while LParen exp RParen stm  | if, stm -> .selection_stm  | -float3-, postfix_exp -> .primary_exp  | Plus, stm -> .jump_stm  | -float4-, stm -> .iteration_stm  | for, stm -> .compound_stm  | Tilde, stm -> .exp_stm  | -float2-, unary_op -> .Plus  | Increment, iteration_stm -> .while LParen exp RParen stm  | -goto-, stm -> .jump_stm  | NOT, selection_stm -> .if LParen exp RParen stm  | NOT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, selection_stm -> if LParen exp RParen .stm else stm  | -short-, exp_stm -> .Semicolon  | -float4-, stm -> .selection_stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | AND, stm -> .exp_stm  | -int-, stm -> .iteration_stm  | break, primary_exp -> .Number  | GE, compound_stm -> .LBrace block_item_list RBrace  | -int-, stm -> .selection_stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -half3-, compound_stm -> .LBrace block_item_list RBrace  | Tilde, binary_exp -> .unary_exp  | VerticalBar, selection_stm -> .if LParen exp RParen stm else stm  | -half2-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -short-, selection_stm -> if LParen exp RParen .stm  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -struct-, stm -> .iteration_stm  | -float3-, compound_stm -> .LBrace RBrace  | Number, selection_stm -> .if LParen exp RParen stm  | -half4-, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | Percent, jump_stm -> .-return- exp Semicolon  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -uniform-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float3-, stm -> .compound_stm  | if, primary_exp -> .Number  | Plus, jump_stm -> .-return- exp Semicolon  | ID, jump_stm -> .-goto- ID  | -float4-, jump_stm -> .-return- exp Semicolon  | -char-, selection_stm -> if LParen exp RParen .stm else stm  | if, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed3-, stm -> .jump_stm  | -half3-, primary_exp -> .Number  | Dot, exp_stm -> .Semicolon  | -do-, exp_stm -> .exp Semicolon  | -fixed3-, primary_exp -> .LParen exp RParen  | Ampersand, jump_stm -> .-goto- ID  | -double-, stm -> .jump_stm  | -struct-, selection_stm -> if LParen exp RParen .stm else stm  | Minus, postfix_exp -> .primary_exp  | Comma, primary_exp -> .ID  | LBrack, jump_stm -> .-return- exp Semicolon  | Semicolon, selection_stm -> .if LParen exp RParen stm  | Decrement, primary_exp -> .LParen exp RParen  | LBrack, selection_stm -> if LParen exp RParen .stm else stm  | for, selection_stm -> .if LParen exp RParen stm  | LParen, jump_stm -> .-continue-  | -int-, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, jump_stm -> .break  | -fixed2-, exp_stm -> .exp Semicolon  | -short-, primary_exp -> .String  | Assign, compound_stm -> .LBrace RBrace  | Plus, unary_exp -> .unary_op unary_exp  | EQ, stm -> .exp_stm  | for, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, exp_stm -> .Semicolon  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | String, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, stm -> .selection_stm  | -half4-, primary_exp -> .LParen exp RParen  | Semicolon, compound_stm -> .LBrace RBrace  | break, selection_stm -> .if LParen exp RParen stm else stm  | -int-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, selection_stm -> .if LParen exp RParen stm else stm  | if, stm -> .iteration_stm  | -uniform-, stm -> .selection_stm  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | -continue-, jump_stm -> .-goto- ID  | -void-, stm -> .exp_stm  | -half4-, primary_exp -> .ID  | LeftShift, compound_stm -> .LBrace block_item_list RBrace  | NOT, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, compound_stm -> .LBrace RBrace  | -char-, postfix_exp -> .postfix_exp Decrement  | Comma, primary_exp -> .String  | LT, stm -> .exp_stm  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, postfix_exp -> .postfix_exp Increment  | AND, selection_stm -> .if LParen exp RParen stm  | Semicolon, primary_exp -> .LParen exp RParen  | LParen, stm -> .compound_stm  | -void-, stm -> .jump_stm  | -float2-, stm -> .jump_stm  | Number, exp_stm -> .exp Semicolon  | RBrace, exp_stm -> .exp Semicolon  | -int-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half4-, jump_stm -> .break  | -do-, stm -> .iteration_stm  | -fixed3-, stm -> .jump_stm  | Plus, selection_stm -> if LParen exp RParen .stm  | -int-, compound_stm -> .LBrace RBrace  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Number, postfix_exp -> .primary_exp  | Assign, iteration_stm -> .while LParen exp RParen stm  | LParen, stm -> .iteration_stm  | -float2-, exp_stm -> .Semicolon  | LBrace, exp_stm -> .exp Semicolon  | -void-, jump_stm -> .-continue-  | else, compound_stm -> .LBrace block_item_list RBrace  | -fixed2-, primary_exp -> .String  | Caret, compound_stm -> .LBrace RBrace  | -fixed2-, exp_stm -> .exp Semicolon  | -long-, stm -> .selection_stm  | -return-, exp_stm -> .Semicolon  | -continue-, unary_op -> .Tilde  | Increment, stm -> .iteration_stm  | -fixed4-, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, stm -> .selection_stm  | Decrement, jump_stm -> .-continue-  | -do-, exp_stm -> .exp Semicolon  | if, primary_exp -> .ID  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, stm -> .exp_stm  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -continue-, stm -> .compound_stm  | ID, selection_stm -> .if LParen exp RParen stm  | while, stm -> .exp_stm  | LBrace, jump_stm -> .-continue-  | -half4-, iteration_stm -> .while LParen exp RParen stm  | -continue-, compound_stm -> .LBrace RBrace  | -fixed3-, stm -> .jump_stm  | -float3-, postfix_exp -> .postfix_exp LParen RParen  | OR, jump_stm -> .break  | for, compound_stm -> .LBrace RBrace  | -long-, jump_stm -> .break  | -return-, compound_stm -> .LBrace RBrace  | -void-, selection_stm -> if LParen exp RParen .stm else stm  | Decrement, exp_stm -> .Semicolon  | -fixed2-, selection_stm -> .if LParen exp RParen stm else stm  | -void-, jump_stm -> .-continue-  | while, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Plus, exp_stm -> .Semicolon  | -fixed4-, exp_stm -> .Semicolon  | -goto-, iteration_stm -> .while LParen exp RParen stm  | -void-, jump_stm -> .break  | -float3-, stm -> .iteration_stm  | -char-, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, jump_stm -> .break  | -float4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | NOT, iteration_stm -> .while LParen exp RParen stm  | LBrace, unary_exp -> .Increment unary_exp  | EQ, primary_exp -> .Number  | VerticalBar, primary_exp -> .String  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, selection_stm -> if LParen exp RParen .stm else stm  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | LT, jump_stm -> .-return- exp Semicolon  | -void-, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, compound_stm -> .LBrace RBrace  | -fixed4-, postfix_exp -> .postfix_exp Dot ID  | Question, selection_stm -> if LParen exp RParen .stm else stm  | Plus, exp_stm -> .exp Semicolon  | -sampler2D-, selection_stm -> if LParen exp RParen .stm else stm  | -uniform-, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float3-, stm -> .exp_stm  | -void-, selection_stm -> .if LParen exp RParen stm  | -half2-, stm -> .jump_stm  | Minus, primary_exp -> .String  | EQ, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, jump_stm -> .-continue-  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -float3-, primary_exp -> .ID  | Divide, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed4-, selection_stm -> if LParen exp RParen .stm  | ID, stm -> .exp_stm  | -goto-, jump_stm -> .-continue-  | Tilde, stm -> .compound_stm  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Plus, jump_stm -> .-goto- ID  | ID, jump_stm -> .break  | Increment, selection_stm -> .if LParen exp RParen stm else stm  | -fixed2-, stm -> .exp_stm  | -fixed3-, stm -> .compound_stm  | LParen, postfix_exp -> .postfix_exp Dot ID  | EQ, unary_op -> .Minus  | String, selection_stm -> if LParen exp RParen .stm  | if, jump_stm -> .break  | if, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half4-, selection_stm -> if LParen exp RParen .stm else stm  | break, unary_exp -> .unary_op unary_exp  | Comma, jump_stm -> .-return- exp Semicolon  | -goto-, stm -> .compound_stm  | RBrace, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Semicolon, stm -> .compound_stm  | -fixed4-, exp_stm -> .exp Semicolon  | -half2-, selection_stm -> .if LParen exp RParen stm else stm  | -return-, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | Minus, iteration_stm -> .while LParen exp RParen stm  | break, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -int-, jump_stm -> .-continue-  | -continue-, stm -> .compound_stm  | for, selection_stm -> if LParen exp RParen .stm else stm  | -float2-, stm -> .compound_stm  | -short-, jump_stm -> .-goto- ID  | -float2-, selection_stm -> if LParen exp RParen .stm  | LBrace, stm -> .selection_stm  | Tilde, postfix_exp -> .postfix_exp Increment  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -float2-, jump_stm -> .break  | -char-, binary_exp -> .unary_exp  | OR, stm -> .compound_stm  | -long-, stm -> .compound_stm  | -fixed2-, binary_exp -> .unary_exp  | Caret, jump_stm -> .-goto- ID  | Increment, selection_stm -> .if LParen exp RParen stm else stm  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | LBrack, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LBrace, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, stm -> .iteration_stm  | -half3-, stm -> .compound_stm  | -char-, jump_stm -> .break  | NOT, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | break, postfix_exp -> .primary_exp  | LBrack, jump_stm -> .break  | -long-, jump_stm -> .-continue-  | -uniform-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LBrace, stm -> .compound_stm  | -goto-, selection_stm -> .if LParen exp RParen stm  | -short-, postfix_exp -> .primary_exp  | LParen, stm -> .selection_stm  | LBrace, stm -> .compound_stm  | -float4-, postfix_exp -> .postfix_exp LParen RParen  | Assign, compound_stm -> .LBrace RBrace  | -half3-, selection_stm -> .if LParen exp RParen stm  | LBrace, jump_stm -> .break  | -half4-, unary_op -> .NOT  | Decrement, iteration_stm -> .while LParen exp RParen stm  | -uniform-, jump_stm -> .-continue-  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -short-, postfix_exp -> .postfix_exp LParen RParen  | NEQ, jump_stm -> .-return- exp Semicolon  | -continue-, stm -> .iteration_stm  | -float-, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, jump_stm -> .-return- exp Semicolon  | -half3-, primary_exp -> .LParen exp RParen  | NEQ, compound_stm -> .LBrace RBrace  | Increment, stm -> .compound_stm  | -continue-, stm -> .exp_stm  | Plus, postfix_exp -> .postfix_exp Decrement  | Minus, stm -> .selection_stm  | -goto-, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, selection_stm -> if LParen exp RParen .stm else stm  | -void-, selection_stm -> if LParen exp RParen .stm  | while, postfix_exp -> .postfix_exp Decrement  | Times, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -int-, unary_op -> .NOT  | LParen, stm -> .iteration_stm  | ID, stm -> .compound_stm  | Plus, exp_stm -> .exp Semicolon  | String, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, selection_stm -> if LParen exp RParen .stm  | Plus, primary_exp -> .String  | Dot, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Increment, postfix_exp -> .primary_exp  | AND, jump_stm -> .-return- exp Semicolon  | -short-, compound_stm -> .LBrace RBrace  | String, selection_stm -> .if LParen exp RParen stm  | Increment, selection_stm -> if LParen exp RParen .stm else stm  | -fixed4-, compound_stm -> .LBrace RBrace  | -struct-, exp_stm -> .Semicolon  | Increment, unary_exp -> .unary_op unary_exp  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Increment, stm -> .compound_stm  | -float3-, primary_exp -> .String  | LeftShift, jump_stm -> .-continue-  | -fixed3-, postfix_exp -> .postfix_exp LParen RParen  | GE, stm -> .selection_stm  | -float4-, postfix_exp -> .primary_exp  | OR, stm -> .exp_stm  | RBrace, iteration_stm -> .while LParen exp RParen stm  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | while, unary_exp -> .postfix_exp  | RightShift, compound_stm -> .LBrace block_item_list RBrace  | -fixed4-, iteration_stm -> .while LParen exp RParen stm  | -float2-, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_exp -> .Increment unary_exp  | Divide, exp_stm -> .Semicolon  | ID, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed2-, jump_stm -> .-goto- ID  | -struct-, primary_exp -> .Number  | AND, exp_stm -> .exp Semicolon  | -half3-, jump_stm -> .break  | Minus, iteration_stm -> .while LParen exp RParen stm  | Plus, postfix_exp -> .postfix_exp Dot ID  | Minus, compound_stm -> .LBrace RBrace  | if, jump_stm -> .break  | -void-, jump_stm -> .-goto- ID  | -float3-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, iteration_stm -> .while LParen exp RParen stm  | -float-, stm -> .selection_stm  | Plus, compound_stm -> .LBrace RBrace  | NOT, exp_stm -> .Semicolon  | Decrement, stm -> .exp_stm  | -sampler2D-, selection_stm -> if LParen exp RParen .stm else stm  | LBrace, primary_exp -> .String  | Ampersand, exp_stm -> .Semicolon  | -float2-, iteration_stm -> .while LParen exp RParen stm  | Number, jump_stm -> .-return- exp Semicolon  | -long-, unary_op -> .Tilde  | Plus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | NOT, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, exp_stm -> .exp Semicolon  | Decrement, stm -> .compound_stm  | -sampler2D-, stm -> .selection_stm  | LParen, jump_stm -> .-goto- ID  | else, stm -> .jump_stm  | ID, stm -> .iteration_stm  | LParen, selection_stm -> .if LParen exp RParen stm else stm  | Increment, stm -> .jump_stm  | -void-, selection_stm -> .if LParen exp RParen stm  | -long-, binary_exp -> .unary_exp  | EQ, unary_exp -> .postfix_exp  | Minus, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half2-, unary_op -> .Tilde  | Tilde, jump_stm -> .break  | ID, exp_stm -> .Semicolon  | -fixed3-, postfix_exp -> .postfix_exp Decrement  | Decrement, jump_stm -> .-goto- ID  | Semicolon, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half3-, stm -> .exp_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -return-, unary_exp -> .Decrement unary_exp  | Divide, stm -> .iteration_stm  | Tilde, postfix_exp -> .postfix_exp Dot ID  | Ampersand, compound_stm -> .LBrace block_item_list RBrace  | LBrace, selection_stm -> if LParen exp RParen .stm  | Number, postfix_exp -> .postfix_exp Increment  | Semicolon, jump_stm -> .break  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | -fixed3-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, stm -> .selection_stm  | -struct-, stm -> .exp_stm  | -return-, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, stm -> .exp_stm  | -char-, postfix_exp -> .postfix_exp Decrement  | Ampersand, exp_stm -> .exp Semicolon  | -double-, postfix_exp -> .postfix_exp Increment  | GT, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -long-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, jump_stm -> .-goto- ID  | -int-, compound_stm -> .LBrace RBrace  | -half2-, jump_stm -> .-goto- ID  | -do-, stm -> .selection_stm  | if, stm -> .compound_stm  | -uniform-, exp_stm -> .exp Semicolon  | -float-, stm -> .jump_stm  | -float-, selection_stm -> if LParen exp RParen .stm  | -sampler2D-, compound_stm -> .LBrace RBrace  | -float4-, jump_stm -> .-continue-  | RBrace, binary_exp -> .unary_exp  | LE, jump_stm -> .-return- exp Semicolon  | -float4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | RBrace, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, stm -> .exp_stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, primary_exp -> .Number  | Minus, stm -> .exp_stm  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -long-, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Percent, primary_exp -> .ID  | VerticalBar, jump_stm -> .-return- exp Semicolon  | -float3-, jump_stm -> .-return- exp Semicolon  | -fixed4-, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | if, selection_stm -> if LParen exp RParen .stm else stm  | -fixed3-, exp_stm -> .exp Semicolon  | -char-, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Comma, compound_stm -> .LBrace block_item_list RBrace  | -float2-, jump_stm -> .-continue-  | -fixed2-, primary_exp -> .Number  | LeftShift, selection_stm -> if LParen exp RParen .stm  | String, stm -> .compound_stm  | LBrace, jump_stm -> .break  | while, selection_stm -> .if LParen exp RParen stm else stm  | -long-, exp_stm -> .exp Semicolon  | while, jump_stm -> .break  | LParen, compound_stm -> .LBrace RBrace  | LBrace, jump_stm -> .-goto- ID  | -float-, exp_stm -> .exp Semicolon  | LBrace, jump_stm -> .-continue-  | -short-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, binary_exp -> .binary_exp binary_op unary_exp  | EQ, jump_stm -> .-return- exp Semicolon  | else, exp_stm -> .exp Semicolon  | for, postfix_exp -> .postfix_exp Decrement  | Percent, compound_stm -> .LBrace block_item_list RBrace  | -void-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, selection_stm -> .if LParen exp RParen stm  | -fixed2-, primary_exp -> .LParen exp RParen  | Times, stm -> .selection_stm  | ID, selection_stm -> .if LParen exp RParen stm  | -double-, exp_stm -> .Semicolon  | LParen, postfix_exp -> .primary_exp  | Percent, selection_stm -> if LParen exp RParen .stm  | Semicolon, primary_exp -> .String  | Comma, compound_stm -> .LBrace block_item_list RBrace  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, stm -> .iteration_stm  | -fixed2-, selection_stm -> if LParen exp RParen .stm  | -short-, binary_exp -> .binary_exp binary_op unary_exp  | Question, stm -> .exp_stm  | Minus, exp_stm -> .exp Semicolon  | -uniform-, exp_stm -> .Semicolon  | -char-, primary_exp -> .Number  | RightShift, selection_stm -> if LParen exp RParen .stm else stm  | -half4-, jump_stm -> .-return- exp Semicolon  | LBrace, selection_stm -> if LParen exp RParen .stm  | Minus, selection_stm -> .if LParen exp RParen stm  | -goto-, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, jump_stm -> .-continue-  | -goto-, unary_exp -> .Decrement unary_exp  | Question, unary_exp -> .Increment unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Plus, primary_exp -> .String  | VerticalBar, stm -> .jump_stm  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | for, iteration_stm -> .while LParen exp RParen stm  | Semicolon, primary_exp -> .Number  | Times, jump_stm -> .-return- exp Semicolon  | Increment, binary_exp -> .binary_exp binary_op unary_exp  | Times, selection_stm -> if LParen exp RParen .stm  | -return-, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, selection_stm -> if LParen exp RParen .stm  | -do-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, primary_exp -> .ID  | Minus, selection_stm -> .if LParen exp RParen stm  | -continue-, unary_exp -> .unary_op unary_exp  | Question, stm -> .selection_stm  | -half3-, selection_stm -> .if LParen exp RParen stm else stm  | -half4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, unary_op -> .Plus  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -sampler2D-, selection_stm -> .if LParen exp RParen stm else stm  | -double-, unary_exp -> .unary_op unary_exp  | Times, stm -> .iteration_stm  | -int-, stm -> .jump_stm  | -double-, binary_exp -> .unary_exp  | Question, exp_stm -> .exp Semicolon  | Plus, jump_stm -> .-continue-  | -float2-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .String  | Question, exp_stm -> .exp Semicolon  | else, primary_exp -> .Number  | Decrement, iteration_stm -> .while LParen exp RParen stm  | while, selection_stm -> .if LParen exp RParen stm  | break, jump_stm -> .-return- exp Semicolon  | -half4-, postfix_exp -> .postfix_exp LParen RParen  | Comma, selection_stm -> .if LParen exp RParen stm  | -float4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, unary_exp -> .Decrement unary_exp  | GT, compound_stm -> .LBrace RBrace  | Minus, selection_stm -> if LParen exp RParen .stm else stm  | -continue-, stm -> .selection_stm  | -char-, compound_stm -> .LBrace block_item_list RBrace  | ID, unary_exp -> .unary_op unary_exp  | VerticalBar, stm -> .exp_stm  | String, jump_stm -> .-continue-  | -float-, unary_exp -> .Increment unary_exp  | GT, jump_stm -> .break  | -double-, unary_exp -> .unary_op unary_exp  | Ampersand, selection_stm -> if LParen exp RParen .stm else stm  | Number, compound_stm -> .LBrace block_item_list RBrace  | -sampler2D-, exp_stm -> .exp Semicolon  | -return-, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | LeftShift, selection_stm -> .if LParen exp RParen stm else stm  | -uniform-, compound_stm -> .LBrace RBrace  | -continue-, exp_stm -> .exp Semicolon  | Number, primary_exp -> .String  | Minus, iteration_stm -> .while LParen exp RParen stm  | else, postfix_exp -> .postfix_exp Increment  | RightShift, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | NEQ, selection_stm -> .if LParen exp RParen stm  | -uniform-, postfix_exp -> .postfix_exp Increment  | Percent, selection_stm -> if LParen exp RParen .stm else stm  | -return-, postfix_exp -> .primary_exp  | Caret, compound_stm -> .LBrace block_item_list RBrace  | break, exp_stm -> .Semicolon  | -double-, selection_stm -> .if LParen exp RParen stm  | -float3-, jump_stm -> .-continue-  | -sampler2D-, stm -> .selection_stm  | -short-, iteration_stm -> .while LParen exp RParen stm  | -int-, jump_stm -> .-goto- ID  | Tilde, selection_stm -> if LParen exp RParen .stm else stm  | NOT, stm -> .compound_stm  | Increment, exp_stm -> .exp Semicolon  | Tilde, stm -> .compound_stm  | -float2-, jump_stm -> .-goto- ID  | Number, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, postfix_exp -> .postfix_exp Increment  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | for, postfix_exp -> .postfix_exp Decrement  | Increment, binary_exp -> .binary_exp binary_op unary_exp  | Minus, jump_stm -> .-goto- ID  | Decrement, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | OR, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp Increment  | LeftShift, postfix_exp -> .primary_exp  | Question, jump_stm -> .-goto- ID  | -uniform-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, stm -> .iteration_stm  | else, jump_stm -> .break  | -fixed4-, compound_stm -> .LBrace RBrace  | -uniform-, unary_exp -> .unary_op unary_exp  | GT, iteration_stm -> .while LParen exp RParen stm  | Decrement, stm -> .iteration_stm  | while, postfix_exp -> .postfix_exp Increment  | Increment, selection_stm -> .if LParen exp RParen stm  | -return-, unary_exp -> .unary_op unary_exp  | OR, exp_stm -> .Semicolon  | -return-, selection_stm -> .if LParen exp RParen stm else stm  | -fixed4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, stm -> .iteration_stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_op -> .Minus  | Plus, jump_stm -> .-continue-  | LParen, selection_stm -> .if LParen exp RParen stm  | Tilde, stm -> .iteration_stm  | -goto-, selection_stm -> .if LParen exp RParen stm else stm  | -fixed3-, jump_stm -> .-goto- ID  | -goto-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, stm -> .compound_stm  | while, unary_exp -> .postfix_exp  | Caret, stm -> .jump_stm  | Increment, selection_stm -> if LParen exp RParen .stm else stm  | while, selection_stm -> .if LParen exp RParen stm  | Number, primary_exp -> .ID  | LT, stm -> .selection_stm  | NOT, postfix_exp -> .postfix_exp Dot ID  | Caret, iteration_stm -> .while LParen exp RParen stm  | NOT, compound_stm -> .LBrace RBrace  | -int-, selection_stm -> if LParen exp RParen .stm else stm  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, selection_stm -> if LParen exp RParen .stm else stm  | -struct-, primary_exp -> .LParen exp RParen  | Assign, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -return-, unary_op -> .Minus  | Number, primary_exp -> .Number  | Percent, jump_stm -> .-continue-  | LBrace, stm -> .jump_stm  | -fixed4-, iteration_stm -> .while LParen exp RParen stm  | -return-, jump_stm -> .-return- exp Semicolon  | break, selection_stm -> if LParen exp RParen .stm  | LParen, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -double-, primary_exp -> .Number  | Assign, jump_stm -> .-return- exp Semicolon  | for, postfix_exp -> .postfix_exp Decrement  | NEQ, jump_stm -> .break  | -float-, unary_exp -> .Increment unary_exp  | Caret, jump_stm -> .break  | -goto-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Increment, compound_stm -> .LBrace block_item_list RBrace  | -short-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float-, compound_stm -> .LBrace block_item_list RBrace  | String, stm -> .selection_stm  | RBrace, stm -> .exp_stm  | -continue-, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, selection_stm -> .if LParen exp RParen stm  | -fixed4-, exp_stm -> .Semicolon  | -uniform-, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, stm -> .compound_stm  | -int-, stm -> .exp_stm  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -void-, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, selection_stm -> if LParen exp RParen .stm else stm  | -half3-, exp_stm -> .exp Semicolon  | break, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, iteration_stm -> .while LParen exp RParen stm  | -fixed2-, stm -> .selection_stm  | -float-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -do-, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, unary_exp -> .postfix_exp  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Tilde, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, stm -> .compound_stm  | -fixed3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | RBrace, postfix_exp -> .postfix_exp Increment  | Minus, binary_exp -> .unary_exp  | LeftShift, iteration_stm -> .while LParen exp RParen stm  | -double-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -sampler2D-, jump_stm -> .-goto- ID  | LBrace, primary_exp -> .ID  | RightShift, selection_stm -> if LParen exp RParen .stm  | RBrace, selection_stm -> .if LParen exp RParen stm else stm  | -char-, stm -> .iteration_stm  | -long-, iteration_stm -> .while LParen exp RParen stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -short-, selection_stm -> if LParen exp RParen .stm  | -fixed2-, selection_stm -> if LParen exp RParen .stm  | -struct-, selection_stm -> .if LParen exp RParen stm else stm  | break, postfix_exp -> .postfix_exp Dot ID  | RightShift, exp_stm -> .Semicolon  | else, stm -> .compound_stm  | Number, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, unary_exp -> .unary_op unary_exp  | Minus, unary_exp -> .unary_op unary_exp  | RightShift, compound_stm -> .LBrace RBrace  | -short-, unary_exp -> .Decrement unary_exp  | Percent, stm -> .selection_stm  | break, stm -> .compound_stm  | -do-, primary_exp -> .LParen exp RParen  | LE, stm -> .jump_stm  | if, jump_stm -> .-continue-  | -long-, exp_stm -> .Semicolon  | -short-, stm -> .compound_stm  | -half4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Decrement, stm -> .iteration_stm  | if, unary_exp -> .unary_op unary_exp  | NEQ, jump_stm -> .-goto- ID  | -char-, stm -> .selection_stm  | -double-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -double-, unary_exp -> .postfix_exp  | GE, selection_stm -> .if LParen exp RParen stm  | for, selection_stm -> .if LParen exp RParen stm  | ID, jump_stm -> .-goto- ID  | Minus, primary_exp -> .ID  | Question, stm -> .iteration_stm  | Increment, compound_stm -> .LBrace block_item_list RBrace  | -continue-, selection_stm -> .if LParen exp RParen stm  | -half3-, compound_stm -> .LBrace RBrace  | -half4-, binary_exp -> .binary_exp binary_op unary_exp  | Divide, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float2-, stm -> .jump_stm  | RBrace, selection_stm -> if LParen exp RParen .stm  | -goto-, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, jump_stm -> .-continue-  | ID, compound_stm -> .LBrace RBrace  | -goto-, postfix_exp -> .postfix_exp LParen RParen  | Divide, jump_stm -> .-continue-  | -char-, stm -> .jump_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half2-, unary_exp -> .Increment unary_exp  | Comma, selection_stm -> if LParen exp RParen .stm else stm  | -goto-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -uniform-, primary_exp -> .ID  | Comma, selection_stm -> .if LParen exp RParen stm else stm  | for, unary_exp -> .Increment unary_exp  | Assign, jump_stm -> .-return- exp Semicolon  | if, postfix_exp -> .postfix_exp Increment  | Assign, jump_stm -> .break  | Tilde, selection_stm -> .if LParen exp RParen stm else stm  | -float3-, jump_stm -> .-goto- ID  | -fixed3-, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | LT, stm -> .selection_stm  | -sampler2D-, jump_stm -> .-continue-  | -half3-, selection_stm -> .if LParen exp RParen stm else stm  | RBrace, stm -> .iteration_stm  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -half4-, stm -> .jump_stm  | LParen, primary_exp -> .LParen exp RParen  | Increment, jump_stm -> .-return- exp Semicolon  | -fixed2-, jump_stm -> .-goto- ID  | for, stm -> .iteration_stm  | Decrement, compound_stm -> .LBrace RBrace  | LParen, unary_op -> .Minus  | Decrement, jump_stm -> .-return- exp Semicolon  | -uniform-, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, compound_stm -> .LBrace RBrace  | else, selection_stm -> .if LParen exp RParen stm else stm  | -struct-, unary_exp -> .Decrement unary_exp  | Times, stm -> .selection_stm  | -int-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | ID, stm -> .exp_stm  | -fixed4-, assignment_exp -> .conditional_exp  | Comma, postfix_exp -> .primary_exp  | GT, stm -> .selection_stm  | else, exp_stm -> .Semicolon  | -void-, jump_stm -> .-return- exp Semicolon  | Minus, postfix_exp -> .postfix_exp Decrement  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, stm -> .selection_stm  | String, postfix_exp -> .postfix_exp LParen RParen  | Caret, primary_exp -> .ID  | AND, postfix_exp -> .postfix_exp LParen RParen  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Dot, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | String, unary_op -> .Plus  | Decrement, exp_stm -> .Semicolon  | NOT, jump_stm -> .-goto- ID  | -sampler2D-, selection_stm -> if LParen exp RParen .stm else stm  | -float4-, stm -> .jump_stm  | -short-, jump_stm -> .-return- exp Semicolon  | Tilde, jump_stm -> .-continue-  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | else, selection_stm -> .if LParen exp RParen stm else stm  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | Percent, unary_exp -> .Increment unary_exp  | Plus, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Decrement  | LBrack, primary_exp -> .ID  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | RightShift, jump_stm -> .-goto- ID  | break, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, unary_exp -> .Increment unary_exp  | Semicolon, compound_stm -> .LBrace RBrace  | -sampler2D-, postfix_exp -> .postfix_exp Dot ID  | Increment, stm -> .selection_stm  | -fixed2-, compound_stm -> .LBrace RBrace  | RBrace, primary_exp -> .LParen exp RParen  | Dot, primary_exp -> .Number  | Divide, selection_stm -> if LParen exp RParen .stm  | -fixed4-, stm -> .selection_stm  | -long-, selection_stm -> if LParen exp RParen .stm else stm  | -char-, jump_stm -> .-continue-  | Plus, primary_exp -> .Number  | Semicolon, unary_op -> .Minus  | NOT, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, jump_stm -> .break  | -short-, stm -> .selection_stm  | Number, selection_stm -> if LParen exp RParen .stm else stm  | -double-, selection_stm -> .if LParen exp RParen stm else stm  | -goto-, exp_stm -> .exp Semicolon  | -fixed4-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | ID, selection_stm -> .if LParen exp RParen stm else stm  | ID, stm -> .jump_stm  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | LParen, primary_exp -> .LParen exp RParen  | Comma, jump_stm -> .-goto- ID  | -continue-, exp_stm -> .Semicolon  | String, jump_stm -> .break  | -int-, primary_exp -> .LParen exp RParen  | Divide, selection_stm -> if LParen exp RParen .stm  | Increment, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, stm -> .iteration_stm  | -struct-, jump_stm -> .break  | Semicolon, conditional_exp -> .binary_exp  | Semicolon, selection_stm -> if LParen exp RParen .stm  | NOT, compound_stm -> .LBrace block_item_list RBrace  | RBrace, exp_stm -> .exp Semicolon  | -float2-, iteration_stm -> .while LParen exp RParen stm  | -float4-, compound_stm -> .LBrace RBrace  | for, exp_stm -> .Semicolon  | RBrace, selection_stm -> .if LParen exp RParen stm  | -do-, primary_exp -> .Number  | OR, unary_exp -> .Decrement unary_exp  | Plus, binary_exp -> .unary_exp  | LT, primary_exp -> .LParen exp RParen  | Plus, jump_stm -> .-continue-  | -half2-, stm -> .compound_stm  | -struct-, unary_exp -> .Increment unary_exp  | RightShift, iteration_stm -> .while LParen exp RParen stm  | for, jump_stm -> .-return- exp Semicolon  | -float2-, postfix_exp -> .postfix_exp Dot ID  | LParen, compound_stm -> .LBrace RBrace  | -float-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -continue-, jump_stm -> .break  | -struct-, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, stm -> .iteration_stm  | -sampler2D-, exp_stm -> .exp Semicolon  | Semicolon, iteration_stm -> .while LParen exp RParen stm  | -struct-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed2-, postfix_exp -> .postfix_exp Increment  | Dot, selection_stm -> if LParen exp RParen .stm  | -void-, exp_stm -> .Semicolon  | Tilde, stm -> .exp_stm  | else, jump_stm -> .-goto- ID  | NOT, jump_stm -> .-continue-  | Decrement, stm -> .compound_stm  | break, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, stm -> .jump_stm  | for, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Number, unary_op -> .Plus  | Tilde, selection_stm -> .if LParen exp RParen stm else stm  | Semicolon, iteration_stm -> .while LParen exp RParen stm  | -char-, postfix_exp -> .postfix_exp Increment  | Divide, stm -> .selection_stm  | -float2-, stm -> .jump_stm  | -return-, iteration_stm -> .while LParen exp RParen stm  | ID, stm -> .iteration_stm  | -void-, unary_exp -> .Increment unary_exp  | LE, unary_exp -> .postfix_exp  | OR, stm -> .exp_stm  | -fixed2-, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .NOT  | String, jump_stm -> .-goto- ID  | RBrace, stm -> .iteration_stm  | -double-, unary_exp -> .Decrement unary_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | LE, exp_stm -> .Semicolon  | Number, stm -> .iteration_stm  | -return-, binary_exp -> .unary_exp  | AND, selection_stm -> if LParen exp RParen .stm  | -float4-, unary_op -> .Tilde  | ID, compound_stm -> .LBrace RBrace  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | else, exp_stm -> .Semicolon  | break, unary_op -> .Plus  | NOT, selection_stm -> if LParen exp RParen .stm  | -continue-, postfix_exp -> .primary_exp  | Divide, primary_exp -> .LParen exp RParen  | Decrement, stm -> .compound_stm  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | -struct-, selection_stm -> if LParen exp RParen .stm  | -half4-, jump_stm -> .-return- exp Semicolon  | -sampler2D-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, stm -> .iteration_stm  | NOT, jump_stm -> .break  | -float2-, primary_exp -> .Number  | LParen, exp_stm -> .exp Semicolon  | ID, primary_exp -> .Number  | NEQ, unary_exp -> .Increment unary_exp  | AND, jump_stm -> .-continue-  | -double-, stm -> .jump_stm  | -continue-, jump_stm -> .break  | -half3-, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, selection_stm -> .if LParen exp RParen stm  | -char-, stm -> .jump_stm  | -fixed3-, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, primary_exp -> .LParen exp RParen  | Minus, compound_stm -> .LBrace block_item_list RBrace  | -do-, stm -> .selection_stm  | Semicolon, postfix_exp -> .postfix_exp Decrement  | OR, exp_stm -> .Semicolon  | for, postfix_exp -> .postfix_exp LParen RParen  | Question, stm -> .jump_stm  | -half4-, postfix_exp -> .postfix_exp Increment  | EQ, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Times, exp_stm -> .Semicolon  | -half3-, exp_stm -> .exp Semicolon  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, selection_stm -> .if LParen exp RParen stm else stm  | Number, jump_stm -> .-continue-  | -float3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -void-, stm -> .jump_stm  | -int-, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp Decrement  | Dot, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .postfix_exp  | LeftShift, jump_stm -> .-continue-  | Increment, )
369 <- (293, 'unary_exp') (unary_exp -> Decrement unary_exp.  | RightShift, unary_exp -> Decrement unary_exp.  | OR, unary_exp -> Decrement unary_exp.  | LE, unary_exp -> Decrement unary_exp.  | Divide, unary_exp -> Decrement unary_exp.  | RBrack, unary_exp -> Decrement unary_exp.  | VerticalBar, unary_exp -> Decrement unary_exp.  | EQ, unary_exp -> Decrement unary_exp.  | Percent, unary_exp -> Decrement unary_exp.  | LT, unary_exp -> Decrement unary_exp.  | GE, unary_exp -> Decrement unary_exp.  | Ampersand, unary_exp -> Decrement unary_exp.  | LeftShift, unary_exp -> Decrement unary_exp.  | Question, unary_exp -> Decrement unary_exp.  | Minus, unary_exp -> Decrement unary_exp.  | Plus, unary_exp -> Decrement unary_exp.  | NEQ, unary_exp -> Decrement unary_exp.  | AND, unary_exp -> Decrement unary_exp.  | Times, unary_exp -> Decrement unary_exp.  | Assign, unary_exp -> Decrement unary_exp.  | GT, unary_exp -> Decrement unary_exp.  | Comma, unary_exp -> Decrement unary_exp.  | Caret, )
370 <- (295, 'unary_exp') (unary_exp -> Increment unary_exp.  | Question, unary_exp -> Increment unary_exp.  | LeftShift, unary_exp -> Increment unary_exp.  | LT, unary_exp -> Increment unary_exp.  | LE, unary_exp -> Increment unary_exp.  | Comma, unary_exp -> Increment unary_exp.  | Divide, unary_exp -> Increment unary_exp.  | OR, unary_exp -> Increment unary_exp.  | Assign, unary_exp -> Increment unary_exp.  | VerticalBar, unary_exp -> Increment unary_exp.  | GE, unary_exp -> Increment unary_exp.  | Times, unary_exp -> Increment unary_exp.  | RBrack, unary_exp -> Increment unary_exp.  | Ampersand, unary_exp -> Increment unary_exp.  | AND, unary_exp -> Increment unary_exp.  | Caret, unary_exp -> Increment unary_exp.  | GT, unary_exp -> Increment unary_exp.  | NEQ, unary_exp -> Increment unary_exp.  | Plus, unary_exp -> Increment unary_exp.  | EQ, unary_exp -> Increment unary_exp.  | RightShift, unary_exp -> Increment unary_exp.  | Minus, unary_exp -> Increment unary_exp.  | Percent, )
371 <- (296, 'exp') (primary_exp -> LParen exp .RParen  | LeftShift, primary_exp -> LParen exp .RParen  | RightShift, primary_exp -> LParen exp .RParen  | NEQ, primary_exp -> LParen exp .RParen  | Ampersand, primary_exp -> LParen exp .RParen  | Assign, primary_exp -> LParen exp .RParen  | AND, primary_exp -> LParen exp .RParen  | LBrack, primary_exp -> LParen exp .RParen  | LParen, primary_exp -> LParen exp .RParen  | EQ, primary_exp -> LParen exp .RParen  | LE, exp -> exp .Comma assignment_exp  | Comma, primary_exp -> LParen exp .RParen  | Minus, primary_exp -> LParen exp .RParen  | VerticalBar, primary_exp -> LParen exp .RParen  | Percent, primary_exp -> LParen exp .RParen  | Divide, primary_exp -> LParen exp .RParen  | Dot, primary_exp -> LParen exp .RParen  | GT, primary_exp -> LParen exp .RParen  | LT, primary_exp -> LParen exp .RParen  | Comma, primary_exp -> LParen exp .RParen  | Increment, primary_exp -> LParen exp .RParen  | Plus, primary_exp -> LParen exp .RParen  | Times, primary_exp -> LParen exp .RParen  | Decrement, primary_exp -> LParen exp .RParen  | OR, primary_exp -> LParen exp .RParen  | RBrack, exp -> exp .Comma assignment_exp  | RParen, primary_exp -> LParen exp .RParen  | Question, primary_exp -> LParen exp .RParen  | GE, primary_exp -> LParen exp .RParen  | Caret, )
372 <- (300, 'Question') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp Dot ID  | Decrement, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .unary_op unary_exp  | Colon, unary_exp -> .Increment unary_exp  | Colon, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, postfix_exp -> .primary_exp  | LT, primary_exp -> .LParen exp RParen  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | Number, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, conditional_exp -> .binary_exp  | Colon, binary_exp -> .unary_exp  | EQ, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, primary_exp -> .String  | Colon, unary_exp -> .postfix_exp  | Colon, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, primary_exp -> .ID  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Colon, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, postfix_exp -> .postfix_exp Decrement  | Colon, binary_exp -> .unary_exp  | LE, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, unary_op -> .Minus  | Number, primary_exp -> .String  | Dot, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Colon, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, conditional_exp -> binary_exp Question .exp Colon conditional_exp  | Comma, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, assignment_exp -> .unary_exp assignment_op assignment_exp  | Colon, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, binary_exp -> .unary_exp  | AND, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Colon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | GT, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .Decrement unary_exp  | Colon, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_op -> .Plus  | Minus, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, primary_exp -> .ID  | Assign, postfix_exp -> .primary_exp  | Decrement, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, postfix_exp -> .postfix_exp Increment  | Colon, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, postfix_exp -> .postfix_exp LParen RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .Number  | Colon, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, unary_op -> .Tilde  | NOT, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Colon, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, assignment_exp -> .conditional_exp  | Colon, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, primary_exp -> .LParen exp RParen  | Colon, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, binary_exp -> .unary_exp  | Colon, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, postfix_exp -> .postfix_exp Dot ID  | Colon, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Minus, postfix_exp -> .primary_exp  | GT, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Colon, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, primary_exp -> .Number  | Dot, exp -> .exp Comma assignment_exp  | Colon, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | Colon, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .postfix_exp  | NEQ, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .Number  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, unary_op -> .Minus  | NOT, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Colon, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, binary_exp -> .unary_exp  | LT, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, conditional_exp -> binary_exp Question .exp Colon conditional_exp  | RBrack, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .String  | GE, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, exp -> .assignment_exp  | Colon, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
373 <- (300, 'binary_op') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | LT, binary_exp -> binary_exp binary_op .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, binary_exp -> binary_exp binary_op .unary_exp  | RBrack, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | GE, binary_exp -> binary_exp binary_op .unary_exp  | Question, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | Caret, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, postfix_exp -> .postfix_exp LParen RParen  | LT, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RBrack, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, primary_exp -> .ID  | RBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .ID  | VerticalBar, primary_exp -> .Number  | RBrack, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, binary_exp -> binary_exp binary_op .unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, unary_exp -> .postfix_exp  | RBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, primary_exp -> .String  | RightShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Plus, unary_exp -> .unary_op unary_exp  | Question, primary_exp -> .ID  | Plus, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | RBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, primary_exp -> .ID  | LeftShift, binary_exp -> binary_exp binary_op .unary_exp  | Ampersand, binary_exp -> binary_exp binary_op .unary_exp  | LT, primary_exp -> .LParen exp RParen  | GT, unary_exp -> .Decrement unary_exp  | RBrack, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Decrement unary_exp  | Caret, primary_exp -> .LParen exp RParen  | GE, unary_exp -> .Decrement unary_exp  | OR, unary_exp -> .postfix_exp  | GT, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, binary_exp -> binary_exp binary_op .unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_op -> .Plus  | Minus, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, binary_exp -> binary_exp binary_op .unary_exp  | Comma, postfix_exp -> .primary_exp  | Decrement, binary_exp -> binary_exp binary_op .unary_exp  | OR, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, binary_exp -> binary_exp binary_op .unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> .Increment unary_exp  | RBrack, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | RBrack, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> binary_exp binary_op .unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, primary_exp -> .String  | AND, postfix_exp -> .postfix_exp LParen RParen  | RBrack, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | AND, binary_exp -> binary_exp binary_op .unary_exp  | LeftShift, unary_exp -> .unary_op unary_exp  | RBrack, primary_exp -> .LParen exp RParen  | Minus, postfix_exp -> .primary_exp  | GT, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, primary_exp -> .Number  | Plus, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .ID  | Comma, primary_exp -> .ID  | LBrack, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, binary_exp -> binary_exp binary_op .unary_exp  | AND, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Times, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, binary_exp -> binary_exp binary_op .unary_exp  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | Percent, primary_exp -> .String  | RBrack, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, binary_exp -> binary_exp binary_op .unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | RBrack, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_op -> .NOT  | Plus, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, binary_exp -> binary_exp binary_op .unary_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, binary_exp -> binary_exp binary_op .unary_exp  | GT, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | RBrack, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Increment  | RBrack, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, binary_exp -> binary_exp binary_op .unary_exp  | Divide, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .primary_exp  | RBrack, binary_exp -> binary_exp binary_op .unary_exp  | Times, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, binary_exp -> binary_exp binary_op .unary_exp  | Percent, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Decrement, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | LBrack, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, binary_exp -> binary_exp binary_op .unary_exp  | EQ, unary_exp -> .postfix_exp  | LeftShift, )
374 <- (302, 'Comma') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, exp -> exp Comma .assignment_exp  | RBrack, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp Dot ID  | Decrement, unary_exp -> .Decrement unary_exp  | Ampersand, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RBrack, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RBrack, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, primary_exp -> .ID  | RBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, exp -> exp Comma .assignment_exp  | Comma, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Question, unary_op -> .Minus  | Number, primary_exp -> .Number  | RBrack, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, postfix_exp -> .postfix_exp Decrement  | RBrack, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, binary_exp -> .unary_exp  | LT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | RBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, unary_exp -> .Decrement unary_exp  | RBrack, postfix_exp -> .primary_exp  | Increment, postfix_exp -> .postfix_exp LParen RParen  | RBrack, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, conditional_exp -> .binary_exp  | RBrack, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | RBrack, primary_exp -> .String  | Question, primary_exp -> .Number  | Percent, unary_exp -> .unary_op unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, primary_exp -> .ID  | GE, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, unary_exp -> .Increment unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, unary_exp -> .postfix_exp  | OR, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .Number  | Plus, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, binary_exp -> .unary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | RBrack, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | RBrack, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Times, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, assignment_exp -> .conditional_exp  | RBrack, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, primary_exp -> .String  | RBrack, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, binary_exp -> .unary_exp  | Caret, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp LParen RParen  | Caret, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, primary_exp -> .ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, binary_exp -> .binary_exp binary_op unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, binary_exp -> .unary_exp  | RBrack, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | RBrack, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Increment  | RBrack, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .primary_exp  | RBrack, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, unary_exp -> .postfix_exp  | RBrack, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, unary_exp -> .Increment unary_exp  | RBrack, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .String  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, assignment_exp -> .unary_exp assignment_op assignment_exp  | RBrack, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
375 <- (302, 'RBrack') (postfix_exp -> postfix_exp LBrack exp RBrack.  | NEQ, postfix_exp -> postfix_exp LBrack exp RBrack.  | Plus, postfix_exp -> postfix_exp LBrack exp RBrack.  | Question, postfix_exp -> postfix_exp LBrack exp RBrack.  | LT, postfix_exp -> postfix_exp LBrack exp RBrack.  | Assign, postfix_exp -> postfix_exp LBrack exp RBrack.  | LParen, postfix_exp -> postfix_exp LBrack exp RBrack.  | VerticalBar, postfix_exp -> postfix_exp LBrack exp RBrack.  | AND, postfix_exp -> postfix_exp LBrack exp RBrack.  | EQ, postfix_exp -> postfix_exp LBrack exp RBrack.  | Times, postfix_exp -> postfix_exp LBrack exp RBrack.  | LBrack, postfix_exp -> postfix_exp LBrack exp RBrack.  | Increment, postfix_exp -> postfix_exp LBrack exp RBrack.  | OR, postfix_exp -> postfix_exp LBrack exp RBrack.  | Caret, postfix_exp -> postfix_exp LBrack exp RBrack.  | Dot, postfix_exp -> postfix_exp LBrack exp RBrack.  | RightShift, postfix_exp -> postfix_exp LBrack exp RBrack.  | Percent, postfix_exp -> postfix_exp LBrack exp RBrack.  | Ampersand, postfix_exp -> postfix_exp LBrack exp RBrack.  | GT, postfix_exp -> postfix_exp LBrack exp RBrack.  | GE, postfix_exp -> postfix_exp LBrack exp RBrack.  | Minus, postfix_exp -> postfix_exp LBrack exp RBrack.  | Comma, postfix_exp -> postfix_exp LBrack exp RBrack.  | LeftShift, postfix_exp -> postfix_exp LBrack exp RBrack.  | Divide, postfix_exp -> postfix_exp LBrack exp RBrack.  | LE, postfix_exp -> postfix_exp LBrack exp RBrack.  | Semicolon, postfix_exp -> postfix_exp LBrack exp RBrack.  | Decrement, )
376 <- (303, 'Decrement') (postfix_exp -> postfix_exp Decrement.  | OR, postfix_exp -> postfix_exp Decrement.  | RightShift, postfix_exp -> postfix_exp Decrement.  | Caret, postfix_exp -> postfix_exp Decrement.  | LParen, postfix_exp -> postfix_exp Decrement.  | Dot, postfix_exp -> postfix_exp Decrement.  | EQ, postfix_exp -> postfix_exp Decrement.  | GT, postfix_exp -> postfix_exp Decrement.  | LT, postfix_exp -> postfix_exp Decrement.  | Question, postfix_exp -> postfix_exp Decrement.  | Assign, postfix_exp -> postfix_exp Decrement.  | Plus, postfix_exp -> postfix_exp Decrement.  | Comma, postfix_exp -> postfix_exp Decrement.  | Percent, postfix_exp -> postfix_exp Decrement.  | GE, postfix_exp -> postfix_exp Decrement.  | Divide, postfix_exp -> postfix_exp Decrement.  | Times, postfix_exp -> postfix_exp Decrement.  | Decrement, postfix_exp -> postfix_exp Decrement.  | Increment, postfix_exp -> postfix_exp Decrement.  | NEQ, postfix_exp -> postfix_exp Decrement.  | Minus, postfix_exp -> postfix_exp Decrement.  | LBrack, postfix_exp -> postfix_exp Decrement.  | Ampersand, postfix_exp -> postfix_exp Decrement.  | AND, postfix_exp -> postfix_exp Decrement.  | LE, postfix_exp -> postfix_exp Decrement.  | VerticalBar, postfix_exp -> postfix_exp Decrement.  | LeftShift, postfix_exp -> postfix_exp Decrement.  | RBrack, )
377 <- (303, 'Dot') (postfix_exp -> postfix_exp Dot .ID  | Percent, postfix_exp -> postfix_exp Dot .ID  | LBrack, postfix_exp -> postfix_exp Dot .ID  | Question, postfix_exp -> postfix_exp Dot .ID  | Divide, postfix_exp -> postfix_exp Dot .ID  | Plus, postfix_exp -> postfix_exp Dot .ID  | AND, postfix_exp -> postfix_exp Dot .ID  | Ampersand, postfix_exp -> postfix_exp Dot .ID  | NEQ, postfix_exp -> postfix_exp Dot .ID  | Assign, postfix_exp -> postfix_exp Dot .ID  | VerticalBar, postfix_exp -> postfix_exp Dot .ID  | Dot, postfix_exp -> postfix_exp Dot .ID  | Decrement, postfix_exp -> postfix_exp Dot .ID  | LE, postfix_exp -> postfix_exp Dot .ID  | Increment, postfix_exp -> postfix_exp Dot .ID  | LT, postfix_exp -> postfix_exp Dot .ID  | RBrack, postfix_exp -> postfix_exp Dot .ID  | Times, postfix_exp -> postfix_exp Dot .ID  | Minus, postfix_exp -> postfix_exp Dot .ID  | OR, postfix_exp -> postfix_exp Dot .ID  | LeftShift, postfix_exp -> postfix_exp Dot .ID  | EQ, postfix_exp -> postfix_exp Dot .ID  | Caret, postfix_exp -> postfix_exp Dot .ID  | GT, postfix_exp -> postfix_exp Dot .ID  | GE, postfix_exp -> postfix_exp Dot .ID  | LParen, postfix_exp -> postfix_exp Dot .ID  | RightShift, postfix_exp -> postfix_exp Dot .ID  | Comma, )
378 <- (303, 'Increment') (postfix_exp -> postfix_exp Increment.  | VerticalBar, postfix_exp -> postfix_exp Increment.  | Dot, postfix_exp -> postfix_exp Increment.  | Percent, postfix_exp -> postfix_exp Increment.  | GE, postfix_exp -> postfix_exp Increment.  | Decrement, postfix_exp -> postfix_exp Increment.  | Comma, postfix_exp -> postfix_exp Increment.  | OR, postfix_exp -> postfix_exp Increment.  | LT, postfix_exp -> postfix_exp Increment.  | LE, postfix_exp -> postfix_exp Increment.  | AND, postfix_exp -> postfix_exp Increment.  | GT, postfix_exp -> postfix_exp Increment.  | RightShift, postfix_exp -> postfix_exp Increment.  | Caret, postfix_exp -> postfix_exp Increment.  | LeftShift, postfix_exp -> postfix_exp Increment.  | LBrack, postfix_exp -> postfix_exp Increment.  | Increment, postfix_exp -> postfix_exp Increment.  | Question, postfix_exp -> postfix_exp Increment.  | Ampersand, postfix_exp -> postfix_exp Increment.  | NEQ, postfix_exp -> postfix_exp Increment.  | Minus, postfix_exp -> postfix_exp Increment.  | Assign, postfix_exp -> postfix_exp Increment.  | LParen, postfix_exp -> postfix_exp Increment.  | RBrack, postfix_exp -> postfix_exp Increment.  | Divide, postfix_exp -> postfix_exp Increment.  | Plus, postfix_exp -> postfix_exp Increment.  | EQ, postfix_exp -> postfix_exp Increment.  | Times, )
379 <- (303, 'LBrack') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, postfix_exp -> postfix_exp LBrack .exp RBrack  | RightShift, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, primary_exp -> .ID  | EQ, postfix_exp -> .postfix_exp Dot ID  | Decrement, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | LBrack, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .primary_exp  | OR, postfix_exp -> postfix_exp LBrack .exp RBrack  | Question, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, postfix_exp -> postfix_exp LBrack .exp RBrack  | NEQ, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> postfix_exp LBrack .exp RBrack  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RBrack, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, postfix_exp -> .primary_exp  | LT, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RBrack, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, postfix_exp -> postfix_exp LBrack .exp RBrack  | OR, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, primary_exp -> .ID  | RBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .NOT  | LParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, postfix_exp -> .postfix_exp Increment  | Divide, primary_exp -> .ID  | Plus, postfix_exp -> postfix_exp LBrack .exp RBrack  | AND, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, postfix_exp -> postfix_exp LBrack .exp RBrack  | EQ, postfix_exp -> postfix_exp LBrack .exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | Decrement, postfix_exp -> .postfix_exp Increment  | LeftShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | LT, primary_exp -> .LParen exp RParen  | Question, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Question, primary_exp -> .Number  | RBrack, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> postfix_exp LBrack .exp RBrack  | RBrack, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .String  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Question, primary_exp -> .Number  | NEQ, unary_exp -> .postfix_exp  | RBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> postfix_exp LBrack .exp RBrack  | VerticalBar, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> postfix_exp LBrack .exp RBrack  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | Question, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, unary_exp -> .Decrement unary_exp  | Plus, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | RBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, primary_exp -> .Number  | LT, postfix_exp -> postfix_exp LBrack .exp RBrack  | Assign, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, binary_exp -> .unary_exp  | LT, exp -> .exp Comma assignment_exp  | RBrack, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, unary_exp -> .Decrement unary_exp  | RBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, postfix_exp -> .primary_exp  | Increment, postfix_exp -> .postfix_exp LParen RParen  | RBrack, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .primary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> postfix_exp LBrack .exp RBrack  | Increment, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, conditional_exp -> .binary_exp  | RBrack, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, postfix_exp -> .postfix_exp LParen RParen  | LT, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | RBrack, unary_op -> .Minus  | Number, primary_exp -> .Number  | Percent, unary_exp -> .unary_op unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, primary_exp -> .ID  | GE, postfix_exp -> .postfix_exp Decrement  | LE, postfix_exp -> postfix_exp LBrack .exp RBrack  | Minus, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, exp -> .assignment_exp  | RBrack, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, binary_exp -> .unary_exp  | AND, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_op -> .NOT  | Number, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> postfix_exp LBrack .exp RBrack  | GT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, unary_exp -> .postfix_exp  | OR, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> postfix_exp LBrack .exp RBrack  | Ampersand, binary_exp -> .unary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | RBrack, primary_exp -> .LParen exp RParen  | Minus, postfix_exp -> .primary_exp  | VerticalBar, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> postfix_exp LBrack .exp RBrack  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | RBrack, unary_op -> .Plus  | Decrement, postfix_exp -> postfix_exp LBrack .exp RBrack  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, primary_exp -> .Number  | Dot, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, unary_op -> .Minus  | Tilde, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, primary_exp -> .String  | Assign, postfix_exp -> postfix_exp LBrack .exp RBrack  | Dot, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, assignment_exp -> .conditional_exp  | RBrack, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, primary_exp -> .String  | RBrack, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Caret, unary_exp -> .postfix_exp  | NEQ, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, postfix_exp -> .postfix_exp Decrement  | RBrack, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, postfix_exp -> postfix_exp LBrack .exp RBrack  | Plus, primary_exp -> .Number  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Caret, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .ID  | NEQ, binary_exp -> .unary_exp  | RBrack, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | RBrack, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Tilde  | NOT, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Increment  | RBrack, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> postfix_exp LBrack .exp RBrack  | Comma, postfix_exp -> postfix_exp LBrack .exp RBrack  | Caret, postfix_exp -> .primary_exp  | RBrack, primary_exp -> .ID  | Increment, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .primary_exp  | LE, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> postfix_exp LBrack .exp RBrack  | LParen, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, postfix_exp -> .postfix_exp Decrement  | LT, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, unary_exp -> .Increment unary_exp  | RBrack, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp Decrement  | Assign, postfix_exp -> .postfix_exp Increment  | LBrack, primary_exp -> .ID  | Dot, assignment_exp -> .unary_exp assignment_op assignment_exp  | RBrack, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | GE, )
380 <- (303, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, postfix_exp -> postfix_exp LParen .RParen  | LParen, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Question, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, unary_exp -> .postfix_exp  | Assign, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .postfix_exp Increment  | NEQ, unary_exp -> .postfix_exp  | LE, postfix_exp -> .postfix_exp Dot ID  | Decrement, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Ampersand, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, unary_exp -> .postfix_exp  | RParen, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, postfix_exp -> postfix_exp LParen .RParen  | GT, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | RParen, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Plus, primary_exp -> .Number  | Times, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, postfix_exp -> postfix_exp LParen .RParen  | LBrack, unary_exp -> .Increment unary_exp  | Ampersand, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | RightShift, unary_op -> .Tilde  | LParen, postfix_exp -> postfix_exp LParen .RParen  | EQ, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, primary_exp -> .String  | LBrack, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .unary_exp  | Plus, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, conditional_exp -> .binary_exp  | Comma, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, postfix_exp -> postfix_exp LParen .RParen  | LT, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, argument_exp_list -> .argument_exp_list Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | RParen, primary_exp -> .String  | LeftShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, unary_exp -> .unary_op unary_exp  | Question, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .NOT  | ID, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Increment, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, primary_exp -> .ID  | GT, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, postfix_exp -> postfix_exp LParen .RParen  | Divide, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LE, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | LeftShift, postfix_exp -> postfix_exp LParen .RParen  | AND, primary_exp -> .String  | Question, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, postfix_exp -> postfix_exp LParen .RParen  | LeftShift, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> postfix_exp LParen .RParen  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, postfix_exp -> postfix_exp LParen .RParen  | VerticalBar, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | Percent, postfix_exp -> postfix_exp LParen .RParen  | Minus, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, argument_exp_list -> .argument_exp_list Comma assignment_exp  | RParen, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Plus, postfix_exp -> postfix_exp LParen .RParen  | LE, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | GT, unary_exp -> .unary_op unary_exp  | Times, primary_exp -> .LParen exp RParen  | Dot, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, primary_exp -> .ID  | Divide, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, binary_exp -> .unary_exp  | LT, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Increment, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Divide, postfix_exp -> postfix_exp LParen .RParen  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | GT, binary_exp -> .binary_exp binary_op unary_exp  | RParen, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | RBrack, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .primary_exp  | AND, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Comma, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | AND, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | LParen, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, unary_exp -> .Decrement unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Question, postfix_exp -> postfix_exp LParen .RParen  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, unary_op -> .Tilde  | NOT, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, primary_exp -> .Number  | RParen, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Percent, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | GE, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Dot, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, postfix_exp -> postfix_exp LParen .RParen  | Caret, unary_exp -> .Decrement unary_exp  | Times, unary_exp -> .unary_op unary_exp  | LE, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, postfix_exp -> postfix_exp LParen .RParen  | RBrack, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, binary_exp -> .unary_exp  | VerticalBar, postfix_exp -> postfix_exp LParen .RParen  | GE, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, postfix_exp -> postfix_exp LParen .RParen  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Assign, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, primary_exp -> .String  | Assign, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | OR, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | EQ, primary_exp -> .Number  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, assignment_exp -> .conditional_exp  | RParen, postfix_exp -> .primary_exp  | GE, postfix_exp -> .postfix_exp Decrement  | Percent, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, postfix_exp -> postfix_exp LParen .RParen  | Assign, unary_op -> .Tilde  | Increment, postfix_exp -> postfix_exp LParen .RParen  | OR, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp Increment  | GE, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, argument_exp_list -> .assignment_exp  | RParen, primary_exp -> .Number  | Increment, postfix_exp -> postfix_exp LParen .RParen  | Increment, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LT, unary_exp -> .Increment unary_exp  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> postfix_exp LParen .RParen  | Percent, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Times, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | VerticalBar, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> postfix_exp LParen .RParen  | Question, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | EQ, postfix_exp -> postfix_exp LParen .RParen  | Decrement, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .unary_op unary_exp  | Assign, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .postfix_exp  | Comma, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> postfix_exp LParen .RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Decrement, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, primary_exp -> .Number  | NEQ, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .NOT  | String, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .ID  | VerticalBar, primary_exp -> .Number  | Caret, primary_exp -> .ID  | LeftShift, primary_exp -> .String  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> postfix_exp LParen .RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, argument_exp_list -> .assignment_exp  | Comma, unary_exp -> .Increment unary_exp  | Question, postfix_exp -> postfix_exp LParen .RParen  | Plus, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
381 <- (305, 'assignment_op') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, assignment_exp -> unary_exp assignment_op .assignment_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, primary_exp -> .String  | LT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RBrack, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RBrack, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, primary_exp -> .ID  | RBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .unary_op unary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, binary_exp -> .unary_exp  | Ampersand, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, unary_exp -> .postfix_exp  | RBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, unary_exp -> .Decrement unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | RBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, unary_exp -> .Decrement unary_exp  | RBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, postfix_exp -> .postfix_exp LParen RParen  | OR, postfix_exp -> .postfix_exp LParen RParen  | RBrack, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, conditional_exp -> .binary_exp  | RBrack, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, unary_op -> .Minus  | String, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .Tilde  | Number, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | RBrack, primary_exp -> .String  | Question, primary_exp -> .Number  | Percent, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, binary_exp -> .unary_exp  | AND, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, unary_exp -> .postfix_exp  | OR, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, assignment_exp -> unary_exp assignment_op .assignment_exp  | RBrack, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_exp -> .unary_op unary_exp  | RBrack, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | RBrack, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .Decrement unary_exp  | AND, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Increment  | Times, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | Caret, assignment_exp -> .conditional_exp  | RBrack, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, primary_exp -> .String  | RBrack, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, unary_exp -> .Increment unary_exp  | RBrack, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, postfix_exp -> .postfix_exp Decrement  | RBrack, unary_exp -> .unary_op unary_exp  | AND, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, primary_exp -> .ID  | RightShift, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, binary_exp -> .binary_exp binary_op unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, binary_exp -> .unary_exp  | RBrack, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | RBrack, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> .Number  | RBrack, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Increment  | RBrack, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .primary_exp  | RBrack, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, primary_exp -> .Number  | GE, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Increment  | LBrack, primary_exp -> .ID  | Dot, assignment_exp -> .unary_exp assignment_op assignment_exp  | RBrack, postfix_exp -> .postfix_exp LParen RParen  | Assign, unary_exp -> .Increment unary_exp  | Question, unary_exp -> .postfix_exp  | LeftShift, )
382 <- (306, 'unary_exp') (unary_exp -> unary_op unary_exp.  | NEQ, unary_exp -> unary_op unary_exp.  | GE, unary_exp -> unary_op unary_exp.  | RightShift, unary_exp -> unary_op unary_exp.  | Question, unary_exp -> unary_op unary_exp.  | LeftShift, unary_exp -> unary_op unary_exp.  | Plus, unary_exp -> unary_op unary_exp.  | Divide, unary_exp -> unary_op unary_exp.  | LE, unary_exp -> unary_op unary_exp.  | Caret, unary_exp -> unary_op unary_exp.  | Assign, unary_exp -> unary_op unary_exp.  | GT, unary_exp -> unary_op unary_exp.  | LT, unary_exp -> unary_op unary_exp.  | AND, unary_exp -> unary_op unary_exp.  | Times, unary_exp -> unary_op unary_exp.  | VerticalBar, unary_exp -> unary_op unary_exp.  | RBrack, unary_exp -> unary_op unary_exp.  | Comma, unary_exp -> unary_op unary_exp.  | Ampersand, unary_exp -> unary_op unary_exp.  | EQ, unary_exp -> unary_op unary_exp.  | OR, unary_exp -> unary_op unary_exp.  | Percent, unary_exp -> unary_op unary_exp.  | Minus, )
383 <- (308, 'Comma') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, unary_exp -> .postfix_exp  | RParen, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, postfix_exp -> .postfix_exp LParen RParen  | RParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .Increment unary_exp  | Ampersand, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .primary_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, argument_exp_list -> argument_exp_list Comma .assignment_exp  | RParen, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, unary_exp -> .unary_op unary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, primary_exp -> .String  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, argument_exp_list -> argument_exp_list Comma .assignment_exp  | Comma, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, binary_exp -> .binary_exp binary_op unary_exp  | Question, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, assignment_exp -> .conditional_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, primary_exp -> .Number  | RParen, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, unary_exp -> .Increment unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | RParen, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, binary_exp -> .binary_exp binary_op unary_exp  | RParen, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .Number  | Plus, unary_op -> .NOT  | Plus, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, binary_exp -> .unary_exp  | LT, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .primary_exp  | Ampersand, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .unary_op unary_exp  | Assign, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .postfix_exp Dot ID  | RParen, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
384 <- (308, 'RParen') (postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Comma, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Increment, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LeftShift, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | OR, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Semicolon, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LParen, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | VerticalBar, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | RightShift, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Minus, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Caret, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | EQ, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Decrement, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Plus, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | GT, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Ampersand, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Dot, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Question, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LT, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Percent, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Times, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | NEQ, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Assign, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LBrack, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | AND, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Divide, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | GE, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LE, )
385 <- (311, 'RParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, exp_stm -> .Semicolon  | -half2-, iteration_stm -> .while LParen exp RParen stm  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | -char-, exp_stm -> .Semicolon  | Plus, exp_stm -> .exp Semicolon  | LParen, stm -> .iteration_stm  | String, compound_stm -> .LBrace RBrace  | -float3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -char-, jump_stm -> .break  | -continue-, exp_stm -> .exp Semicolon  | -float4-, unary_exp -> .Increment unary_exp  | Ampersand, compound_stm -> .LBrace block_item_list RBrace  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | -half4-, jump_stm -> .break  | LBrace, stm -> .iteration_stm  | Number, unary_exp -> .postfix_exp  | Ampersand, unary_op -> .Plus  | LParen, compound_stm -> .LBrace RBrace  | -do-, jump_stm -> .-continue-  | Minus, jump_stm -> .-continue-  | String, unary_op -> .Minus  | Minus, jump_stm -> .-goto- ID  | -half3-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, selection_stm -> .if LParen exp RParen stm  | Plus, exp_stm -> .Semicolon  | -struct-, unary_exp -> .postfix_exp  | Assign, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -long-, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .unary_op unary_exp  | LT, unary_exp -> .Decrement unary_exp  | Minus, stm -> .selection_stm  | for, postfix_exp -> .postfix_exp Decrement  | EQ, jump_stm -> .-goto- ID  | LParen, jump_stm -> .-goto- ID  | -fixed4-, compound_stm -> .LBrace block_item_list RBrace  | Increment, postfix_exp -> .postfix_exp Increment  | GT, stm -> .jump_stm  | Tilde, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, stm -> .jump_stm  | -goto-, unary_exp -> .postfix_exp  | GT, compound_stm -> .LBrace RBrace  | ID, jump_stm -> .-goto- ID  | -float4-, compound_stm -> .LBrace block_item_list RBrace  | -float3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | for, selection_stm -> .if LParen exp RParen stm else stm  | while, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -struct-, postfix_exp -> .postfix_exp Increment  | Caret, unary_exp -> .Decrement unary_exp  | GE, jump_stm -> .-return- exp Semicolon  | -half3-, jump_stm -> .break  | Plus, compound_stm -> .LBrace block_item_list RBrace  | Number, jump_stm -> .-continue-  | Plus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float4-, jump_stm -> .-return- exp Semicolon  | -float-, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Increment  | OR, exp_stm -> .exp Semicolon  | Increment, exp_stm -> .Semicolon  | -long-, iteration_stm -> .while LParen exp RParen stm  | -fixed4-, unary_op -> .NOT  | Tilde, stm -> .exp_stm  | break, binary_exp -> .unary_exp  | Divide, jump_stm -> .-return- exp Semicolon  | -char-, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, unary_op -> .Tilde  | LParen, stm -> .jump_stm  | -fixed2-, stm -> .compound_stm  | -return-, unary_exp -> .Decrement unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | Minus, postfix_exp -> .primary_exp  | LT, selection_stm -> .if LParen exp RParen stm else stm  | break, jump_stm -> .break  | -struct-, exp_stm -> .Semicolon  | Minus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, compound_stm -> .LBrace block_item_list RBrace  | -goto-, compound_stm -> .LBrace RBrace  | -float2-, exp_stm -> .exp Semicolon  | -do-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -do-, exp_stm -> .exp Semicolon  | Minus, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, selection_stm -> .if LParen exp RParen stm else stm  | RBrace, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_op -> .Minus  | NOT, selection_stm -> .if LParen exp RParen stm else stm  | -return-, jump_stm -> .-continue-  | Number, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_exp -> .unary_op unary_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | -struct-, unary_exp -> .unary_op unary_exp  | LE, compound_stm -> .LBrace RBrace  | -half4-, primary_exp -> .LParen exp RParen  | VerticalBar, selection_stm -> .if LParen exp RParen stm else stm  | LBrace, jump_stm -> .break  | break, postfix_exp -> .postfix_exp LParen RParen  | Plus, jump_stm -> .-continue-  | -fixed4-, compound_stm -> .LBrace RBrace  | -double-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, compound_stm -> .LBrace block_item_list RBrace  | -half3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -goto-, selection_stm -> .if LParen exp RParen stm  | -float-, jump_stm -> .-return- exp Semicolon  | while, stm -> .jump_stm  | -sampler2D-, iteration_stm -> .while LParen exp RParen stm  | -sampler2D-, jump_stm -> .break  | String, exp_stm -> .exp Semicolon  | -float3-, jump_stm -> .-continue-  | Semicolon, iteration_stm -> while LParen exp RParen .stm  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .primary_exp  | LeftShift, primary_exp -> .String  | Semicolon, primary_exp -> .String  | EQ, stm -> .jump_stm  | -long-, jump_stm -> .-continue-  | ID, primary_exp -> .ID  | GT, selection_stm -> .if LParen exp RParen stm else stm  | -long-, compound_stm -> .LBrace block_item_list RBrace  | -double-, primary_exp -> .LParen exp RParen  | Increment, jump_stm -> .break  | Decrement, stm -> .exp_stm  | -float2-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | break, unary_exp -> .postfix_exp  | Times, iteration_stm -> while LParen exp RParen .stm  | -short-, stm -> .compound_stm  | -half3-, selection_stm -> .if LParen exp RParen stm  | if, unary_exp -> .postfix_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | -double-, jump_stm -> .-continue-  | if, jump_stm -> .-goto- ID  | -return-, compound_stm -> .LBrace block_item_list RBrace  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Semicolon, exp_stm -> .Semicolon  | -int-, postfix_exp -> .primary_exp  | RightShift, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -void-, postfix_exp -> .postfix_exp Increment  | LeftShift, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | if, compound_stm -> .LBrace block_item_list RBrace  | for, primary_exp -> .Number  | Question, exp_stm -> .exp Semicolon  | -struct-, jump_stm -> .-goto- ID  | -long-, selection_stm -> .if LParen exp RParen stm  | String, iteration_stm -> while LParen exp RParen .stm  | -void-, jump_stm -> .-continue-  | -struct-, jump_stm -> .-return- exp Semicolon  | -int-, selection_stm -> .if LParen exp RParen stm  | -int-, unary_exp -> .postfix_exp  | Question, iteration_stm -> while LParen exp RParen .stm  | -goto-, binary_exp -> .unary_exp  | Ampersand, stm -> .jump_stm  | String, stm -> .iteration_stm  | -half2-, compound_stm -> .LBrace RBrace  | -float4-, stm -> .exp_stm  | -long-, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_exp -> .Increment unary_exp  | Plus, iteration_stm -> .while LParen exp RParen stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Comma, exp_stm -> .Semicolon  | if, jump_stm -> .-goto- ID  | -half4-, iteration_stm -> while LParen exp RParen .stm  | -float2-, selection_stm -> .if LParen exp RParen stm else stm  | -do-, primary_exp -> .LParen exp RParen  | Question, iteration_stm -> .while LParen exp RParen stm  | Minus, jump_stm -> .-goto- ID  | -fixed2-, stm -> .exp_stm  | Tilde, postfix_exp -> .primary_exp  | LE, compound_stm -> .LBrace block_item_list RBrace  | LParen, exp_stm -> .exp Semicolon  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | String, compound_stm -> .LBrace block_item_list RBrace  | -float-, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, selection_stm -> .if LParen exp RParen stm  | -void-, stm -> .exp_stm  | -do-, jump_stm -> .-continue-  | Increment, selection_stm -> .if LParen exp RParen stm  | Increment, postfix_exp -> .postfix_exp Increment  | Question, iteration_stm -> while LParen exp RParen .stm  | String, stm -> .compound_stm  | NOT, unary_exp -> .Decrement unary_exp  | Ampersand, unary_exp -> .postfix_exp  | AND, primary_exp -> .ID  | VerticalBar, compound_stm -> .LBrace block_item_list RBrace  | Plus, unary_exp -> .Decrement unary_exp  | Assign, iteration_stm -> .while LParen exp RParen stm  | -do-, stm -> .jump_stm  | Decrement, primary_exp -> .String  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, stm -> .selection_stm  | -continue-, iteration_stm -> .while LParen exp RParen stm  | Tilde, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, jump_stm -> .-goto- ID  | -int-, exp_stm -> .Semicolon  | Semicolon, unary_exp -> .unary_op unary_exp  | Plus, compound_stm -> .LBrace block_item_list RBrace  | -uniform-, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Decrement, exp_stm -> .exp Semicolon  | -continue-, selection_stm -> .if LParen exp RParen stm else stm  | Plus, postfix_exp -> .primary_exp  | Times, stm -> .iteration_stm  | Decrement, stm -> .iteration_stm  | -do-, primary_exp -> .LParen exp RParen  | AND, jump_stm -> .-return- exp Semicolon  | -return-, jump_stm -> .-continue-  | break, exp_stm -> .Semicolon  | -short-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Tilde, postfix_exp -> .postfix_exp LParen RParen  | LBrack, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | -float4-, iteration_stm -> .while LParen exp RParen stm  | LParen, selection_stm -> .if LParen exp RParen stm  | -sampler2D-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed3-, selection_stm -> .if LParen exp RParen stm else stm  | -short-, jump_stm -> .-continue-  | -void-, selection_stm -> .if LParen exp RParen stm  | RBrace, jump_stm -> .break  | RBrace, selection_stm -> .if LParen exp RParen stm  | -float2-, compound_stm -> .LBrace block_item_list RBrace  | -half2-, jump_stm -> .-return- exp Semicolon  | -double-, primary_exp -> .LParen exp RParen  | GT, stm -> .iteration_stm  | LBrace, jump_stm -> .break  | -fixed3-, jump_stm -> .break  | -float-, jump_stm -> .-goto- ID  | while, stm -> .jump_stm  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | NEQ, compound_stm -> .LBrace block_item_list RBrace  | -float4-, stm -> .jump_stm  | -do-, postfix_exp -> .postfix_exp Decrement  | Plus, exp_stm -> .exp Semicolon  | -half4-, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, stm -> .selection_stm  | -int-, stm -> .jump_stm  | break, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float-, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, jump_stm -> .-return- exp Semicolon  | NOT, postfix_exp -> .postfix_exp Increment  | Times, selection_stm -> .if LParen exp RParen stm else stm  | Decrement, stm -> .selection_stm  | -fixed3-, jump_stm -> .-goto- ID  | String, stm -> .compound_stm  | -double-, stm -> .exp_stm  | if, iteration_stm -> .while LParen exp RParen stm  | -half2-, iteration_stm -> while LParen exp RParen .stm  | -double-, postfix_exp -> .postfix_exp Dot ID  | LBrack, binary_exp -> .unary_exp  | GE, selection_stm -> .if LParen exp RParen stm  | Minus, iteration_stm -> while LParen exp RParen .stm  | break, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, iteration_stm -> while LParen exp RParen .stm  | -float4-, postfix_exp -> .postfix_exp Decrement  | LeftShift, selection_stm -> .if LParen exp RParen stm else stm  | Tilde, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, stm -> .selection_stm  | Number, compound_stm -> .LBrace block_item_list RBrace  | -fixed4-, compound_stm -> .LBrace RBrace  | -char-, iteration_stm -> while LParen exp RParen .stm  | Decrement, jump_stm -> .-goto- ID  | -short-, unary_op -> .Minus  | ID, stm -> .selection_stm  | -uniform-, postfix_exp -> .postfix_exp Increment  | VerticalBar, compound_stm -> .LBrace block_item_list RBrace  | -void-, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, compound_stm -> .LBrace RBrace  | while, jump_stm -> .-continue-  | -float-, unary_exp -> .Increment unary_exp  | Minus, stm -> .iteration_stm  | Plus, stm -> .selection_stm  | -void-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LParen, stm -> .exp_stm  | -double-, stm -> .selection_stm  | Minus, exp_stm -> .exp Semicolon  | -half3-, stm -> .exp_stm  | -struct-, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Semicolon, unary_op -> .Tilde  | Number, exp_stm -> .exp Semicolon  | -goto-, stm -> .jump_stm  | while, binary_exp -> .unary_exp  | Plus, stm -> .iteration_stm  | Semicolon, stm -> .exp_stm  | -float4-, iteration_stm -> while LParen exp RParen .stm  | LParen, postfix_exp -> .primary_exp  | Increment, compound_stm -> .LBrace block_item_list RBrace  | if, postfix_exp -> .postfix_exp Dot ID  | LT, jump_stm -> .-continue-  | for, unary_exp -> .unary_op unary_exp  | Assign, jump_stm -> .-return- exp Semicolon  | -half2-, jump_stm -> .-return- exp Semicolon  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, stm -> .iteration_stm  | -continue-, selection_stm -> .if LParen exp RParen stm else stm  | -float-, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, stm -> .exp_stm  | Semicolon, binary_exp -> .unary_exp  | EQ, compound_stm -> .LBrace block_item_list RBrace  | String, selection_stm -> .if LParen exp RParen stm else stm  | -sampler2D-, unary_op -> .Minus  | LParen, exp_stm -> .Semicolon  | -float-, unary_op -> .NOT  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | String, primary_exp -> .ID  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float4-, jump_stm -> .break  | -uniform-, jump_stm -> .-goto- ID  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | String, stm -> .jump_stm  | LBrace, exp -> .exp Comma assignment_exp  | Comma, primary_exp -> .ID  | Assign, stm -> .iteration_stm  | -half4-, stm -> .compound_stm  | -half2-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, stm -> .exp_stm  | -float3-, postfix_exp -> .postfix_exp Dot ID  | Comma, iteration_stm -> while LParen exp RParen .stm  | Tilde, unary_exp -> .Increment unary_exp  | NEQ, stm -> .compound_stm  | String, compound_stm -> .LBrace RBrace  | -return-, stm -> .exp_stm  | NOT, jump_stm -> .break  | Number, stm -> .iteration_stm  | Increment, jump_stm -> .-return- exp Semicolon  | LParen, iteration_stm -> .while LParen exp RParen stm  | if, stm -> .selection_stm  | -float3-, postfix_exp -> .primary_exp  | Plus, stm -> .jump_stm  | -float4-, stm -> .iteration_stm  | for, stm -> .compound_stm  | Tilde, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, iteration_stm -> while LParen exp RParen .stm  | -int-, iteration_stm -> .while LParen exp RParen stm  | -goto-, stm -> .jump_stm  | NOT, selection_stm -> .if LParen exp RParen stm  | NOT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, exp_stm -> .Semicolon  | -float4-, stm -> .selection_stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | AND, stm -> .exp_stm  | -int-, stm -> .iteration_stm  | break, selection_stm -> .if LParen exp RParen stm else stm  | Semicolon, iteration_stm -> while LParen exp RParen .stm  | Minus, compound_stm -> .LBrace block_item_list RBrace  | -int-, stm -> .selection_stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -half3-, compound_stm -> .LBrace block_item_list RBrace  | Tilde, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -goto-, iteration_stm -> .while LParen exp RParen stm  | -float4-, stm -> .iteration_stm  | -float3-, compound_stm -> .LBrace RBrace  | Number, selection_stm -> .if LParen exp RParen stm  | -half4-, primary_exp -> .String  | Increment, jump_stm -> .-return- exp Semicolon  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -uniform-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float3-, stm -> .compound_stm  | if, primary_exp -> .Number  | Plus, unary_op -> .Plus  | Decrement, jump_stm -> .-return- exp Semicolon  | ID, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp Decrement  | Assign, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed3-, stm -> .jump_stm  | -half3-, primary_exp -> .Number  | Dot, exp_stm -> .Semicolon  | -do-, exp_stm -> .exp Semicolon  | -fixed3-, primary_exp -> .LParen exp RParen  | Ampersand, jump_stm -> .-goto- ID  | -double-, stm -> .jump_stm  | -struct-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .primary_exp  | Comma, primary_exp -> .ID  | LBrack, jump_stm -> .-return- exp Semicolon  | Semicolon, selection_stm -> .if LParen exp RParen stm  | Decrement, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, selection_stm -> .if LParen exp RParen stm  | LParen, jump_stm -> .-continue-  | -int-, jump_stm -> .break  | -fixed2-, exp_stm -> .exp Semicolon  | -short-, primary_exp -> .String  | Assign, compound_stm -> .LBrace RBrace  | Plus, unary_exp -> .unary_op unary_exp  | EQ, stm -> .exp_stm  | for, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, jump_stm -> .-return- exp Semicolon  | String, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, stm -> .selection_stm  | -half4-, primary_exp -> .LParen exp RParen  | Semicolon, compound_stm -> .LBrace RBrace  | break, selection_stm -> .if LParen exp RParen stm else stm  | -int-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, selection_stm -> .if LParen exp RParen stm else stm  | if, stm -> .iteration_stm  | -uniform-, stm -> .selection_stm  | -fixed4-, jump_stm -> .-goto- ID  | -void-, compound_stm -> .LBrace block_item_list RBrace  | -fixed2-, compound_stm -> .LBrace block_item_list RBrace  | NOT, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .LParen exp RParen  | RightShift, primary_exp -> .String  | LT, compound_stm -> .LBrace RBrace  | -sampler2D-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, postfix_exp -> .postfix_exp Increment  | AND, selection_stm -> .if LParen exp RParen stm  | Semicolon, primary_exp -> .LParen exp RParen  | LParen, stm -> .compound_stm  | -void-, stm -> .jump_stm  | -float2-, stm -> .jump_stm  | Number, unary_exp -> .unary_op unary_exp  | Ampersand, exp_stm -> .exp Semicolon  | RBrace, exp_stm -> .exp Semicolon  | -int-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half4-, jump_stm -> .break  | -do-, stm -> .iteration_stm  | -fixed3-, stm -> .jump_stm  | Plus, compound_stm -> .LBrace RBrace  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Number, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | VerticalBar, stm -> .iteration_stm  | -float2-, exp_stm -> .Semicolon  | LBrace, exp_stm -> .exp Semicolon  | -void-, stm -> .exp_stm  | -half4-, primary_exp -> .String  | Caret, compound_stm -> .LBrace RBrace  | -fixed2-, iteration_stm -> while LParen exp RParen .stm  | -half2-, stm -> .selection_stm  | -return-, exp_stm -> .Semicolon  | -continue-, unary_op -> .Tilde  | Increment, selection_stm -> .if LParen exp RParen stm  | while, stm -> .iteration_stm  | -fixed4-, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, stm -> .selection_stm  | Decrement, jump_stm -> .-continue-  | -do-, exp_stm -> .exp Semicolon  | if, assignment_exp -> .conditional_exp  | Comma, unary_exp -> .Decrement unary_exp  | LeftShift, stm -> .exp_stm  | Increment, primary_exp -> .LParen exp RParen  | Decrement, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -continue-, stm -> .compound_stm  | ID, jump_stm -> .-continue-  | Tilde, stm -> .exp_stm  | LBrace, jump_stm -> .-goto- ID  | -sampler2D-, iteration_stm -> .while LParen exp RParen stm  | -continue-, binary_exp -> .binary_exp binary_op unary_exp  | OR, compound_stm -> .LBrace block_item_list RBrace  | Minus, iteration_stm -> while LParen exp RParen .stm  | -half4-, jump_stm -> .break  | for, compound_stm -> .LBrace RBrace  | -long-, jump_stm -> .break  | -return-, primary_exp -> .Number  | Increment, compound_stm -> .LBrace RBrace  | -void-, exp_stm -> .Semicolon  | -fixed2-, selection_stm -> .if LParen exp RParen stm else stm  | -void-, jump_stm -> .-continue-  | while, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Plus, exp_stm -> .Semicolon  | -fixed4-, exp_stm -> .Semicolon  | -goto-, jump_stm -> .break  | -float3-, stm -> .iteration_stm  | -char-, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, jump_stm -> .break  | -float4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, selection_stm -> .if LParen exp RParen stm else stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | LBrace, unary_exp -> .Increment unary_exp  | EQ, primary_exp -> .Number  | VerticalBar, primary_exp -> .String  | Plus, compound_stm -> .LBrace RBrace  | Tilde, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | LT, jump_stm -> .-return- exp Semicolon  | -void-, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, compound_stm -> .LBrace RBrace  | -fixed4-, postfix_exp -> .postfix_exp Dot ID  | Question, exp_stm -> .exp Semicolon  | -sampler2D-, iteration_stm -> while LParen exp RParen .stm  | while, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, iteration_stm -> while LParen exp RParen .stm  | Increment, stm -> .jump_stm  | LParen, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float3-, stm -> .exp_stm  | -void-, selection_stm -> .if LParen exp RParen stm  | -half2-, stm -> .jump_stm  | Minus, iteration_stm -> while LParen exp RParen .stm  | -do-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, iteration_stm -> while LParen exp RParen .stm  | NOT, jump_stm -> .-continue-  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -float3-, primary_exp -> .ID  | Divide, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed4-, stm -> .exp_stm  | -goto-, postfix_exp -> .postfix_exp Dot ID  | Dot, selection_stm -> .if LParen exp RParen stm else stm  | -uniform-, stm -> .compound_stm  | Decrement, jump_stm -> .-goto- ID  | ID, jump_stm -> .break  | Increment, selection_stm -> .if LParen exp RParen stm else stm  | -fixed2-, stm -> .exp_stm  | -fixed3-, unary_exp -> .postfix_exp  | Comma, stm -> .compound_stm  | LParen, postfix_exp -> .postfix_exp Dot ID  | EQ, unary_op -> .Minus  | String, jump_stm -> .break  | if, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half4-, jump_stm -> .-continue-  | -half4-, unary_exp -> .unary_op unary_exp  | Comma, jump_stm -> .-return- exp Semicolon  | -goto-, stm -> .compound_stm  | RBrace, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Semicolon, iteration_stm -> while LParen exp RParen .stm  | for, exp_stm -> .exp Semicolon  | -half2-, iteration_stm -> while LParen exp RParen .stm  | -fixed2-, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | Minus, stm -> .exp_stm  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -int-, jump_stm -> .-continue-  | -continue-, jump_stm -> .-return- exp Semicolon  | -do-, stm -> .jump_stm  | if, stm -> .compound_stm  | -short-, jump_stm -> .-goto- ID  | -float2-, primary_exp -> .ID  | Question, stm -> .selection_stm  | Tilde, postfix_exp -> .postfix_exp Increment  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -float2-, jump_stm -> .break  | -char-, binary_exp -> .unary_exp  | OR, stm -> .compound_stm  | -long-, stm -> .compound_stm  | -fixed2-, stm -> .jump_stm  | -float3-, jump_stm -> .-goto- ID  | Increment, selection_stm -> .if LParen exp RParen stm else stm  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | LBrack, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LBrace, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, stm -> .iteration_stm  | -half3-, stm -> .compound_stm  | -char-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | break, postfix_exp -> .primary_exp  | LBrack, jump_stm -> .break  | -long-, jump_stm -> .-continue-  | -uniform-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LBrace, stm -> .compound_stm  | -goto-, selection_stm -> .if LParen exp RParen stm  | -short-, postfix_exp -> .primary_exp  | LParen, stm -> .selection_stm  | LBrace, stm -> .compound_stm  | -float4-, postfix_exp -> .postfix_exp LParen RParen  | Assign, compound_stm -> .LBrace RBrace  | -half3-, selection_stm -> .if LParen exp RParen stm else stm  | -fixed4-, jump_stm -> .break  | -half4-, iteration_stm -> .while LParen exp RParen stm  | -uniform-, jump_stm -> .-continue-  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -short-, postfix_exp -> .postfix_exp LParen RParen  | NEQ, stm -> .iteration_stm  | -float-, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, exp_stm -> .Semicolon  | -float3-, primary_exp -> .LParen exp RParen  | NEQ, compound_stm -> .LBrace RBrace  | Increment, stm -> .compound_stm  | -continue-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Plus, postfix_exp -> .postfix_exp Decrement  | Minus, postfix_exp -> .postfix_exp Dot ID  | Percent, stm -> .selection_stm  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp Decrement  | Times, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -int-, unary_op -> .NOT  | LParen, stm -> .iteration_stm  | ID, stm -> .compound_stm  | Plus, exp_stm -> .exp Semicolon  | String, compound_stm -> .LBrace block_item_list RBrace  | RBrace, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Increment, postfix_exp -> .primary_exp  | AND, jump_stm -> .-return- exp Semicolon  | -short-, compound_stm -> .LBrace RBrace  | String, stm -> .exp_stm  | while, iteration_stm -> .while LParen exp RParen stm  | -void-, compound_stm -> .LBrace RBrace  | -struct-, exp_stm -> .Semicolon  | Increment, iteration_stm -> while LParen exp RParen .stm  | -uniform-, exp_stm -> .Semicolon  | while, stm -> .compound_stm  | -float3-, primary_exp -> .String  | LeftShift, jump_stm -> .-continue-  | -fixed3-, postfix_exp -> .postfix_exp LParen RParen  | GE, stm -> .selection_stm  | -float4-, postfix_exp -> .primary_exp  | OR, stm -> .exp_stm  | RBrace, iteration_stm -> .while LParen exp RParen stm  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | while, unary_exp -> .postfix_exp  | RightShift, stm -> .iteration_stm  | Minus, iteration_stm -> .while LParen exp RParen stm  | -float2-, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_exp -> .Increment unary_exp  | Divide, exp_stm -> .Semicolon  | ID, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, iteration_stm -> while LParen exp RParen .stm  | -continue-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed2-, jump_stm -> .-goto- ID  | -struct-, jump_stm -> .-continue-  | -return-, jump_stm -> .break  | Minus, iteration_stm -> .while LParen exp RParen stm  | Plus, selection_stm -> .if LParen exp RParen stm  | -do-, postfix_exp -> .primary_exp  | Semicolon, compound_stm -> .LBrace RBrace  | if, jump_stm -> .break  | -void-, stm -> .jump_stm  | -continue-, iteration_stm -> .while LParen exp RParen stm  | -float-, stm -> .selection_stm  | Plus, compound_stm -> .LBrace RBrace  | NOT, exp_stm -> .Semicolon  | Decrement, selection_stm -> .if LParen exp RParen stm  | Number, exp_stm -> .Semicolon  | -float2-, iteration_stm -> .while LParen exp RParen stm  | Number, unary_op -> .Tilde  | Plus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -continue-, primary_exp -> .ID  | Times, exp_stm -> .exp Semicolon  | Decrement, stm -> .compound_stm  | -sampler2D-, stm -> .selection_stm  | LParen, stm -> .iteration_stm  | LParen, stm -> .jump_stm  | -half2-, stm -> .jump_stm  | -void-, selection_stm -> .if LParen exp RParen stm  | -long-, iteration_stm -> while LParen exp RParen .stm  | if, unary_exp -> .postfix_exp  | Minus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, binary_exp -> .binary_exp binary_op unary_exp  | Caret, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half2-, unary_op -> .Tilde  | Tilde, jump_stm -> .break  | ID, iteration_stm -> while LParen exp RParen .stm  | -float3-, exp_stm -> .Semicolon  | -fixed3-, stm -> .compound_stm  | -struct-, jump_stm -> .-goto- ID  | Semicolon, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half3-, stm -> .exp_stm  | -uniform-, iteration_stm -> while LParen exp RParen .stm  | -sampler2D-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -return-, unary_exp -> .Decrement unary_exp  | Divide, stm -> .iteration_stm  | Tilde, postfix_exp -> .postfix_exp Dot ID  | Ampersand, compound_stm -> .LBrace block_item_list RBrace  | LBrace, postfix_exp -> .postfix_exp Increment  | Semicolon, jump_stm -> .break  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | -fixed3-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, stm -> .selection_stm  | -struct-, stm -> .exp_stm  | -return-, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, stm -> .exp_stm  | -char-, postfix_exp -> .postfix_exp Decrement  | Ampersand, exp_stm -> .exp Semicolon  | -double-, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -long-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LParen, iteration_stm -> while LParen exp RParen .stm  | -fixed4-, iteration_stm -> .while LParen exp RParen stm  | for, compound_stm -> .LBrace RBrace  | -half2-, jump_stm -> .-goto- ID  | -do-, iteration_stm -> while LParen exp RParen .stm  | ID, stm -> .selection_stm  | if, stm -> .compound_stm  | -uniform-, exp_stm -> .exp Semicolon  | -float-, stm -> .jump_stm  | -float-, jump_stm -> .-continue-  | RBrace, unary_exp -> .unary_op unary_exp  | VerticalBar, jump_stm -> .-return- exp Semicolon  | -float4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | RBrace, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, selection_stm -> .if LParen exp RParen stm  | -half3-, stm -> .exp_stm  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -long-, primary_exp -> .LParen exp RParen  | Percent, primary_exp -> .String  | Question, jump_stm -> .-return- exp Semicolon  | -fixed4-, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | if, exp_stm -> .exp Semicolon  | -char-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -void-, stm -> .compound_stm  | -float2-, postfix_exp -> .postfix_exp Increment  | Comma, compound_stm -> .LBrace block_item_list RBrace  | -float2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, jump_stm -> .-continue-  | -fixed2-, primary_exp -> .Number  | LeftShift, exp_stm -> .exp Semicolon  | Tilde, stm -> .compound_stm  | LBrace, jump_stm -> .break  | while, exp_stm -> .exp Semicolon  | while, jump_stm -> .break  | LParen, compound_stm -> .LBrace RBrace  | LBrace, jump_stm -> .-goto- ID  | -float-, exp_stm -> .exp Semicolon  | LBrace, jump_stm -> .-continue-  | -short-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -do-, binary_exp -> .binary_exp binary_op unary_exp  | EQ, exp_stm -> .exp Semicolon  | for, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp Decrement  | LE, stm -> .exp_stm  | -fixed2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, selection_stm -> .if LParen exp RParen stm  | -fixed2-, primary_exp -> .LParen exp RParen  | Times, stm -> .selection_stm  | ID, selection_stm -> .if LParen exp RParen stm  | -double-, exp_stm -> .Semicolon  | LParen, postfix_exp -> .primary_exp  | Percent, primary_exp -> .String  | Comma, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Minus, jump_stm -> .break  | -goto-, stm -> .iteration_stm  | -fixed2-, jump_stm -> .-return- exp Semicolon  | -struct-, binary_exp -> .binary_exp binary_op unary_exp  | Question, stm -> .exp_stm  | Minus, exp_stm -> .exp Semicolon  | -uniform-, exp_stm -> .Semicolon  | -char-, primary_exp -> .Number  | RightShift, stm -> .exp_stm  | -half2-, primary_exp -> .ID  | OR, binary_exp -> .unary_exp  | Question, selection_stm -> .if LParen exp RParen stm  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, selection_stm -> .if LParen exp RParen stm  | -fixed3-, jump_stm -> .-continue-  | -goto-, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, binary_exp -> .binary_exp binary_op unary_exp  | Plus, primary_exp -> .Number  | GE, stm -> .jump_stm  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | GT, iteration_stm -> .while LParen exp RParen stm  | Semicolon, primary_exp -> .Number  | Times, jump_stm -> .-return- exp Semicolon  | Increment, binary_exp -> .binary_exp binary_op unary_exp  | Times, exp_stm -> .Semicolon  | -half4-, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, compound_stm -> .LBrace RBrace  | Decrement, jump_stm -> .-return- exp Semicolon  | Tilde, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, primary_exp -> .ID  | Minus, selection_stm -> .if LParen exp RParen stm  | -continue-, unary_exp -> .unary_op unary_exp  | Question, stm -> .selection_stm  | -half3-, selection_stm -> .if LParen exp RParen stm else stm  | -half4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, unary_op -> .Plus  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -sampler2D-, compound_stm -> .LBrace RBrace  | -fixed3-, unary_exp -> .unary_op unary_exp  | Times, stm -> .iteration_stm  | -int-, stm -> .jump_stm  | -double-, jump_stm -> .break  | NOT, exp_stm -> .exp Semicolon  | Plus, jump_stm -> .-continue-  | -float2-, iteration_stm -> while LParen exp RParen .stm  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, stm -> .iteration_stm  | -sampler2D-, jump_stm -> .-continue-  | -char-, primary_exp -> .Number  | Decrement, iteration_stm -> .while LParen exp RParen stm  | while, selection_stm -> .if LParen exp RParen stm  | break, jump_stm -> .-return- exp Semicolon  | -half4-, postfix_exp -> .postfix_exp LParen RParen  | Comma, selection_stm -> .if LParen exp RParen stm  | -float4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, unary_exp -> .Decrement unary_exp  | GT, stm -> .selection_stm  | -char-, compound_stm -> .LBrace block_item_list RBrace  | ID, binary_exp -> .unary_exp  | LE, stm -> .exp_stm  | String, stm -> .exp_stm  | -float-, unary_exp -> .Increment unary_exp  | GT, jump_stm -> .break  | -double-, postfix_exp -> .postfix_exp LParen RParen  | OR, compound_stm -> .LBrace block_item_list RBrace  | -sampler2D-, exp_stm -> .exp Semicolon  | -return-, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | LeftShift, jump_stm -> .-return- exp Semicolon  | Number, compound_stm -> .LBrace RBrace  | -continue-, exp_stm -> .exp Semicolon  | Number, primary_exp -> .String  | Minus, jump_stm -> .-continue-  | -half2-, postfix_exp -> .postfix_exp Increment  | RightShift, stm -> .exp_stm  | -short-, postfix_exp -> .postfix_exp Increment  | NEQ, selection_stm -> .if LParen exp RParen stm  | -uniform-, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .primary_exp  | Caret, compound_stm -> .LBrace block_item_list RBrace  | break, selection_stm -> .if LParen exp RParen stm  | -float3-, jump_stm -> .-continue-  | -sampler2D-, stm -> .selection_stm  | -short-, iteration_stm -> .while LParen exp RParen stm  | -int-, jump_stm -> .-goto- ID  | Tilde, stm -> .compound_stm  | Increment, jump_stm -> .-goto- ID  | Number, postfix_exp -> .primary_exp  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | for, postfix_exp -> .postfix_exp Decrement  | Increment, binary_exp -> .binary_exp binary_op unary_exp  | Minus, jump_stm -> .-goto- ID  | Decrement, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | OR, primary_exp -> .Number  | GT, postfix_exp -> .primary_exp  | Question, jump_stm -> .-goto- ID  | -uniform-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, jump_stm -> .break  | -fixed4-, compound_stm -> .LBrace RBrace  | -uniform-, unary_exp -> .unary_op unary_exp  | GT, compound_stm -> .LBrace block_item_list RBrace  | -short-, stm -> .iteration_stm  | while, stm -> .compound_stm  | -int-, selection_stm -> .if LParen exp RParen stm  | -return-, unary_exp -> .unary_op unary_exp  | OR, exp_stm -> .Semicolon  | -return-, selection_stm -> .if LParen exp RParen stm  | LBrace, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, stm -> .iteration_stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_op -> .Minus  | Plus, jump_stm -> .-continue-  | LParen, selection_stm -> .if LParen exp RParen stm  | Tilde, stm -> .iteration_stm  | -goto-, selection_stm -> .if LParen exp RParen stm else stm  | -fixed3-, postfix_exp -> .postfix_exp Decrement  | Comma, stm -> .compound_stm  | while, unary_exp -> .postfix_exp  | Caret, stm -> .jump_stm  | Increment, stm -> .exp_stm  | -sampler2D-, primary_exp -> .ID  | LT, stm -> .selection_stm  | NOT, postfix_exp -> .postfix_exp Dot ID  | Caret, iteration_stm -> .while LParen exp RParen stm  | NOT, compound_stm -> .LBrace RBrace  | -int-, binary_exp -> .unary_exp  | Caret, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, stm -> .selection_stm  | -do-, primary_exp -> .LParen exp RParen  | Assign, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -return-, unary_op -> .Minus  | Number, primary_exp -> .Number  | Percent, jump_stm -> .-continue-  | LBrace, stm -> .jump_stm  | -fixed4-, iteration_stm -> .while LParen exp RParen stm  | -return-, jump_stm -> .-return- exp Semicolon  | break, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -double-, primary_exp -> .Number  | Assign, jump_stm -> .-return- exp Semicolon  | for, postfix_exp -> .postfix_exp Decrement  | NEQ, stm -> .exp_stm  | Number, unary_exp -> .Increment unary_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float-, jump_stm -> .-goto- ID  | -goto-, stm -> .exp_stm  | -continue-, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .String  | Decrement, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, selection_stm -> .if LParen exp RParen stm  | -fixed4-, exp_stm -> .Semicolon  | -uniform-, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, stm -> .compound_stm  | -fixed4-, stm -> .exp_stm  | -half3-, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, stm -> .selection_stm  | -half2-, postfix_exp -> .postfix_exp Decrement  | Divide, jump_stm -> .-continue-  | -float3-, exp_stm -> .exp Semicolon  | break, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, iteration_stm -> .while LParen exp RParen stm  | -fixed2-, stm -> .selection_stm  | -float-, stm -> .exp_stm  | ID, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, unary_exp -> .postfix_exp  | VerticalBar, jump_stm -> .break  | -half2-, primary_exp -> .ID  | GE, jump_stm -> .-continue-  | -long-, jump_stm -> .-return- exp Semicolon  | -long-, stm -> .compound_stm  | -fixed3-, iteration_stm -> .while LParen exp RParen stm  | break, postfix_exp -> .postfix_exp Increment  | Minus, binary_exp -> .unary_exp  | LeftShift, iteration_stm -> .while LParen exp RParen stm  | -double-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -sampler2D-, jump_stm -> .-goto- ID  | LBrace, primary_exp -> .ID  | RightShift, jump_stm -> .-return- exp Semicolon  | -fixed2-, selection_stm -> .if LParen exp RParen stm else stm  | -char-, stm -> .iteration_stm  | -long-, iteration_stm -> .while LParen exp RParen stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -short-, exp_stm -> .exp Semicolon  | -long-, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, postfix_exp -> .postfix_exp Dot ID  | RightShift, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Tilde, stm -> .compound_stm  | Number, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, stm -> .compound_stm  | for, unary_exp -> .unary_op unary_exp  | Minus, unary_exp -> .unary_op unary_exp  | RightShift, compound_stm -> .LBrace RBrace  | -short-, stm -> .compound_stm  | Semicolon, stm -> .selection_stm  | break, stm -> .compound_stm  | -do-, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp Dot ID  | GE, compound_stm -> .LBrace block_item_list RBrace  | -struct-, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, stm -> .compound_stm  | -half4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Decrement, unary_exp -> .postfix_exp  | Divide, unary_exp -> .unary_op unary_exp  | NEQ, jump_stm -> .-return- exp Semicolon  | -sampler2D-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -double-, unary_exp -> .postfix_exp  | GE, selection_stm -> .if LParen exp RParen stm  | for, selection_stm -> .if LParen exp RParen stm  | ID, jump_stm -> .-goto- ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | LE, compound_stm -> .LBrace block_item_list RBrace  | -continue-, selection_stm -> .if LParen exp RParen stm else stm  | -continue-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Divide, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float2-, stm -> .jump_stm  | RBrace, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, compound_stm -> .LBrace RBrace  | -goto-, postfix_exp -> .postfix_exp LParen RParen  | Divide, jump_stm -> .-return- exp Semicolon  | Plus, stm -> .jump_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half2-, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -uniform-, primary_exp -> .ID  | Comma, selection_stm -> .if LParen exp RParen stm else stm  | for, unary_exp -> .Increment unary_exp  | Assign, jump_stm -> .-return- exp Semicolon  | if, postfix_exp -> .postfix_exp Increment  | Assign, jump_stm -> .break  | Tilde, selection_stm -> .if LParen exp RParen stm else stm  | -float3-, jump_stm -> .-goto- ID  | -fixed3-, unary_exp -> .Decrement unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | OR, binary_exp -> .binary_exp binary_op unary_exp  | LT, stm -> .selection_stm  | -sampler2D-, jump_stm -> .-continue-  | -half3-, primary_exp -> .Number  | Minus, stm -> .iteration_stm  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -half4-, iteration_stm -> while LParen exp RParen .stm  | -struct-, iteration_stm -> while LParen exp RParen .stm  | LBrace, iteration_stm -> .while LParen exp RParen stm  | Decrement, unary_exp -> .Decrement unary_exp  | AND, jump_stm -> .-goto- ID  | for, jump_stm -> .-goto- ID  | if, compound_stm -> .LBrace RBrace  | LParen, unary_op -> .Minus  | Decrement, jump_stm -> .-return- exp Semicolon  | -uniform-, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, selection_stm -> .if LParen exp RParen stm else stm  | -struct-, jump_stm -> .-return- exp Semicolon  | -continue-, primary_exp -> .Number  | OR, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | ID, stm -> .exp_stm  | -fixed4-, jump_stm -> .-goto- ID  | -float3-, postfix_exp -> .primary_exp  | GT, exp_stm -> .Semicolon  | -void-, jump_stm -> .-return- exp Semicolon  | Minus, postfix_exp -> .postfix_exp Decrement  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, stm -> .selection_stm  | String, postfix_exp -> .postfix_exp LParen RParen  | Caret, primary_exp -> .ID  | AND, postfix_exp -> .postfix_exp LParen RParen  | Dot, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | String, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, exp_stm -> .Semicolon  | NOT, primary_exp -> .String  | Ampersand, stm -> .jump_stm  | -short-, iteration_stm -> while LParen exp RParen .stm  | -float-, binary_exp -> .unary_exp  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -struct-, selection_stm -> .if LParen exp RParen stm else stm  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | Percent, primary_exp -> .Number  | Ampersand, selection_stm -> .if LParen exp RParen stm  | -char-, primary_exp -> .ID  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | RightShift, jump_stm -> .-goto- ID  | RBrace, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, unary_exp -> .Increment unary_exp  | Semicolon, stm -> .exp_stm  | Decrement, stm -> .selection_stm  | -fixed2-, compound_stm -> .LBrace RBrace  | RBrace, primary_exp -> .LParen exp RParen  | Dot, primary_exp -> .Number  | Divide, iteration_stm -> while LParen exp RParen .stm  | -half3-, stm -> .selection_stm  | -long-, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, binary_exp -> .unary_exp  | Percent, primary_exp -> .Number  | Semicolon, primary_exp -> .Number  | AND, unary_exp -> .Increment unary_exp  | GE, iteration_stm -> while LParen exp RParen .stm  | -return-, unary_op -> .NOT  | NOT, jump_stm -> .break  | -short-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | NOT, unary_op -> .NOT  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -goto-, exp_stm -> .exp Semicolon  | -fixed4-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | ID, selection_stm -> .if LParen exp RParen stm else stm  | ID, stm -> .jump_stm  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | LParen, primary_exp -> .String  | Times, jump_stm -> .-goto- ID  | -continue-, exp_stm -> .Semicolon  | String, jump_stm -> .break  | -int-, primary_exp -> .LParen exp RParen  | Divide, stm -> .selection_stm  | RBrace, stm -> .iteration_stm  | RBrace, stm -> .iteration_stm  | -struct-, compound_stm -> .LBrace block_item_list RBrace  | -return-, jump_stm -> .break  | Semicolon, conditional_exp -> .binary_exp  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, exp_stm -> .exp Semicolon  | -float2-, stm -> .compound_stm  | -float-, compound_stm -> .LBrace RBrace  | for, exp_stm -> .Semicolon  | RBrace, postfix_exp -> .postfix_exp Dot ID  | Minus, exp_stm -> .Semicolon  | -half3-, unary_exp -> .Decrement unary_exp  | Plus, primary_exp -> .LParen exp RParen  | Plus, selection_stm -> .if LParen exp RParen stm else stm  | -half2-, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, iteration_stm -> while LParen exp RParen .stm  | -long-, jump_stm -> .-return- exp Semicolon  | -float2-, postfix_exp -> .postfix_exp Dot ID  | LParen, compound_stm -> .LBrace RBrace  | -float-, unary_exp -> .unary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, jump_stm -> .-return- exp Semicolon  | -float3-, postfix_exp -> .postfix_exp LParen RParen  | Question, exp_stm -> .exp Semicolon  | Semicolon, iteration_stm -> .while LParen exp RParen stm  | -struct-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed2-, postfix_exp -> .postfix_exp Increment  | Dot, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | RBrace, exp_stm -> .Semicolon  | Tilde, jump_stm -> .-goto- ID  | NOT, jump_stm -> .-continue-  | Decrement, stm -> .compound_stm  | break, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, stm -> .jump_stm  | for, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Number, unary_op -> .Plus  | Tilde, compound_stm -> .LBrace RBrace  | Minus, iteration_stm -> while LParen exp RParen .stm  | -char-, iteration_stm -> .while LParen exp RParen stm  | -char-, postfix_exp -> .postfix_exp Increment  | Divide, stm -> .selection_stm  | -float2-, stm -> .jump_stm  | -return-, iteration_stm -> .while LParen exp RParen stm  | ID, stm -> .iteration_stm  | -void-, unary_exp -> .Increment unary_exp  | LE, unary_exp -> .postfix_exp  | OR, iteration_stm -> while LParen exp RParen .stm  | Number, exp_stm -> .Semicolon  | -double-, jump_stm -> .-goto- ID  | break, stm -> .iteration_stm  | -double-, unary_exp -> .Decrement unary_exp  | Semicolon, jump_stm -> .-goto- ID  | -char-, binary_exp -> .unary_exp  | RightShift, exp_stm -> .Semicolon  | Number, stm -> .iteration_stm  | -return-, binary_exp -> .unary_exp  | AND, iteration_stm -> while LParen exp RParen .stm  | RBrace, unary_op -> .Tilde  | ID, stm -> .jump_stm  | -fixed3-, exp_stm -> .Semicolon  | break, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .primary_exp  | Divide, iteration_stm -> while LParen exp RParen .stm  | -fixed3-, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, stm -> .iteration_stm  | if, stm -> .selection_stm  | -double-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, stm -> .iteration_stm  | NOT, jump_stm -> .break  | -float2-, primary_exp -> .Number  | LParen, exp_stm -> .exp Semicolon  | ID, primary_exp -> .Number  | NEQ, exp_stm -> .Semicolon  | -sampler2D-, jump_stm -> .-continue-  | -double-, jump_stm -> .break  | -half3-, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, jump_stm -> .-goto- ID  | -half2-, postfix_exp -> .postfix_exp Decrement  | LParen, stm -> .compound_stm  | Minus, primary_exp -> .LParen exp RParen  | Minus, compound_stm -> .LBrace block_item_list RBrace  | -do-, jump_stm -> .-return- exp Semicolon  | LBrace, stm -> .selection_stm  | Semicolon, postfix_exp -> .postfix_exp Decrement  | OR, exp_stm -> .Semicolon  | for, primary_exp -> .ID  | LeftShift, stm -> .jump_stm  | -half4-, postfix_exp -> .postfix_exp Increment  | EQ, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Times, exp_stm -> .exp Semicolon  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, selection_stm -> .if LParen exp RParen stm else stm  | Number, unary_op -> .NOT  | String, unary_exp -> .postfix_exp  | Percent, stm -> .jump_stm  | -int-, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp Decrement  | Dot, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .postfix_exp  | LeftShift, )
386 <- (313, 'RParen') (declarator -> LParen declarator RParen.  | LParen, declarator -> LParen declarator RParen.  | RParen, declarator -> LParen declarator RParen.  | Comma, )
387 <- (314, 'parameter_list') (declarator -> declarator LParen parameter_list .RParen  | LParen, declarator -> declarator LParen parameter_list .RParen  | RParen, parameter_list -> parameter_list .Comma parameter_dec  | RParen, parameter_list -> parameter_list .Comma parameter_dec  | Comma, declarator -> declarator LParen parameter_list .RParen  | Comma, )
388 <- (317, 'RParen') (declarator -> declarator LParen parameter_list RParen.  | Semicolon, declarator -> declarator LParen parameter_list RParen.  | Comma, declarator -> declarator LParen parameter_list RParen.  | LParen, declarator -> declarator LParen parameter_list RParen.  | Colon, )
389 <- (319, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .Increment unary_exp  | Ampersand, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, binary_exp -> .binary_exp binary_op unary_exp  | Comma, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, conditional_exp -> .binary_exp  | Comma, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .primary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, assignment_exp -> .conditional_exp  | RParen, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, exp -> .assignment_exp  | RParen, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .primary_exp  | LParen, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | RParen, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .unary_op unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, primary_exp -> .Number  | RParen, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, exp -> .exp Comma assignment_exp  | RParen, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | while, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp Decrement  | Assign, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | RParen, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, binary_exp -> .binary_exp binary_op unary_exp  | RParen, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .postfix_exp  | RParen, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp LParen RParen  | Caret, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, binary_exp -> .unary_exp  | LT, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
390 <- (322, 'Semicolon') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, unary_exp -> .unary_op unary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, primary_exp -> .Number  | AND, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Question, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, binary_exp -> .unary_exp  | LE, primary_exp -> .String  | AND, postfix_exp -> .primary_exp  | Increment, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .primary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp Increment  | EQ, primary_exp -> .ID  | EQ, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .Tilde  | Number, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, binary_exp -> .unary_exp  | AND, primary_exp -> .Number  | Semicolon, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_op -> .NOT  | Number, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .Decrement unary_exp  | Percent, primary_exp -> .LParen exp RParen  | LE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, unary_exp -> .postfix_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | while, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp LParen RParen  | Caret, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Dot, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | Comma, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | Comma, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, conditional_exp -> .binary_exp  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, binary_exp -> .unary_exp  | LT, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .primary_exp  | LE, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, postfix_exp -> .primary_exp  | Ampersand, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | Dot, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .String  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
391 <- (323, 'RParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, stm -> .jump_stm  | else, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, stm -> .compound_stm  | else, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, stm -> .exp_stm  | while, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, exp_stm -> .Semicolon  | while, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, selection_stm -> .if LParen exp RParen stm else stm  | while, binary_exp -> .unary_exp  | Percent, compound_stm -> .LBrace block_item_list RBrace  | while, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | Minus, postfix_exp -> .primary_exp  | LT, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, jump_stm -> .-goto- ID  | else, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, compound_stm -> .LBrace block_item_list RBrace  | else, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, unary_exp -> .unary_op unary_exp  | Semicolon, unary_exp -> .unary_op unary_exp  | LE, jump_stm -> .break  | else, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, jump_stm -> .-return- exp Semicolon  | while, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .Number  | AND, binary_exp -> .unary_exp  | LE, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, unary_exp -> .postfix_exp  | LE, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp LParen RParen  | Percent, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, jump_stm -> .break  | while, unary_exp -> .postfix_exp  | Question, exp_stm -> .exp Semicolon  | while, binary_exp -> .unary_exp  | Ampersand, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, selection_stm -> .if LParen exp RParen stm else stm  | else, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, binary_exp -> .binary_exp binary_op unary_exp  | Plus, primary_exp -> .Number  | GE, stm -> .iteration_stm  | else, iteration_stm -> .while LParen exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, primary_exp -> .LParen exp RParen  | LT, unary_exp -> .unary_op unary_exp  | VerticalBar, selection_stm -> if LParen exp RParen .stm  | while, primary_exp -> .LParen exp RParen  | GT, unary_exp -> .unary_op unary_exp  | Ampersand, jump_stm -> .-return- exp Semicolon  | else, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, iteration_stm -> .while LParen exp RParen stm  | else, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .primary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, compound_stm -> .LBrace RBrace  | while, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp Increment  | EQ, primary_exp -> .ID  | EQ, postfix_exp -> .postfix_exp Decrement  | Comma, stm -> .compound_stm  | while, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, stm -> .jump_stm  | while, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Minus  | Number, primary_exp -> .Number  | Percent, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_op -> .NOT  | Number, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, jump_stm -> .-goto- ID  | while, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, selection_stm -> if LParen exp RParen .stm else stm  | while, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, compound_stm -> .LBrace RBrace  | else, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, exp_stm -> .Semicolon  | else, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, stm -> .selection_stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, primary_exp -> .Number  | Dot, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, primary_exp -> .Number  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, unary_exp -> .postfix_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Assign, unary_exp -> .Decrement unary_exp  | AND, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .primary_exp  | GT, stm -> .selection_stm  | else, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Caret, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | else, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, selection_stm -> .if LParen exp RParen stm  | else, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, jump_stm -> .-continue-  | else, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, binary_exp -> .binary_exp binary_op unary_exp  | Comma, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | OR, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, jump_stm -> .-continue-  | while, conditional_exp -> .binary_exp  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | EQ, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | LT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, stm -> .exp_stm  | else, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, exp_stm -> .exp Semicolon  | else, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | else, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | Dot, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .String  | Decrement, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, stm -> .iteration_stm  | while, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, unary_exp -> .Increment unary_exp  | Question, unary_exp -> .postfix_exp  | LeftShift, )
392 <- (324, 'exp') (iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -return-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -float4-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | Minus, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -sampler2D-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -float3-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -half2-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -fixed3-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -struct-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -void-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -long-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -int-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | Plus, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | Tilde, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | ID, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -float-, exp -> exp .Comma assignment_exp  | RParen, exp -> exp .Comma assignment_exp  | Comma, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | NOT, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -goto-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -half3-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | for, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -double-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | String, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -char-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -fixed2-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | Semicolon, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | break, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | Number, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | RBrace, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | while, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -continue-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -uniform-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | Decrement, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -float2-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -fixed4-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -do-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | LParen, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -short-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | LBrace, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -half4-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | Increment, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | if, )
393 <- (325, 'RParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, compound_stm -> .LBrace RBrace  | while, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, stm -> .exp_stm  | while, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, postfix_exp -> .postfix_exp LParen RParen  | GT, selection_stm -> .if LParen exp RParen stm else stm  | while, binary_exp -> .unary_exp  | Percent, compound_stm -> .LBrace block_item_list RBrace  | while, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, unary_exp -> .unary_op unary_exp  | Semicolon, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, exp_stm -> .Semicolon  | while, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, jump_stm -> .-return- exp Semicolon  | while, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, primary_exp -> .Number  | AND, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, unary_exp -> .postfix_exp  | LE, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, jump_stm -> .break  | while, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, binary_exp -> .unary_exp  | Ampersand, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Question, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, unary_exp -> .postfix_exp  | AND, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, iteration_stm -> .while LParen exp RParen stm  | while, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, binary_exp -> .unary_exp  | LE, primary_exp -> .Number  | Semicolon, unary_exp -> .unary_op unary_exp  | Ampersand, jump_stm -> .-goto- ID  | while, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, stm -> .compound_stm  | while, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, stm -> .jump_stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Increment, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, postfix_exp -> .postfix_exp Dot ID  | LBrack, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, stm -> .selection_stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, exp_stm -> .exp Semicolon  | while, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, unary_exp -> .postfix_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Assign, unary_exp -> .Decrement unary_exp  | AND, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, jump_stm -> .-continue-  | while, conditional_exp -> .binary_exp  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | EQ, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, iteration_stm -> while LParen exp RParen .stm  | while, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .primary_exp  | LE, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | Dot, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, stm -> .iteration_stm  | while, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, unary_exp -> .Increment unary_exp  | Question, unary_exp -> .postfix_exp  | LeftShift, )
394 <- (327, 'Colon') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, conditional_exp -> binary_exp Question exp Colon .conditional_exp  | RParen, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, unary_exp -> .postfix_exp  | RParen, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | RParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .Increment unary_exp  | Ampersand, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, conditional_exp -> .binary_exp  | Comma, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, primary_exp -> .String  | LeftShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .primary_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Percent, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Increment, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .primary_exp  | LParen, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_op -> .Plus  | Minus, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, binary_exp -> .binary_exp binary_op unary_exp  | Question, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, conditional_exp -> binary_exp Question exp Colon .conditional_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .Tilde  | Number, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .String  | Question, primary_exp -> .Number  | Percent, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, primary_exp -> .Number  | RParen, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, binary_exp -> .unary_exp  | Question, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | RParen, primary_exp -> .ID  | Comma, primary_exp -> .ID  | LBrack, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, binary_exp -> .binary_exp binary_op unary_exp  | RParen, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp LParen RParen  | Caret, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .Number  | Plus, unary_op -> .NOT  | Plus, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, unary_op -> .NOT  | String, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, binary_exp -> .unary_exp  | LT, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .primary_exp  | Ampersand, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, postfix_exp -> .postfix_exp Dot ID  | RParen, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
395 <- (328, 'unary_exp') (unary_exp -> Decrement unary_exp.  | RightShift, unary_exp -> Decrement unary_exp.  | OR, unary_exp -> Decrement unary_exp.  | Question, unary_exp -> Decrement unary_exp.  | Minus, unary_exp -> Decrement unary_exp.  | VerticalBar, unary_exp -> Decrement unary_exp.  | Plus, unary_exp -> Decrement unary_exp.  | LE, unary_exp -> Decrement unary_exp.  | RParen, unary_exp -> Decrement unary_exp.  | Times, unary_exp -> Decrement unary_exp.  | Divide, unary_exp -> Decrement unary_exp.  | Caret, unary_exp -> Decrement unary_exp.  | AND, unary_exp -> Decrement unary_exp.  | Percent, unary_exp -> Decrement unary_exp.  | EQ, unary_exp -> Decrement unary_exp.  | LeftShift, unary_exp -> Decrement unary_exp.  | GT, unary_exp -> Decrement unary_exp.  | GE, unary_exp -> Decrement unary_exp.  | Comma, unary_exp -> Decrement unary_exp.  | LT, unary_exp -> Decrement unary_exp.  | Ampersand, unary_exp -> Decrement unary_exp.  | NEQ, )
396 <- (330, 'unary_exp') (unary_exp -> Increment unary_exp.  | LeftShift, unary_exp -> Increment unary_exp.  | AND, unary_exp -> Increment unary_exp.  | GT, unary_exp -> Increment unary_exp.  | Caret, unary_exp -> Increment unary_exp.  | LT, unary_exp -> Increment unary_exp.  | NEQ, unary_exp -> Increment unary_exp.  | LE, unary_exp -> Increment unary_exp.  | RParen, unary_exp -> Increment unary_exp.  | Comma, unary_exp -> Increment unary_exp.  | EQ, unary_exp -> Increment unary_exp.  | Divide, unary_exp -> Increment unary_exp.  | Question, unary_exp -> Increment unary_exp.  | Plus, unary_exp -> Increment unary_exp.  | OR, unary_exp -> Increment unary_exp.  | VerticalBar, unary_exp -> Increment unary_exp.  | GE, unary_exp -> Increment unary_exp.  | Times, unary_exp -> Increment unary_exp.  | RightShift, unary_exp -> Increment unary_exp.  | Minus, unary_exp -> Increment unary_exp.  | Percent, unary_exp -> Increment unary_exp.  | Ampersand, )
397 <- (331, 'exp') (primary_exp -> LParen exp .RParen  | LeftShift, primary_exp -> LParen exp .RParen  | RightShift, primary_exp -> LParen exp .RParen  | NEQ, primary_exp -> LParen exp .RParen  | Ampersand, primary_exp -> LParen exp .RParen  | AND, primary_exp -> LParen exp .RParen  | LBrack, primary_exp -> LParen exp .RParen  | LParen, primary_exp -> LParen exp .RParen  | EQ, primary_exp -> LParen exp .RParen  | LE, exp -> exp .Comma assignment_exp  | Comma, primary_exp -> LParen exp .RParen  | Minus, primary_exp -> LParen exp .RParen  | VerticalBar, primary_exp -> LParen exp .RParen  | Percent, primary_exp -> LParen exp .RParen  | Divide, primary_exp -> LParen exp .RParen  | Dot, primary_exp -> LParen exp .RParen  | GT, primary_exp -> LParen exp .RParen  | LT, primary_exp -> LParen exp .RParen  | Comma, primary_exp -> LParen exp .RParen  | Increment, primary_exp -> LParen exp .RParen  | Plus, primary_exp -> LParen exp .RParen  | Times, primary_exp -> LParen exp .RParen  | Decrement, primary_exp -> LParen exp .RParen  | OR, exp -> exp .Comma assignment_exp  | RParen, primary_exp -> LParen exp .RParen  | Question, primary_exp -> LParen exp .RParen  | GE, primary_exp -> LParen exp .RParen  | Caret, primary_exp -> LParen exp .RParen  | RParen, )
398 <- (334, 'Decrement') (postfix_exp -> postfix_exp Decrement.  | OR, postfix_exp -> postfix_exp Decrement.  | RightShift, postfix_exp -> postfix_exp Decrement.  | Caret, postfix_exp -> postfix_exp Decrement.  | LParen, postfix_exp -> postfix_exp Decrement.  | Dot, postfix_exp -> postfix_exp Decrement.  | EQ, postfix_exp -> postfix_exp Decrement.  | GT, postfix_exp -> postfix_exp Decrement.  | RParen, postfix_exp -> postfix_exp Decrement.  | Question, postfix_exp -> postfix_exp Decrement.  | Plus, postfix_exp -> postfix_exp Decrement.  | Comma, postfix_exp -> postfix_exp Decrement.  | Percent, postfix_exp -> postfix_exp Decrement.  | LT, postfix_exp -> postfix_exp Decrement.  | Divide, postfix_exp -> postfix_exp Decrement.  | Times, postfix_exp -> postfix_exp Decrement.  | Decrement, postfix_exp -> postfix_exp Decrement.  | Increment, postfix_exp -> postfix_exp Decrement.  | NEQ, postfix_exp -> postfix_exp Decrement.  | Minus, postfix_exp -> postfix_exp Decrement.  | LBrack, postfix_exp -> postfix_exp Decrement.  | Ampersand, postfix_exp -> postfix_exp Decrement.  | AND, postfix_exp -> postfix_exp Decrement.  | LE, postfix_exp -> postfix_exp Decrement.  | VerticalBar, postfix_exp -> postfix_exp Decrement.  | LeftShift, postfix_exp -> postfix_exp Decrement.  | GE, )
399 <- (334, 'Dot') (postfix_exp -> postfix_exp Dot .ID  | Percent, postfix_exp -> postfix_exp Dot .ID  | LBrack, postfix_exp -> postfix_exp Dot .ID  | Question, postfix_exp -> postfix_exp Dot .ID  | Divide, postfix_exp -> postfix_exp Dot .ID  | Plus, postfix_exp -> postfix_exp Dot .ID  | AND, postfix_exp -> postfix_exp Dot .ID  | Ampersand, postfix_exp -> postfix_exp Dot .ID  | NEQ, postfix_exp -> postfix_exp Dot .ID  | VerticalBar, postfix_exp -> postfix_exp Dot .ID  | Dot, postfix_exp -> postfix_exp Dot .ID  | Decrement, postfix_exp -> postfix_exp Dot .ID  | LE, postfix_exp -> postfix_exp Dot .ID  | Increment, postfix_exp -> postfix_exp Dot .ID  | LT, postfix_exp -> postfix_exp Dot .ID  | Times, postfix_exp -> postfix_exp Dot .ID  | Minus, postfix_exp -> postfix_exp Dot .ID  | OR, postfix_exp -> postfix_exp Dot .ID  | LeftShift, postfix_exp -> postfix_exp Dot .ID  | EQ, postfix_exp -> postfix_exp Dot .ID  | Caret, postfix_exp -> postfix_exp Dot .ID  | LParen, postfix_exp -> postfix_exp Dot .ID  | GT, postfix_exp -> postfix_exp Dot .ID  | GE, postfix_exp -> postfix_exp Dot .ID  | Comma, postfix_exp -> postfix_exp Dot .ID  | RightShift, postfix_exp -> postfix_exp Dot .ID  | RParen, )
400 <- (334, 'Increment') (postfix_exp -> postfix_exp Increment.  | VerticalBar, postfix_exp -> postfix_exp Increment.  | Dot, postfix_exp -> postfix_exp Increment.  | Percent, postfix_exp -> postfix_exp Increment.  | GE, postfix_exp -> postfix_exp Increment.  | Comma, postfix_exp -> postfix_exp Increment.  | OR, postfix_exp -> postfix_exp Increment.  | LT, postfix_exp -> postfix_exp Increment.  | LE, postfix_exp -> postfix_exp Increment.  | AND, postfix_exp -> postfix_exp Increment.  | GT, postfix_exp -> postfix_exp Increment.  | RightShift, postfix_exp -> postfix_exp Increment.  | Caret, postfix_exp -> postfix_exp Increment.  | LeftShift, postfix_exp -> postfix_exp Increment.  | LBrack, postfix_exp -> postfix_exp Increment.  | Divide, postfix_exp -> postfix_exp Increment.  | Increment, postfix_exp -> postfix_exp Increment.  | Question, postfix_exp -> postfix_exp Increment.  | Ampersand, postfix_exp -> postfix_exp Increment.  | NEQ, postfix_exp -> postfix_exp Increment.  | Minus, postfix_exp -> postfix_exp Increment.  | Decrement, postfix_exp -> postfix_exp Increment.  | LParen, postfix_exp -> postfix_exp Increment.  | RParen, postfix_exp -> postfix_exp Increment.  | Plus, postfix_exp -> postfix_exp Increment.  | EQ, postfix_exp -> postfix_exp Increment.  | Times, )
401 <- (334, 'LBrack') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, postfix_exp -> postfix_exp LBrack .exp RBrack  | RightShift, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, primary_exp -> .ID  | EQ, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | LBrack, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_exp -> .Increment unary_exp  | Divide, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> postfix_exp LBrack .exp RBrack  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, postfix_exp -> .postfix_exp LParen RParen  | AND, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RBrack, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, primary_exp -> .String  | Ampersand, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, postfix_exp -> .primary_exp  | LT, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RBrack, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, postfix_exp -> postfix_exp LBrack .exp RBrack  | OR, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, postfix_exp -> postfix_exp LBrack .exp RBrack  | NEQ, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, primary_exp -> .ID  | RBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .NOT  | LParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> postfix_exp LBrack .exp RBrack  | AND, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, postfix_exp -> postfix_exp LBrack .exp RBrack  | EQ, postfix_exp -> postfix_exp LBrack .exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | Decrement, postfix_exp -> .postfix_exp Increment  | LeftShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | LT, primary_exp -> .LParen exp RParen  | Question, postfix_exp -> .postfix_exp Decrement  | LeftShift, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, postfix_exp -> .postfix_exp Decrement  | RBrack, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, unary_exp -> .postfix_exp  | RBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, unary_exp -> .Decrement unary_exp  | Ampersand, postfix_exp -> postfix_exp LBrack .exp RBrack  | VerticalBar, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> postfix_exp LBrack .exp RBrack  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | RBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, binary_exp -> .unary_exp  | LT, exp -> .exp Comma assignment_exp  | RBrack, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, unary_exp -> .Decrement unary_exp  | RBrack, postfix_exp -> .primary_exp  | Increment, postfix_exp -> .postfix_exp LParen RParen  | RBrack, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .primary_exp  | Decrement, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .primary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> postfix_exp LBrack .exp RBrack  | Increment, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Divide, unary_op -> .Minus  | String, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | LT, postfix_exp -> postfix_exp LBrack .exp RBrack  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | RBrack, primary_exp -> .String  | Question, primary_exp -> .Number  | Percent, unary_exp -> .unary_op unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, primary_exp -> .ID  | GE, postfix_exp -> .postfix_exp Decrement  | LE, postfix_exp -> postfix_exp LBrack .exp RBrack  | Minus, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, exp -> .assignment_exp  | RBrack, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> postfix_exp LBrack .exp RBrack  | GT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, unary_exp -> .Decrement unary_exp  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> postfix_exp LBrack .exp RBrack  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_exp -> .unary_op unary_exp  | RBrack, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> postfix_exp LBrack .exp RBrack  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | RBrack, unary_op -> .Plus  | Decrement, postfix_exp -> postfix_exp LBrack .exp RBrack  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp Decrement  | Assign, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, primary_exp -> .Number  | Dot, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, primary_exp -> .String  | Assign, postfix_exp -> postfix_exp LBrack .exp RBrack  | Dot, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | Caret, assignment_exp -> .conditional_exp  | RBrack, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, primary_exp -> .String  | RBrack, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .primary_exp  | GT, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .postfix_exp  | NEQ, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> postfix_exp LBrack .exp RBrack  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Dot, postfix_exp -> postfix_exp LBrack .exp RBrack  | Plus, primary_exp -> .Number  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Divide, primary_exp -> .String  | Caret, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, binary_exp -> .binary_exp binary_op unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .ID  | NEQ, binary_exp -> .unary_exp  | RBrack, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, primary_exp -> .Number  | OR, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | RBrack, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Tilde  | NOT, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> .Number  | RBrack, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Increment  | RBrack, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> postfix_exp LBrack .exp RBrack  | Comma, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .primary_exp  | RBrack, primary_exp -> .ID  | Increment, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, conditional_exp -> .binary_exp  | RBrack, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, primary_exp -> .Number  | GE, postfix_exp -> postfix_exp LBrack .exp RBrack  | Question, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> postfix_exp LBrack .exp RBrack  | LParen, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, postfix_exp -> .postfix_exp Decrement  | LT, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, unary_exp -> .Increment unary_exp  | RBrack, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .String  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Increment  | LBrack, primary_exp -> .ID  | Dot, assignment_exp -> .unary_exp assignment_op assignment_exp  | RBrack, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | GE, )
402 <- (334, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, postfix_exp -> postfix_exp LParen .RParen  | LParen, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Question, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, unary_exp -> .postfix_exp  | Assign, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Ampersand, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, unary_exp -> .postfix_exp  | RParen, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, postfix_exp -> postfix_exp LParen .RParen  | GT, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | RParen, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Plus, primary_exp -> .Number  | Times, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, postfix_exp -> postfix_exp LParen .RParen  | LBrack, unary_exp -> .Increment unary_exp  | Ampersand, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | RightShift, unary_op -> .Tilde  | LParen, postfix_exp -> postfix_exp LParen .RParen  | EQ, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, postfix_exp -> .primary_exp  | LT, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, primary_exp -> .String  | LBrack, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, argument_exp_list -> .argument_exp_list Comma assignment_exp  | Comma, postfix_exp -> postfix_exp LParen .RParen  | Dot, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, unary_exp -> .unary_op unary_exp  | Question, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .NOT  | ID, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Increment, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, postfix_exp -> postfix_exp LParen .RParen  | Divide, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LE, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, postfix_exp -> .postfix_exp Increment  | LeftShift, postfix_exp -> postfix_exp LParen .RParen  | AND, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, postfix_exp -> postfix_exp LParen .RParen  | LeftShift, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> postfix_exp LParen .RParen  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, primary_exp -> .ID  | GT, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, postfix_exp -> postfix_exp LParen .RParen  | VerticalBar, primary_exp -> .LParen exp RParen  | Question, postfix_exp -> postfix_exp LParen .RParen  | RParen, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | Percent, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, argument_exp_list -> .argument_exp_list Comma assignment_exp  | RParen, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Plus, postfix_exp -> postfix_exp LParen .RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | GT, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, primary_exp -> .ID  | Divide, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Divide, postfix_exp -> postfix_exp LParen .RParen  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, binary_exp -> .unary_exp  | LeftShift, binary_exp -> .unary_exp  | Question, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Comma, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, binary_exp -> .binary_exp binary_op unary_exp  | Question, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .primary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | AND, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | LParen, postfix_exp -> .postfix_exp Dot ID  | LParen, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, unary_exp -> .Decrement unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Increment, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Dot ID  | LT, assignment_exp -> .conditional_exp  | RParen, postfix_exp -> postfix_exp LParen .RParen  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, primary_exp -> .Number  | RParen, binary_exp -> .unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, unary_exp -> .Increment unary_exp  | Question, binary_exp -> .unary_exp  | AND, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Percent, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, postfix_exp -> postfix_exp LParen .RParen  | LT, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | GE, primary_exp -> .ID  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Dot, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, postfix_exp -> postfix_exp LParen .RParen  | Caret, unary_exp -> .Decrement unary_exp  | Times, unary_exp -> .unary_op unary_exp  | LE, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, postfix_exp -> postfix_exp LParen .RParen  | GE, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, primary_exp -> .Number  | Dot, postfix_exp -> .primary_exp  | Assign, postfix_exp -> postfix_exp LParen .RParen  | RightShift, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, unary_op -> .Minus  | Tilde, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .Decrement unary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | RParen, primary_exp -> .String  | Assign, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | OR, unary_exp -> .unary_op unary_exp  | EQ, postfix_exp -> postfix_exp LParen .RParen  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Caret, binary_exp -> .unary_exp  | VerticalBar, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LParen, primary_exp -> .Number  | Plus, unary_op -> .NOT  | Plus, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, postfix_exp -> .postfix_exp Decrement  | Percent, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, postfix_exp -> postfix_exp LParen .RParen  | OR, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, argument_exp_list -> .assignment_exp  | RParen, primary_exp -> .Number  | Increment, postfix_exp -> postfix_exp LParen .RParen  | Increment, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LT, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> postfix_exp LParen .RParen  | Percent, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, unary_exp -> .Decrement unary_exp  | OR, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Times, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | VerticalBar, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | RParen, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> postfix_exp LParen .RParen  | Question, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | EQ, postfix_exp -> postfix_exp LParen .RParen  | Decrement, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .unary_op unary_exp  | Assign, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .postfix_exp  | Comma, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .postfix_exp Dot ID  | RParen, unary_exp -> .unary_op unary_exp  | Comma, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, primary_exp -> .Number  | NEQ, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .ID  | VerticalBar, primary_exp -> .Number  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Decrement, primary_exp -> .String  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> postfix_exp LParen .RParen  | NEQ, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, argument_exp_list -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> postfix_exp LParen .RParen  | Plus, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
403 <- (337, 'unary_exp') (unary_exp -> unary_op unary_exp.  | NEQ, unary_exp -> unary_op unary_exp.  | GE, unary_exp -> unary_op unary_exp.  | RightShift, unary_exp -> unary_op unary_exp.  | Question, unary_exp -> unary_op unary_exp.  | LeftShift, unary_exp -> unary_op unary_exp.  | Plus, unary_exp -> unary_op unary_exp.  | Ampersand, unary_exp -> unary_op unary_exp.  | Divide, unary_exp -> unary_op unary_exp.  | Comma, unary_exp -> unary_op unary_exp.  | EQ, unary_exp -> unary_op unary_exp.  | LE, unary_exp -> unary_op unary_exp.  | OR, unary_exp -> unary_op unary_exp.  | GT, unary_exp -> unary_op unary_exp.  | Percent, unary_exp -> unary_op unary_exp.  | LT, unary_exp -> unary_op unary_exp.  | AND, unary_exp -> unary_op unary_exp.  | RParen, unary_exp -> unary_op unary_exp.  | Caret, unary_exp -> unary_op unary_exp.  | Times, unary_exp -> unary_op unary_exp.  | VerticalBar, unary_exp -> unary_op unary_exp.  | Minus, )
404 <- (340, 'RBrack') (postfix_exp -> postfix_exp LBrack exp RBrack.  | NEQ, postfix_exp -> postfix_exp LBrack exp RBrack.  | Plus, postfix_exp -> postfix_exp LBrack exp RBrack.  | Question, postfix_exp -> postfix_exp LBrack exp RBrack.  | LT, postfix_exp -> postfix_exp LBrack exp RBrack.  | Assign, postfix_exp -> postfix_exp LBrack exp RBrack.  | LParen, postfix_exp -> postfix_exp LBrack exp RBrack.  | VerticalBar, postfix_exp -> postfix_exp LBrack exp RBrack.  | AND, postfix_exp -> postfix_exp LBrack exp RBrack.  | EQ, postfix_exp -> postfix_exp LBrack exp RBrack.  | Times, postfix_exp -> postfix_exp LBrack exp RBrack.  | LBrack, postfix_exp -> postfix_exp LBrack exp RBrack.  | Increment, postfix_exp -> postfix_exp LBrack exp RBrack.  | OR, postfix_exp -> postfix_exp LBrack exp RBrack.  | Caret, postfix_exp -> postfix_exp LBrack exp RBrack.  | Dot, postfix_exp -> postfix_exp LBrack exp RBrack.  | RightShift, postfix_exp -> postfix_exp LBrack exp RBrack.  | Percent, postfix_exp -> postfix_exp LBrack exp RBrack.  | Ampersand, postfix_exp -> postfix_exp LBrack exp RBrack.  | GT, postfix_exp -> postfix_exp LBrack exp RBrack.  | GE, postfix_exp -> postfix_exp LBrack exp RBrack.  | Minus, postfix_exp -> postfix_exp LBrack exp RBrack.  | Comma, postfix_exp -> postfix_exp LBrack exp RBrack.  | LeftShift, postfix_exp -> postfix_exp LBrack exp RBrack.  | Divide, postfix_exp -> postfix_exp LBrack exp RBrack.  | LE, postfix_exp -> postfix_exp LBrack exp RBrack.  | RParen, postfix_exp -> postfix_exp LBrack exp RBrack.  | Decrement, )
405 <- (342, 'RParen') (postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Comma, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Increment, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LeftShift, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | OR, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LParen, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | RParen, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | RightShift, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Minus, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Caret, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Times, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | EQ, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | VerticalBar, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Plus, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | GT, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Ampersand, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Dot, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Question, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LT, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Percent, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Decrement, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | NEQ, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Assign, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LBrack, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | AND, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Divide, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | GE, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LE, )
406 <- (346, 'RParen') (primary_exp -> LParen exp RParen.  | Percent, primary_exp -> LParen exp RParen.  | Minus, primary_exp -> LParen exp RParen.  | Increment, primary_exp -> LParen exp RParen.  | Question, primary_exp -> LParen exp RParen.  | Colon, primary_exp -> LParen exp RParen.  | LT, primary_exp -> LParen exp RParen.  | GT, primary_exp -> LParen exp RParen.  | AND, primary_exp -> LParen exp RParen.  | Caret, primary_exp -> LParen exp RParen.  | Decrement, primary_exp -> LParen exp RParen.  | NEQ, primary_exp -> LParen exp RParen.  | Divide, primary_exp -> LParen exp RParen.  | Dot, primary_exp -> LParen exp RParen.  | LParen, primary_exp -> LParen exp RParen.  | GE, primary_exp -> LParen exp RParen.  | VerticalBar, primary_exp -> LParen exp RParen.  | LBrack, primary_exp -> LParen exp RParen.  | OR, primary_exp -> LParen exp RParen.  | EQ, primary_exp -> LParen exp RParen.  | LE, primary_exp -> LParen exp RParen.  | Comma, primary_exp -> LParen exp RParen.  | Times, primary_exp -> LParen exp RParen.  | Ampersand, primary_exp -> LParen exp RParen.  | RightShift, primary_exp -> LParen exp RParen.  | LeftShift, primary_exp -> LParen exp RParen.  | Assign, primary_exp -> LParen exp RParen.  | Plus, )
407 <- (347, 'exp') (conditional_exp -> binary_exp Question exp .Colon conditional_exp  | Comma, exp -> exp .Comma assignment_exp  | Comma, exp -> exp .Comma assignment_exp  | Colon, conditional_exp -> binary_exp Question exp .Colon conditional_exp  | Colon, )
408 <- (348, 'Decrement') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, unary_exp -> Decrement .unary_exp  | Divide, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | Caret, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .unary_op unary_exp  | Colon, unary_exp -> .Increment unary_exp  | Colon, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, unary_op -> .NOT  | Tilde, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_exp -> Decrement .unary_exp  | VerticalBar, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, primary_exp -> .String  | Colon, unary_exp -> .postfix_exp  | Colon, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, unary_exp -> Decrement .unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, postfix_exp -> .postfix_exp Decrement  | Colon, unary_exp -> .unary_op unary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Percent, primary_exp -> .ID  | VerticalBar, unary_exp -> Decrement .unary_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> Decrement .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Increment  | Question, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, primary_exp -> .String  | RightShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, primary_exp -> .ID  | Plus, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, unary_exp -> Decrement .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, unary_exp -> Decrement .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Colon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, primary_exp -> .LParen exp RParen  | LT, primary_exp -> .ID  | LeftShift, unary_exp -> Decrement .unary_exp  | LT, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | GE, unary_exp -> .postfix_exp  | GT, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .Decrement unary_exp  | Colon, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_op -> .Plus  | Minus, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, unary_exp -> Decrement .unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, postfix_exp -> .postfix_exp Increment  | Colon, unary_exp -> .postfix_exp  | Caret, unary_exp -> Decrement .unary_exp  | LE, primary_exp -> .ID  | LT, unary_exp -> Decrement .unary_exp  | GE, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .String  | Question, primary_exp -> .Number  | Percent, primary_exp -> .Number  | Colon, primary_exp -> .LParen exp RParen  | Question, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, unary_op -> .Minus  | LParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Colon, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, postfix_exp -> .postfix_exp Dot ID  | Comma, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Divide, primary_exp -> .LParen exp RParen  | Colon, unary_exp -> .postfix_exp  | EQ, unary_exp -> .postfix_exp  | VerticalBar, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Colon, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> Decrement .unary_exp  | Question, unary_exp -> Decrement .unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | Minus, postfix_exp -> .primary_exp  | GT, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, primary_exp -> .Number  | Plus, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Colon, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .ID  | Comma, primary_exp -> .ID  | LBrack, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> Decrement .unary_exp  | Colon, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | Percent, unary_exp -> Decrement .unary_exp  | AND, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, unary_exp -> Decrement .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | Colon, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_exp -> Decrement .unary_exp  | OR, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .Tilde  | ID, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Colon, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, unary_exp -> Decrement .unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | Dot, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, unary_exp -> Decrement .unary_exp  | Times, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .postfix_exp  | Comma, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Decrement, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, unary_exp -> Decrement .unary_exp  | RightShift, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> Decrement .unary_exp  | GT, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, unary_exp -> .postfix_exp  | LeftShift, )
409 <- (348, 'ID') (primary_exp -> ID.  | Minus, primary_exp -> ID.  | NEQ, primary_exp -> ID.  | LBrack, primary_exp -> ID.  | Decrement, primary_exp -> ID.  | OR, primary_exp -> ID.  | Comma, primary_exp -> ID.  | Times, primary_exp -> ID.  | Percent, primary_exp -> ID.  | RightShift, primary_exp -> ID.  | Question, primary_exp -> ID.  | LE, primary_exp -> ID.  | GE, primary_exp -> ID.  | LT, primary_exp -> ID.  | VerticalBar, primary_exp -> ID.  | EQ, primary_exp -> ID.  | GT, primary_exp -> ID.  | Caret, primary_exp -> ID.  | Increment, primary_exp -> ID.  | Divide, primary_exp -> ID.  | AND, primary_exp -> ID.  | LParen, primary_exp -> ID.  | Ampersand, primary_exp -> ID.  | LeftShift, primary_exp -> ID.  | Plus, primary_exp -> ID.  | Dot, primary_exp -> ID.  | Colon, )
410 <- (348, 'Increment') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, unary_exp -> Increment .unary_exp  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, primary_exp -> .LParen exp RParen  | Colon, postfix_exp -> .postfix_exp LParen RParen  | GE, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .unary_op unary_exp  | Colon, unary_exp -> .Increment unary_exp  | Colon, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_exp -> Increment .unary_exp  | Minus, unary_op -> .NOT  | Tilde, unary_exp -> Increment .unary_exp  | Question, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, postfix_exp -> .postfix_exp LParen RParen  | LT, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, unary_exp -> Increment .unary_exp  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, unary_exp -> Increment .unary_exp  | EQ, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, unary_exp -> Increment .unary_exp  | Comma, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, unary_exp -> Increment .unary_exp  | Plus, primary_exp -> .String  | LE, primary_exp -> .String  | Colon, unary_exp -> .postfix_exp  | Colon, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, postfix_exp -> .postfix_exp Decrement  | Colon, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .ID  | VerticalBar, primary_exp -> .String  | Dot, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, primary_exp -> .String  | RightShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, primary_exp -> .ID  | Plus, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Colon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, primary_exp -> .ID  | LeftShift, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> Increment .unary_exp  | Colon, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, unary_exp -> .postfix_exp  | GT, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .Decrement unary_exp  | Colon, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Times, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> Increment .unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, unary_exp -> Increment .unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | Comma, postfix_exp -> .postfix_exp Increment  | Colon, unary_exp -> Increment .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Ampersand, postfix_exp -> .primary_exp  | Increment, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .Number  | Colon, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, unary_op -> .Minus  | LParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Colon, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> Increment .unary_exp  | AND, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> Increment .unary_exp  | LE, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, unary_exp -> Increment .unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, primary_exp -> .String  | LParen, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, unary_exp -> Increment .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, postfix_exp -> .postfix_exp Dot ID  | Colon, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, unary_exp -> Increment .unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | Minus, postfix_exp -> .primary_exp  | GT, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, primary_exp -> .Number  | Plus, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Colon, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .ID  | Comma, primary_exp -> .ID  | LBrack, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .unary_op unary_exp  | EQ, unary_exp -> Increment .unary_exp  | LT, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> Increment .unary_exp  | Divide, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | Colon, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_op -> .NOT  | Plus, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, primary_exp -> .ID  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Divide, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .Tilde  | ID, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Colon, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .Number  | LE, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, postfix_exp -> .postfix_exp Increment  | Dot, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> Increment .unary_exp  | NEQ, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Decrement, unary_exp -> Increment .unary_exp  | GT, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Dot, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_exp -> Increment .unary_exp  | Times, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, unary_exp -> .postfix_exp  | LeftShift, )
411 <- (348, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, primary_exp -> LParen .exp RParen  | Dot, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, primary_exp -> LParen .exp RParen  | LBrack, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .Increment unary_exp  | Ampersand, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, postfix_exp -> .primary_exp  | LT, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, primary_exp -> LParen .exp RParen  | Decrement, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, conditional_exp -> .binary_exp  | Comma, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> LParen .exp RParen  | GT, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | RParen, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, primary_exp -> LParen .exp RParen  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, primary_exp -> LParen .exp RParen  | Plus, binary_exp -> .unary_exp  | LE, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, unary_exp -> .postfix_exp  | LE, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, assignment_exp -> .conditional_exp  | RParen, unary_op -> .Minus  | Number, primary_exp -> LParen .exp RParen  | Percent, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, primary_exp -> LParen .exp RParen  | GE, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, binary_exp -> .unary_exp  | Ampersand, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, primary_exp -> LParen .exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | Percent, exp -> .assignment_exp  | RParen, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> LParen .exp RParen  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, unary_exp -> .Decrement unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, primary_exp -> LParen .exp RParen  | Colon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, primary_exp -> LParen .exp RParen  | Ampersand, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .Number  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, primary_exp -> LParen .exp RParen  | Increment, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> LParen .exp RParen  | NEQ, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | RParen, postfix_exp -> .postfix_exp Dot ID  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Divide, unary_op -> .Minus  | String, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .unary_exp  | Plus, primary_exp -> LParen .exp RParen  | Divide, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, primary_exp -> LParen .exp RParen  | Comma, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, primary_exp -> .LParen exp RParen  | GE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, binary_exp -> .unary_exp  | AND, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, primary_exp -> LParen .exp RParen  | Minus, exp -> .exp Comma assignment_exp  | RParen, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, primary_exp -> LParen .exp RParen  | Caret, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, primary_exp -> LParen .exp RParen  | OR, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> LParen .exp RParen  | LeftShift, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, primary_exp -> .Number  | Dot, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Assign, unary_exp -> .Decrement unary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | RParen, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, primary_exp -> LParen .exp RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .postfix_exp  | RParen, primary_exp -> LParen .exp RParen  | LE, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, primary_exp -> LParen .exp RParen  | Times, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, primary_exp -> LParen .exp RParen  | EQ, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> LParen .exp RParen  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, primary_exp -> LParen .exp RParen  | VerticalBar, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .unary_op unary_exp  | Assign, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .postfix_exp  | Comma, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, primary_exp -> .Number  | GE, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .postfix_exp Dot ID  | RParen, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, unary_exp -> .Increment unary_exp  | Question, unary_exp -> .postfix_exp  | LeftShift, )
412 <- (348, 'Number') (primary_exp -> Number.  | Increment, primary_exp -> Number.  | Question, primary_exp -> Number.  | Divide, primary_exp -> Number.  | Ampersand, primary_exp -> Number.  | Plus, primary_exp -> Number.  | LE, primary_exp -> Number.  | Decrement, primary_exp -> Number.  | Caret, primary_exp -> Number.  | Percent, primary_exp -> Number.  | VerticalBar, primary_exp -> Number.  | EQ, primary_exp -> Number.  | Comma, primary_exp -> Number.  | GT, primary_exp -> Number.  | AND, primary_exp -> Number.  | GE, primary_exp -> Number.  | OR, primary_exp -> Number.  | Minus, primary_exp -> Number.  | LBrack, primary_exp -> Number.  | RightShift, primary_exp -> Number.  | LParen, primary_exp -> Number.  | Colon, primary_exp -> Number.  | Dot, primary_exp -> Number.  | LT, primary_exp -> Number.  | NEQ, primary_exp -> Number.  | Times, primary_exp -> Number.  | LeftShift, )
413 <- (348, 'String') (primary_exp -> String.  | Plus, primary_exp -> String.  | Ampersand, primary_exp -> String.  | AND, primary_exp -> String.  | Comma, primary_exp -> String.  | Caret, primary_exp -> String.  | LeftShift, primary_exp -> String.  | Colon, primary_exp -> String.  | LE, primary_exp -> String.  | EQ, primary_exp -> String.  | RightShift, primary_exp -> String.  | Increment, primary_exp -> String.  | LParen, primary_exp -> String.  | Minus, primary_exp -> String.  | Question, primary_exp -> String.  | GE, primary_exp -> String.  | GT, primary_exp -> String.  | OR, primary_exp -> String.  | Divide, primary_exp -> String.  | VerticalBar, primary_exp -> String.  | NEQ, primary_exp -> String.  | LBrack, primary_exp -> String.  | Percent, primary_exp -> String.  | LT, primary_exp -> String.  | Dot, primary_exp -> String.  | Times, primary_exp -> String.  | Decrement, )
414 <- (348, 'postfix_exp') (unary_exp -> postfix_exp.  | Ampersand, postfix_exp -> postfix_exp .Decrement  | GT, postfix_exp -> postfix_exp .LBrack exp RBrack  | Plus, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | OR, postfix_exp -> postfix_exp .LParen RParen  | OR, postfix_exp -> postfix_exp .Increment  | Divide, postfix_exp -> postfix_exp .LParen RParen  | EQ, unary_exp -> postfix_exp.  | AND, postfix_exp -> postfix_exp .Increment  | VerticalBar, unary_exp -> postfix_exp.  | Comma, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Comma, postfix_exp -> postfix_exp .Increment  | LeftShift, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Percent, postfix_exp -> postfix_exp .Dot ID  | Dot, postfix_exp -> postfix_exp .LParen RParen  | Minus, postfix_exp -> postfix_exp .Dot ID  | GT, postfix_exp -> postfix_exp .LParen RParen  | NEQ, postfix_exp -> postfix_exp .LParen RParen  | Percent, postfix_exp -> postfix_exp .Decrement  | Caret, postfix_exp -> postfix_exp .LBrack exp RBrack  | LE, postfix_exp -> postfix_exp .Decrement  | RightShift, postfix_exp -> postfix_exp .LParen RParen  | AND, postfix_exp -> postfix_exp .Decrement  | LT, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Minus, unary_exp -> postfix_exp.  | Divide, postfix_exp -> postfix_exp .Increment  | Minus, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Decrement, postfix_exp -> postfix_exp .Increment  | Percent, postfix_exp -> postfix_exp .Dot ID  | VerticalBar, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | EQ, postfix_exp -> postfix_exp .Increment  | Question, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> postfix_exp .Dot ID  | Times, postfix_exp -> postfix_exp .Decrement  | GE, postfix_exp -> postfix_exp .Increment  | EQ, postfix_exp -> postfix_exp .Dot ID  | Increment, postfix_exp -> postfix_exp .LParen RParen  | LT, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | NEQ, postfix_exp -> postfix_exp .Decrement  | Divide, postfix_exp -> postfix_exp .Dot ID  | Divide, unary_exp -> postfix_exp.  | LeftShift, postfix_exp -> postfix_exp .Decrement  | Dot, postfix_exp -> postfix_exp .Dot ID  | Minus, postfix_exp -> postfix_exp .LBrack exp RBrack  | LT, unary_exp -> postfix_exp.  | OR, postfix_exp -> postfix_exp .LParen RParen  | Colon, postfix_exp -> postfix_exp .Decrement  | Increment, postfix_exp -> postfix_exp .LBrack exp RBrack  | Question, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | GE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LT, unary_exp -> postfix_exp.  | LE, unary_exp -> postfix_exp.  | Times, postfix_exp -> postfix_exp .LBrack exp RBrack  | EQ, postfix_exp -> postfix_exp .Dot ID  | Comma, postfix_exp -> postfix_exp .Increment  | OR, postfix_exp -> postfix_exp .Decrement  | LE, postfix_exp -> postfix_exp .LBrack exp RBrack  | LBrack, postfix_exp -> postfix_exp .LBrack exp RBrack  | GT, postfix_exp -> postfix_exp .LParen RParen  | LBrack, postfix_exp -> postfix_exp .Decrement  | EQ, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Divide, postfix_exp -> postfix_exp .LParen RParen  | Times, postfix_exp -> postfix_exp .LParen RParen  | LE, postfix_exp -> postfix_exp .LParen RParen  | LParen, postfix_exp -> postfix_exp .Dot ID  | Plus, unary_exp -> postfix_exp.  | LT, postfix_exp -> postfix_exp .Dot ID  | LBrack, postfix_exp -> postfix_exp .LBrack exp RBrack  | Dot, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LParen, postfix_exp -> postfix_exp .LBrack exp RBrack  | VerticalBar, postfix_exp -> postfix_exp .LBrack exp RBrack  | OR, postfix_exp -> postfix_exp .Increment  | Decrement, postfix_exp -> postfix_exp .Decrement  | Minus, postfix_exp -> postfix_exp .Increment  | AND, postfix_exp -> postfix_exp .Increment  | LT, postfix_exp -> postfix_exp .Increment  | Caret, postfix_exp -> postfix_exp .Increment  | LE, postfix_exp -> postfix_exp .Increment  | Times, postfix_exp -> postfix_exp .Decrement  | Decrement, postfix_exp -> postfix_exp .Dot ID  | NEQ, postfix_exp -> postfix_exp .LBrack exp RBrack  | LeftShift, postfix_exp -> postfix_exp .Increment  | Comma, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LeftShift, postfix_exp -> postfix_exp .LParen RParen  | Caret, postfix_exp -> postfix_exp .Dot ID  | LE, postfix_exp -> postfix_exp .Decrement  | NEQ, unary_exp -> postfix_exp.  | GE, postfix_exp -> postfix_exp .LBrack exp RBrack  | AND, postfix_exp -> postfix_exp .LBrack exp RBrack  | Decrement, postfix_exp -> postfix_exp .Decrement  | Percent, postfix_exp -> postfix_exp .Increment  | Plus, postfix_exp -> postfix_exp .Dot ID  | OR, unary_exp -> postfix_exp.  | Colon, postfix_exp -> postfix_exp .Decrement  | VerticalBar, postfix_exp -> postfix_exp .Dot ID  | GE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Colon, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | AND, postfix_exp -> postfix_exp .Dot ID  | Ampersand, postfix_exp -> postfix_exp .Decrement  | Times, postfix_exp -> postfix_exp .Dot ID  | RightShift, postfix_exp -> postfix_exp .Dot ID  | Colon, postfix_exp -> postfix_exp .Dot ID  | LParen, unary_exp -> postfix_exp.  | Minus, unary_exp -> postfix_exp.  | Percent, postfix_exp -> postfix_exp .LBrack exp RBrack  | Increment, postfix_exp -> postfix_exp .LParen RParen  | Increment, postfix_exp -> postfix_exp .Increment  | Increment, postfix_exp -> postfix_exp .Increment  | Colon, postfix_exp -> postfix_exp .Increment  | LBrack, postfix_exp -> postfix_exp .Dot ID  | Decrement, postfix_exp -> postfix_exp .Increment  | NEQ, postfix_exp -> postfix_exp .Increment  | Ampersand, postfix_exp -> postfix_exp .LBrack exp RBrack  | Percent, postfix_exp -> postfix_exp .Increment  | RightShift, unary_exp -> postfix_exp.  | Question, postfix_exp -> postfix_exp .Increment  | LParen, postfix_exp -> postfix_exp .Dot ID  | Question, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Question, postfix_exp -> postfix_exp .LParen RParen  | Ampersand, postfix_exp -> postfix_exp .Dot ID  | EQ, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | RightShift, postfix_exp -> postfix_exp .Decrement  | LBrack, postfix_exp -> postfix_exp .LBrack exp RBrack  | Minus, postfix_exp -> postfix_exp .LBrack exp RBrack  | Ampersand, postfix_exp -> postfix_exp .LParen RParen  | GT, postfix_exp -> postfix_exp .LBrack exp RBrack  | LParen, postfix_exp -> postfix_exp .Dot ID  | AND, postfix_exp -> postfix_exp .LParen RParen  | Comma, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | GT, postfix_exp -> postfix_exp .LParen RParen  | Dot, postfix_exp -> postfix_exp .Decrement  | Comma, postfix_exp -> postfix_exp .LBrack exp RBrack  | Colon, postfix_exp -> postfix_exp .Decrement  | OR, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LBrack, postfix_exp -> postfix_exp .Dot ID  | LT, postfix_exp -> postfix_exp .LParen RParen  | LeftShift, unary_exp -> postfix_exp.  | VerticalBar, postfix_exp -> postfix_exp .Decrement  | Colon, postfix_exp -> postfix_exp .Decrement  | LParen, postfix_exp -> postfix_exp .Increment  | Dot, unary_exp -> postfix_exp.  | GT, postfix_exp -> postfix_exp .Dot ID  | Caret, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Ampersand, postfix_exp -> postfix_exp .LBrack exp RBrack  | Comma, postfix_exp -> postfix_exp .Decrement  | LeftShift, postfix_exp -> postfix_exp .LParen RParen  | Divide, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Dot, postfix_exp -> postfix_exp .Decrement  | AND, postfix_exp -> postfix_exp .Dot ID  | LeftShift, unary_exp -> postfix_exp.  | NEQ, unary_exp -> postfix_exp.  | Plus, postfix_exp -> postfix_exp .LParen RParen  | Plus, postfix_exp -> postfix_exp .LParen RParen  | GE, postfix_exp -> postfix_exp .LParen RParen  | Decrement, postfix_exp -> postfix_exp .LParen RParen  | VerticalBar, postfix_exp -> postfix_exp .LParen RParen  | Question, postfix_exp -> postfix_exp .Decrement  | Question, postfix_exp -> postfix_exp .Increment  | GE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Caret, postfix_exp -> postfix_exp .LBrack exp RBrack  | Times, postfix_exp -> postfix_exp .LBrack exp RBrack  | GE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Plus, postfix_exp -> postfix_exp .Decrement  | Plus, postfix_exp -> postfix_exp .Decrement  | Ampersand, postfix_exp -> postfix_exp .Increment  | GT, postfix_exp -> postfix_exp .LBrack exp RBrack  | Caret, unary_exp -> postfix_exp.  | Caret, postfix_exp -> postfix_exp .LBrack exp RBrack  | RightShift, postfix_exp -> postfix_exp .LBrack exp RBrack  | NEQ, postfix_exp -> postfix_exp .Dot ID  | Percent, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Times, postfix_exp -> postfix_exp .LBrack exp RBrack  | Divide, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Increment, unary_exp -> postfix_exp.  | EQ, unary_exp -> postfix_exp.  | RightShift, postfix_exp -> postfix_exp .LParen RParen  | RightShift, )
415 <- (348, 'primary_exp') (postfix_exp -> primary_exp.  | VerticalBar, postfix_exp -> primary_exp.  | OR, postfix_exp -> primary_exp.  | LE, postfix_exp -> primary_exp.  | Decrement, postfix_exp -> primary_exp.  | Times, postfix_exp -> primary_exp.  | Comma, postfix_exp -> primary_exp.  | Question, postfix_exp -> primary_exp.  | LeftShift, postfix_exp -> primary_exp.  | Caret, postfix_exp -> primary_exp.  | AND, postfix_exp -> primary_exp.  | Divide, postfix_exp -> primary_exp.  | LParen, postfix_exp -> primary_exp.  | EQ, postfix_exp -> primary_exp.  | Colon, postfix_exp -> primary_exp.  | Minus, postfix_exp -> primary_exp.  | GE, postfix_exp -> primary_exp.  | Dot, postfix_exp -> primary_exp.  | LBrack, postfix_exp -> primary_exp.  | LT, postfix_exp -> primary_exp.  | GT, postfix_exp -> primary_exp.  | Percent, postfix_exp -> primary_exp.  | Increment, postfix_exp -> primary_exp.  | RightShift, postfix_exp -> primary_exp.  | Ampersand, postfix_exp -> primary_exp.  | Plus, postfix_exp -> primary_exp.  | NEQ, )
416 <- (348, 'unary_exp') (binary_exp -> binary_exp binary_op unary_exp.  | VerticalBar, binary_exp -> binary_exp binary_op unary_exp.  | Colon, binary_exp -> binary_exp binary_op unary_exp.  | Percent, binary_exp -> binary_exp binary_op unary_exp.  | Question, binary_exp -> binary_exp binary_op unary_exp.  | Minus, binary_exp -> binary_exp binary_op unary_exp.  | LT, binary_exp -> binary_exp binary_op unary_exp.  | OR, binary_exp -> binary_exp binary_op unary_exp.  | LeftShift, binary_exp -> binary_exp binary_op unary_exp.  | RightShift, binary_exp -> binary_exp binary_op unary_exp.  | Plus, binary_exp -> binary_exp binary_op unary_exp.  | Divide, binary_exp -> binary_exp binary_op unary_exp.  | Ampersand, binary_exp -> binary_exp binary_op unary_exp.  | EQ, binary_exp -> binary_exp binary_op unary_exp.  | Caret, binary_exp -> binary_exp binary_op unary_exp.  | Times, binary_exp -> binary_exp binary_op unary_exp.  | GE, binary_exp -> binary_exp binary_op unary_exp.  | GT, binary_exp -> binary_exp binary_op unary_exp.  | Comma, binary_exp -> binary_exp binary_op unary_exp.  | LE, binary_exp -> binary_exp binary_op unary_exp.  | AND, binary_exp -> binary_exp binary_op unary_exp.  | NEQ, )
417 <- (348, 'unary_op') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_op -> .Tilde  | String, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> unary_op .unary_exp  | Colon, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .unary_op unary_exp  | Colon, unary_exp -> .Increment unary_exp  | Colon, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | RightShift, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, unary_exp -> unary_op .unary_exp  | AND, primary_exp -> .String  | Colon, unary_exp -> .postfix_exp  | Colon, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, postfix_exp -> .postfix_exp Decrement  | Colon, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Decrement  | Increment, unary_exp -> unary_op .unary_exp  | Minus, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Percent, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, unary_exp -> unary_op .unary_exp  | NEQ, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, unary_exp -> unary_op .unary_exp  | LE, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Increment  | Question, unary_exp -> .Decrement unary_exp  | Question, unary_exp -> unary_op .unary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, primary_exp -> .String  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, primary_exp -> .ID  | Plus, primary_exp -> .LParen exp RParen  | OR, unary_exp -> unary_op .unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, unary_exp -> unary_op .unary_exp  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> unary_op .unary_exp  | Divide, primary_exp -> .ID  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | Colon, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, primary_exp -> .LParen exp RParen  | GE, primary_exp -> .LParen exp RParen  | LE, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> unary_op .unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_op -> .Plus  | Minus, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_op -> .Minus  | Decrement, unary_exp -> unary_op .unary_exp  | OR, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, postfix_exp -> .postfix_exp Increment  | Colon, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .String  | Question, primary_exp -> .Number  | Percent, primary_exp -> .Number  | Colon, primary_exp -> .LParen exp RParen  | Question, unary_exp -> unary_op .unary_exp  | LT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, unary_exp -> unary_op .unary_exp  | Percent, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp Decrement  | LT, postfix_exp -> .postfix_exp Dot ID  | Comma, unary_exp -> unary_op .unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, primary_exp -> .LParen exp RParen  | Colon, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, postfix_exp -> .postfix_exp Dot ID  | Colon, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, primary_exp -> .LParen exp RParen  | Minus, postfix_exp -> .primary_exp  | GT, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, primary_exp -> .Number  | Plus, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Colon, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .ID  | Comma, primary_exp -> .ID  | LBrack, unary_exp -> unary_op .unary_exp  | Question, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | Colon, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .postfix_exp  | GT, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_op -> .Tilde  | ID, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, unary_exp -> .Increment unary_exp  | Percent, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_exp -> unary_op .unary_exp  | GT, primary_exp -> .String  | Times, unary_exp -> unary_op .unary_exp  | Plus, unary_exp -> unary_op .unary_exp  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Colon, unary_exp -> .Decrement unary_exp  | Colon, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, unary_exp -> .Decrement unary_exp  | OR, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, unary_exp -> unary_op .unary_exp  | Ampersand, postfix_exp -> .postfix_exp Increment  | Dot, unary_exp -> unary_op .unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Colon, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Decrement, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .Increment unary_exp  | Question, unary_exp -> .postfix_exp  | LeftShift, primary_exp -> .ID  | Dot, unary_exp -> unary_op .unary_exp  | RightShift, )
418 <- (349, 'conditional_exp') (conditional_exp -> binary_exp Question exp Colon conditional_exp.  | Semicolon, conditional_exp -> binary_exp Question exp Colon conditional_exp.  | Comma, )
419 <- (349, 'unary_exp') (binary_exp -> unary_exp.  | Caret, binary_exp -> unary_exp.  | Percent, binary_exp -> unary_exp.  | GE, binary_exp -> unary_exp.  | Times, binary_exp -> unary_exp.  | Comma, binary_exp -> unary_exp.  | Minus, binary_exp -> unary_exp.  | Plus, binary_exp -> unary_exp.  | GT, binary_exp -> unary_exp.  | LeftShift, binary_exp -> unary_exp.  | AND, binary_exp -> unary_exp.  | EQ, binary_exp -> unary_exp.  | LE, binary_exp -> unary_exp.  | LT, binary_exp -> unary_exp.  | Divide, binary_exp -> unary_exp.  | RightShift, binary_exp -> unary_exp.  | Question, binary_exp -> unary_exp.  | NEQ, binary_exp -> unary_exp.  | OR, binary_exp -> unary_exp.  | Semicolon, binary_exp -> unary_exp.  | Ampersand, binary_exp -> unary_exp.  | VerticalBar, )
420 <- (350, 'assignment_exp') (exp -> exp Comma assignment_exp.  | Comma, exp -> exp Comma assignment_exp.  | Colon, )
421 <- (352, 'ID') (postfix_exp -> postfix_exp Dot ID.  | Assign, postfix_exp -> postfix_exp Dot ID.  | OR, postfix_exp -> postfix_exp Dot ID.  | Times, postfix_exp -> postfix_exp Dot ID.  | Percent, postfix_exp -> postfix_exp Dot ID.  | AND, postfix_exp -> postfix_exp Dot ID.  | Plus, postfix_exp -> postfix_exp Dot ID.  | Ampersand, postfix_exp -> postfix_exp Dot ID.  | VerticalBar, postfix_exp -> postfix_exp Dot ID.  | Colon, postfix_exp -> postfix_exp Dot ID.  | Caret, postfix_exp -> postfix_exp Dot ID.  | LT, postfix_exp -> postfix_exp Dot ID.  | GT, postfix_exp -> postfix_exp Dot ID.  | Divide, postfix_exp -> postfix_exp Dot ID.  | Increment, postfix_exp -> postfix_exp Dot ID.  | Minus, postfix_exp -> postfix_exp Dot ID.  | EQ, postfix_exp -> postfix_exp Dot ID.  | Decrement, postfix_exp -> postfix_exp Dot ID.  | GE, postfix_exp -> postfix_exp Dot ID.  | LeftShift, postfix_exp -> postfix_exp Dot ID.  | Dot, postfix_exp -> postfix_exp Dot ID.  | LBrack, postfix_exp -> postfix_exp Dot ID.  | Comma, postfix_exp -> postfix_exp Dot ID.  | NEQ, postfix_exp -> postfix_exp Dot ID.  | RightShift, postfix_exp -> postfix_exp Dot ID.  | LParen, postfix_exp -> postfix_exp Dot ID.  | LE, postfix_exp -> postfix_exp Dot ID.  | Question, )
422 <- (354, 'exp') (postfix_exp -> postfix_exp LBrack exp .RBrack  | Caret, postfix_exp -> postfix_exp LBrack exp .RBrack  | Assign, postfix_exp -> postfix_exp LBrack exp .RBrack  | Question, postfix_exp -> postfix_exp LBrack exp .RBrack  | EQ, postfix_exp -> postfix_exp LBrack exp .RBrack  | LBrack, postfix_exp -> postfix_exp LBrack exp .RBrack  | AND, postfix_exp -> postfix_exp LBrack exp .RBrack  | Decrement, postfix_exp -> postfix_exp LBrack exp .RBrack  | LeftShift, exp -> exp .Comma assignment_exp  | RBrack, postfix_exp -> postfix_exp LBrack exp .RBrack  | Percent, postfix_exp -> postfix_exp LBrack exp .RBrack  | Increment, postfix_exp -> postfix_exp LBrack exp .RBrack  | Ampersand, postfix_exp -> postfix_exp LBrack exp .RBrack  | RightShift, exp -> exp .Comma assignment_exp  | Comma, postfix_exp -> postfix_exp LBrack exp .RBrack  | OR, postfix_exp -> postfix_exp LBrack exp .RBrack  | Divide, postfix_exp -> postfix_exp LBrack exp .RBrack  | Minus, postfix_exp -> postfix_exp LBrack exp .RBrack  | GT, postfix_exp -> postfix_exp LBrack exp .RBrack  | Comma, postfix_exp -> postfix_exp LBrack exp .RBrack  | NEQ, postfix_exp -> postfix_exp LBrack exp .RBrack  | Colon, postfix_exp -> postfix_exp LBrack exp .RBrack  | Plus, postfix_exp -> postfix_exp LBrack exp .RBrack  | LParen, postfix_exp -> postfix_exp LBrack exp .RBrack  | LT, postfix_exp -> postfix_exp LBrack exp .RBrack  | Times, postfix_exp -> postfix_exp LBrack exp .RBrack  | LE, postfix_exp -> postfix_exp LBrack exp .RBrack  | VerticalBar, postfix_exp -> postfix_exp LBrack exp .RBrack  | GE, postfix_exp -> postfix_exp LBrack exp .RBrack  | Dot, )
423 <- (355, 'RParen') (postfix_exp -> postfix_exp LParen RParen.  | GE, postfix_exp -> postfix_exp LParen RParen.  | Decrement, postfix_exp -> postfix_exp LParen RParen.  | Comma, postfix_exp -> postfix_exp LParen RParen.  | Divide, postfix_exp -> postfix_exp LParen RParen.  | Question, postfix_exp -> postfix_exp LParen RParen.  | LE, postfix_exp -> postfix_exp LParen RParen.  | LT, postfix_exp -> postfix_exp LParen RParen.  | LeftShift, postfix_exp -> postfix_exp LParen RParen.  | Percent, postfix_exp -> postfix_exp LParen RParen.  | Assign, postfix_exp -> postfix_exp LParen RParen.  | GT, postfix_exp -> postfix_exp LParen RParen.  | RightShift, postfix_exp -> postfix_exp LParen RParen.  | Ampersand, postfix_exp -> postfix_exp LParen RParen.  | Minus, postfix_exp -> postfix_exp LParen RParen.  | Plus, postfix_exp -> postfix_exp LParen RParen.  | LParen, postfix_exp -> postfix_exp LParen RParen.  | OR, postfix_exp -> postfix_exp LParen RParen.  | Colon, postfix_exp -> postfix_exp LParen RParen.  | NEQ, postfix_exp -> postfix_exp LParen RParen.  | LBrack, postfix_exp -> postfix_exp LParen RParen.  | Increment, postfix_exp -> postfix_exp LParen RParen.  | Caret, postfix_exp -> postfix_exp LParen RParen.  | AND, postfix_exp -> postfix_exp LParen RParen.  | Dot, postfix_exp -> postfix_exp LParen RParen.  | EQ, postfix_exp -> postfix_exp LParen RParen.  | Times, postfix_exp -> postfix_exp LParen RParen.  | VerticalBar, )
424 <- (355, 'argument_exp_list') (postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LBrack, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | GE, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | NEQ, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Times, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Plus, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Divide, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Increment, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | EQ, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Question, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | GT, argument_exp_list -> argument_exp_list .Comma assignment_exp  | RParen, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | VerticalBar, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Assign, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LT, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Dot, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Decrement, argument_exp_list -> argument_exp_list .Comma assignment_exp  | Comma, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Caret, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Percent, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LeftShift, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | RightShift, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Colon, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LParen, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Minus, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | OR, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Comma, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Ampersand, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LE, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | AND, )
425 <- (356, 'assignment_exp') (assignment_exp -> unary_exp assignment_op assignment_exp.  | Comma, assignment_exp -> unary_exp assignment_op assignment_exp.  | Colon, )
426 <- (360, 'RParen') (primary_exp -> LParen exp RParen.  | Percent, primary_exp -> LParen exp RParen.  | Minus, primary_exp -> LParen exp RParen.  | Question, primary_exp -> LParen exp RParen.  | LT, primary_exp -> LParen exp RParen.  | GT, primary_exp -> LParen exp RParen.  | AND, primary_exp -> LParen exp RParen.  | Caret, primary_exp -> LParen exp RParen.  | Increment, primary_exp -> LParen exp RParen.  | NEQ, primary_exp -> LParen exp RParen.  | Divide, primary_exp -> LParen exp RParen.  | Dot, primary_exp -> LParen exp RParen.  | LParen, primary_exp -> LParen exp RParen.  | Plus, primary_exp -> LParen exp RParen.  | GE, primary_exp -> LParen exp RParen.  | VerticalBar, primary_exp -> LParen exp RParen.  | Decrement, primary_exp -> LParen exp RParen.  | LBrack, primary_exp -> LParen exp RParen.  | Semicolon, primary_exp -> LParen exp RParen.  | EQ, primary_exp -> LParen exp RParen.  | LE, primary_exp -> LParen exp RParen.  | Comma, primary_exp -> LParen exp RParen.  | Times, primary_exp -> LParen exp RParen.  | Ampersand, primary_exp -> LParen exp RParen.  | RightShift, primary_exp -> LParen exp RParen.  | LeftShift, primary_exp -> LParen exp RParen.  | OR, )
427 <- (362, 'ID') (postfix_exp -> postfix_exp Dot ID.  | OR, postfix_exp -> postfix_exp Dot ID.  | Times, postfix_exp -> postfix_exp Dot ID.  | Percent, postfix_exp -> postfix_exp Dot ID.  | Semicolon, postfix_exp -> postfix_exp Dot ID.  | AND, postfix_exp -> postfix_exp Dot ID.  | Plus, postfix_exp -> postfix_exp Dot ID.  | Ampersand, postfix_exp -> postfix_exp Dot ID.  | VerticalBar, postfix_exp -> postfix_exp Dot ID.  | Caret, postfix_exp -> postfix_exp Dot ID.  | LParen, postfix_exp -> postfix_exp Dot ID.  | GT, postfix_exp -> postfix_exp Dot ID.  | Divide, postfix_exp -> postfix_exp Dot ID.  | Increment, postfix_exp -> postfix_exp Dot ID.  | Minus, postfix_exp -> postfix_exp Dot ID.  | EQ, postfix_exp -> postfix_exp Dot ID.  | Decrement, postfix_exp -> postfix_exp Dot ID.  | GE, postfix_exp -> postfix_exp Dot ID.  | LeftShift, postfix_exp -> postfix_exp Dot ID.  | Dot, postfix_exp -> postfix_exp Dot ID.  | LBrack, postfix_exp -> postfix_exp Dot ID.  | Comma, postfix_exp -> postfix_exp Dot ID.  | NEQ, postfix_exp -> postfix_exp Dot ID.  | RightShift, postfix_exp -> postfix_exp Dot ID.  | LT, postfix_exp -> postfix_exp Dot ID.  | LE, postfix_exp -> postfix_exp Dot ID.  | Question, )
428 <- (364, 'exp') (postfix_exp -> postfix_exp LBrack exp .RBrack  | Caret, postfix_exp -> postfix_exp LBrack exp .RBrack  | Question, postfix_exp -> postfix_exp LBrack exp .RBrack  | EQ, postfix_exp -> postfix_exp LBrack exp .RBrack  | LBrack, postfix_exp -> postfix_exp LBrack exp .RBrack  | AND, postfix_exp -> postfix_exp LBrack exp .RBrack  | Decrement, postfix_exp -> postfix_exp LBrack exp .RBrack  | LeftShift, exp -> exp .Comma assignment_exp  | RBrack, postfix_exp -> postfix_exp LBrack exp .RBrack  | Percent, postfix_exp -> postfix_exp LBrack exp .RBrack  | Increment, postfix_exp -> postfix_exp LBrack exp .RBrack  | Ampersand, postfix_exp -> postfix_exp LBrack exp .RBrack  | RightShift, exp -> exp .Comma assignment_exp  | Comma, postfix_exp -> postfix_exp LBrack exp .RBrack  | OR, postfix_exp -> postfix_exp LBrack exp .RBrack  | Divide, postfix_exp -> postfix_exp LBrack exp .RBrack  | Minus, postfix_exp -> postfix_exp LBrack exp .RBrack  | GT, postfix_exp -> postfix_exp LBrack exp .RBrack  | Semicolon, postfix_exp -> postfix_exp LBrack exp .RBrack  | NEQ, postfix_exp -> postfix_exp LBrack exp .RBrack  | Comma, postfix_exp -> postfix_exp LBrack exp .RBrack  | Plus, postfix_exp -> postfix_exp LBrack exp .RBrack  | LParen, postfix_exp -> postfix_exp LBrack exp .RBrack  | LT, postfix_exp -> postfix_exp LBrack exp .RBrack  | Times, postfix_exp -> postfix_exp LBrack exp .RBrack  | LE, postfix_exp -> postfix_exp LBrack exp .RBrack  | VerticalBar, postfix_exp -> postfix_exp LBrack exp .RBrack  | GE, postfix_exp -> postfix_exp LBrack exp .RBrack  | Dot, )
429 <- (365, 'RParen') (postfix_exp -> postfix_exp LParen RParen.  | Semicolon, postfix_exp -> postfix_exp LParen RParen.  | Comma, postfix_exp -> postfix_exp LParen RParen.  | GE, postfix_exp -> postfix_exp LParen RParen.  | Decrement, postfix_exp -> postfix_exp LParen RParen.  | Divide, postfix_exp -> postfix_exp LParen RParen.  | Question, postfix_exp -> postfix_exp LParen RParen.  | LE, postfix_exp -> postfix_exp LParen RParen.  | LT, postfix_exp -> postfix_exp LParen RParen.  | LeftShift, postfix_exp -> postfix_exp LParen RParen.  | Caret, postfix_exp -> postfix_exp LParen RParen.  | GT, postfix_exp -> postfix_exp LParen RParen.  | Percent, postfix_exp -> postfix_exp LParen RParen.  | Ampersand, postfix_exp -> postfix_exp LParen RParen.  | Minus, postfix_exp -> postfix_exp LParen RParen.  | Plus, postfix_exp -> postfix_exp LParen RParen.  | LParen, postfix_exp -> postfix_exp LParen RParen.  | OR, postfix_exp -> postfix_exp LParen RParen.  | NEQ, postfix_exp -> postfix_exp LParen RParen.  | LBrack, postfix_exp -> postfix_exp LParen RParen.  | Increment, postfix_exp -> postfix_exp LParen RParen.  | RightShift, postfix_exp -> postfix_exp LParen RParen.  | AND, postfix_exp -> postfix_exp LParen RParen.  | Dot, postfix_exp -> postfix_exp LParen RParen.  | EQ, postfix_exp -> postfix_exp LParen RParen.  | Times, postfix_exp -> postfix_exp LParen RParen.  | VerticalBar, )
430 <- (365, 'argument_exp_list') (postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LBrack, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | GE, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | NEQ, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Times, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Plus, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Ampersand, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | GT, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Increment, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | EQ, argument_exp_list -> argument_exp_list .Comma assignment_exp  | RParen, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | VerticalBar, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LT, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Dot, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Decrement, argument_exp_list -> argument_exp_list .Comma assignment_exp  | Comma, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Caret, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Percent, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LeftShift, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | RightShift, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LParen, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Question, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Minus, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Semicolon, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | OR, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Comma, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Divide, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LE, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | AND, )
431 <- (367, 'exp') (iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -double-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -void-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | Minus, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | RBrace, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | Number, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -fixed2-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -half4-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | Decrement, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -float2-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | Tilde, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -fixed3-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -float4-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -sampler2D-, exp -> exp .Comma assignment_exp  | Comma, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -int-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -goto-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | Plus, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -continue-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -return-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -long-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | ID, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | Increment, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | String, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -float3-, exp -> exp .Comma assignment_exp  | Semicolon, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | LParen, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -half3-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -fixed4-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -do-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | while, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -half2-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | if, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -uniform-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -float-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | LBrace, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | Semicolon, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | NOT, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | break, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -char-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -struct-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | for, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -short-, )
432 <- (368, '-continue-') (jump_stm -> -continue-.  | -half2-, jump_stm -> -continue-.  | Minus, jump_stm -> -continue-.  | Plus, jump_stm -> -continue-.  | -void-, jump_stm -> -continue-.  | for, jump_stm -> -continue-.  | NOT, jump_stm -> -continue-.  | -struct-, jump_stm -> -continue-.  | Number, jump_stm -> -continue-.  | -float3-, jump_stm -> -continue-.  | String, jump_stm -> -continue-.  | while, jump_stm -> -continue-.  | LBrace, jump_stm -> -continue-.  | break, jump_stm -> -continue-.  | Increment, jump_stm -> -continue-.  | -fixed4-, jump_stm -> -continue-.  | -half4-, jump_stm -> -continue-.  | -sampler2D-, jump_stm -> -continue-.  | -char-, jump_stm -> -continue-.  | LParen, jump_stm -> -continue-.  | ID, jump_stm -> -continue-.  | else, jump_stm -> -continue-.  | -uniform-, jump_stm -> -continue-.  | -do-, jump_stm -> -continue-.  | -fixed3-, jump_stm -> -continue-.  | -fixed2-, jump_stm -> -continue-.  | -float-, jump_stm -> -continue-.  | -half3-, jump_stm -> -continue-.  | if, jump_stm -> -continue-.  | -short-, jump_stm -> -continue-.  | Semicolon, jump_stm -> -continue-.  | Decrement, jump_stm -> -continue-.  | Tilde, jump_stm -> -continue-.  | -return-, jump_stm -> -continue-.  | -int-, jump_stm -> -continue-.  | -double-, jump_stm -> -continue-.  | RBrace, jump_stm -> -continue-.  | -goto-, jump_stm -> -continue-.  | -long-, jump_stm -> -continue-.  | -continue-, jump_stm -> -continue-.  | -float2-, jump_stm -> -continue-.  | -float4-, )
433 <- (368, '-do-') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, compound_stm -> .LBrace RBrace  | while, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -float-, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -double-, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | Increment, stm -> .exp_stm  | while, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | Number, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, selection_stm -> .if LParen exp RParen stm else stm  | while, binary_exp -> .unary_exp  | Percent, compound_stm -> .LBrace block_item_list RBrace  | while, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | if, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | RightShift, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -short-, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, unary_exp -> .unary_op unary_exp  | Semicolon, conditional_exp -> .binary_exp  | Comma, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | Semicolon, exp_stm -> .Semicolon  | while, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -goto-, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, jump_stm -> .-return- exp Semicolon  | while, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Increment unary_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, primary_exp -> .ID  | GT, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -void-, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .postfix_exp  | Semicolon, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | else, binary_exp -> .unary_exp  | LE, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, stm -> .iteration_stm  | while, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | Minus, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .String  | Question, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -sampler2D-, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -do-, primary_exp -> .String  | Dot, unary_exp -> .Decrement unary_exp  | Question, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -fixed4-, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, jump_stm -> .break  | while, unary_exp -> .postfix_exp  | Question, exp_stm -> .exp Semicolon  | while, binary_exp -> .binary_exp binary_op unary_exp  | Percent, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -half2-, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -int-, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Question, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -fixed2-, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> .ID  | OR, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | ID, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, iteration_stm -> .while LParen exp RParen stm  | while, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, postfix_exp -> .postfix_exp Dot ID  | Decrement, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .Number  | Semicolon, postfix_exp -> .primary_exp  | Increment, jump_stm -> .-goto- ID  | while, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -float4-, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .primary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | EQ, postfix_exp -> .postfix_exp Decrement  | Comma, stm -> .compound_stm  | while, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | Tilde, unary_op -> .Tilde  | Number, stm -> .jump_stm  | while, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | Decrement, postfix_exp -> .primary_exp  | Ampersand, unary_exp -> .unary_op unary_exp  | Ampersand, unary_op -> .Minus  | Number, primary_exp -> .Number  | Percent, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, postfix_exp -> .postfix_exp Dot ID  | LBrack, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, unary_exp -> .Increment unary_exp  | Question, binary_exp -> .unary_exp  | AND, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, primary_exp -> .ID  | Assign, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -half4-, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -fixed3-, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, stm -> .selection_stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -half3-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | LBrace, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | while, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, primary_exp -> .Number  | Dot, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, primary_exp -> .Number  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Question, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | String, unary_exp -> .Increment unary_exp  | AND, unary_op -> .Minus  | Tilde, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .Decrement unary_exp  | AND, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | Plus, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, primary_exp -> .Number  | NEQ, unary_exp -> .unary_op unary_exp  | AND, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -long-, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, unary_op -> .Plus  | Plus, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -float3-, unary_op -> .NOT  | NOT, postfix_exp -> .primary_exp  | LT, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | for, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | GE, jump_stm -> .-continue-  | while, conditional_exp -> .binary_exp  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -char-, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | LParen, primary_exp -> .LParen exp RParen  | Plus, unary_exp -> .Increment unary_exp  | EQ, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -uniform-, unary_op -> .NOT  | Decrement, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -struct-, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | break, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -float2-, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | RBrace, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .primary_exp  | LE, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | Dot, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Times, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | NOT, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -continue-, unary_op -> .NOT  | String, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .unary_op unary_exp  | Caret, unary_exp -> .postfix_exp  | LeftShift, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | -return-, )
434 <- (368, '-goto-') (jump_stm -> -goto- .ID  | -goto-, jump_stm -> -goto- .ID  | Tilde, jump_stm -> -goto- .ID  | ID, jump_stm -> -goto- .ID  | String, jump_stm -> -goto- .ID  | -fixed2-, jump_stm -> -goto- .ID  | Number, jump_stm -> -goto- .ID  | -uniform-, jump_stm -> -goto- .ID  | -void-, jump_stm -> -goto- .ID  | -half3-, jump_stm -> -goto- .ID  | -long-, jump_stm -> -goto- .ID  | -half2-, jump_stm -> -goto- .ID  | -float-, jump_stm -> -goto- .ID  | -half4-, jump_stm -> -goto- .ID  | -float4-, jump_stm -> -goto- .ID  | Plus, jump_stm -> -goto- .ID  | -short-, jump_stm -> -goto- .ID  | Increment, jump_stm -> -goto- .ID  | -int-, jump_stm -> -goto- .ID  | -float2-, jump_stm -> -goto- .ID  | -fixed4-, jump_stm -> -goto- .ID  | -do-, jump_stm -> -goto- .ID  | else, jump_stm -> -goto- .ID  | Decrement, jump_stm -> -goto- .ID  | -char-, jump_stm -> -goto- .ID  | LParen, jump_stm -> -goto- .ID  | -struct-, jump_stm -> -goto- .ID  | while, jump_stm -> -goto- .ID  | NOT, jump_stm -> -goto- .ID  | if, jump_stm -> -goto- .ID  | -return-, jump_stm -> -goto- .ID  | -fixed3-, jump_stm -> -goto- .ID  | -continue-, jump_stm -> -goto- .ID  | Semicolon, jump_stm -> -goto- .ID  | -float3-, jump_stm -> -goto- .ID  | -double-, jump_stm -> -goto- .ID  | -sampler2D-, jump_stm -> -goto- .ID  | Minus, jump_stm -> -goto- .ID  | break, jump_stm -> -goto- .ID  | RBrace, jump_stm -> -goto- .ID  | LBrace, jump_stm -> -goto- .ID  | for, )
435 <- (368, '-return-') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, jump_stm -> -return- .exp Semicolon  | -fixed2-, unary_op -> .NOT  | LParen, jump_stm -> -return- .exp Semicolon  | Number, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, jump_stm -> -return- .exp Semicolon  | -float3-, postfix_exp -> .postfix_exp Dot ID  | Decrement, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, jump_stm -> -return- .exp Semicolon  | -float4-, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, jump_stm -> -return- .exp Semicolon  | Minus, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, jump_stm -> -return- .exp Semicolon  | -long-, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, jump_stm -> -return- .exp Semicolon  | -double-, unary_op -> .NOT  | Tilde, jump_stm -> -return- .exp Semicolon  | -struct-, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | RightShift, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, unary_exp -> .unary_op unary_exp  | Semicolon, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, jump_stm -> -return- .exp Semicolon  | -do-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, jump_stm -> -return- .exp Semicolon  | if, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, postfix_exp -> .primary_exp  | Increment, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, jump_stm -> -return- .exp Semicolon  | LBrace, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, postfix_exp -> .primary_exp  | EQ, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .postfix_exp  | Semicolon, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, unary_exp -> .postfix_exp  | LE, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, postfix_exp -> .postfix_exp Increment  | VerticalBar, jump_stm -> -return- .exp Semicolon  | NOT, jump_stm -> -return- .exp Semicolon  | String, primary_exp -> .String  | Question, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, jump_stm -> -return- .exp Semicolon  | -fixed4-, unary_exp -> .unary_op unary_exp  | GE, jump_stm -> -return- .exp Semicolon  | -goto-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, binary_exp -> .unary_exp  | OR, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, binary_exp -> .unary_exp  | Times, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .String  | Comma, jump_stm -> -return- .exp Semicolon  | -float-, binary_exp -> .binary_exp binary_op unary_exp  | Question, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, jump_stm -> -return- .exp Semicolon  | -char-, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, jump_stm -> -return- .exp Semicolon  | -fixed3-, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, jump_stm -> -return- .exp Semicolon  | Increment, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen RParen  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, primary_exp -> .LParen exp RParen  | LT, jump_stm -> -return- .exp Semicolon  | else, binary_exp -> .unary_exp  | LE, jump_stm -> -return- .exp Semicolon  | -half4-, primary_exp -> .String  | AND, jump_stm -> -return- .exp Semicolon  | LParen, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | GE, jump_stm -> -return- .exp Semicolon  | -uniform-, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, jump_stm -> -return- .exp Semicolon  | Semicolon, jump_stm -> -return- .exp Semicolon  | -void-, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, jump_stm -> -return- .exp Semicolon  | -short-, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, jump_stm -> -return- .exp Semicolon  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .Tilde  | Number, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .Decrement unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .Number  | Percent, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .Number  | Semicolon, unary_exp -> .Decrement unary_exp  | Caret, jump_stm -> -return- .exp Semicolon  | break, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_op -> .NOT  | Number, unary_exp -> .Decrement unary_exp  | NEQ, primary_exp -> .LParen exp RParen  | GT, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, jump_stm -> -return- .exp Semicolon  | ID, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Comma, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, postfix_exp -> .postfix_exp Increment  | Comma, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, jump_stm -> -return- .exp Semicolon  | -int-, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, jump_stm -> -return- .exp Semicolon  | Decrement, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Assign, jump_stm -> -return- .exp Semicolon  | while, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, unary_exp -> .Decrement unary_exp  | AND, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, jump_stm -> -return- .exp Semicolon  | -continue-, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, assignment_exp -> .conditional_exp  | Semicolon, jump_stm -> -return- .exp Semicolon  | -float2-, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp LParen RParen  | Caret, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Dot, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, jump_stm -> -return- .exp Semicolon  | Tilde, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, binary_exp -> .binary_exp binary_op unary_exp  | Comma, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, conditional_exp -> .binary_exp  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, jump_stm -> -return- .exp Semicolon  | -half2-, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, jump_stm -> -return- .exp Semicolon  | for, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .unary_op unary_exp  | Assign, unary_exp -> .Decrement unary_exp  | Plus, jump_stm -> -return- .exp Semicolon  | -sampler2D-, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .primary_exp  | LE, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | Dot, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .ID  | VerticalBar, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .String  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Times, jump_stm -> -return- .exp Semicolon  | RBrace, jump_stm -> -return- .exp Semicolon  | -return-, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, jump_stm -> -return- .exp Semicolon  | -half3-, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
436 <- (368, 'LBrace') (compound_stm -> LBrace .RBrace  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, iteration_stm -> .while LParen exp RParen stm  | -fixed3-, jump_stm -> .-return- exp Semicolon  | Decrement, exp_stm -> .Semicolon  | -half2-, stm -> .iteration_stm  | String, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -char-, jump_stm -> .break  | -continue-, exp_stm -> .exp Semicolon  | -float4-, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, stm -> .iteration_stm  | Number, unary_exp -> .postfix_exp  | Ampersand, block_item -> .stm  | -return-, compound_stm -> .LBrace RBrace  | -do-, block_item -> .dec  | -sampler2D-, unary_op -> .Minus  | Minus, stm -> .compound_stm  | if, dec -> .struct_specifier Semicolon  | -int-, exp_stm -> .Semicolon  | -struct-, unary_exp -> .postfix_exp  | Assign, unary_exp -> .Increment unary_exp  | Percent, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -long-, postfix_exp -> .postfix_exp LParen RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, block_item_list -> .block_item  | -long-, jump_stm -> .-goto- ID  | LParen, block_item_list -> .block_item_list block_item  | -half4-, block_item_list -> .block_item_list block_item  | Minus, block_item_list -> .block_item  | -void-, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, unary_exp -> .postfix_exp  | GT, compound_stm -> .LBrace RBrace  | ID, jump_stm -> .-goto- ID  | -float4-, postfix_exp -> .postfix_exp LParen RParen  | GT, selection_stm -> .if LParen exp RParen stm else stm  | while, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -struct-, block_item_list -> .block_item_list block_item  | Number, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LParen, compound_stm -> .LBrace block_item_list RBrace  | Number, compound_stm -> LBrace .block_item_list RBrace  | -short-, postfix_exp -> .postfix_exp Increment  | OR, exp_stm -> .Semicolon  | -long-, iteration_stm -> .while LParen exp RParen stm  | -fixed4-, block_item -> .dec  | while, unary_op -> .NOT  | Tilde, dec -> .struct_specifier Semicolon  | for, binary_exp -> .unary_exp  | Divide, compound_stm -> LBrace .block_item_list RBrace  | -void-, compound_stm -> LBrace .block_item_list RBrace  | -double-, unary_op -> .Tilde  | LParen, selection_stm -> .if LParen exp RParen stm else stm  | -int-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | break, compound_stm -> .LBrace block_item_list RBrace  | Tilde, block_item_list -> .block_item  | break, dec -> .dec_specifier init_dec_list Semicolon  | -fixed3-, compound_stm -> .LBrace RBrace  | -float2-, exp_stm -> .exp Semicolon  | -do-, unary_op -> .Plus  | ID, selection_stm -> .if LParen exp RParen stm else stm  | RBrace, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | Divide, postfix_exp -> .postfix_exp Decrement  | Dot, jump_stm -> .-return- exp Semicolon  | Minus, block_item -> .stm  | Decrement, compound_stm -> LBrace .RBrace  | -struct-, selection_stm -> .if LParen exp RParen stm else stm  | LBrace, postfix_exp -> .primary_exp  | Semicolon, jump_stm -> .-continue-  | -fixed4-, block_item_list -> .block_item_list block_item  | -fixed3-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, exp_stm -> .Semicolon  | while, dec -> .struct_specifier Semicolon  | -double-, stm -> .jump_stm  | -struct-, selection_stm -> .if LParen exp RParen stm  | -float-, jump_stm -> .-return- exp Semicolon  | while, type_qualifier -> .-uniform-  | -short-, iteration_stm -> .while LParen exp RParen stm  | -sampler2D-, compound_stm -> LBrace .block_item_list RBrace  | -long-, exp_stm -> .exp Semicolon  | -float3-, primary_exp -> .String  | Semicolon, compound_stm -> LBrace .RBrace  | -fixed4-, stm -> .jump_stm  | -long-, jump_stm -> .-continue-  | ID, jump_stm -> .-return- exp Semicolon  | -struct-, compound_stm -> .LBrace block_item_list RBrace  | -double-, unary_op -> .Plus  | Minus, jump_stm -> .break  | Decrement, dec -> .dec_specifier init_dec_list Semicolon  | -int-, unary_exp -> .postfix_exp  | Times, compound_stm -> .LBrace RBrace  | -fixed3-, primary_exp -> .Number  | AND, block_item_list -> .block_item_list block_item  | -float3-, dec -> .struct_specifier Semicolon  | String, selection_stm -> .if LParen exp RParen stm  | -half2-, postfix_exp -> .primary_exp  | RightShift, block_item_list -> .block_item_list block_item  | if, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | if, compound_stm -> .LBrace block_item_list RBrace  | for, type_specifier -> .-half4-  | ID, block_item_list -> .block_item_list block_item  | -half2-, dec -> .dec_specifier init_dec_list Semicolon  | -short-, block_item_list -> .block_item_list block_item  | RBrace, selection_stm -> .if LParen exp RParen stm  | -int-, exp_stm -> .exp Semicolon  | -struct-, block_item -> .dec  | -float2-, selection_stm -> .if LParen exp RParen stm  | String, type_qualifier -> .-uniform-  | -long-, compound_stm -> .LBrace block_item_list RBrace  | -continue-, type_specifier -> .-float2-  | ID, stm -> .jump_stm  | String, dec -> .struct_specifier Semicolon  | Number, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_exp -> .Increment unary_exp  | Plus, exp_stm -> .Semicolon  | if, compound_stm -> LBrace .block_item_list RBrace  | -return-, selection_stm -> .if LParen exp RParen stm else stm  | -do-, stm -> .iteration_stm  | -void-, postfix_exp -> .primary_exp  | LE, compound_stm -> .LBrace block_item_list RBrace  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -float-, compound_stm -> LBrace .RBrace  | -short-, block_item -> .dec  | -uniform-, stm -> .jump_stm  | -half4-, block_item_list -> .block_item_list block_item  | -float2-, jump_stm -> .-return- exp Semicolon  | -do-, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, dec -> .struct_specifier Semicolon  | -float-, stm -> .compound_stm  | NOT, compound_stm -> LBrace .block_item_list RBrace  | -fixed2-, unary_exp -> .postfix_exp  | AND, compound_stm -> LBrace .block_item_list RBrace  | RBrace, postfix_exp -> .postfix_exp Dot ID  | AND, stm -> .jump_stm  | Decrement, primary_exp -> .String  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, block_item -> .stm  | -half4-, iteration_stm -> .while LParen exp RParen stm  | Tilde, exp -> .exp Comma assignment_exp  | Semicolon, jump_stm -> .-goto- ID  | -int-, exp_stm -> .Semicolon  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | -uniform-, type_specifier -> .-float-  | ID, block_item -> .stm  | for, selection_stm -> .if LParen exp RParen stm  | -float4-, type_specifier -> .-fixed3-  | ID, block_item_list -> .block_item_list block_item  | Semicolon, jump_stm -> .-return- exp Semicolon  | -return-, iteration_stm -> .while LParen exp RParen stm  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Tilde, postfix_exp -> .postfix_exp LParen RParen  | LBrack, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed3-, postfix_exp -> .primary_exp  | Minus, compound_stm -> .LBrace block_item_list RBrace  | -return-, jump_stm -> .break  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | -half2-, stm -> .iteration_stm  | LBrace, compound_stm -> LBrace .block_item_list RBrace  | -fixed3-, type_qualifier -> .-uniform-  | -fixed2-, selection_stm -> .if LParen exp RParen stm else stm  | Number, primary_exp -> .LParen exp RParen  | LE, primary_exp -> .LParen exp RParen  | Caret, compound_stm -> .LBrace block_item_list RBrace  | -float4-, block_item -> .stm  | Semicolon, binary_exp -> .unary_exp  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float-, unary_exp -> .Decrement unary_exp  | GT, selection_stm -> .if LParen exp RParen stm else stm  | -float3-, jump_stm -> .-return- exp Semicolon  | NOT, postfix_exp -> .postfix_exp Increment  | Times, selection_stm -> .if LParen exp RParen stm else stm  | Decrement, stm -> .selection_stm  | -fixed3-, postfix_exp -> .postfix_exp Increment  | AND, jump_stm -> .break  | -do-, unary_exp -> .Increment unary_exp  | OR, exp_stm -> .Semicolon  | -continue-, selection_stm -> .if LParen exp RParen stm  | Minus, block_item_list -> .block_item_list block_item  | -goto-, jump_stm -> .-continue-  | while, selection_stm -> .if LParen exp RParen stm else stm  | Tilde, primary_exp -> .ID  | Decrement, stm -> .selection_stm  | Number, dec_specifier -> .type_specifier  | ID, unary_op -> .Minus  | ID, dec -> .struct_specifier Semicolon  | Tilde, compound_stm -> .LBrace RBrace  | while, jump_stm -> .-continue-  | -float-, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | EQ, compound_stm -> .LBrace block_item_list RBrace  | -int-, stm -> .exp_stm  | -double-, stm -> .selection_stm  | Minus, exp_stm -> .exp Semicolon  | -half3-, postfix_exp -> .postfix_exp Decrement  | Semicolon, unary_op -> .Tilde  | Number, dec -> .struct_specifier Semicolon  | -float4-, stm -> .jump_stm  | while, binary_exp -> .unary_exp  | Plus, stm -> .exp_stm  | -float4-, unary_exp -> .unary_op unary_exp  | Ampersand, compound_stm -> .LBrace block_item_list RBrace  | if, postfix_exp -> .postfix_exp Dot ID  | LT, dec -> .dec_specifier init_dec_list Semicolon  | -fixed2-, unary_exp -> .unary_op unary_exp  | Assign, jump_stm -> .-return- exp Semicolon  | -half2-, compound_stm -> LBrace .block_item_list RBrace  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, stm -> .iteration_stm  | -continue-, selection_stm -> .if LParen exp RParen stm else stm  | -float-, block_item -> .stm  | -float2-, dec -> .struct_specifier Semicolon  | -fixed2-, compound_stm -> .LBrace block_item_list RBrace  | String, block_item -> .dec  | Semicolon, unary_op -> .NOT  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | String, primary_exp -> .Number  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float4-, jump_stm -> .break  | -uniform-, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, compound_stm -> LBrace .RBrace  | -float4-, stm -> .compound_stm  | -void-, dec -> .struct_specifier Semicolon  | Plus, dec -> .struct_specifier Semicolon  | -half3-, dec -> .struct_specifier Semicolon  | -half4-, jump_stm -> .-return- exp Semicolon  | -long-, compound_stm -> .LBrace RBrace  | -return-, stm -> .exp_stm  | NOT, stm -> .iteration_stm  | Increment, jump_stm -> .-return- exp Semicolon  | LParen, iteration_stm -> .while LParen exp RParen stm  | if, postfix_exp -> .primary_exp  | Plus, stm -> .jump_stm  | -float4-, block_item_list -> .block_item  | -int-, compound_stm -> LBrace .RBrace  | Number, stm -> .compound_stm  | Tilde, stm -> .exp_stm  | -float2-, unary_op -> .Plus  | Increment, iteration_stm -> .while LParen exp RParen stm  | -goto-, compound_stm -> LBrace .block_item_list RBrace  | Decrement, selection_stm -> .if LParen exp RParen stm  | NOT, compound_stm -> LBrace .RBrace  | -float-, primary_exp -> .String  | Times, stm -> .selection_stm  | while, stm -> .exp_stm  | -int-, stm -> .iteration_stm  | break, iteration_stm -> .while LParen exp RParen stm  | -half3-, compound_stm -> LBrace .block_item_list RBrace  | Increment, stm -> .iteration_stm  | -double-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -short-, stm -> .iteration_stm  | -float3-, selection_stm -> .if LParen exp RParen stm  | -half4-, primary_exp -> .String  | Increment, exp_stm -> .exp Semicolon  | ID, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -uniform-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float3-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, jump_stm -> .-return- exp Semicolon  | ID, dec -> .struct_specifier Semicolon  | -continue-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed3-, primary_exp -> .Number  | Dot, exp_stm -> .Semicolon  | -do-, primary_exp -> .LParen exp RParen  | Ampersand, block_item -> .dec  | -continue-, type_qualifier -> .-uniform-  | -fixed3-, postfix_exp -> .primary_exp  | Comma, block_item -> .dec  | Increment, primary_exp -> .ID  | LBrack, unary_exp -> .postfix_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LBrack, block_item -> .dec  | NOT, selection_stm -> .if LParen exp RParen stm  | LParen, jump_stm -> .-continue-  | -int-, block_item_list -> .block_item_list block_item  | while, jump_stm -> .break  | -fixed2-, type_specifier -> .-fixed4-  | ID, compound_stm -> .LBrace RBrace  | Plus, unary_exp -> .unary_op unary_exp  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, stm -> .selection_stm  | -short-, postfix_exp -> .postfix_exp Dot ID  | Semicolon, type_specifier -> .-long-  | ID, compound_stm -> LBrace .block_item_list RBrace  | -float3-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, stm -> .selection_stm  | -fixed4-, jump_stm -> .-goto- ID  | -void-, compound_stm -> .LBrace block_item_list RBrace  | -fixed2-, dec -> .dec_specifier init_dec_list Semicolon  | -long-, unary_op -> .Minus  | Tilde, primary_exp -> .LParen exp RParen  | LT, compound_stm -> .LBrace RBrace  | -char-, primary_exp -> .String  | LT, block_item -> .stm  | -int-, unary_exp -> .postfix_exp  | NEQ, stm -> .compound_stm  | Increment, selection_stm -> .if LParen exp RParen stm  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | break, compound_stm -> LBrace .RBrace  | if, stm -> .jump_stm  | -float2-, unary_exp -> .Increment unary_exp  | NEQ, stm -> .selection_stm  | -return-, stm -> .iteration_stm  | -fixed3-, block_item -> .stm  | -float3-, compound_stm -> .LBrace RBrace  | Semicolon, unary_op -> .Minus  | NOT, block_item -> .dec  | ID, iteration_stm -> .while LParen exp RParen stm  | LParen, stm -> .iteration_stm  | -float2-, exp_stm -> .exp Semicolon  | -void-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | NOT, primary_exp -> .ID  | Semicolon, exp_stm -> .exp Semicolon  | -int-, postfix_exp -> .postfix_exp Decrement  | AND, unary_op -> .Tilde  | Increment, stm -> .iteration_stm  | -fixed4-, postfix_exp -> .postfix_exp LParen RParen  | EQ, stm -> .selection_stm  | Decrement, jump_stm -> .-continue-  | -do-, block_item -> .dec  | -void-, unary_exp -> .Decrement unary_exp  | LeftShift, block_item_list -> .block_item  | -half2-, compound_stm -> .LBrace RBrace  | break, jump_stm -> .-continue-  | Tilde, stm -> .exp_stm  | LBrace, jump_stm -> .-continue-  | -half4-, dec -> .struct_specifier Semicolon  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | OR, stm -> .jump_stm  | -float3-, jump_stm -> .break  | for, jump_stm -> .-continue-  | -goto-, compound_stm -> .LBrace RBrace  | -void-, exp_stm -> .Semicolon  | -fixed2-, selection_stm -> .if LParen exp RParen stm else stm  | -void-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Plus, block_item_list -> .block_item_list block_item  | Plus, exp_stm -> .Semicolon  | -fixed4-, exp_stm -> .exp Semicolon  | Minus, iteration_stm -> .while LParen exp RParen stm  | -void-, stm -> .iteration_stm  | -char-, block_item_list -> .block_item  | LBrace, jump_stm -> .break  | -float4-, stm -> .jump_stm  | -void-, primary_exp -> .Number  | VerticalBar, block_item -> .dec  | Decrement, compound_stm -> LBrace .block_item_list RBrace  | -float4-, stm -> .exp_stm  | Increment, compound_stm -> .LBrace RBrace  | -fixed4-, dec -> .struct_specifier Semicolon  | -fixed3-, exp_stm -> .exp Semicolon  | -sampler2D-, binary_exp -> .unary_exp  | Times, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed2-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float3-, stm -> .jump_stm  | Minus, type_specifier -> .-int-  | ID, compound_stm -> LBrace .RBrace  | Increment, postfix_exp -> .postfix_exp Increment  | VerticalBar, struct_specifier -> .-struct- ID  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | -fixed2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, jump_stm -> .break  | if, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half4-, jump_stm -> .-return- exp Semicolon  | -goto-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float-, jump_stm -> .-goto- ID  | -goto-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, stm -> .compound_stm  | -fixed4-, exp_stm -> .exp Semicolon  | -half2-, block_item_list -> .block_item_list block_item  | -void-, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | Minus, postfix_exp -> .postfix_exp Dot ID  | RightShift, compound_stm -> LBrace .block_item_list RBrace  | if, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, compound_stm -> .LBrace block_item_list RBrace  | -short-, selection_stm -> .if LParen exp RParen stm else stm  | -float2-, jump_stm -> .break  | -char-, binary_exp -> .unary_exp  | OR, stm -> .compound_stm  | -fixed2-, compound_stm -> .LBrace block_item_list RBrace  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | LParen, compound_stm -> LBrace .RBrace  | -sampler2D-, stm -> .selection_stm  | RBrace, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, compound_stm -> LBrace .block_item_list RBrace  | -sampler2D-, stm -> .compound_stm  | -char-, compound_stm -> LBrace .RBrace  | -int-, compound_stm -> LBrace .block_item_list RBrace  | while, compound_stm -> .LBrace RBrace  | -long-, compound_stm -> .LBrace block_item_list RBrace  | -do-, jump_stm -> .-continue-  | -uniform-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LBrace, stm -> .compound_stm  | -goto-, jump_stm -> .break  | -return-, stm -> .compound_stm  | -float4-, block_item_list -> .block_item_list block_item  | -int-, iteration_stm -> .while LParen exp RParen stm  | -uniform-, jump_stm -> .-continue-  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -short-, postfix_exp -> .postfix_exp LParen RParen  | NEQ, block_item_list -> .block_item  | while, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, jump_stm -> .-return- exp Semicolon  | -half3-, primary_exp -> .LParen exp RParen  | NEQ, compound_stm -> .LBrace RBrace  | Increment, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Plus, dec -> .dec_specifier init_dec_list Semicolon  | RBrace, block_item_list -> .block_item  | -float4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, postfix_exp -> .postfix_exp Decrement  | Times, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -int-, unary_op -> .NOT  | LParen, exp_stm -> .exp Semicolon  | String, block_item -> .stm  | -fixed2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .String  | Dot, postfix_exp -> .primary_exp  | AND, jump_stm -> .-return- exp Semicolon  | -short-, dec -> .dec_specifier init_dec_list Semicolon  | LParen, unary_exp -> .unary_op unary_exp  | Plus, dec -> .dec_specifier init_dec_list Semicolon  | -struct-, stm -> .compound_stm  | -float3-, stm -> .selection_stm  | -float4-, block_item -> .dec  | -float4-, dec -> .dec_specifier init_dec_list Semicolon  | -char-, binary_exp -> .unary_exp  | Percent, compound_stm -> .LBrace block_item_list RBrace  | while, stm -> .iteration_stm  | Minus, block_item -> .stm  | -half3-, postfix_exp -> .postfix_exp Increment  | GE, block_item_list -> .block_item_list block_item  | -fixed2-, primary_exp -> .ID  | LParen, unary_exp -> .Increment unary_exp  | Divide, exp_stm -> .Semicolon  | ID, unary_op -> .NOT  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed2-, jump_stm -> .-goto- ID  | -struct-, compound_stm -> LBrace .RBrace  | LBrace, jump_stm -> .break  | Minus, compound_stm -> .LBrace RBrace  | if, jump_stm -> .break  | -void-, block_item_list -> .block_item_list block_item  | for, iteration_stm -> .while LParen exp RParen stm  | -float-, compound_stm -> LBrace .block_item_list RBrace  | -float-, compound_stm -> LBrace .block_item_list RBrace  | -float2-, primary_exp -> .String  | Ampersand, block_item -> .stm  | Plus, type_qualifier -> .-uniform-  | -half3-, compound_stm -> LBrace .block_item_list RBrace  | else, primary_exp -> .ID  | Times, stm -> .compound_stm  | -sampler2D-, stm -> .selection_stm  | LParen, dec -> .dec_specifier init_dec_list Semicolon  | for, selection_stm -> .if LParen exp RParen stm else stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | LBrace, dec -> .dec_specifier init_dec_list Semicolon  | String, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, binary_exp -> .binary_exp binary_op unary_exp  | Caret, primary_exp -> .LParen exp RParen  | Divide, unary_op -> .Tilde  | Tilde, jump_stm -> .-continue-  | -void-, type_qualifier -> .-uniform-  | -char-, unary_exp -> .Decrement unary_exp  | Comma, stm -> .exp_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -return-, unary_exp -> .Decrement unary_exp  | Divide, stm -> .compound_stm  | -do-, jump_stm -> .-return- exp Semicolon  | -fixed3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half3-, stm -> .exp_stm  | -return-, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, stm -> .exp_stm  | -char-, compound_stm -> LBrace .block_item_list RBrace  | -struct-, postfix_exp -> .postfix_exp Decrement  | Ampersand, compound_stm -> LBrace .RBrace  | -return-, iteration_stm -> .while LParen exp RParen stm  | for, stm -> .selection_stm  | if, stm -> .compound_stm  | -uniform-, compound_stm -> LBrace .RBrace  | Minus, compound_stm -> .LBrace RBrace  | -float4-, jump_stm -> .-continue-  | RBrace, binary_exp -> .unary_exp  | LE, jump_stm -> .-return- exp Semicolon  | -float4-, stm -> .exp_stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, stm -> .exp_stm  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -long-, selection_stm -> .if LParen exp RParen stm else stm  | -fixed3-, block_item_list -> .block_item_list block_item  | -struct-, primary_exp -> .ID  | VerticalBar, stm -> .compound_stm  | Minus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | if, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -void-, stm -> .compound_stm  | -float2-, block_item_list -> .block_item_list block_item  | -fixed4-, primary_exp -> .Number  | LeftShift, exp_stm -> .exp Semicolon  | Tilde, jump_stm -> .break  | while, jump_stm -> .-continue-  | -char-, jump_stm -> .break  | LParen, block_item -> .stm  | -sampler2D-, jump_stm -> .-goto- ID  | -float-, dec -> .dec_specifier init_dec_list Semicolon  | Number, postfix_exp -> .postfix_exp Decrement  | Percent, compound_stm -> .LBrace block_item_list RBrace  | -void-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, selection_stm -> .if LParen exp RParen stm  | -fixed2-, primary_exp -> .LParen exp RParen  | Times, stm -> .selection_stm  | ID, selection_stm -> .if LParen exp RParen stm  | -double-, exp_stm -> .Semicolon  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, stm -> .exp_stm  | Minus, exp_stm -> .exp Semicolon  | -uniform-, dec -> .struct_specifier Semicolon  | -float2-, primary_exp -> .ID  | OR, jump_stm -> .-continue-  | -float2-, compound_stm -> LBrace .RBrace  | String, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, postfix_exp -> .postfix_exp Increment  | GT, stm -> .jump_stm  | Semicolon, iteration_stm -> .while LParen exp RParen stm  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | Times, exp_stm -> .Semicolon  | -half4-, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, compound_stm -> .LBrace RBrace  | Decrement, compound_stm -> LBrace .block_item_list RBrace  | -do-, compound_stm -> LBrace .block_item_list RBrace  | -int-, unary_exp -> .unary_op unary_exp  | Question, selection_stm -> .if LParen exp RParen stm else stm  | -double-, unary_exp -> .unary_op unary_exp  | Times, stm -> .iteration_stm  | -int-, dec -> .struct_specifier Semicolon  | -float3-, exp_stm -> .exp Semicolon  | Plus, stm -> .exp_stm  | -void-, block_item -> .stm  | -double-, block_item_list -> .block_item  | Increment, primary_exp -> .String  | Question, iteration_stm -> .while LParen exp RParen stm  | while, compound_stm -> LBrace .RBrace  | -float2-, block_item_list -> .block_item_list block_item  | -long-, dec -> .dec_specifier init_dec_list Semicolon  | Minus, stm -> .iteration_stm  | -do-, block_item_list -> .block_item  | NOT, binary_exp -> .unary_exp  | LT, block_item -> .stm  | -float-, primary_exp -> .ID  | LE, block_item_list -> .block_item_list block_item  | -char-, stm -> .exp_stm  | -float-, compound_stm -> LBrace .block_item_list RBrace  | Tilde, unary_exp -> .Decrement unary_exp  | Caret, compound_stm -> .LBrace block_item_list RBrace  | -sampler2D-, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | LeftShift, jump_stm -> .-return- exp Semicolon  | Number, exp_stm -> .exp Semicolon  | Number, primary_exp -> .String  | Minus, block_item_list -> .block_item_list block_item  | Decrement, selection_stm -> .if LParen exp RParen stm  | -uniform-, compound_stm -> LBrace .RBrace  | -half3-, jump_stm -> .-continue-  | -sampler2D-, dec -> .dec_specifier init_dec_list Semicolon  | ID, iteration_stm -> .while LParen exp RParen stm  | -int-, block_item_list -> .block_item  | -half3-, dec -> .struct_specifier Semicolon  | -long-, type_qualifier -> .-uniform-  | -half2-, jump_stm -> .-goto- ID  | Minus, dec -> .dec_specifier init_dec_list Semicolon  | Semicolon, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | for, postfix_exp -> .postfix_exp Decrement  | Increment, block_item -> .stm  | -goto-, binary_exp -> .binary_exp binary_op unary_exp  | Minus, primary_exp -> .LParen exp RParen  | OR, primary_exp -> .Number  | GT, postfix_exp -> .primary_exp  | Question, block_item -> .stm  | -char-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, jump_stm -> .break  | -fixed4-, dec -> .dec_specifier init_dec_list Semicolon  | -sampler2D-, postfix_exp -> .postfix_exp Increment  | Increment, stm -> .compound_stm  | -half2-, selection_stm -> .if LParen exp RParen stm else stm  | -fixed4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, stm -> .iteration_stm  | -short-, selection_stm -> .if LParen exp RParen stm  | Tilde, postfix_exp -> .postfix_exp Increment  | LeftShift, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> .postfix_exp  | Caret, stm -> .jump_stm  | Increment, selection_stm -> .if LParen exp RParen stm  | Number, primary_exp -> .ID  | LT, postfix_exp -> .postfix_exp Dot ID  | Caret, iteration_stm -> .while LParen exp RParen stm  | NOT, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -return-, dec -> .struct_specifier Semicolon  | Decrement, primary_exp -> .Number  | Percent, iteration_stm -> .while LParen exp RParen stm  | -return-, primary_exp -> .LParen exp RParen  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -double-, primary_exp -> .Number  | Assign, block_item_list -> .block_item  | RBrace, block_item -> .dec  | -float3-, jump_stm -> .break  | -float-, jump_stm -> .break  | -goto-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Increment, stm -> .compound_stm  | RBrace, postfix_exp -> .postfix_exp Dot ID  | GT, stm -> .exp_stm  | -continue-, stm -> .iteration_stm  | Plus, compound_stm -> LBrace .block_item_list RBrace  | NOT, selection_stm -> .if LParen exp RParen stm  | -fixed4-, exp_stm -> .Semicolon  | -uniform-, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, stm -> .selection_stm  | String, block_item_list -> .block_item  | -do-, block_item_list -> .block_item  | ID, block_item_list -> .block_item  | -uniform-, stm -> .exp_stm  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Minus, postfix_exp -> .postfix_exp Decrement  | Divide, exp_stm -> .Semicolon  | Minus, unary_exp -> .postfix_exp  | VerticalBar, primary_exp -> .String  | Divide, block_item -> .dec  | -float-, unary_exp -> .postfix_exp  | EQ, stm -> .exp_stm  | ID, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, primary_exp -> .String  | LParen, postfix_exp -> .postfix_exp Increment  | Minus, compound_stm -> LBrace .block_item_list RBrace  | LBrace, iteration_stm -> .while LParen exp RParen stm  | -double-, jump_stm -> .-goto- ID  | LBrace, primary_exp -> .ID  | RightShift, selection_stm -> .if LParen exp RParen stm else stm  | -char-, stm -> .iteration_stm  | -long-, postfix_exp -> .postfix_exp Increment  | LE, jump_stm -> .-continue-  | -continue-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Tilde, primary_exp -> .ID  | NEQ, compound_stm -> LBrace .RBrace  | -char-, block_item_list -> .block_item_list block_item  | LParen, stm -> .selection_stm  | -struct-, stm -> .compound_stm  | -half4-, stm -> .compound_stm  | -short-, unary_exp -> .unary_op unary_exp  | NEQ, block_item -> .dec  | -goto-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half3-, jump_stm -> .-continue-  | -float3-, selection_stm -> .if LParen exp RParen stm  | for, selection_stm -> .if LParen exp RParen stm  | ID, compound_stm -> LBrace .block_item_list RBrace  | -half2-, block_item -> .stm  | Tilde, stm -> .jump_stm  | ID, jump_stm -> .-return- exp Semicolon  | -half4-, block_item -> .dec  | for, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, dec -> .struct_specifier Semicolon  | RBrace, type_qualifier -> .-uniform-  | -void-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | RBrace, postfix_exp -> .primary_exp  | LT, unary_exp -> .postfix_exp  | Question, primary_exp -> .String  | LBrack, stm -> .jump_stm  | for, jump_stm -> .-return- exp Semicolon  | Plus, stm -> .exp_stm  | -float3-, unary_exp -> .Increment unary_exp  | Comma, block_item_list -> .block_item_list block_item  | LBrace, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -uniform-, jump_stm -> .-return- exp Semicolon  | if, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -sampler2D-, jump_stm -> .-goto- ID  | -fixed3-, dec -> .struct_specifier Semicolon  | -do-, compound_stm -> LBrace .RBrace  | -goto-, block_item -> .stm  | LBrace, stm -> .selection_stm  | -fixed2-, jump_stm -> .-goto- ID  | if, compound_stm -> .LBrace RBrace  | LParen, block_item -> .stm  | while, jump_stm -> .-return- exp Semicolon  | -continue-, stm -> .selection_stm  | -int-, stm -> .exp_stm  | -fixed4-, jump_stm -> .break  | -half4-, postfix_exp -> .primary_exp  | GT, exp_stm -> .Semicolon  | -void-, binary_exp -> .unary_exp  | Caret, unary_op -> .Tilde  | NOT, primary_exp -> .Number  | RightShift, jump_stm -> .-goto- ID  | Increment, stm -> .selection_stm  | -half3-, stm -> .jump_stm  | -short-, stm -> .exp_stm  | break, binary_exp -> .unary_exp  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -struct-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -char-, block_item_list -> .block_item  | LParen, jump_stm -> .-goto- ID  | break, compound_stm -> .LBrace RBrace  | -sampler2D-, compound_stm -> LBrace .RBrace  | RBrace, jump_stm -> .-continue-  | Plus, unary_exp -> .Increment unary_exp  | GE, jump_stm -> .-continue-  | -half2-, unary_exp -> .Increment unary_exp  | EQ, compound_stm -> .LBrace RBrace  | Tilde, exp_stm -> .exp Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | ID, stm -> .jump_stm  | -char-, block_item_list -> .block_item  | Decrement, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | Comma, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half2-, unary_exp -> .Increment unary_exp  | Question, stm -> .jump_stm  | break, conditional_exp -> .binary_exp  | Semicolon, block_item_list -> .block_item  | -char-, exp_stm -> .Semicolon  | RBrace, postfix_exp -> .postfix_exp Dot ID  | Minus, stm -> .jump_stm  | -continue-, dec -> .struct_specifier Semicolon  | break, selection_stm -> .if LParen exp RParen stm else stm  | -half2-, stm -> .compound_stm  | -struct-, stm -> .selection_stm  | NOT, jump_stm -> .-return- exp Semicolon  | -float2-, postfix_exp -> .postfix_exp Dot ID  | LParen, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, jump_stm -> .-return- exp Semicolon  | -float3-, dec -> .dec_specifier init_dec_list Semicolon  | -float-, iteration_stm -> .while LParen exp RParen stm  | -struct-, postfix_exp -> .postfix_exp Increment  | Dot, type_qualifier -> .-uniform-  | -float4-, stm -> .compound_stm  | break, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, compound_stm -> LBrace .RBrace  | Tilde, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, jump_stm -> .break  | -long-, block_item -> .stm  | -float4-, postfix_exp -> .postfix_exp Increment  | Divide, stm -> .selection_stm  | -float2-, stm -> .jump_stm  | -return-, exp_stm -> .Semicolon  | break, unary_exp -> .postfix_exp  | OR, exp_stm -> .Semicolon  | -double-, block_item -> .dec  | LBrace, block_item -> .stm  | -do-, postfix_exp -> .postfix_exp Decrement  | LE, exp_stm -> .Semicolon  | Number, block_item -> .dec  | if, binary_exp -> .unary_exp  | AND, block_item -> .dec  | LParen, compound_stm -> LBrace .block_item_list RBrace  | -fixed4-, exp_stm -> .exp Semicolon  | Semicolon, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, compound_stm -> LBrace .RBrace  | -long-, primary_exp -> .ID  | Dot, stm -> .selection_stm  | -double-, stm -> .iteration_stm  | NOT, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Comma, jump_stm -> .-continue-  | -double-, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, jump_stm -> .-goto- ID  | -half2-, compound_stm -> LBrace .block_item_list RBrace  | LParen, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Increment  | EQ, exp_stm -> .exp Semicolon  | NOT, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -double-, unary_exp -> .postfix_exp  | Percent, block_item_list -> .block_item_list block_item  | Increment, binary_exp -> .unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, exp_stm -> .exp Semicolon  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -char-, exp_stm -> .Semicolon  | Plus, compound_stm -> .LBrace RBrace  | -float3-, stm -> .jump_stm  | -double-, dec -> .dec_specifier init_dec_list Semicolon  | -half3-, compound_stm -> .LBrace block_item_list RBrace  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | -half4-, jump_stm -> .break  | LBrace, compound_stm -> LBrace .block_item_list RBrace  | for, jump_stm -> .break  | -short-, jump_stm -> .-continue-  | Minus, jump_stm -> .-continue-  | String, primary_exp -> .String  | OR, dec -> .struct_specifier Semicolon  | Semicolon, stm -> .selection_stm  | for, postfix_exp -> .postfix_exp Decrement  | EQ, exp_stm -> .exp Semicolon  | -continue-, compound_stm -> LBrace .block_item_list RBrace  | -uniform-, compound_stm -> .LBrace block_item_list RBrace  | Increment, unary_exp -> .Decrement unary_exp  | Ampersand, stm -> .jump_stm  | Tilde, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, block_item_list -> .block_item  | String, block_item -> .stm  | -struct-, stm -> .jump_stm  | -goto-, postfix_exp -> .primary_exp  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -float3-, block_item -> .dec  | Plus, unary_exp -> .Decrement unary_exp  | GE, selection_stm -> .if LParen exp RParen stm else stm  | for, jump_stm -> .break  | Plus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float4-, type_qualifier -> .-uniform-  | -half4-, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, exp_stm -> .exp Semicolon  | Increment, exp_stm -> .exp Semicolon  | -return-, dec -> .dec_specifier init_dec_list Semicolon  | while, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, stm -> .jump_stm  | -fixed2-, stm -> .compound_stm  | -return-, type_qualifier -> .-uniform-  | -int-, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, compound_stm -> .LBrace RBrace  | -struct-, primary_exp -> .LParen exp RParen  | AND, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -do-, selection_stm -> .if LParen exp RParen stm else stm  | NOT, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, stm -> .selection_stm  | -continue-, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, dec -> .dec_specifier init_dec_list Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | -return-, jump_stm -> .-continue-  | Number, stm -> .jump_stm  | -fixed4-, unary_exp -> .unary_op unary_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | -struct-, compound_stm -> LBrace .RBrace  | -continue-, primary_exp -> .LParen exp RParen  | VerticalBar, jump_stm -> .break  | break, compound_stm -> .LBrace RBrace  | -double-, postfix_exp -> .postfix_exp Decrement  | OR, compound_stm -> .LBrace block_item_list RBrace  | -half3-, block_item -> .dec  | RBrace, stm -> .jump_stm  | -sampler2D-, block_item -> .dec  | Number, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .primary_exp  | LeftShift, compound_stm -> LBrace .RBrace  | Decrement, primary_exp -> .ID  | Plus, stm -> .exp_stm  | -half2-, primary_exp -> .ID  | GT, selection_stm -> .if LParen exp RParen stm else stm  | -long-, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | break, dec -> .dec_specifier init_dec_list Semicolon  | -half2-, stm -> .compound_stm  | -half3-, selection_stm -> .if LParen exp RParen stm  | if, jump_stm -> .-continue-  | if, jump_stm -> .-goto- ID  | -return-, compound_stm -> .LBrace block_item_list RBrace  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -goto-, block_item -> .stm  | -uniform-, block_item_list -> .block_item  | Tilde, primary_exp -> .Number  | Question, jump_stm -> .-goto- ID  | -long-, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, jump_stm -> .-continue-  | -struct-, jump_stm -> .-return- exp Semicolon  | -int-, block_item_list -> .block_item_list block_item  | NOT, stm -> .iteration_stm  | -half2-, primary_exp -> .Number  | LBrack, stm -> .exp_stm  | -long-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, iteration_stm -> .while LParen exp RParen stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Comma, exp_stm -> .Semicolon  | -int-, dec -> .struct_specifier Semicolon  | ID, dec -> .struct_specifier Semicolon  | -short-, struct_specifier -> .-struct- ID LBrace struct_dec_list RBrace  | Semicolon, jump_stm -> .-goto- ID  | -fixed2-, stm -> .exp_stm  | Tilde, exp_stm -> .exp Semicolon  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | String, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, selection_stm -> .if LParen exp RParen stm  | -void-, stm -> .exp_stm  | -do-, jump_stm -> .-continue-  | Increment, stm -> .exp_stm  | while, postfix_exp -> .postfix_exp Increment  | Question, type_qualifier -> .-uniform-  | -fixed4-, block_item_list -> .block_item  | Plus, compound_stm -> .LBrace block_item_list RBrace  | Plus, iteration_stm -> .while LParen exp RParen stm  | -do-, dec -> .dec_specifier init_dec_list Semicolon  | -void-, primary_exp -> .LParen exp RParen  | EQ, block_item -> .dec  | String, block_item -> .stm  | String, postfix_exp -> .postfix_exp LParen RParen  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | Plus, postfix_exp -> .primary_exp  | Times, block_item -> .stm  | LParen, block_item -> .stm  | -continue-, block_item -> .dec  | -long-, jump_stm -> .-continue-  | break, exp_stm -> .Semicolon  | -short-, block_item -> .stm  | if, block_item_list -> .block_item_list block_item  | -float4-, type_specifier -> .typedef_name  | ID, dec -> .struct_specifier Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | -float4-, selection_stm -> .if LParen exp RParen stm  | -sampler2D-, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp Decrement  | NEQ, dec -> .struct_specifier Semicolon  | -uniform-, dec -> .dec_specifier init_dec_list Semicolon  | NOT, selection_stm -> .if LParen exp RParen stm else stm  | -short-, primary_exp -> .ID  | LeftShift, selection_stm -> .if LParen exp RParen stm  | -float2-, block_item_list -> .block_item  | for, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Increment, jump_stm -> .-goto- ID  | while, type_specifier -> .-short-  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | NEQ, stm -> .jump_stm  | -do-, postfix_exp -> .postfix_exp Decrement  | Plus, exp_stm -> .exp Semicolon  | -half4-, block_item_list -> .block_item  | -fixed4-, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, primary_exp -> .Number  | OR, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -half3-, compound_stm -> LBrace .block_item_list RBrace  | Semicolon, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, jump_stm -> .-goto- ID  | String, jump_stm -> .-goto- ID  | -float3-, stm -> .exp_stm  | if, exp_stm -> .Semicolon  | for, block_item_list -> .block_item  | -fixed3-, postfix_exp -> .postfix_exp Increment  | LT, selection_stm -> .if LParen exp RParen stm  | RBrace, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, block_item_list -> .block_item  | -short-, block_item -> .stm  | break, dec -> .dec_specifier init_dec_list Semicolon  | LBrace, stm -> .selection_stm  | -do-, jump_stm -> .-return- exp Semicolon  | -double-, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp Increment  | NEQ, dec -> .dec_specifier init_dec_list Semicolon  | Decrement, stm -> .selection_stm  | -void-, stm -> .selection_stm  | -half2-, compound_stm -> LBrace .RBrace  | for, stm -> .exp_stm  | -struct-, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, stm -> .iteration_stm  | Semicolon, jump_stm -> .break  | -fixed3-, primary_exp -> .LParen exp RParen  | Percent, dec -> .dec_specifier init_dec_list Semicolon  | -continue-, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, jump_stm -> .-return- exp Semicolon  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | Semicolon, postfix_exp -> .primary_exp  | VerticalBar, unary_op -> .Plus  | Plus, stm -> .exp_stm  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | -sampler2D-, block_item_list -> .block_item_list block_item  | -double-, exp_stm -> .Semicolon  | -float-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, dec -> .struct_specifier Semicolon  | LParen, jump_stm -> .-goto- ID  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | String, stm -> .jump_stm  | LBrace, primary_exp -> .ID  | Assign, stm -> .iteration_stm  | -half4-, block_item_list -> .block_item  | Minus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed4-, dec -> .dec_specifier init_dec_list Semicolon  | Plus, type_specifier -> .-half2-  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, stm -> .compound_stm  | String, dec -> .dec_specifier init_dec_list Semicolon  | if, jump_stm -> .break  | Number, postfix_exp -> .postfix_exp LParen RParen  | LE, type_specifier -> .-fixed2-  | ID, jump_stm -> .-goto- ID  | -fixed4-, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, stm -> .jump_stm  | NOT, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, type_qualifier -> .-uniform-  | -sampler2D-, exp_stm -> .Semicolon  | -float4-, binary_exp -> .binary_exp binary_op unary_exp  | LE, block_item -> .dec  | -fixed3-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, compound_stm -> LBrace .block_item_list RBrace  | -goto-, stm -> .selection_stm  | Increment, jump_stm -> .-continue-  | Semicolon, block_item -> .dec  | -return-, binary_exp -> .unary_exp  | NEQ, primary_exp -> .LParen exp RParen  | Minus, compound_stm -> .LBrace RBrace  | Number, block_item_list -> .block_item  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | -float2-, dec -> .struct_specifier Semicolon  | -sampler2D-, primary_exp -> .Number  | Plus, dec -> .struct_specifier Semicolon  | Minus, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, compound_stm -> LBrace .RBrace  | -do-, stm -> .jump_stm  | -half3-, exp_stm -> .exp Semicolon  | -fixed3-, jump_stm -> .-goto- ID  | -double-, postfix_exp -> .postfix_exp LParen RParen  | Question, jump_stm -> .-return- exp Semicolon  | Semicolon, selection_stm -> .if LParen exp RParen stm  | Decrement, unary_exp -> .postfix_exp  | LE, compound_stm -> LBrace .RBrace  | -half4-, exp_stm -> .exp Semicolon  | -short-, primary_exp -> .String  | Assign, block_item -> .dec  | -struct-, stm -> .exp_stm  | for, exp_stm -> .Semicolon  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | String, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, stm -> .selection_stm  | -half4-, primary_exp -> .LParen exp RParen  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Caret, compound_stm -> LBrace .RBrace  | -fixed3-, selection_stm -> .if LParen exp RParen stm else stm  | if, stm -> .iteration_stm  | -uniform-, unary_exp -> .unary_op unary_exp  | GT, compound_stm -> .LBrace block_item_list RBrace  | NOT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, stm -> .exp_stm  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, block_item -> .dec  | break, primary_exp -> .LParen exp RParen  | LParen, compound_stm -> LBrace .block_item_list RBrace  | -half3-, stm -> .jump_stm  | Number, exp_stm -> .exp Semicolon  | RBrace, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half4-, jump_stm -> .break  | String, unary_exp -> .unary_op unary_exp  | AND, stm -> .jump_stm  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Number, postfix_exp -> .primary_exp  | Assign, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -continue-, exp_stm -> .Semicolon  | LBrace, jump_stm -> .-goto- ID  | -short-, stm -> .exp_stm  | -half4-, compound_stm -> .LBrace RBrace  | -fixed2-, compound_stm -> LBrace .block_item_list RBrace  | -continue-, unary_exp -> .unary_op unary_exp  | Percent, exp_stm -> .exp Semicolon  | if, dec -> .struct_specifier Semicolon  | while, postfix_exp -> .primary_exp  | Divide, block_item -> .dec  | -char-, postfix_exp -> .postfix_exp LParen RParen  | Increment, stm -> .compound_stm  | ID, selection_stm -> .if LParen exp RParen stm  | while, block_item -> .dec  | -double-, block_item_list -> .block_item_list block_item  | -return-, iteration_stm -> .while LParen exp RParen stm  | -continue-, block_item -> .dec  | -fixed4-, postfix_exp -> .primary_exp  | LBrack, dec -> .struct_specifier Semicolon  | -half2-, jump_stm -> .break  | -int-, exp_stm -> .Semicolon  | -goto-, jump_stm -> .break  | -float3-, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, unary_exp -> .Decrement unary_exp  | OR, block_item_list -> .block_item  | -struct-, jump_stm -> .-return- exp Semicolon  | -void-, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, binary_exp -> .unary_exp  | EQ, selection_stm -> .if LParen exp RParen stm  | -goto-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | ID, jump_stm -> .-continue-  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -float3-, primary_exp -> .ID  | Divide, selection_stm -> .if LParen exp RParen stm else stm  | -uniform-, stm -> .compound_stm  | Decrement, type_qualifier -> .-uniform-  | -float2-, jump_stm -> .-goto- ID  | ID, stm -> .exp_stm  | -fixed3-, postfix_exp -> .postfix_exp Dot ID  | EQ, stm -> .selection_stm  | -float3-, unary_exp -> .unary_op unary_exp  | Comma, jump_stm -> .-return- exp Semicolon  | -float-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Semicolon, binary_exp -> .unary_exp  | GE, compound_stm -> .LBrace block_item_list RBrace  | -goto-, iteration_stm -> .while LParen exp RParen stm  | break, stm -> .selection_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -int-, stm -> .compound_stm  | for, dec -> .dec_specifier init_dec_list Semicolon  | -return-, stm -> .jump_stm  | if, jump_stm -> .-goto- ID  | -float2-, stm -> .selection_stm  | Tilde, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, stm -> .compound_stm  | -long-, assignment_exp -> .conditional_exp  | Comma, unary_op -> .Plus  | Decrement, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | Assign, jump_stm -> .-goto- ID  | -half3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LBrace, exp_stm -> .Semicolon  | -fixed3-, stm -> .iteration_stm  | -half3-, exp_stm -> .Semicolon  | Tilde, block_item_list -> .block_item  | -half4-, selection_stm -> .if LParen exp RParen stm else stm  | Semicolon, stm -> .iteration_stm  | while, stm -> .selection_stm  | LBrace, postfix_exp -> .postfix_exp LParen RParen  | Assign, compound_stm -> .LBrace RBrace  | -half3-, primary_exp -> .Number  | Increment, stm -> .iteration_stm  | -float-, exp_stm -> .Semicolon  | -float3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Number, stm -> .compound_stm  | -continue-, stm -> .exp_stm  | Plus, postfix_exp -> .postfix_exp Decrement  | Minus, stm -> .selection_stm  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, stm -> .iteration_stm  | ID, stm -> .compound_stm  | Plus, compound_stm -> .LBrace block_item_list RBrace  | RBrace, block_item_list -> .block_item_list block_item  | String, primary_exp -> .Number  | EQ, exp_stm -> .exp Semicolon  | -float2-, exp_stm -> .exp Semicolon  | -long-, compound_stm -> .LBrace RBrace  | String, selection_stm -> .if LParen exp RParen stm  | Increment, stm -> .compound_stm  | -float-, exp_stm -> .Semicolon  | Increment, dec -> .dec_specifier init_dec_list Semicolon  | -goto-, primary_exp -> .String  | LeftShift, block_item -> .dec  | -int-, jump_stm -> .-continue-  | -fixed3-, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, postfix_exp -> .primary_exp  | OR, iteration_stm -> .while LParen exp RParen stm  | RBrace, unary_exp -> .postfix_exp  | RightShift, compound_stm -> .LBrace block_item_list RBrace  | -fixed4-, block_item_list -> .block_item  | -continue-, block_item_list -> .block_item  | -double-, unary_op -> .Tilde  | Decrement, compound_stm -> LBrace .block_item_list RBrace  | ID, jump_stm -> .-continue-  | -return-, iteration_stm -> .while LParen exp RParen stm  | Plus, block_item_list -> .block_item  | -return-, selection_stm -> .if LParen exp RParen stm  | -do-, stm -> .selection_stm  | Plus, compound_stm -> .LBrace RBrace  | NOT, exp_stm -> .Semicolon  | Decrement, type_specifier -> .-char-  | ID, block_item_list -> .block_item_list block_item  | -uniform-, exp_stm -> .Semicolon  | -float2-, dec -> .dec_specifier init_dec_list Semicolon  | -half4-, iteration_stm -> .while LParen exp RParen stm  | Number, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, exp_stm -> .exp Semicolon  | Decrement, block_item -> .dec  | -half3-, stm -> .iteration_stm  | LParen, stm -> .jump_stm  | -half2-, selection_stm -> .if LParen exp RParen stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Percent, jump_stm -> .break  | ID, jump_stm -> .-goto- ID  | Semicolon, block_item -> .stm  | -half2-, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, jump_stm -> .break  | Increment, stm -> .iteration_stm  | Tilde, block_item_list -> .block_item  | Number, compound_stm -> .LBrace block_item_list RBrace  | LBrace, postfix_exp -> .postfix_exp Increment  | Semicolon, jump_stm -> .break  | -sampler2D-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, block_item_list -> .block_item  | -float-, type_specifier -> .-double-  | ID, exp_stm -> .exp Semicolon  | -double-, stm -> .selection_stm  | -sampler2D-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -long-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LParen, compound_stm -> .LBrace RBrace  | -half2-, jump_stm -> .-goto- ID  | -do-, exp_stm -> .exp Semicolon  | -float-, stm -> .jump_stm  | -float-, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, jump_stm -> .-continue-  | for, unary_op -> .Minus  | Decrement, selection_stm -> .if LParen exp RParen stm  | Plus, jump_stm -> .-return- exp Semicolon  | -fixed4-, compound_stm -> LBrace .RBrace  | -double-, exp_stm -> .exp Semicolon  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | LT, dec -> .dec_specifier init_dec_list Semicolon  | -double-, postfix_exp -> .postfix_exp Increment  | Comma, block_item_list -> .block_item_list block_item  | -sampler2D-, jump_stm -> .-continue-  | -fixed2-, stm -> .compound_stm  | LBrace, selection_stm -> .if LParen exp RParen stm  | -short-, block_item -> .stm  | -fixed4-, exp_stm -> .exp Semicolon  | LBrace, jump_stm -> .-continue-  | -short-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, block_item_list -> .block_item_list block_item  | break, binary_exp -> .binary_exp binary_op unary_exp  | EQ, exp_stm -> .exp Semicolon  | for, compound_stm -> LBrace .RBrace  | NOT, postfix_exp -> .primary_exp  | Percent, primary_exp -> .String  | Comma, stm -> .iteration_stm  | -fixed2-, compound_stm -> LBrace .RBrace  | break, binary_exp -> .binary_exp binary_op unary_exp  | Question, exp_stm -> .Semicolon  | -char-, block_item -> .stm  | ID, jump_stm -> .-return- exp Semicolon  | LBrace, block_item_list -> .block_item  | -sampler2D-, postfix_exp -> .postfix_exp LParen RParen  | RightShift, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | for, primary_exp -> .Number  | Times, jump_stm -> .-return- exp Semicolon  | Increment, jump_stm -> .break  | -struct-, binary_exp -> .unary_exp  | RightShift, block_item_list -> .block_item_list block_item  | Tilde, compound_stm -> LBrace .RBrace  | -float3-, primary_exp -> .ID  | Minus, dec -> .struct_specifier Semicolon  | LBrace, selection_stm -> .if LParen exp RParen stm  | -continue-, type_qualifier -> .-uniform-  | ID, selection_stm -> .if LParen exp RParen stm else stm  | -half4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, unary_op -> .Minus  | LParen, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -sampler2D-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed4-, block_item_list -> .block_item_list block_item  | -half3-, jump_stm -> .break  | NOT, compound_stm -> LBrace .RBrace  | -fixed2-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, compound_stm -> .LBrace RBrace  | for, selection_stm -> .if LParen exp RParen stm  | break, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, type_qualifier -> .-uniform-  | -double-, block_item_list -> .block_item_list block_item  | -float-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, stm -> .selection_stm  | -char-, compound_stm -> .LBrace block_item_list RBrace  | ID, stm -> .iteration_stm  | for, stm -> .exp_stm  | String, jump_stm -> .break  | -double-, postfix_exp -> .postfix_exp LParen RParen  | OR, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | RBrace, block_item -> .stm  | Increment, stm -> .compound_stm  | -double-, compound_stm -> .LBrace RBrace  | -continue-, jump_stm -> .-goto- ID  | Tilde, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | NOT, postfix_exp -> .postfix_exp Increment  | RightShift, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .primary_exp  | Caret, compound_stm -> .LBrace block_item_list RBrace  | break, selection_stm -> .if LParen exp RParen stm  | -float3-, postfix_exp -> .postfix_exp Increment  | Caret, selection_stm -> .if LParen exp RParen stm else stm  | -continue-, type_specifier -> .-half3-  | ID, jump_stm -> .-goto- ID  | Number, postfix_exp -> .primary_exp  | Decrement, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -continue-, dec -> .dec_specifier init_dec_list Semicolon  | Tilde, jump_stm -> .-goto- ID  | Decrement, postfix_exp -> .primary_exp  | Ampersand, block_item_list -> .block_item_list block_item  | -short-, jump_stm -> .-goto- ID  | -uniform-, compound_stm -> .LBrace RBrace  | -uniform-, dec -> .struct_specifier Semicolon  | if, iteration_stm -> .while LParen exp RParen stm  | Decrement, dec -> .dec_specifier init_dec_list Semicolon  | -float2-, selection_stm -> .if LParen exp RParen stm  | -return-, stm -> .exp_stm  | -fixed2-, exp_stm -> .Semicolon  | -return-, selection_stm -> .if LParen exp RParen stm  | LBrace, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, jump_stm -> .-continue-  | LParen, stm -> .iteration_stm  | -goto-, stm -> .compound_stm  | while, stm -> .exp_stm  | -sampler2D-, jump_stm -> .-goto- ID  | RBrace, postfix_exp -> .postfix_exp LParen RParen  | LT, compound_stm -> .LBrace RBrace  | -int-, primary_exp -> .LParen exp RParen  | Assign, dec -> .struct_specifier Semicolon  | NOT, dec -> .dec_specifier init_dec_list Semicolon  | -uniform-, jump_stm -> .-goto- ID  | -char-, jump_stm -> .-continue-  | LBrace, dec -> .struct_specifier Semicolon  | -struct-, jump_stm -> .-return- exp Semicolon  | break, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, block_item -> .stm  | Minus, stm -> .exp_stm  | Number, unary_exp -> .Increment unary_exp  | Caret, postfix_exp -> .postfix_exp Dot ID  | LBrack, block_item_list -> .block_item  | -float2-, block_item -> .dec  | Minus, block_item -> .dec  | -short-, primary_exp -> .String  | AND, unary_exp -> .unary_op unary_exp  | Divide, block_item_list -> .block_item_list block_item  | -do-, dec_specifier -> .type_qualifier type_specifier  | ID, unary_exp -> .unary_op unary_exp  | Caret, stm -> .compound_stm  | -int-, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, compound_stm -> LBrace .RBrace  | -half2-, exp_stm -> .exp Semicolon  | break, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, iteration_stm -> .while LParen exp RParen stm  | -fixed2-, stm -> .selection_stm  | -float-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -do-, unary_exp -> .postfix_exp  | Comma, binary_exp -> .unary_exp  | LeftShift, jump_stm -> .break  | -half2-, stm -> .selection_stm  | Semicolon, primary_exp -> .ID  | GE, jump_stm -> .-continue-  | -long-, block_item -> .dec  | -half4-, compound_stm -> .LBrace block_item_list RBrace  | -float2-, stm -> .compound_stm  | -fixed3-, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, compound_stm -> LBrace .RBrace  | while, block_item -> .stm  | -fixed3-, jump_stm -> .-return- exp Semicolon  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -short-, primary_exp -> .ID  | Percent, stm -> .compound_stm  | Number, primary_exp -> .Number  | Comma, stm -> .compound_stm  | LParen, iteration_stm -> .while LParen exp RParen stm  | -half2-, compound_stm -> .LBrace RBrace  | -short-, stm -> .compound_stm  | Semicolon, stm -> .selection_stm  | break, compound_stm -> LBrace .block_item_list RBrace  | break, block_item -> .dec  | -half2-, compound_stm -> .LBrace block_item_list RBrace  | -struct-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Decrement, unary_exp -> .postfix_exp  | Divide, jump_stm -> .-return- exp Semicolon  | -sampler2D-, unary_exp -> .postfix_exp  | GE, dec -> .dec_specifier init_dec_list Semicolon  | Increment, compound_stm -> LBrace .RBrace  | ID, selection_stm -> .if LParen exp RParen stm  | -half3-, block_item -> .stm  | Number, compound_stm -> .LBrace RBrace  | -half4-, dec -> .struct_specifier Semicolon  | -goto-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float2-, stm -> .jump_stm  | RBrace, jump_stm -> .-goto- ID  | -half4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, compound_stm -> .LBrace RBrace  | -goto-, postfix_exp -> .postfix_exp LParen RParen  | Divide, exp_stm -> .exp Semicolon  | while, stm -> .jump_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half2-, primary_exp -> .ID  | Comma, unary_exp -> .Increment unary_exp  | Assign, compound_stm -> .LBrace RBrace  | LBrace, postfix_exp -> .postfix_exp Increment  | Assign, jump_stm -> .break  | Tilde, block_item -> .dec  | -do-, type_specifier -> .-float3-  | ID, compound_stm -> LBrace .block_item_list RBrace  | -char-, jump_stm -> .-continue-  | -half3-, block_item_list -> .block_item  | if, primary_exp -> .Number  | Minus, stm -> .iteration_stm  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -half4-, stm -> .jump_stm  | LParen, exp_stm -> .exp Semicolon  | -goto-, jump_stm -> .-goto- ID  | for, stm -> .iteration_stm  | Decrement, stm -> .jump_stm  | -int-, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, selection_stm -> .if LParen exp RParen stm else stm  | -struct-, stm -> .exp_stm  | -goto-, block_item_list -> .block_item  | -goto-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | ID, unary_exp -> .Increment unary_exp  | VerticalBar, dec -> .struct_specifier Semicolon  | -return-, block_item -> .stm  | -short-, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, block_item -> .stm  | NOT, type_qualifier -> .-uniform-  | -float-, primary_exp -> .ID  | AND, postfix_exp -> .postfix_exp LParen RParen  | Dot, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | String, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, exp_stm -> .Semicolon  | NOT, jump_stm -> .-goto- ID  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | Tilde, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, block_item_list -> .block_item_list block_item  | ID, selection_stm -> .if LParen exp RParen stm  | -fixed3-, dec -> .dec_specifier init_dec_list Semicolon  | -float4-, dec -> .dec_specifier init_dec_list Semicolon  | -float3-, primary_exp -> .Number  | Ampersand, selection_stm -> .if LParen exp RParen stm  | -char-, primary_exp -> .ID  | Ampersand, compound_stm -> LBrace .RBrace  | -uniform-, stm -> .exp_stm  | RBrace, unary_exp -> .Increment unary_exp  | Semicolon, block_item_list -> .block_item_list block_item  | -continue-, block_item -> .dec  | -fixed2-, compound_stm -> .LBrace RBrace  | RBrace, primary_exp -> .LParen exp RParen  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, stm -> .selection_stm  | -long-, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_op -> .NOT  | NOT, unary_op -> .NOT  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -goto-, block_item -> .dec  | Tilde, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | GT, jump_stm -> .-goto- ID  | -continue-, exp_stm -> .Semicolon  | String, postfix_exp -> .postfix_exp Decrement  | Assign, stm -> .iteration_stm  | RBrace, stm -> .iteration_stm  | -struct-, dec -> .dec_specifier init_dec_list Semicolon  | break, jump_stm -> .break  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Increment, compound_stm -> LBrace .block_item_list RBrace  | Plus, iteration_stm -> .while LParen exp RParen stm  | -float4-, exp_stm -> .Semicolon  | -half3-, dec -> .struct_specifier Semicolon  | Increment, unary_exp -> .Decrement unary_exp  | Plus, primary_exp -> .LParen exp RParen  | Plus, type_specifier -> .-sampler2D-  | ID, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, compound_stm -> .LBrace RBrace  | -float-, unary_exp -> .unary_op unary_exp  | LeftShift, block_item_list -> .block_item  | -float3-, dec -> .dec_specifier init_dec_list Semicolon  | -do-, compound_stm -> LBrace .RBrace  | -void-, block_item_list -> .block_item  | Semicolon, block_item -> .stm  | -long-, compound_stm -> LBrace .block_item_list RBrace  | Number, stm -> .iteration_stm  | -sampler2D-, jump_stm -> .-goto- ID  | NOT, jump_stm -> .-continue-  | Decrement, unary_exp -> .postfix_exp  | Plus, type_specifier -> .-float4-  | ID, unary_op -> .Plus  | Tilde, compound_stm -> .LBrace RBrace  | Minus, iteration_stm -> .while LParen exp RParen stm  | -char-, iteration_stm -> .while LParen exp RParen stm  | ID, unary_exp -> .Increment unary_exp  | LE, compound_stm -> LBrace .block_item_list RBrace  | -half4-, jump_stm -> .-return- exp Semicolon  | -uniform-, compound_stm -> LBrace .RBrace  | Plus, jump_stm -> .-return- exp Semicolon  | -char-, stm -> .iteration_stm  | -return-, jump_stm -> .-return- exp Semicolon  | for, dec -> .struct_specifier Semicolon  | -void-, block_item -> .stm  | -void-, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, stm -> .iteration_stm  | if, type_specifier -> .-void-  | ID, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, jump_stm -> .break  | -float2-, primary_exp -> .Number  | LParen, compound_stm -> LBrace .RBrace  | LParen, jump_stm -> .break  | -half3-, typedef_name -> .ID  | ID, compound_stm -> LBrace .block_item_list RBrace  | String, postfix_exp -> .postfix_exp Decrement  | LBrack, stm -> .jump_stm  | -fixed3-, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, type_qualifier -> .-uniform-  | -float3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, compound_stm -> LBrace .RBrace  | else, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -void-, block_item -> .stm  | RBrace, unary_exp -> .postfix_exp  | LeftShift, )
437 <- (368, 'Semicolon') (exp_stm -> Semicolon.  | Minus, exp_stm -> Semicolon.  | if, exp_stm -> Semicolon.  | Plus, exp_stm -> Semicolon.  | -double-, exp_stm -> Semicolon.  | -do-, exp_stm -> Semicolon.  | -short-, exp_stm -> Semicolon.  | break, exp_stm -> Semicolon.  | -float4-, exp_stm -> Semicolon.  | -fixed4-, exp_stm -> Semicolon.  | for, exp_stm -> Semicolon.  | -float3-, exp_stm -> Semicolon.  | -struct-, exp_stm -> Semicolon.  | Decrement, exp_stm -> Semicolon.  | -uniform-, exp_stm -> Semicolon.  | -half2-, exp_stm -> Semicolon.  | String, exp_stm -> Semicolon.  | LBrace, exp_stm -> Semicolon.  | -return-, exp_stm -> Semicolon.  | -fixed2-, exp_stm -> Semicolon.  | -float-, exp_stm -> Semicolon.  | while, exp_stm -> Semicolon.  | ID, exp_stm -> Semicolon.  | -char-, exp_stm -> Semicolon.  | Number, exp_stm -> Semicolon.  | -int-, exp_stm -> Semicolon.  | NOT, exp_stm -> Semicolon.  | -sampler2D-, exp_stm -> Semicolon.  | -half4-, exp_stm -> Semicolon.  | LParen, exp_stm -> Semicolon.  | -void-, exp_stm -> Semicolon.  | Semicolon, exp_stm -> Semicolon.  | RBrace, exp_stm -> Semicolon.  | -float2-, exp_stm -> Semicolon.  | -long-, exp_stm -> Semicolon.  | -goto-, exp_stm -> Semicolon.  | else, exp_stm -> Semicolon.  | -half3-, exp_stm -> Semicolon.  | -fixed3-, exp_stm -> Semicolon.  | -continue-, exp_stm -> Semicolon.  | Tilde, exp_stm -> Semicolon.  | Increment, )
438 <- (368, 'break') (jump_stm -> break.  | -float3-, jump_stm -> break.  | Number, jump_stm -> break.  | -sampler2D-, jump_stm -> break.  | else, jump_stm -> break.  | -uniform-, jump_stm -> break.  | String, jump_stm -> break.  | Decrement, jump_stm -> break.  | RBrace, jump_stm -> break.  | break, jump_stm -> break.  | -char-, jump_stm -> break.  | -half2-, jump_stm -> break.  | for, jump_stm -> break.  | -float2-, jump_stm -> break.  | LBrace, jump_stm -> break.  | -return-, jump_stm -> break.  | -do-, jump_stm -> break.  | if, jump_stm -> break.  | NOT, jump_stm -> break.  | -goto-, jump_stm -> break.  | Plus, jump_stm -> break.  | -void-, jump_stm -> break.  | Minus, jump_stm -> break.  | Tilde, jump_stm -> break.  | -float-, jump_stm -> break.  | LParen, jump_stm -> break.  | -double-, jump_stm -> break.  | -long-, jump_stm -> break.  | -half3-, jump_stm -> break.  | -fixed2-, jump_stm -> break.  | -half4-, jump_stm -> break.  | -float4-, jump_stm -> break.  | ID, jump_stm -> break.  | Increment, jump_stm -> break.  | -fixed3-, jump_stm -> break.  | while, jump_stm -> break.  | -short-, jump_stm -> break.  | -fixed4-, jump_stm -> break.  | -struct-, jump_stm -> break.  | -int-, jump_stm -> break.  | -continue-, jump_stm -> break.  | Semicolon, )
439 <- (368, 'compound_stm') (stm -> compound_stm.  | Plus, stm -> compound_stm.  | -half4-, stm -> compound_stm.  | Number, stm -> compound_stm.  | -float-, stm -> compound_stm.  | LBrace, stm -> compound_stm.  | Tilde, stm -> compound_stm.  | NOT, stm -> compound_stm.  | -float2-, stm -> compound_stm.  | LParen, stm -> compound_stm.  | Decrement, stm -> compound_stm.  | Minus, stm -> compound_stm.  | -float4-, stm -> compound_stm.  | -fixed3-, stm -> compound_stm.  | -char-, stm -> compound_stm.  | -fixed4-, stm -> compound_stm.  | RBrace, stm -> compound_stm.  | -double-, stm -> compound_stm.  | String, stm -> compound_stm.  | -do-, stm -> compound_stm.  | -fixed2-, stm -> compound_stm.  | -return-, stm -> compound_stm.  | -void-, stm -> compound_stm.  | -int-, stm -> compound_stm.  | -long-, stm -> compound_stm.  | if, stm -> compound_stm.  | Increment, stm -> compound_stm.  | -half2-, stm -> compound_stm.  | -uniform-, stm -> compound_stm.  | -sampler2D-, stm -> compound_stm.  | -continue-, stm -> compound_stm.  | while, stm -> compound_stm.  | -half3-, stm -> compound_stm.  | ID, stm -> compound_stm.  | -short-, stm -> compound_stm.  | Semicolon, stm -> compound_stm.  | else, stm -> compound_stm.  | -struct-, stm -> compound_stm.  | for, stm -> compound_stm.  | -goto-, stm -> compound_stm.  | -float3-, stm -> compound_stm.  | break, )
440 <- (368, 'exp') (exp_stm -> exp .Semicolon  | -fixed2-, exp_stm -> exp .Semicolon  | -short-, exp_stm -> exp .Semicolon  | -struct-, exp_stm -> exp .Semicolon  | -float2-, exp_stm -> exp .Semicolon  | -char-, exp_stm -> exp .Semicolon  | -goto-, exp_stm -> exp .Semicolon  | -return-, exp_stm -> exp .Semicolon  | -long-, exp_stm -> exp .Semicolon  | Decrement, exp_stm -> exp .Semicolon  | -void-, exp_stm -> exp .Semicolon  | -int-, exp_stm -> exp .Semicolon  | -double-, exp_stm -> exp .Semicolon  | Semicolon, exp_stm -> exp .Semicolon  | ID, exp_stm -> exp .Semicolon  | Number, exp_stm -> exp .Semicolon  | while, exp_stm -> exp .Semicolon  | LParen, exp -> exp .Comma assignment_exp  | Comma, exp_stm -> exp .Semicolon  | -uniform-, exp_stm -> exp .Semicolon  | -continue-, exp_stm -> exp .Semicolon  | -do-, exp_stm -> exp .Semicolon  | -fixed3-, exp_stm -> exp .Semicolon  | NOT, exp_stm -> exp .Semicolon  | -sampler2D-, exp_stm -> exp .Semicolon  | -float3-, exp_stm -> exp .Semicolon  | else, exp_stm -> exp .Semicolon  | if, exp -> exp .Comma assignment_exp  | Semicolon, exp_stm -> exp .Semicolon  | -float-, exp_stm -> exp .Semicolon  | Minus, exp_stm -> exp .Semicolon  | -half3-, exp_stm -> exp .Semicolon  | Plus, exp_stm -> exp .Semicolon  | -fixed4-, exp_stm -> exp .Semicolon  | RBrace, exp_stm -> exp .Semicolon  | String, exp_stm -> exp .Semicolon  | LBrace, exp_stm -> exp .Semicolon  | Tilde, exp_stm -> exp .Semicolon  | for, exp_stm -> exp .Semicolon  | -half4-, exp_stm -> exp .Semicolon  | Increment, exp_stm -> exp .Semicolon  | break, exp_stm -> exp .Semicolon  | -half2-, exp_stm -> exp .Semicolon  | -float4-, )
441 <- (368, 'exp_stm') (stm -> exp_stm.  | RBrace, stm -> exp_stm.  | -float2-, stm -> exp_stm.  | -goto-, stm -> exp_stm.  | -float-, stm -> exp_stm.  | ID, stm -> exp_stm.  | Decrement, stm -> exp_stm.  | Semicolon, stm -> exp_stm.  | Plus, stm -> exp_stm.  | Minus, stm -> exp_stm.  | Tilde, stm -> exp_stm.  | Increment, stm -> exp_stm.  | Number, stm -> exp_stm.  | -uniform-, stm -> exp_stm.  | for, stm -> exp_stm.  | while, stm -> exp_stm.  | -return-, stm -> exp_stm.  | -half4-, stm -> exp_stm.  | -fixed3-, stm -> exp_stm.  | -float4-, stm -> exp_stm.  | -half3-, stm -> exp_stm.  | -void-, stm -> exp_stm.  | LBrace, stm -> exp_stm.  | -fixed4-, stm -> exp_stm.  | -do-, stm -> exp_stm.  | -float3-, stm -> exp_stm.  | -int-, stm -> exp_stm.  | -sampler2D-, stm -> exp_stm.  | -short-, stm -> exp_stm.  | -half2-, stm -> exp_stm.  | break, stm -> exp_stm.  | String, stm -> exp_stm.  | -double-, stm -> exp_stm.  | else, stm -> exp_stm.  | -continue-, stm -> exp_stm.  | -fixed2-, stm -> exp_stm.  | if, stm -> exp_stm.  | NOT, stm -> exp_stm.  | LParen, stm -> exp_stm.  | -long-, stm -> exp_stm.  | -char-, stm -> exp_stm.  | -struct-, )
442 <- (368, 'for') (iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -char-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -goto-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | LParen, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -float4-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | Plus, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed4-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | NOT, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -float2-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -struct-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -sampler2D-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | Number, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -float3-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -long-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | RBrace, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -return-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | if, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | Semicolon, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | Minus, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -double-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -half3-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | for, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -short-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed2-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | String, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -continue-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -void-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed3-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | LBrace, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | ID, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | while, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -half2-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | Increment, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -half4-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | Tilde, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -float-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | break, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -do-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | else, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | Decrement, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -uniform-, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | -int-, )
443 <- (368, 'if') (selection_stm -> if .LParen exp RParen stm  | -half2-, selection_stm -> if .LParen exp RParen stm  | NOT, selection_stm -> if .LParen exp RParen stm  | Increment, selection_stm -> if .LParen exp RParen stm  | -fixed3-, selection_stm -> if .LParen exp RParen stm else stm  | -return-, selection_stm -> if .LParen exp RParen stm else stm  | -int-, selection_stm -> if .LParen exp RParen stm  | break, selection_stm -> if .LParen exp RParen stm  | -short-, selection_stm -> if .LParen exp RParen stm  | RBrace, selection_stm -> if .LParen exp RParen stm  | -goto-, selection_stm -> if .LParen exp RParen stm  | LParen, selection_stm -> if .LParen exp RParen stm  | -continue-, selection_stm -> if .LParen exp RParen stm else stm  | while, selection_stm -> if .LParen exp RParen stm  | Semicolon, selection_stm -> if .LParen exp RParen stm  | Number, selection_stm -> if .LParen exp RParen stm else stm  | LParen, selection_stm -> if .LParen exp RParen stm else stm  | Minus, selection_stm -> if .LParen exp RParen stm  | Tilde, selection_stm -> if .LParen exp RParen stm else stm  | if, selection_stm -> if .LParen exp RParen stm else stm  | RBrace, selection_stm -> if .LParen exp RParen stm  | -float-, selection_stm -> if .LParen exp RParen stm else stm  | else, selection_stm -> if .LParen exp RParen stm  | for, selection_stm -> if .LParen exp RParen stm  | else, selection_stm -> if .LParen exp RParen stm  | String, selection_stm -> if .LParen exp RParen stm else stm  | NOT, selection_stm -> if .LParen exp RParen stm  | if, selection_stm -> if .LParen exp RParen stm else stm  | -struct-, selection_stm -> if .LParen exp RParen stm else stm  | ID, selection_stm -> if .LParen exp RParen stm  | -half4-, selection_stm -> if .LParen exp RParen stm else stm  | -continue-, selection_stm -> if .LParen exp RParen stm  | -void-, selection_stm -> if .LParen exp RParen stm else stm  | -float4-, selection_stm -> if .LParen exp RParen stm else stm  | -uniform-, selection_stm -> if .LParen exp RParen stm  | -float4-, selection_stm -> if .LParen exp RParen stm else stm  | -fixed4-, selection_stm -> if .LParen exp RParen stm else stm  | -float2-, selection_stm -> if .LParen exp RParen stm else stm  | -fixed3-, selection_stm -> if .LParen exp RParen stm else stm  | -fixed2-, selection_stm -> if .LParen exp RParen stm else stm  | Plus, selection_stm -> if .LParen exp RParen stm else stm  | -float-, selection_stm -> if .LParen exp RParen stm  | -fixed2-, selection_stm -> if .LParen exp RParen stm else stm  | Decrement, selection_stm -> if .LParen exp RParen stm else stm  | Semicolon, selection_stm -> if .LParen exp RParen stm else stm  | -sampler2D-, selection_stm -> if .LParen exp RParen stm  | -uniform-, selection_stm -> if .LParen exp RParen stm  | -long-, selection_stm -> if .LParen exp RParen stm else stm  | Number, selection_stm -> if .LParen exp RParen stm else stm  | -half2-, selection_stm -> if .LParen exp RParen stm else stm  | break, selection_stm -> if .LParen exp RParen stm  | Minus, selection_stm -> if .LParen exp RParen stm else stm  | String, selection_stm -> if .LParen exp RParen stm else stm  | LBrace, selection_stm -> if .LParen exp RParen stm  | -float2-, selection_stm -> if .LParen exp RParen stm else stm  | -half3-, selection_stm -> if .LParen exp RParen stm else stm  | Increment, selection_stm -> if .LParen exp RParen stm  | -int-, selection_stm -> if .LParen exp RParen stm  | -char-, selection_stm -> if .LParen exp RParen stm  | LBrace, selection_stm -> if .LParen exp RParen stm else stm  | -long-, selection_stm -> if .LParen exp RParen stm else stm  | -double-, selection_stm -> if .LParen exp RParen stm  | Decrement, selection_stm -> if .LParen exp RParen stm  | ID, selection_stm -> if .LParen exp RParen stm else stm  | -goto-, selection_stm -> if .LParen exp RParen stm  | -half3-, selection_stm -> if .LParen exp RParen stm  | while, selection_stm -> if .LParen exp RParen stm else stm  | -float3-, selection_stm -> if .LParen exp RParen stm else stm  | -char-, selection_stm -> if .LParen exp RParen stm  | -float3-, selection_stm -> if .LParen exp RParen stm  | -fixed4-, selection_stm -> if .LParen exp RParen stm else stm  | -half4-, selection_stm -> if .LParen exp RParen stm  | -do-, selection_stm -> if .LParen exp RParen stm else stm  | Tilde, selection_stm -> if .LParen exp RParen stm else stm  | -void-, selection_stm -> if .LParen exp RParen stm else stm  | -do-, selection_stm -> if .LParen exp RParen stm else stm  | -short-, selection_stm -> if .LParen exp RParen stm  | -double-, selection_stm -> if .LParen exp RParen stm  | -struct-, selection_stm -> if .LParen exp RParen stm else stm  | for, selection_stm -> if .LParen exp RParen stm  | -sampler2D-, selection_stm -> if .LParen exp RParen stm  | -return-, selection_stm -> if .LParen exp RParen stm  | Plus, )
444 <- (368, 'iteration_stm') (stm -> iteration_stm.  | -float2-, stm -> iteration_stm.  | -float-, stm -> iteration_stm.  | Semicolon, stm -> iteration_stm.  | -char-, stm -> iteration_stm.  | -float4-, stm -> iteration_stm.  | -fixed4-, stm -> iteration_stm.  | else, stm -> iteration_stm.  | break, stm -> iteration_stm.  | -short-, stm -> iteration_stm.  | Increment, stm -> iteration_stm.  | -half3-, stm -> iteration_stm.  | if, stm -> iteration_stm.  | -return-, stm -> iteration_stm.  | RBrace, stm -> iteration_stm.  | LParen, stm -> iteration_stm.  | -half2-, stm -> iteration_stm.  | -fixed2-, stm -> iteration_stm.  | for, stm -> iteration_stm.  | -void-, stm -> iteration_stm.  | String, stm -> iteration_stm.  | -half4-, stm -> iteration_stm.  | -sampler2D-, stm -> iteration_stm.  | LBrace, stm -> iteration_stm.  | -do-, stm -> iteration_stm.  | while, stm -> iteration_stm.  | -long-, stm -> iteration_stm.  | -fixed3-, stm -> iteration_stm.  | Minus, stm -> iteration_stm.  | Tilde, stm -> iteration_stm.  | -float3-, stm -> iteration_stm.  | Plus, stm -> iteration_stm.  | Decrement, stm -> iteration_stm.  | -uniform-, stm -> iteration_stm.  | -int-, stm -> iteration_stm.  | -double-, stm -> iteration_stm.  | -struct-, stm -> iteration_stm.  | ID, stm -> iteration_stm.  | -goto-, stm -> iteration_stm.  | Number, stm -> iteration_stm.  | NOT, stm -> iteration_stm.  | -continue-, )
445 <- (368, 'jump_stm') (stm -> jump_stm.  | while, stm -> jump_stm.  | -do-, stm -> jump_stm.  | -fixed3-, stm -> jump_stm.  | LBrace, stm -> jump_stm.  | LParen, stm -> jump_stm.  | else, stm -> jump_stm.  | break, stm -> jump_stm.  | NOT, stm -> jump_stm.  | Decrement, stm -> jump_stm.  | -goto-, stm -> jump_stm.  | Minus, stm -> jump_stm.  | for, stm -> jump_stm.  | -void-, stm -> jump_stm.  | Tilde, stm -> jump_stm.  | -half2-, stm -> jump_stm.  | -return-, stm -> jump_stm.  | if, stm -> jump_stm.  | -int-, stm -> jump_stm.  | -float2-, stm -> jump_stm.  | -continue-, stm -> jump_stm.  | -float4-, stm -> jump_stm.  | Number, stm -> jump_stm.  | -double-, stm -> jump_stm.  | -struct-, stm -> jump_stm.  | -fixed4-, stm -> jump_stm.  | -char-, stm -> jump_stm.  | -half4-, stm -> jump_stm.  | -float-, stm -> jump_stm.  | ID, stm -> jump_stm.  | -short-, stm -> jump_stm.  | Plus, stm -> jump_stm.  | -half3-, stm -> jump_stm.  | RBrace, stm -> jump_stm.  | Semicolon, stm -> jump_stm.  | -sampler2D-, stm -> jump_stm.  | String, stm -> jump_stm.  | -fixed2-, stm -> jump_stm.  | -uniform-, stm -> jump_stm.  | -long-, stm -> jump_stm.  | Increment, stm -> jump_stm.  | -float3-, )
446 <- (368, 'selection_stm') (stm -> selection_stm.  | -uniform-, stm -> selection_stm.  | -half4-, stm -> selection_stm.  | Minus, stm -> selection_stm.  | -goto-, stm -> selection_stm.  | else, stm -> selection_stm.  | -float2-, stm -> selection_stm.  | -float4-, stm -> selection_stm.  | if, stm -> selection_stm.  | -do-, stm -> selection_stm.  | String, stm -> selection_stm.  | Plus, stm -> selection_stm.  | -return-, stm -> selection_stm.  | for, stm -> selection_stm.  | Increment, stm -> selection_stm.  | while, stm -> selection_stm.  | -float-, stm -> selection_stm.  | -sampler2D-, stm -> selection_stm.  | -half2-, stm -> selection_stm.  | -fixed4-, stm -> selection_stm.  | ID, stm -> selection_stm.  | Tilde, stm -> selection_stm.  | LBrace, stm -> selection_stm.  | -char-, stm -> selection_stm.  | Semicolon, stm -> selection_stm.  | -long-, stm -> selection_stm.  | -fixed2-, stm -> selection_stm.  | NOT, stm -> selection_stm.  | -short-, stm -> selection_stm.  | -void-, stm -> selection_stm.  | -int-, stm -> selection_stm.  | -half3-, stm -> selection_stm.  | LParen, stm -> selection_stm.  | -fixed3-, stm -> selection_stm.  | RBrace, stm -> selection_stm.  | -struct-, stm -> selection_stm.  | -continue-, stm -> selection_stm.  | -double-, stm -> selection_stm.  | Number, stm -> selection_stm.  | Decrement, stm -> selection_stm.  | -float3-, stm -> selection_stm.  | break, )
447 <- (368, 'stm') (selection_stm -> if LParen exp RParen stm.  | -long-, selection_stm -> if LParen exp RParen stm.  | -short-, selection_stm -> if LParen exp RParen stm.  | -continue-, selection_stm -> if LParen exp RParen stm .else stm  | Semicolon, selection_stm -> if LParen exp RParen stm .else stm  | -struct-, selection_stm -> if LParen exp RParen stm .else stm  | -float-, selection_stm -> if LParen exp RParen stm.  | ID, selection_stm -> if LParen exp RParen stm.  | while, selection_stm -> if LParen exp RParen stm .else stm  | -half3-, selection_stm -> if LParen exp RParen stm.  | Minus, selection_stm -> if LParen exp RParen stm .else stm  | -return-, selection_stm -> if LParen exp RParen stm .else stm  | -sampler2D-, selection_stm -> if LParen exp RParen stm .else stm  | String, selection_stm -> if LParen exp RParen stm .else stm  | ID, selection_stm -> if LParen exp RParen stm.  | -float-, selection_stm -> if LParen exp RParen stm.  | -float4-, selection_stm -> if LParen exp RParen stm.  | -half4-, selection_stm -> if LParen exp RParen stm .else stm  | -short-, selection_stm -> if LParen exp RParen stm.  | LParen, selection_stm -> if LParen exp RParen stm.  | -half2-, selection_stm -> if LParen exp RParen stm.  | RBrace, selection_stm -> if LParen exp RParen stm .else stm  | -do-, selection_stm -> if LParen exp RParen stm .else stm  | -long-, selection_stm -> if LParen exp RParen stm.  | -void-, selection_stm -> if LParen exp RParen stm.  | -uniform-, selection_stm -> if LParen exp RParen stm.  | break, selection_stm -> if LParen exp RParen stm.  | -goto-, selection_stm -> if LParen exp RParen stm .else stm  | Plus, selection_stm -> if LParen exp RParen stm.  | for, selection_stm -> if LParen exp RParen stm .else stm  | -float4-, selection_stm -> if LParen exp RParen stm .else stm  | -half4-, selection_stm -> if LParen exp RParen stm.  | -fixed4-, selection_stm -> if LParen exp RParen stm.  | Tilde, selection_stm -> if LParen exp RParen stm.  | Decrement, selection_stm -> if LParen exp RParen stm.  | LBrace, selection_stm -> if LParen exp RParen stm .else stm  | LBrace, selection_stm -> if LParen exp RParen stm .else stm  | -fixed4-, selection_stm -> if LParen exp RParen stm.  | if, selection_stm -> if LParen exp RParen stm.  | -int-, selection_stm -> if LParen exp RParen stm .else stm  | -float2-, selection_stm -> if LParen exp RParen stm .else stm  | -uniform-, selection_stm -> if LParen exp RParen stm .else stm  | -int-, selection_stm -> if LParen exp RParen stm .else stm  | while, selection_stm -> if LParen exp RParen stm .else stm  | if, selection_stm -> if LParen exp RParen stm .else stm  | -fixed2-, selection_stm -> if LParen exp RParen stm .else stm  | Increment, selection_stm -> if LParen exp RParen stm.  | String, selection_stm -> if LParen exp RParen stm.  | -char-, selection_stm -> if LParen exp RParen stm .else stm  | break, selection_stm -> if LParen exp RParen stm.  | -return-, selection_stm -> if LParen exp RParen stm .else stm  | Tilde, selection_stm -> if LParen exp RParen stm .else stm  | RBrace, selection_stm -> if LParen exp RParen stm.  | -fixed2-, selection_stm -> if LParen exp RParen stm.  | -double-, selection_stm -> if LParen exp RParen stm .else stm  | -goto-, selection_stm -> if LParen exp RParen stm.  | -float2-, selection_stm -> if LParen exp RParen stm.  | Semicolon, selection_stm -> if LParen exp RParen stm .else stm  | for, selection_stm -> if LParen exp RParen stm .else stm  | Decrement, selection_stm -> if LParen exp RParen stm.  | -struct-, selection_stm -> if LParen exp RParen stm.  | -half3-, selection_stm -> if LParen exp RParen stm.  | Plus, selection_stm -> if LParen exp RParen stm .else stm  | LParen, selection_stm -> if LParen exp RParen stm.  | -float3-, selection_stm -> if LParen exp RParen stm .else stm  | -double-, selection_stm -> if LParen exp RParen stm .else stm  | -char-, selection_stm -> if LParen exp RParen stm .else stm  | -float3-, selection_stm -> if LParen exp RParen stm.  | Number, selection_stm -> if LParen exp RParen stm.  | -do-, selection_stm -> if LParen exp RParen stm .else stm  | Number, selection_stm -> if LParen exp RParen stm.  | NOT, selection_stm -> if LParen exp RParen stm.  | Increment, selection_stm -> if LParen exp RParen stm .else stm  | -fixed3-, selection_stm -> if LParen exp RParen stm .else stm  | -void-, selection_stm -> if LParen exp RParen stm .else stm  | NOT, selection_stm -> if LParen exp RParen stm .else stm  | -continue-, selection_stm -> if LParen exp RParen stm.  | -sampler2D-, selection_stm -> if LParen exp RParen stm.  | -fixed3-, selection_stm -> if LParen exp RParen stm .else stm  | Minus, selection_stm -> if LParen exp RParen stm .else stm  | -half2-, )
448 <- (368, 'while') (iteration_stm -> while .LParen exp RParen stm  | -half2-, iteration_stm -> while .LParen exp RParen stm  | -fixed3-, iteration_stm -> while .LParen exp RParen stm  | -void-, iteration_stm -> while .LParen exp RParen stm  | -float2-, iteration_stm -> while .LParen exp RParen stm  | -do-, iteration_stm -> while .LParen exp RParen stm  | -float3-, iteration_stm -> while .LParen exp RParen stm  | -double-, iteration_stm -> while .LParen exp RParen stm  | else, iteration_stm -> while .LParen exp RParen stm  | -continue-, iteration_stm -> while .LParen exp RParen stm  | -return-, iteration_stm -> while .LParen exp RParen stm  | Plus, iteration_stm -> while .LParen exp RParen stm  | if, iteration_stm -> while .LParen exp RParen stm  | -fixed4-, iteration_stm -> while .LParen exp RParen stm  | -int-, iteration_stm -> while .LParen exp RParen stm  | -struct-, iteration_stm -> while .LParen exp RParen stm  | Increment, iteration_stm -> while .LParen exp RParen stm  | -half4-, iteration_stm -> while .LParen exp RParen stm  | -half3-, iteration_stm -> while .LParen exp RParen stm  | String, iteration_stm -> while .LParen exp RParen stm  | Tilde, iteration_stm -> while .LParen exp RParen stm  | ID, iteration_stm -> while .LParen exp RParen stm  | RBrace, iteration_stm -> while .LParen exp RParen stm  | -goto-, iteration_stm -> while .LParen exp RParen stm  | -float4-, iteration_stm -> while .LParen exp RParen stm  | Decrement, iteration_stm -> while .LParen exp RParen stm  | Semicolon, iteration_stm -> while .LParen exp RParen stm  | -long-, iteration_stm -> while .LParen exp RParen stm  | break, iteration_stm -> while .LParen exp RParen stm  | -float-, iteration_stm -> while .LParen exp RParen stm  | -fixed2-, iteration_stm -> while .LParen exp RParen stm  | -sampler2D-, iteration_stm -> while .LParen exp RParen stm  | NOT, iteration_stm -> while .LParen exp RParen stm  | LBrace, iteration_stm -> while .LParen exp RParen stm  | -uniform-, iteration_stm -> while .LParen exp RParen stm  | -char-, iteration_stm -> while .LParen exp RParen stm  | -short-, iteration_stm -> while .LParen exp RParen stm  | LParen, iteration_stm -> while .LParen exp RParen stm  | Number, iteration_stm -> while .LParen exp RParen stm  | Minus, iteration_stm -> while .LParen exp RParen stm  | while, iteration_stm -> while .LParen exp RParen stm  | for, )
449 <- (371, 'RParen') (primary_exp -> LParen exp RParen.  | Percent, primary_exp -> LParen exp RParen.  | Minus, primary_exp -> LParen exp RParen.  | Increment, primary_exp -> LParen exp RParen.  | Question, primary_exp -> LParen exp RParen.  | LT, primary_exp -> LParen exp RParen.  | GT, primary_exp -> LParen exp RParen.  | AND, primary_exp -> LParen exp RParen.  | Caret, primary_exp -> LParen exp RParen.  | Decrement, primary_exp -> LParen exp RParen.  | NEQ, primary_exp -> LParen exp RParen.  | Divide, primary_exp -> LParen exp RParen.  | Dot, primary_exp -> LParen exp RParen.  | LParen, primary_exp -> LParen exp RParen.  | GE, primary_exp -> LParen exp RParen.  | VerticalBar, primary_exp -> LParen exp RParen.  | LBrack, primary_exp -> LParen exp RParen.  | OR, primary_exp -> LParen exp RParen.  | EQ, primary_exp -> LParen exp RParen.  | LE, primary_exp -> LParen exp RParen.  | Comma, primary_exp -> LParen exp RParen.  | Times, primary_exp -> LParen exp RParen.  | Ampersand, primary_exp -> LParen exp RParen.  | RBrack, primary_exp -> LParen exp RParen.  | RightShift, primary_exp -> LParen exp RParen.  | LeftShift, primary_exp -> LParen exp RParen.  | Assign, primary_exp -> LParen exp RParen.  | Plus, )
450 <- (372, 'exp') (conditional_exp -> binary_exp Question exp .Colon conditional_exp  | Comma, conditional_exp -> binary_exp Question exp .Colon conditional_exp  | RBrack, exp -> exp .Comma assignment_exp  | Comma, exp -> exp .Comma assignment_exp  | Colon, )
451 <- (373, 'Decrement') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .unary_op unary_exp  | Ampersand, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, unary_exp -> Decrement .unary_exp  | Divide, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | Caret, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_exp -> Decrement .unary_exp  | LE, unary_op -> .NOT  | Tilde, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_exp -> Decrement .unary_exp  | VerticalBar, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_exp -> Decrement .unary_exp  | OR, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RBrack, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, primary_exp -> .ID  | RBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, unary_exp -> Decrement .unary_exp  | EQ, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .ID  | VerticalBar, primary_exp -> .Number  | RBrack, unary_exp -> Decrement .unary_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> Decrement .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, unary_exp -> .postfix_exp  | RBrack, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Increment  | Question, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, primary_exp -> .String  | RightShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, unary_exp -> Decrement .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | Comma, postfix_exp -> .postfix_exp Dot ID  | RBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, primary_exp -> .LParen exp RParen  | LT, primary_exp -> .ID  | LeftShift, unary_exp -> Decrement .unary_exp  | LT, primary_exp -> .LParen exp RParen  | GT, unary_exp -> .Decrement unary_exp  | RBrack, postfix_exp -> .primary_exp  | Increment, postfix_exp -> .postfix_exp LParen RParen  | RBrack, primary_exp -> .LParen exp RParen  | GE, unary_exp -> .postfix_exp  | GT, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_op -> .Plus  | Minus, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, unary_exp -> Decrement .unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> .Increment unary_exp  | RBrack, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> Decrement .unary_exp  | GE, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | RBrack, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, unary_op -> .Minus  | LParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, postfix_exp -> .postfix_exp Dot ID  | Comma, unary_exp -> .postfix_exp  | VerticalBar, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .unary_op unary_exp  | RBrack, unary_exp -> Decrement .unary_exp  | Question, unary_exp -> Decrement .unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, primary_exp -> .Number  | Plus, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> Decrement .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .ID  | Comma, primary_exp -> .ID  | LBrack, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Times, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | Percent, unary_exp -> Decrement .unary_exp  | AND, primary_exp -> .String  | RBrack, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, unary_exp -> Decrement .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | LeftShift, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | RBrack, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_op -> .NOT  | Plus, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, primary_exp -> .String  | Caret, unary_op -> .Tilde  | ID, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | RBrack, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, unary_exp -> Decrement .unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Increment  | RBrack, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, unary_exp -> Decrement .unary_exp  | Times, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .primary_exp  | RBrack, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Decrement, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | LBrack, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, unary_exp -> Decrement .unary_exp  | RightShift, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> Decrement .unary_exp  | RBrack, unary_exp -> Decrement .unary_exp  | GT, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, unary_exp -> .postfix_exp  | LeftShift, )
452 <- (373, 'ID') (primary_exp -> ID.  | Minus, primary_exp -> ID.  | NEQ, primary_exp -> ID.  | LBrack, primary_exp -> ID.  | Decrement, primary_exp -> ID.  | LParen, primary_exp -> ID.  | Comma, primary_exp -> ID.  | Times, primary_exp -> ID.  | Percent, primary_exp -> ID.  | RightShift, primary_exp -> ID.  | Question, primary_exp -> ID.  | LE, primary_exp -> ID.  | GE, primary_exp -> ID.  | LT, primary_exp -> ID.  | VerticalBar, primary_exp -> ID.  | EQ, primary_exp -> ID.  | GT, primary_exp -> ID.  | RBrack, primary_exp -> ID.  | Increment, primary_exp -> ID.  | Divide, primary_exp -> ID.  | AND, primary_exp -> ID.  | OR, primary_exp -> ID.  | Ampersand, primary_exp -> ID.  | Caret, primary_exp -> ID.  | LeftShift, primary_exp -> ID.  | Plus, primary_exp -> ID.  | Dot, )
453 <- (373, 'Increment') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, unary_exp -> Increment .unary_exp  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .unary_op unary_exp  | Ampersand, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_exp -> Increment .unary_exp  | Minus, unary_op -> .NOT  | Tilde, unary_exp -> Increment .unary_exp  | Question, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, postfix_exp -> .postfix_exp LParen RParen  | LT, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RBrack, unary_op -> .Plus  | ID, unary_exp -> Increment .unary_exp  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, unary_exp -> Increment .unary_exp  | EQ, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, unary_exp -> Increment .unary_exp  | Comma, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, primary_exp -> .ID  | RBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, unary_exp -> Increment .unary_exp  | Plus, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, unary_exp -> Increment .unary_exp  | RBrack, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Percent, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .String  | Dot, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, postfix_exp -> .postfix_exp Decrement  | RBrack, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, unary_exp -> .postfix_exp  | RBrack, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Increment  | Question, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, primary_exp -> .String  | RightShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen RParen  | Comma, postfix_exp -> .postfix_exp Dot ID  | RBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, primary_exp -> .ID  | LeftShift, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Decrement unary_exp  | Caret, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, unary_exp -> .postfix_exp  | GT, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, primary_exp -> .Number  | Plus, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> Increment .unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_exp -> Increment .unary_exp  | NEQ, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, unary_exp -> Increment .unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> Increment .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> .Decrement unary_exp  | RBrack, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .postfix_exp LParen RParen  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | RBrack, primary_exp -> .String  | Question, primary_exp -> .Number  | Percent, primary_exp -> .LParen exp RParen  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, primary_exp -> .String  | AND, postfix_exp -> .postfix_exp LParen RParen  | RBrack, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> Increment .unary_exp  | AND, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp Decrement  | LT, postfix_exp -> .postfix_exp Dot ID  | Comma, unary_exp -> Increment .unary_exp  | LE, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, unary_exp -> Increment .unary_exp  | RightShift, primary_exp -> .ID  | Caret, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen RParen  | LE, primary_exp -> .String  | LParen, postfix_exp -> .postfix_exp Increment  | Minus, unary_exp -> .Increment unary_exp  | AND, unary_exp -> Increment .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, unary_exp -> Increment .unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .unary_op unary_exp  | RBrack, primary_exp -> .LParen exp RParen  | Minus, postfix_exp -> .primary_exp  | GT, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp Increment  | Percent, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, postfix_exp -> .primary_exp  | Plus, postfix_exp -> .primary_exp  | Comma, primary_exp -> .ID  | Comma, primary_exp -> .ID  | LBrack, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .unary_op unary_exp  | EQ, unary_exp -> Increment .unary_exp  | LT, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Times, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | Percent, primary_exp -> .String  | RBrack, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> Increment .unary_exp  | Divide, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, unary_exp -> .Decrement unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_op -> .NOT  | Plus, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, primary_exp -> .ID  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Dot, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, primary_exp -> .String  | Caret, unary_op -> .Tilde  | ID, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | RBrack, primary_exp -> .Number  | LE, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> .Number  | RBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Increment  | RBrack, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .primary_exp  | RBrack, primary_exp -> .ID  | Increment, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, unary_exp -> .unary_op unary_exp  | Comma, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Decrement, unary_exp -> Increment .unary_exp  | GT, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LBrack, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, unary_exp -> .Increment unary_exp  | RBrack, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_exp -> Increment .unary_exp  | Times, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, unary_exp -> .postfix_exp  | LeftShift, )
454 <- (373, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, primary_exp -> LParen .exp RParen  | Dot, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, primary_exp -> LParen .exp RParen  | LBrack, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, postfix_exp -> .postfix_exp LParen RParen  | RParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .Increment unary_exp  | Ampersand, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, postfix_exp -> .primary_exp  | RParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, primary_exp -> LParen .exp RParen  | Decrement, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> LParen .exp RParen  | RBrack, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> LParen .exp RParen  | GT, primary_exp -> .String  | LE, postfix_exp -> .primary_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, primary_exp -> LParen .exp RParen  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, primary_exp -> LParen .exp RParen  | Plus, binary_exp -> .unary_exp  | LE, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, assignment_exp -> .conditional_exp  | RParen, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> LParen .exp RParen  | GE, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, primary_exp -> LParen .exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | Percent, exp -> .assignment_exp  | RParen, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> LParen .exp RParen  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, unary_exp -> .Decrement unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, primary_exp -> LParen .exp RParen  | Ampersand, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .Number  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, primary_exp -> LParen .exp RParen  | Increment, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | LParen, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Divide, unary_op -> .Minus  | String, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .binary_exp binary_op unary_exp  | Percent, primary_exp -> LParen .exp RParen  | Divide, postfix_exp -> .primary_exp  | Ampersand, postfix_exp -> .primary_exp  | Increment, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, primary_exp -> LParen .exp RParen  | Comma, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, primary_exp -> .LParen exp RParen  | GE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, primary_exp -> LParen .exp RParen  | Minus, exp -> .exp Comma assignment_exp  | RParen, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, primary_exp -> LParen .exp RParen  | NEQ, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, primary_exp -> LParen .exp RParen  | Caret, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, primary_exp -> LParen .exp RParen  | OR, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> LParen .exp RParen  | LeftShift, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, postfix_exp -> .postfix_exp Increment  | Percent, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Decrement  | RParen, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .Decrement unary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | RParen, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, primary_exp -> LParen .exp RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .postfix_exp  | RParen, primary_exp -> LParen .exp RParen  | LE, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, primary_exp -> LParen .exp RParen  | Times, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, primary_exp -> LParen .exp RParen  | EQ, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> LParen .exp RParen  | RightShift, primary_exp -> LParen .exp RParen  | Percent, primary_exp -> .ID  | Decrement, primary_exp -> LParen .exp RParen  | VerticalBar, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .unary_op unary_exp  | Assign, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .postfix_exp  | Comma, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, primary_exp -> .Number  | GE, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .String  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
455 <- (373, 'Number') (primary_exp -> Number.  | Increment, primary_exp -> Number.  | Question, primary_exp -> Number.  | Divide, primary_exp -> Number.  | Ampersand, primary_exp -> Number.  | Plus, primary_exp -> Number.  | LE, primary_exp -> Number.  | Decrement, primary_exp -> Number.  | Caret, primary_exp -> Number.  | Percent, primary_exp -> Number.  | VerticalBar, primary_exp -> Number.  | EQ, primary_exp -> Number.  | Comma, primary_exp -> Number.  | GT, primary_exp -> Number.  | AND, primary_exp -> Number.  | GE, primary_exp -> Number.  | RBrack, primary_exp -> Number.  | OR, primary_exp -> Number.  | Minus, primary_exp -> Number.  | LBrack, primary_exp -> Number.  | RightShift, primary_exp -> Number.  | LParen, primary_exp -> Number.  | Dot, primary_exp -> Number.  | LT, primary_exp -> Number.  | NEQ, primary_exp -> Number.  | Times, primary_exp -> Number.  | LeftShift, )
456 <- (373, 'String') (primary_exp -> String.  | Plus, primary_exp -> String.  | Ampersand, primary_exp -> String.  | AND, primary_exp -> String.  | Comma, primary_exp -> String.  | Caret, primary_exp -> String.  | LeftShift, primary_exp -> String.  | Dot, primary_exp -> String.  | LE, primary_exp -> String.  | EQ, primary_exp -> String.  | RightShift, primary_exp -> String.  | Increment, primary_exp -> String.  | LParen, primary_exp -> String.  | Minus, primary_exp -> String.  | Question, primary_exp -> String.  | GE, primary_exp -> String.  | GT, primary_exp -> String.  | OR, primary_exp -> String.  | Divide, primary_exp -> String.  | VerticalBar, primary_exp -> String.  | NEQ, primary_exp -> String.  | LBrack, primary_exp -> String.  | Percent, primary_exp -> String.  | LT, primary_exp -> String.  | Times, primary_exp -> String.  | Decrement, primary_exp -> String.  | RBrack, )
457 <- (373, 'postfix_exp') (unary_exp -> postfix_exp.  | Ampersand, postfix_exp -> postfix_exp .Decrement  | GT, postfix_exp -> postfix_exp .LBrack exp RBrack  | Plus, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | OR, postfix_exp -> postfix_exp .LParen RParen  | OR, postfix_exp -> postfix_exp .Increment  | Divide, postfix_exp -> postfix_exp .LParen RParen  | EQ, postfix_exp -> postfix_exp .LParen RParen  | Caret, postfix_exp -> postfix_exp .Increment  | VerticalBar, unary_exp -> postfix_exp.  | Comma, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Comma, postfix_exp -> postfix_exp .Increment  | LeftShift, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Percent, postfix_exp -> postfix_exp .Dot ID  | Dot, postfix_exp -> postfix_exp .Increment  | Percent, postfix_exp -> postfix_exp .Dot ID  | GT, postfix_exp -> postfix_exp .LParen RParen  | NEQ, postfix_exp -> postfix_exp .LParen RParen  | Percent, postfix_exp -> postfix_exp .Decrement  | Caret, postfix_exp -> postfix_exp .LBrack exp RBrack  | LE, postfix_exp -> postfix_exp .Decrement  | RightShift, postfix_exp -> postfix_exp .LParen RParen  | AND, postfix_exp -> postfix_exp .Decrement  | LT, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Minus, unary_exp -> postfix_exp.  | Divide, postfix_exp -> postfix_exp .Increment  | Minus, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Decrement, postfix_exp -> postfix_exp .LParen RParen  | Minus, postfix_exp -> postfix_exp .Dot ID  | VerticalBar, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | EQ, postfix_exp -> postfix_exp .Increment  | Question, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> postfix_exp .Dot ID  | Times, postfix_exp -> postfix_exp .Decrement  | GE, postfix_exp -> postfix_exp .Increment  | EQ, postfix_exp -> postfix_exp .Dot ID  | Increment, postfix_exp -> postfix_exp .LParen RParen  | LT, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | NEQ, postfix_exp -> postfix_exp .Decrement  | Divide, postfix_exp -> postfix_exp .LBrack exp RBrack  | RBrack, postfix_exp -> postfix_exp .Dot ID  | Divide, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Increment, postfix_exp -> postfix_exp .Decrement  | Dot, postfix_exp -> postfix_exp .Dot ID  | Minus, postfix_exp -> postfix_exp .LBrack exp RBrack  | LT, unary_exp -> postfix_exp.  | OR, postfix_exp -> postfix_exp .Decrement  | Increment, postfix_exp -> postfix_exp .LBrack exp RBrack  | Question, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | GE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LT, unary_exp -> postfix_exp.  | LE, unary_exp -> postfix_exp.  | Times, postfix_exp -> postfix_exp .LBrack exp RBrack  | EQ, postfix_exp -> postfix_exp .Dot ID  | Comma, postfix_exp -> postfix_exp .Increment  | OR, postfix_exp -> postfix_exp .Decrement  | LE, postfix_exp -> postfix_exp .LBrack exp RBrack  | LBrack, postfix_exp -> postfix_exp .LBrack exp RBrack  | GT, postfix_exp -> postfix_exp .LParen RParen  | LBrack, postfix_exp -> postfix_exp .Decrement  | EQ, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Divide, postfix_exp -> postfix_exp .LParen RParen  | Times, postfix_exp -> postfix_exp .LParen RParen  | LE, postfix_exp -> postfix_exp .LParen RParen  | LParen, postfix_exp -> postfix_exp .Dot ID  | Plus, unary_exp -> postfix_exp.  | LT, postfix_exp -> postfix_exp .Dot ID  | LBrack, postfix_exp -> postfix_exp .LBrack exp RBrack  | Dot, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LParen, postfix_exp -> postfix_exp .LBrack exp RBrack  | VerticalBar, postfix_exp -> postfix_exp .LBrack exp RBrack  | OR, postfix_exp -> postfix_exp .Increment  | Decrement, postfix_exp -> postfix_exp .Decrement  | Minus, postfix_exp -> postfix_exp .Increment  | LT, postfix_exp -> postfix_exp .Increment  | Caret, postfix_exp -> postfix_exp .Increment  | LE, postfix_exp -> postfix_exp .Increment  | Times, postfix_exp -> postfix_exp .Decrement  | Decrement, postfix_exp -> postfix_exp .Dot ID  | NEQ, postfix_exp -> postfix_exp .LBrack exp RBrack  | LeftShift, postfix_exp -> postfix_exp .Increment  | Comma, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LeftShift, postfix_exp -> postfix_exp .Dot ID  | LE, postfix_exp -> postfix_exp .Decrement  | NEQ, unary_exp -> postfix_exp.  | GE, postfix_exp -> postfix_exp .LBrack exp RBrack  | AND, postfix_exp -> postfix_exp .LBrack exp RBrack  | Decrement, postfix_exp -> postfix_exp .Decrement  | Percent, postfix_exp -> postfix_exp .Increment  | Plus, postfix_exp -> postfix_exp .Increment  | AND, postfix_exp -> postfix_exp .LParen RParen  | RBrack, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | RBrack, postfix_exp -> postfix_exp .Decrement  | VerticalBar, postfix_exp -> postfix_exp .Dot ID  | GE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | AND, postfix_exp -> postfix_exp .Dot ID  | Ampersand, postfix_exp -> postfix_exp .Decrement  | Times, postfix_exp -> postfix_exp .Decrement  | RBrack, postfix_exp -> postfix_exp .Dot ID  | LParen, unary_exp -> postfix_exp.  | Minus, postfix_exp -> postfix_exp .Dot ID  | RightShift, postfix_exp -> postfix_exp .LBrack exp RBrack  | Increment, postfix_exp -> postfix_exp .LParen RParen  | Increment, postfix_exp -> postfix_exp .Increment  | Increment, postfix_exp -> postfix_exp .Increment  | LBrack, postfix_exp -> postfix_exp .Dot ID  | Decrement, postfix_exp -> postfix_exp .Increment  | NEQ, postfix_exp -> postfix_exp .Increment  | Ampersand, postfix_exp -> postfix_exp .LBrack exp RBrack  | Percent, postfix_exp -> postfix_exp .Increment  | RightShift, unary_exp -> postfix_exp.  | Question, postfix_exp -> postfix_exp .Increment  | LParen, postfix_exp -> postfix_exp .Dot ID  | Question, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Question, postfix_exp -> postfix_exp .LParen RParen  | Ampersand, postfix_exp -> postfix_exp .Dot ID  | EQ, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | RightShift, postfix_exp -> postfix_exp .Dot ID  | RBrack, postfix_exp -> postfix_exp .Decrement  | LBrack, postfix_exp -> postfix_exp .LBrack exp RBrack  | Minus, postfix_exp -> postfix_exp .LBrack exp RBrack  | Ampersand, postfix_exp -> postfix_exp .LParen RParen  | GT, postfix_exp -> postfix_exp .LBrack exp RBrack  | LParen, postfix_exp -> postfix_exp .Dot ID  | AND, postfix_exp -> postfix_exp .LParen RParen  | Comma, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | GT, postfix_exp -> postfix_exp .LParen RParen  | Dot, postfix_exp -> postfix_exp .Decrement  | Comma, postfix_exp -> postfix_exp .LBrack exp RBrack  | Divide, postfix_exp -> postfix_exp .Decrement  | OR, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | LBrack, postfix_exp -> postfix_exp .Dot ID  | LT, postfix_exp -> postfix_exp .LParen RParen  | LeftShift, unary_exp -> postfix_exp.  | VerticalBar, unary_exp -> postfix_exp.  | RBrack, postfix_exp -> postfix_exp .Decrement  | LParen, postfix_exp -> postfix_exp .Increment  | Dot, unary_exp -> postfix_exp.  | GT, postfix_exp -> postfix_exp .Dot ID  | Caret, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Ampersand, postfix_exp -> postfix_exp .LBrack exp RBrack  | Comma, postfix_exp -> postfix_exp .Decrement  | LeftShift, postfix_exp -> postfix_exp .LParen RParen  | Divide, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Dot, postfix_exp -> postfix_exp .Decrement  | AND, unary_exp -> postfix_exp.  | LeftShift, postfix_exp -> postfix_exp .Dot ID  | LeftShift, postfix_exp -> postfix_exp .Increment  | RBrack, unary_exp -> postfix_exp.  | NEQ, unary_exp -> postfix_exp.  | Plus, postfix_exp -> postfix_exp .LParen RParen  | Plus, postfix_exp -> postfix_exp .LParen RParen  | GE, postfix_exp -> postfix_exp .LParen RParen  | Decrement, unary_exp -> postfix_exp.  | AND, postfix_exp -> postfix_exp .LParen RParen  | VerticalBar, postfix_exp -> postfix_exp .LParen RParen  | Question, postfix_exp -> postfix_exp .Decrement  | Question, postfix_exp -> postfix_exp .Increment  | GE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Caret, postfix_exp -> postfix_exp .LBrack exp RBrack  | Times, postfix_exp -> postfix_exp .LBrack exp RBrack  | GE, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Plus, postfix_exp -> postfix_exp .Decrement  | Plus, postfix_exp -> postfix_exp .Decrement  | Ampersand, unary_exp -> postfix_exp.  | RightShift, postfix_exp -> postfix_exp .LBrack exp RBrack  | Caret, unary_exp -> postfix_exp.  | Caret, postfix_exp -> postfix_exp .LBrack exp RBrack  | RightShift, postfix_exp -> postfix_exp .LBrack exp RBrack  | NEQ, postfix_exp -> postfix_exp .Dot ID  | Percent, postfix_exp -> postfix_exp .Dot ID  | OR, postfix_exp -> postfix_exp .LParen argument_exp_list RParen  | Times, unary_exp -> postfix_exp.  | EQ, postfix_exp -> postfix_exp .Increment  | GT, postfix_exp -> postfix_exp .LParen RParen  | RightShift, unary_exp -> postfix_exp.  | Percent, )
458 <- (373, 'primary_exp') (postfix_exp -> primary_exp.  | LBrack, postfix_exp -> primary_exp.  | OR, postfix_exp -> primary_exp.  | LE, postfix_exp -> primary_exp.  | Decrement, postfix_exp -> primary_exp.  | Times, postfix_exp -> primary_exp.  | Comma, postfix_exp -> primary_exp.  | Question, postfix_exp -> primary_exp.  | LeftShift, postfix_exp -> primary_exp.  | Caret, postfix_exp -> primary_exp.  | AND, postfix_exp -> primary_exp.  | Divide, postfix_exp -> primary_exp.  | RBrack, postfix_exp -> primary_exp.  | LParen, postfix_exp -> primary_exp.  | EQ, postfix_exp -> primary_exp.  | Minus, postfix_exp -> primary_exp.  | GE, postfix_exp -> primary_exp.  | Dot, postfix_exp -> primary_exp.  | VerticalBar, postfix_exp -> primary_exp.  | LT, postfix_exp -> primary_exp.  | GT, postfix_exp -> primary_exp.  | Percent, postfix_exp -> primary_exp.  | Increment, postfix_exp -> primary_exp.  | RightShift, postfix_exp -> primary_exp.  | Ampersand, postfix_exp -> primary_exp.  | Plus, postfix_exp -> primary_exp.  | NEQ, )
459 <- (373, 'unary_exp') (binary_exp -> binary_exp binary_op unary_exp.  | VerticalBar, binary_exp -> binary_exp binary_op unary_exp.  | Percent, binary_exp -> binary_exp binary_op unary_exp.  | RBrack, binary_exp -> binary_exp binary_op unary_exp.  | Question, binary_exp -> binary_exp binary_op unary_exp.  | Minus, binary_exp -> binary_exp binary_op unary_exp.  | LE, binary_exp -> binary_exp binary_op unary_exp.  | OR, binary_exp -> binary_exp binary_op unary_exp.  | LeftShift, binary_exp -> binary_exp binary_op unary_exp.  | RightShift, binary_exp -> binary_exp binary_op unary_exp.  | GT, binary_exp -> binary_exp binary_op unary_exp.  | Divide, binary_exp -> binary_exp binary_op unary_exp.  | Ampersand, binary_exp -> binary_exp binary_op unary_exp.  | EQ, binary_exp -> binary_exp binary_op unary_exp.  | Caret, binary_exp -> binary_exp binary_op unary_exp.  | GE, binary_exp -> binary_exp binary_op unary_exp.  | Times, binary_exp -> binary_exp binary_op unary_exp.  | Comma, binary_exp -> binary_exp binary_op unary_exp.  | LT, binary_exp -> binary_exp binary_op unary_exp.  | AND, binary_exp -> binary_exp binary_op unary_exp.  | NEQ, binary_exp -> binary_exp binary_op unary_exp.  | Plus, )
460 <- (373, 'unary_op') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> unary_op .unary_exp  | VerticalBar, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RBrack, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, primary_exp -> .ID  | RBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, unary_exp -> unary_op .unary_exp  | AND, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Decrement  | Increment, unary_exp -> unary_op .unary_exp  | Minus, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .ID  | VerticalBar, primary_exp -> .Number  | RBrack, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, unary_exp -> unary_op .unary_exp  | NEQ, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, postfix_exp -> .postfix_exp Decrement  | RBrack, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, unary_exp -> unary_op .unary_exp  | LE, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, unary_exp -> .postfix_exp  | RBrack, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Increment  | Question, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, primary_exp -> .String  | RightShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, primary_exp -> .ID  | Plus, primary_exp -> .LParen exp RParen  | OR, unary_exp -> unary_op .unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, unary_exp -> unary_op .unary_exp  | LeftShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | RBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> unary_op .unary_exp  | Divide, primary_exp -> .ID  | LeftShift, unary_exp -> unary_op .unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Decrement unary_exp  | Caret, primary_exp -> .LParen exp RParen  | GE, unary_exp -> .Decrement unary_exp  | OR, unary_exp -> .postfix_exp  | GT, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> unary_op .unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_op -> .Plus  | Minus, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_op -> .Minus  | Decrement, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> .Increment unary_exp  | RBrack, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> .Decrement unary_exp  | RBrack, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | RBrack, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Percent, unary_exp -> unary_op .unary_exp  | LT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, postfix_exp -> .postfix_exp LParen RParen  | RBrack, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp Decrement  | LT, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> unary_op .unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .unary_op unary_exp  | RBrack, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, primary_exp -> .Number  | Plus, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .ID  | Comma, primary_exp -> .ID  | LBrack, unary_exp -> unary_op .unary_exp  | Question, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | Percent, primary_exp -> .String  | RBrack, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_op -> .Tilde  | ID, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | Percent, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, unary_exp -> unary_op .unary_exp  | GT, primary_exp -> .ID  | NEQ, unary_exp -> unary_op .unary_exp  | Plus, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | RBrack, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> unary_op .unary_exp  | RBrack, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .Minus  | Number, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, unary_exp -> unary_op .unary_exp  | Ampersand, postfix_exp -> .postfix_exp Increment  | Dot, unary_exp -> unary_op .unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | RBrack, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .primary_exp  | RBrack, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, unary_exp -> unary_op .unary_exp  | Percent, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | Decrement, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | LBrack, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_exp -> unary_op .unary_exp  | Times, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, unary_exp -> .postfix_exp  | LeftShift, primary_exp -> .ID  | Dot, unary_exp -> unary_op .unary_exp  | RightShift, )
461 <- (374, 'assignment_exp') (exp -> exp Comma assignment_exp.  | Comma, exp -> exp Comma assignment_exp.  | RBrack, )
462 <- (377, 'ID') (postfix_exp -> postfix_exp Dot ID.  | Assign, postfix_exp -> postfix_exp Dot ID.  | OR, postfix_exp -> postfix_exp Dot ID.  | RBrack, postfix_exp -> postfix_exp Dot ID.  | Times, postfix_exp -> postfix_exp Dot ID.  | Percent, postfix_exp -> postfix_exp Dot ID.  | AND, postfix_exp -> postfix_exp Dot ID.  | Plus, postfix_exp -> postfix_exp Dot ID.  | Ampersand, postfix_exp -> postfix_exp Dot ID.  | VerticalBar, postfix_exp -> postfix_exp Dot ID.  | Caret, postfix_exp -> postfix_exp Dot ID.  | LParen, postfix_exp -> postfix_exp Dot ID.  | GT, postfix_exp -> postfix_exp Dot ID.  | Divide, postfix_exp -> postfix_exp Dot ID.  | Increment, postfix_exp -> postfix_exp Dot ID.  | Minus, postfix_exp -> postfix_exp Dot ID.  | EQ, postfix_exp -> postfix_exp Dot ID.  | Decrement, postfix_exp -> postfix_exp Dot ID.  | GE, postfix_exp -> postfix_exp Dot ID.  | LeftShift, postfix_exp -> postfix_exp Dot ID.  | Dot, postfix_exp -> postfix_exp Dot ID.  | LBrack, postfix_exp -> postfix_exp Dot ID.  | Comma, postfix_exp -> postfix_exp Dot ID.  | NEQ, postfix_exp -> postfix_exp Dot ID.  | RightShift, postfix_exp -> postfix_exp Dot ID.  | LT, postfix_exp -> postfix_exp Dot ID.  | LE, postfix_exp -> postfix_exp Dot ID.  | Question, )
463 <- (379, 'exp') (postfix_exp -> postfix_exp LBrack exp .RBrack  | Caret, postfix_exp -> postfix_exp LBrack exp .RBrack  | Assign, postfix_exp -> postfix_exp LBrack exp .RBrack  | Question, postfix_exp -> postfix_exp LBrack exp .RBrack  | RBrack, postfix_exp -> postfix_exp LBrack exp .RBrack  | EQ, postfix_exp -> postfix_exp LBrack exp .RBrack  | LBrack, postfix_exp -> postfix_exp LBrack exp .RBrack  | AND, postfix_exp -> postfix_exp LBrack exp .RBrack  | Decrement, postfix_exp -> postfix_exp LBrack exp .RBrack  | LeftShift, exp -> exp .Comma assignment_exp  | RBrack, postfix_exp -> postfix_exp LBrack exp .RBrack  | Percent, postfix_exp -> postfix_exp LBrack exp .RBrack  | Increment, exp -> exp .Comma assignment_exp  | Comma, postfix_exp -> postfix_exp LBrack exp .RBrack  | RightShift, postfix_exp -> postfix_exp LBrack exp .RBrack  | Ampersand, postfix_exp -> postfix_exp LBrack exp .RBrack  | OR, postfix_exp -> postfix_exp LBrack exp .RBrack  | Divide, postfix_exp -> postfix_exp LBrack exp .RBrack  | Minus, postfix_exp -> postfix_exp LBrack exp .RBrack  | GT, postfix_exp -> postfix_exp LBrack exp .RBrack  | Comma, postfix_exp -> postfix_exp LBrack exp .RBrack  | NEQ, postfix_exp -> postfix_exp LBrack exp .RBrack  | Plus, postfix_exp -> postfix_exp LBrack exp .RBrack  | LParen, postfix_exp -> postfix_exp LBrack exp .RBrack  | LT, postfix_exp -> postfix_exp LBrack exp .RBrack  | Times, postfix_exp -> postfix_exp LBrack exp .RBrack  | LE, postfix_exp -> postfix_exp LBrack exp .RBrack  | VerticalBar, postfix_exp -> postfix_exp LBrack exp .RBrack  | GE, postfix_exp -> postfix_exp LBrack exp .RBrack  | Dot, )
464 <- (380, 'RParen') (postfix_exp -> postfix_exp LParen RParen.  | GE, postfix_exp -> postfix_exp LParen RParen.  | Decrement, postfix_exp -> postfix_exp LParen RParen.  | NEQ, postfix_exp -> postfix_exp LParen RParen.  | Comma, postfix_exp -> postfix_exp LParen RParen.  | Divide, postfix_exp -> postfix_exp LParen RParen.  | Question, postfix_exp -> postfix_exp LParen RParen.  | LE, postfix_exp -> postfix_exp LParen RParen.  | LT, postfix_exp -> postfix_exp LParen RParen.  | LeftShift, postfix_exp -> postfix_exp LParen RParen.  | Percent, postfix_exp -> postfix_exp LParen RParen.  | Assign, postfix_exp -> postfix_exp LParen RParen.  | GT, postfix_exp -> postfix_exp LParen RParen.  | RightShift, postfix_exp -> postfix_exp LParen RParen.  | Ampersand, postfix_exp -> postfix_exp LParen RParen.  | Minus, postfix_exp -> postfix_exp LParen RParen.  | Plus, postfix_exp -> postfix_exp LParen RParen.  | LParen, postfix_exp -> postfix_exp LParen RParen.  | OR, postfix_exp -> postfix_exp LParen RParen.  | RBrack, postfix_exp -> postfix_exp LParen RParen.  | LBrack, postfix_exp -> postfix_exp LParen RParen.  | Increment, postfix_exp -> postfix_exp LParen RParen.  | Caret, postfix_exp -> postfix_exp LParen RParen.  | AND, postfix_exp -> postfix_exp LParen RParen.  | Dot, postfix_exp -> postfix_exp LParen RParen.  | EQ, postfix_exp -> postfix_exp LParen RParen.  | Times, postfix_exp -> postfix_exp LParen RParen.  | VerticalBar, )
465 <- (380, 'argument_exp_list') (postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LBrack, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | GE, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | NEQ, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Times, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Plus, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Divide, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | GT, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Increment, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | EQ, argument_exp_list -> argument_exp_list .Comma assignment_exp  | RParen, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | VerticalBar, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Assign, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LT, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Dot, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Decrement, argument_exp_list -> argument_exp_list .Comma assignment_exp  | Comma, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Caret, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Percent, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LeftShift, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | RightShift, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LParen, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Question, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | RBrack, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Minus, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | OR, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Comma, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Ampersand, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LE, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | AND, )
466 <- (381, 'assignment_exp') (assignment_exp -> unary_exp assignment_op assignment_exp.  | RBrack, assignment_exp -> unary_exp assignment_op assignment_exp.  | Comma, )
467 <- (383, 'assignment_exp') (argument_exp_list -> argument_exp_list Comma assignment_exp.  | RParen, argument_exp_list -> argument_exp_list Comma assignment_exp.  | Comma, )
468 <- (385, 'stm') (iteration_stm -> while LParen exp RParen stm.  | for, iteration_stm -> while LParen exp RParen stm.  | -int-, iteration_stm -> while LParen exp RParen stm.  | Number, iteration_stm -> while LParen exp RParen stm.  | Increment, iteration_stm -> while LParen exp RParen stm.  | -return-, iteration_stm -> while LParen exp RParen stm.  | RBrace, iteration_stm -> while LParen exp RParen stm.  | NOT, iteration_stm -> while LParen exp RParen stm.  | -do-, iteration_stm -> while LParen exp RParen stm.  | -sampler2D-, iteration_stm -> while LParen exp RParen stm.  | -continue-, iteration_stm -> while LParen exp RParen stm.  | break, iteration_stm -> while LParen exp RParen stm.  | -void-, iteration_stm -> while LParen exp RParen stm.  | ID, iteration_stm -> while LParen exp RParen stm.  | Semicolon, iteration_stm -> while LParen exp RParen stm.  | while, iteration_stm -> while LParen exp RParen stm.  | Plus, iteration_stm -> while LParen exp RParen stm.  | -uniform-, iteration_stm -> while LParen exp RParen stm.  | -goto-, iteration_stm -> while LParen exp RParen stm.  | -struct-, iteration_stm -> while LParen exp RParen stm.  | -fixed3-, iteration_stm -> while LParen exp RParen stm.  | String, iteration_stm -> while LParen exp RParen stm.  | Decrement, iteration_stm -> while LParen exp RParen stm.  | -float-, iteration_stm -> while LParen exp RParen stm.  | -float2-, iteration_stm -> while LParen exp RParen stm.  | if, iteration_stm -> while LParen exp RParen stm.  | -float4-, iteration_stm -> while LParen exp RParen stm.  | -half2-, iteration_stm -> while LParen exp RParen stm.  | -fixed2-, iteration_stm -> while LParen exp RParen stm.  | -double-, iteration_stm -> while LParen exp RParen stm.  | -short-, iteration_stm -> while LParen exp RParen stm.  | -char-, iteration_stm -> while LParen exp RParen stm.  | LParen, iteration_stm -> while LParen exp RParen stm.  | -float3-, iteration_stm -> while LParen exp RParen stm.  | -fixed4-, iteration_stm -> while LParen exp RParen stm.  | Minus, iteration_stm -> while LParen exp RParen stm.  | -half4-, iteration_stm -> while LParen exp RParen stm.  | -half3-, iteration_stm -> while LParen exp RParen stm.  | Tilde, iteration_stm -> while LParen exp RParen stm.  | LBrace, iteration_stm -> while LParen exp RParen stm.  | -long-, )
469 <- (387, 'RParen') (declarator -> declarator LParen parameter_list RParen.  | Comma, declarator -> declarator LParen parameter_list RParen.  | RParen, declarator -> declarator LParen parameter_list RParen.  | LParen, )
470 <- (389, 'exp') (exp -> exp .Comma assignment_exp  | Comma, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | while, exp -> exp .Comma assignment_exp  | RParen, )
471 <- (390, 'exp') (exp -> exp .Comma assignment_exp  | Comma, exp -> exp .Comma assignment_exp  | Semicolon, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | while, )
472 <- (391, '-continue-') (jump_stm -> -continue-.  | else, jump_stm -> -continue-.  | while, )
473 <- (391, '-do-') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, stm -> .exp_stm  | while, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, exp_stm -> .Semicolon  | while, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, selection_stm -> .if LParen exp RParen stm else stm  | while, binary_exp -> .unary_exp  | Percent, compound_stm -> .LBrace block_item_list RBrace  | while, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, jump_stm -> .-return- exp Semicolon  | while, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | Ampersand, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .Number  | AND, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | else, binary_exp -> .unary_exp  | LE, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, unary_exp -> .postfix_exp  | LE, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .String  | Question, primary_exp -> .String  | Dot, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, jump_stm -> .break  | while, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | Percent, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Question, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, iteration_stm -> .while LParen exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .String  | AND, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, jump_stm -> .-goto- ID  | while, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Decrement, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, compound_stm -> .LBrace RBrace  | while, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, stm -> .compound_stm  | while, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .Tilde  | Number, stm -> .jump_stm  | while, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Ampersand, unary_exp -> .unary_op unary_exp  | Ampersand, unary_op -> .Minus  | Number, primary_exp -> .Number  | Percent, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, binary_exp -> .unary_exp  | AND, primary_exp -> .String  | Decrement, primary_exp -> .Number  | Semicolon, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, unary_exp -> .Decrement unary_exp  | NEQ, postfix_exp -> .postfix_exp Dot ID  | Comma, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, stm -> .selection_stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Minus, postfix_exp -> .primary_exp  | GT, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, iteration_stm -> -do- .stm while LParen exp RParen Semicolon  | while, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp Decrement  | Assign, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, exp_stm -> .exp Semicolon  | while, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, unary_exp -> .postfix_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Assign, unary_exp -> .Decrement unary_exp  | AND, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Dot, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | Comma, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, stm -> .iteration_stm  | while, primary_exp -> .Number  | Increment, jump_stm -> .-continue-  | while, conditional_exp -> .binary_exp  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | EQ, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .primary_exp  | LE, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, unary_exp -> .unary_op unary_exp  | Semicolon, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .unary_op unary_exp  | Caret, unary_exp -> .postfix_exp  | LeftShift, )
474 <- (391, '-goto-') (jump_stm -> -goto- .ID  | else, jump_stm -> -goto- .ID  | while, )
475 <- (391, '-return-') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, unary_op -> .NOT  | Minus, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, postfix_exp -> .primary_exp  | Increment, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, primary_exp -> .Number  | AND, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .String  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Question, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen RParen  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, jump_stm -> -return- .exp Semicolon  | else, binary_exp -> .unary_exp  | LE, primary_exp -> .String  | AND, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .unary_op unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .Number  | Semicolon, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Comma, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .Decrement unary_exp  | Percent, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, unary_exp -> .postfix_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, jump_stm -> -return- .exp Semicolon  | while, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Dot, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, binary_exp -> .binary_exp binary_op unary_exp  | Comma, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, conditional_exp -> .binary_exp  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, binary_exp -> .unary_exp  | LT, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .primary_exp  | LE, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, postfix_exp -> .primary_exp  | Ampersand, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, unary_exp -> .unary_op unary_exp  | Semicolon, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
476 <- (391, 'LBrace') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, iteration_stm -> .while LParen exp RParen stm  | -fixed3-, exp_stm -> .exp Semicolon  | ID, exp_stm -> .exp Semicolon  | LParen, block_item_list -> .block_item  | -long-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -char-, jump_stm -> .break  | -continue-, exp_stm -> .exp Semicolon  | -float4-, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, stm -> .iteration_stm  | Number, unary_exp -> .postfix_exp  | Ampersand, block_item -> .stm  | -return-, compound_stm -> .LBrace RBrace  | -do-, block_item -> .dec  | -sampler2D-, unary_op -> .Minus  | Minus, stm -> .compound_stm  | if, exp_stm -> .Semicolon  | -struct-, exp_stm -> .Semicolon  | Plus, postfix_exp -> .postfix_exp LParen RParen  | RightShift, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -long-, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .unary_op unary_exp  | LT, unary_exp -> .Decrement unary_exp  | Minus, stm -> .iteration_stm  | String, jump_stm -> .-goto- ID  | LParen, block_item_list -> .block_item_list block_item  | -half4-, block_item_list -> .block_item_list block_item  | Minus, block_item_list -> .block_item  | -void-, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, unary_exp -> .postfix_exp  | GT, compound_stm -> .LBrace RBrace  | ID, jump_stm -> .-goto- ID  | -float4-, postfix_exp -> .postfix_exp LParen RParen  | GT, selection_stm -> .if LParen exp RParen stm else stm  | while, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -struct-, block_item_list -> .block_item_list block_item  | Number, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LParen, compound_stm -> .LBrace block_item_list RBrace  | Number, postfix_exp -> .postfix_exp Increment  | OR, exp_stm -> .Semicolon  | -long-, iteration_stm -> .while LParen exp RParen stm  | -fixed4-, block_item -> .dec  | while, unary_op -> .NOT  | Tilde, dec -> .struct_specifier Semicolon  | for, binary_exp -> .unary_exp  | Divide, dec -> .struct_specifier Semicolon  | -continue-, unary_op -> .Tilde  | LParen, selection_stm -> .if LParen exp RParen stm else stm  | -int-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | break, unary_op -> .Minus  | Number, compound_stm -> .LBrace block_item_list RBrace  | Tilde, block_item_list -> .block_item  | break, dec -> .dec_specifier init_dec_list Semicolon  | -fixed3-, compound_stm -> .LBrace RBrace  | -float2-, exp_stm -> .exp Semicolon  | -do-, unary_op -> .Plus  | ID, compound_stm -> .LBrace RBrace  | -goto-, selection_stm -> .if LParen exp RParen stm else stm  | RBrace, primary_exp -> .String  | EQ, iteration_stm -> .while LParen exp RParen stm  | -half2-, postfix_exp -> .postfix_exp Dot ID  | Divide, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, jump_stm -> .-continue-  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | LBrace, postfix_exp -> .primary_exp  | Semicolon, jump_stm -> .-continue-  | -fixed4-, block_item_list -> .block_item_list block_item  | -fixed3-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, exp_stm -> .Semicolon  | while, dec -> .struct_specifier Semicolon  | -double-, type_qualifier -> .-uniform-  | -fixed3-, selection_stm -> .if LParen exp RParen stm  | -float-, jump_stm -> .-return- exp Semicolon  | while, type_qualifier -> .-uniform-  | -short-, iteration_stm -> .while LParen exp RParen stm  | -sampler2D-, exp_stm -> .exp Semicolon  | -float3-, primary_exp -> .String  | Semicolon, block_item -> .stm  | -sampler2D-, stm -> .jump_stm  | -long-, jump_stm -> .-continue-  | ID, jump_stm -> .-return- exp Semicolon  | -struct-, dec -> .struct_specifier Semicolon  | -float2-, unary_op -> .Plus  | Minus, jump_stm -> .break  | Decrement, dec -> .dec_specifier init_dec_list Semicolon  | -int-, unary_exp -> .postfix_exp  | Times, compound_stm -> .LBrace RBrace  | -fixed3-, primary_exp -> .Number  | AND, block_item_list -> .block_item_list block_item  | -float3-, dec -> .struct_specifier Semicolon  | String, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed4-, postfix_exp -> .primary_exp  | RightShift, block_item_list -> .block_item_list block_item  | if, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | if, jump_stm -> .-continue-  | -int-, type_specifier -> .-half4-  | ID, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, dec -> .dec_specifier init_dec_list Semicolon  | -short-, block_item_list -> .block_item_list block_item  | RBrace, exp_stm -> .exp Semicolon  | -struct-, block_item -> .dec  | -float2-, selection_stm -> .if LParen exp RParen stm  | String, type_qualifier -> .-uniform-  | -long-, selection_stm -> .if LParen exp RParen stm  | -int-, type_specifier -> .-float2-  | ID, stm -> .jump_stm  | String, dec -> .struct_specifier Semicolon  | Number, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_exp -> .Increment unary_exp  | Plus, exp_stm -> .Semicolon  | if, exp_stm -> .exp Semicolon  | -continue-, stm -> .iteration_stm  | -void-, postfix_exp -> .primary_exp  | LE, exp_stm -> .exp Semicolon  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | -float-, block_item -> .dec  | -uniform-, stm -> .jump_stm  | -half4-, block_item_list -> .block_item_list block_item  | -float2-, jump_stm -> .-return- exp Semicolon  | -do-, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, dec -> .struct_specifier Semicolon  | -float-, stm -> .compound_stm  | NOT, compound_stm -> .LBrace RBrace  | for, stm -> .compound_stm  | -float-, postfix_exp -> .postfix_exp Dot ID  | AND, stm -> .jump_stm  | Decrement, primary_exp -> .String  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, block_item -> .stm  | -half4-, iteration_stm -> .while LParen exp RParen stm  | Tilde, exp -> .exp Comma assignment_exp  | Semicolon, jump_stm -> .-goto- ID  | -int-, exp_stm -> .Semicolon  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | -uniform-, type_specifier -> .-float-  | ID, block_item -> .stm  | for, selection_stm -> .if LParen exp RParen stm  | -float4-, type_specifier -> .-fixed3-  | ID, block_item_list -> .block_item_list block_item  | Semicolon, jump_stm -> .-return- exp Semicolon  | -return-, iteration_stm -> .while LParen exp RParen stm  | Minus, block_item -> .dec  | for, postfix_exp -> .postfix_exp LParen RParen  | LBrack, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed3-, postfix_exp -> .primary_exp  | Minus, selection_stm -> .if LParen exp RParen stm  | RBrace, jump_stm -> .break  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | -half2-, stm -> .iteration_stm  | LBrace, selection_stm -> .if LParen exp RParen stm else stm  | Number, primary_exp -> .LParen exp RParen  | LE, primary_exp -> .LParen exp RParen  | Caret, compound_stm -> .LBrace block_item_list RBrace  | -float4-, block_item -> .stm  | Semicolon, binary_exp -> .unary_exp  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float-, binary_exp -> .unary_exp  | LT, selection_stm -> .if LParen exp RParen stm else stm  | -float3-, jump_stm -> .-return- exp Semicolon  | NOT, postfix_exp -> .postfix_exp Increment  | Times, selection_stm -> .if LParen exp RParen stm else stm  | Decrement, stm -> .selection_stm  | -fixed3-, postfix_exp -> .postfix_exp Increment  | AND, jump_stm -> .break  | -do-, unary_exp -> .Increment unary_exp  | OR, exp_stm -> .Semicolon  | -continue-, selection_stm -> .if LParen exp RParen stm  | Minus, block_item_list -> .block_item_list block_item  | -goto-, jump_stm -> .break  | -int-, selection_stm -> .if LParen exp RParen stm else stm  | Tilde, primary_exp -> .ID  | Decrement, stm -> .selection_stm  | Number, dec_specifier -> .type_specifier  | ID, unary_op -> .Minus  | ID, dec -> .struct_specifier Semicolon  | Tilde, compound_stm -> .LBrace RBrace  | while, jump_stm -> .-continue-  | -float-, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | EQ, compound_stm -> .LBrace block_item_list RBrace  | -int-, stm -> .exp_stm  | -double-, stm -> .selection_stm  | Minus, jump_stm -> .-continue-  | -return-, postfix_exp -> .postfix_exp Decrement  | Semicolon, unary_op -> .Tilde  | Number, dec -> .struct_specifier Semicolon  | -float4-, stm -> .jump_stm  | while, binary_exp -> .unary_exp  | Plus, stm -> .exp_stm  | -float4-, unary_exp -> .unary_op unary_exp  | Ampersand, compound_stm -> .LBrace block_item_list RBrace  | if, postfix_exp -> .postfix_exp Dot ID  | LT, jump_stm -> .-continue-  | for, unary_exp -> .unary_op unary_exp  | Assign, jump_stm -> .-return- exp Semicolon  | -half2-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, stm -> .iteration_stm  | -continue-, selection_stm -> .if LParen exp RParen stm else stm  | -float-, block_item -> .stm  | -float2-, dec -> .struct_specifier Semicolon  | -fixed2-, compound_stm -> .LBrace block_item_list RBrace  | String, block_item -> .dec  | Semicolon, unary_op -> .NOT  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | String, primary_exp -> .Number  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float4-, jump_stm -> .break  | -uniform-, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, dec -> .struct_specifier Semicolon  | NOT, dec -> .struct_specifier Semicolon  | Plus, dec -> .struct_specifier Semicolon  | -half3-, dec -> .struct_specifier Semicolon  | -half4-, jump_stm -> .-return- exp Semicolon  | -long-, unary_exp -> .Increment unary_exp  | Semicolon, compound_stm -> .LBrace RBrace  | -return-, stm -> .exp_stm  | NOT, stm -> .iteration_stm  | Increment, jump_stm -> .-return- exp Semicolon  | LParen, iteration_stm -> .while LParen exp RParen stm  | if, postfix_exp -> .primary_exp  | Plus, stm -> .jump_stm  | -float4-, primary_exp -> .String  | Minus, stm -> .compound_stm  | Tilde, stm -> .exp_stm  | -float2-, unary_op -> .Plus  | Increment, iteration_stm -> .while LParen exp RParen stm  | -goto-, block_item_list -> .block_item_list block_item  | -continue-, selection_stm -> .if LParen exp RParen stm  | NOT, dec -> .dec_specifier init_dec_list Semicolon  | -float3-, primary_exp -> .String  | Times, stm -> .selection_stm  | while, stm -> .exp_stm  | -int-, stm -> .iteration_stm  | break, iteration_stm -> .while LParen exp RParen stm  | -half3-, stm -> .iteration_stm  | -double-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -short-, stm -> .iteration_stm  | -float3-, selection_stm -> .if LParen exp RParen stm  | -half4-, primary_exp -> .String  | Increment, jump_stm -> .-return- exp Semicolon  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -uniform-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float3-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, jump_stm -> .-return- exp Semicolon  | ID, jump_stm -> .-return- exp Semicolon  | -char-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed3-, primary_exp -> .Number  | Dot, exp_stm -> .Semicolon  | -do-, primary_exp -> .LParen exp RParen  | Ampersand, block_item -> .dec  | -continue-, stm -> .jump_stm  | -struct-, postfix_exp -> .primary_exp  | Comma, block_item -> .dec  | Increment, primary_exp -> .ID  | LBrack, unary_exp -> .postfix_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LBrack, block_item -> .dec  | NOT, selection_stm -> .if LParen exp RParen stm  | LParen, compound_stm -> .LBrace block_item_list RBrace  | for, block_item_list -> .block_item_list block_item  | while, jump_stm -> .break  | -fixed2-, type_specifier -> .-fixed4-  | ID, compound_stm -> .LBrace RBrace  | Plus, unary_exp -> .unary_op unary_exp  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, stm -> .selection_stm  | -short-, postfix_exp -> .postfix_exp Dot ID  | Semicolon, type_qualifier -> .-uniform-  | -fixed2-, compound_stm -> .LBrace RBrace  | break, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, stm -> .selection_stm  | -fixed4-, jump_stm -> .-goto- ID  | -void-, compound_stm -> .LBrace block_item_list RBrace  | -fixed2-, dec -> .dec_specifier init_dec_list Semicolon  | -long-, unary_op -> .Minus  | Tilde, primary_exp -> .LParen exp RParen  | LT, compound_stm -> .LBrace RBrace  | -char-, primary_exp -> .String  | LT, block_item -> .stm  | -int-, unary_exp -> .postfix_exp  | NEQ, stm -> .compound_stm  | Increment, selection_stm -> .if LParen exp RParen stm  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | break, stm -> .compound_stm  | -void-, stm -> .jump_stm  | -float2-, unary_exp -> .Increment unary_exp  | NEQ, exp_stm -> .exp Semicolon  | -int-, stm -> .iteration_stm  | -fixed3-, block_item -> .stm  | -float3-, compound_stm -> .LBrace RBrace  | Semicolon, unary_op -> .Minus  | NOT, block_item -> .dec  | ID, iteration_stm -> .while LParen exp RParen stm  | LParen, stm -> .iteration_stm  | -float2-, type_specifier -> .-long-  | ID, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | NOT, primary_exp -> .ID  | Semicolon, stm -> .selection_stm  | -return-, postfix_exp -> .postfix_exp Decrement  | AND, unary_op -> .Tilde  | Increment, stm -> .iteration_stm  | -fixed4-, postfix_exp -> .postfix_exp LParen RParen  | EQ, stm -> .selection_stm  | Decrement, jump_stm -> .-continue-  | -do-, block_item -> .dec  | -void-, unary_exp -> .Decrement unary_exp  | LeftShift, block_item_list -> .block_item  | -half2-, jump_stm -> .-continue-  | Tilde, stm -> .exp_stm  | LBrace, jump_stm -> .-continue-  | -half4-, dec -> .struct_specifier Semicolon  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | OR, stm -> .jump_stm  | -float3-, jump_stm -> .break  | for, jump_stm -> .-continue-  | -goto-, compound_stm -> .LBrace RBrace  | -void-, exp_stm -> .Semicolon  | -fixed2-, selection_stm -> .if LParen exp RParen stm else stm  | -void-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Plus, block_item_list -> .block_item_list block_item  | Plus, exp_stm -> .Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | NOT, stm -> .iteration_stm  | -char-, block_item_list -> .block_item  | LBrace, jump_stm -> .break  | -float4-, stm -> .jump_stm  | -void-, primary_exp -> .Number  | VerticalBar, block_item -> .dec  | Decrement, stm -> .exp_stm  | Increment, compound_stm -> .LBrace RBrace  | -fixed4-, dec -> .struct_specifier Semicolon  | -fixed3-, exp_stm -> .exp Semicolon  | -sampler2D-, binary_exp -> .unary_exp  | Times, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float3-, stm -> .jump_stm  | Minus, postfix_exp -> .postfix_exp Increment  | VerticalBar, struct_specifier -> .-struct- ID  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | -fixed2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, jump_stm -> .break  | if, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half4-, jump_stm -> .-return- exp Semicolon  | -goto-, stm -> .compound_stm  | RBrace, jump_stm -> .-goto- ID  | -goto-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, stm -> .compound_stm  | -fixed4-, exp_stm -> .exp Semicolon  | -half2-, block_item_list -> .block_item_list block_item  | -void-, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | Minus, postfix_exp -> .postfix_exp Dot ID  | RightShift, stm -> .compound_stm  | -short-, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, iteration_stm -> .while LParen exp RParen stm  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -float2-, jump_stm -> .break  | -char-, binary_exp -> .unary_exp  | OR, stm -> .compound_stm  | -fixed2-, compound_stm -> .LBrace block_item_list RBrace  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | LParen, stm -> .selection_stm  | RBrace, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, stm -> .compound_stm  | -char-, type_specifier -> .-int-  | ID, compound_stm -> LBrace .block_item_list RBrace  | while, compound_stm -> .LBrace RBrace  | -long-, compound_stm -> .LBrace block_item_list RBrace  | -do-, jump_stm -> .-continue-  | -uniform-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LBrace, stm -> .compound_stm  | -goto-, jump_stm -> .break  | -return-, stm -> .compound_stm  | -float4-, block_item_list -> .block_item_list block_item  | -int-, iteration_stm -> .while LParen exp RParen stm  | -uniform-, jump_stm -> .-continue-  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -short-, postfix_exp -> .postfix_exp LParen RParen  | NEQ, block_item_list -> .block_item  | while, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, jump_stm -> .-return- exp Semicolon  | -half3-, primary_exp -> .LParen exp RParen  | NEQ, compound_stm -> .LBrace RBrace  | Increment, compound_stm -> .LBrace block_item_list RBrace  | -continue-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Plus, dec -> .dec_specifier init_dec_list Semicolon  | RBrace, block_item_list -> .block_item  | -float4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, postfix_exp -> .postfix_exp Decrement  | Times, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -int-, unary_op -> .NOT  | LParen, exp_stm -> .exp Semicolon  | String, block_item -> .stm  | -fixed2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .String  | Dot, stm -> .jump_stm  | LParen, jump_stm -> .-return- exp Semicolon  | -short-, dec -> .dec_specifier init_dec_list Semicolon  | LParen, unary_exp -> .unary_op unary_exp  | Plus, dec -> .dec_specifier init_dec_list Semicolon  | -struct-, stm -> .compound_stm  | -float3-, unary_op -> .NOT  | String, stm -> .selection_stm  | -float4-, block_item -> .dec  | -float4-, dec -> .dec_specifier init_dec_list Semicolon  | -char-, binary_exp -> .unary_exp  | Percent, compound_stm -> .LBrace block_item_list RBrace  | while, stm -> .iteration_stm  | Minus, block_item -> .stm  | -half3-, postfix_exp -> .postfix_exp Increment  | GE, block_item_list -> .block_item_list block_item  | -fixed2-, primary_exp -> .ID  | LParen, unary_exp -> .Increment unary_exp  | Divide, exp_stm -> .Semicolon  | ID, unary_op -> .NOT  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed2-, jump_stm -> .-goto- ID  | -struct-, jump_stm -> .break  | Minus, compound_stm -> .LBrace RBrace  | if, jump_stm -> .break  | -void-, block_item_list -> .block_item_list block_item  | for, iteration_stm -> .while LParen exp RParen stm  | -float-, primary_exp -> .String  | Ampersand, block_item -> .stm  | Plus, type_qualifier -> .-uniform-  | -half3-, compound_stm -> LBrace .block_item_list RBrace  | else, primary_exp -> .ID  | Times, stm -> .compound_stm  | -sampler2D-, stm -> .selection_stm  | LParen, dec -> .dec_specifier init_dec_list Semicolon  | for, selection_stm -> .if LParen exp RParen stm else stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | LBrace, dec -> .dec_specifier init_dec_list Semicolon  | String, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, binary_exp -> .binary_exp binary_op unary_exp  | Caret, primary_exp -> .LParen exp RParen  | Divide, unary_op -> .Tilde  | Tilde, jump_stm -> .-continue-  | -void-, type_qualifier -> .-uniform-  | -char-, unary_exp -> .Decrement unary_exp  | Comma, stm -> .exp_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -return-, unary_exp -> .Decrement unary_exp  | Divide, stm -> .compound_stm  | -do-, jump_stm -> .-return- exp Semicolon  | -fixed3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half3-, stm -> .exp_stm  | -return-, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, stm -> .exp_stm  | -char-, postfix_exp -> .postfix_exp Decrement  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, iteration_stm -> .while LParen exp RParen stm  | for, stm -> .selection_stm  | if, postfix_exp -> .postfix_exp Dot ID  | Increment, compound_stm -> .LBrace RBrace  | -float4-, type_qualifier -> .-uniform-  | -float-, jump_stm -> .-continue-  | RBrace, binary_exp -> .unary_exp  | LE, jump_stm -> .-return- exp Semicolon  | -float4-, stm -> .exp_stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, stm -> .exp_stm  | LParen, dec -> .dec_specifier init_dec_list Semicolon  | -float2-, selection_stm -> .if LParen exp RParen stm else stm  | -fixed3-, block_item_list -> .block_item_list block_item  | -struct-, primary_exp -> .ID  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | if, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -void-, stm -> .compound_stm  | -float2-, block_item_list -> .block_item_list block_item  | -fixed4-, primary_exp -> .Number  | LeftShift, exp_stm -> .exp Semicolon  | Tilde, jump_stm -> .break  | while, jump_stm -> .-continue-  | -char-, jump_stm -> .break  | LParen, compound_stm -> .LBrace RBrace  | LBrace, jump_stm -> .-goto- ID  | -float-, dec -> .dec_specifier init_dec_list Semicolon  | Number, unary_op -> .Tilde  | NOT, postfix_exp -> .postfix_exp Decrement  | Percent, compound_stm -> .LBrace block_item_list RBrace  | -void-, selection_stm -> .if LParen exp RParen stm else stm  | -goto-, selection_stm -> .if LParen exp RParen stm  | -fixed2-, primary_exp -> .LParen exp RParen  | Times, stm -> .selection_stm  | ID, selection_stm -> .if LParen exp RParen stm  | -double-, exp_stm -> .Semicolon  | LParen, jump_stm -> .break  | -goto-, stm -> .exp_stm  | Minus, exp_stm -> .exp Semicolon  | -uniform-, compound_stm -> .LBrace block_item_list RBrace  | -double-, postfix_exp -> .primary_exp  | AND, primary_exp -> .ID  | OR, selection_stm -> .if LParen exp RParen stm  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, postfix_exp -> .postfix_exp Increment  | GT, stm -> .jump_stm  | Semicolon, iteration_stm -> .while LParen exp RParen stm  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | Times, exp_stm -> .Semicolon  | -half4-, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, compound_stm -> .LBrace RBrace  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, unary_exp -> .unary_op unary_exp  | Question, selection_stm -> .if LParen exp RParen stm else stm  | -double-, unary_exp -> .unary_op unary_exp  | Times, stm -> .iteration_stm  | -int-, selection_stm -> .if LParen exp RParen stm  | if, exp_stm -> .exp Semicolon  | Plus, stm -> .exp_stm  | -void-, block_item -> .stm  | -double-, block_item_list -> .block_item  | Increment, primary_exp -> .String  | Question, iteration_stm -> .while LParen exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Comma, dec -> .dec_specifier init_dec_list Semicolon  | Minus, stm -> .iteration_stm  | -do-, block_item_list -> .block_item  | NOT, unary_exp -> .Decrement unary_exp  | GT, block_item -> .stm  | -float-, primary_exp -> .ID  | LE, block_item_list -> .block_item_list block_item  | -char-, stm -> .exp_stm  | -float-, compound_stm -> .LBrace block_item_list RBrace  | -sampler2D-, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | LeftShift, jump_stm -> .-return- exp Semicolon  | Number, exp_stm -> .exp Semicolon  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, block_item_list -> .block_item_list block_item  | Decrement, postfix_exp -> .postfix_exp Increment  | NEQ, selection_stm -> .if LParen exp RParen stm  | -uniform-, jump_stm -> .-continue-  | -sampler2D-, dec -> .dec_specifier init_dec_list Semicolon  | ID, iteration_stm -> .while LParen exp RParen stm  | -int-, block_item_list -> .block_item  | -half3-, dec -> .struct_specifier Semicolon  | -long-, type_qualifier -> .-uniform-  | -float2-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Semicolon, dec -> .dec_specifier init_dec_list Semicolon  | Semicolon, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | for, postfix_exp -> .postfix_exp Decrement  | Increment, block_item -> .stm  | -goto-, binary_exp -> .binary_exp binary_op unary_exp  | Minus, primary_exp -> .LParen exp RParen  | OR, primary_exp -> .Number  | GT, postfix_exp -> .primary_exp  | Question, block_item -> .stm  | -char-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, jump_stm -> .break  | -fixed4-, dec -> .dec_specifier init_dec_list Semicolon  | -sampler2D-, stm -> .compound_stm  | -int-, unary_exp -> .unary_op unary_exp  | OR, selection_stm -> .if LParen exp RParen stm else stm  | -fixed4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, stm -> .iteration_stm  | -short-, selection_stm -> .if LParen exp RParen stm  | Tilde, postfix_exp -> .postfix_exp Increment  | LeftShift, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> .postfix_exp  | Caret, stm -> .jump_stm  | Increment, selection_stm -> .if LParen exp RParen stm  | Number, primary_exp -> .ID  | LT, postfix_exp -> .postfix_exp Dot ID  | Caret, iteration_stm -> .while LParen exp RParen stm  | NOT, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -return-, dec -> .struct_specifier Semicolon  | Decrement, primary_exp -> .Number  | Percent, iteration_stm -> .while LParen exp RParen stm  | -return-, primary_exp -> .LParen exp RParen  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -double-, primary_exp -> .Number  | Assign, block_item_list -> .block_item  | RBrace, block_item -> .dec  | -float3-, jump_stm -> .break  | -float-, block_item_list -> .block_item_list block_item  | -half2-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float-, postfix_exp -> .postfix_exp Dot ID  | GT, stm -> .exp_stm  | -continue-, stm -> .iteration_stm  | Plus, unary_exp -> .Decrement unary_exp  | Caret, selection_stm -> .if LParen exp RParen stm  | -fixed4-, exp_stm -> .Semicolon  | -uniform-, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, stm -> .selection_stm  | String, block_item_list -> .block_item  | ID, block_item_list -> .block_item  | -uniform-, stm -> .exp_stm  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Minus, postfix_exp -> .postfix_exp Decrement  | Divide, exp_stm -> .Semicolon  | Minus, stm -> .exp_stm  | ID, primary_exp -> .String  | Divide, block_item -> .dec  | -float-, unary_exp -> .postfix_exp  | EQ, unary_exp -> .postfix_exp  | VerticalBar, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, primary_exp -> .String  | LParen, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .postfix_exp Increment  | Plus, iteration_stm -> .while LParen exp RParen stm  | -double-, jump_stm -> .-goto- ID  | LBrace, primary_exp -> .ID  | RightShift, selection_stm -> .if LParen exp RParen stm else stm  | -char-, jump_stm -> .-return- exp Semicolon  | -continue-, jump_stm -> .-continue-  | -continue-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Tilde, primary_exp -> .ID  | NEQ, block_item_list -> .block_item_list block_item  | LParen, stm -> .compound_stm  | -half4-, unary_exp -> .unary_op unary_exp  | NEQ, block_item -> .dec  | -goto-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -double-, selection_stm -> .if LParen exp RParen stm  | for, selection_stm -> .if LParen exp RParen stm  | ID, block_item -> .stm  | Tilde, stm -> .jump_stm  | ID, jump_stm -> .-return- exp Semicolon  | -half4-, block_item -> .stm  | -struct-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, dec -> .struct_specifier Semicolon  | RBrace, type_qualifier -> .-uniform-  | -void-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | RBrace, postfix_exp -> .primary_exp  | LT, unary_exp -> .postfix_exp  | Question, primary_exp -> .String  | LBrack, stm -> .jump_stm  | for, jump_stm -> .-return- exp Semicolon  | Plus, stm -> .exp_stm  | -float3-, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -uniform-, jump_stm -> .-return- exp Semicolon  | if, compound_stm -> LBrace .RBrace  | while, jump_stm -> .-goto- ID  | -fixed3-, dec -> .struct_specifier Semicolon  | -do-, stm -> .selection_stm  | -sampler2D-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | break, block_item -> .stm  | LBrace, stm -> .selection_stm  | -fixed2-, jump_stm -> .-goto- ID  | if, compound_stm -> .LBrace RBrace  | LParen, block_item -> .stm  | while, stm -> .iteration_stm  | -long-, stm -> .selection_stm  | -int-, stm -> .exp_stm  | -fixed4-, jump_stm -> .break  | -half4-, postfix_exp -> .primary_exp  | GT, block_item -> .stm  | break, jump_stm -> .-return- exp Semicolon  | Minus, postfix_exp -> .primary_exp  | VerticalBar, primary_exp -> .Number  | RightShift, unary_op -> .Plus  | Decrement, stm -> .selection_stm  | -half3-, stm -> .jump_stm  | -short-, stm -> .exp_stm  | break, binary_exp -> .unary_exp  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -struct-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -char-, block_item_list -> .block_item  | LParen, jump_stm -> .-goto- ID  | break, compound_stm -> .LBrace RBrace  | -sampler2D-, jump_stm -> .-continue-  | Plus, unary_exp -> .Increment unary_exp  | GE, jump_stm -> .-continue-  | -half2-, unary_exp -> .Increment unary_exp  | EQ, compound_stm -> .LBrace RBrace  | Tilde, exp_stm -> .exp Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | ID, stm -> .jump_stm  | -char-, block_item_list -> .block_item  | Decrement, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | Comma, jump_stm -> .-goto- ID  | -half3-, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, conditional_exp -> .binary_exp  | Semicolon, block_item_list -> .block_item  | -char-, selection_stm -> .if LParen exp RParen stm  | -do-, stm -> .jump_stm  | -continue-, dec -> .struct_specifier Semicolon  | break, selection_stm -> .if LParen exp RParen stm else stm  | -half2-, stm -> .compound_stm  | -struct-, stm -> .selection_stm  | NOT, jump_stm -> .-return- exp Semicolon  | -float2-, postfix_exp -> .postfix_exp Dot ID  | LParen, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, jump_stm -> .-return- exp Semicolon  | -float3-, iteration_stm -> .while LParen exp RParen stm  | -struct-, postfix_exp -> .postfix_exp Increment  | Dot, type_qualifier -> .-uniform-  | -float4-, stm -> .compound_stm  | break, jump_stm -> .break  | -long-, block_item -> .stm  | -float4-, postfix_exp -> .postfix_exp Increment  | Divide, stm -> .selection_stm  | -float2-, stm -> .jump_stm  | -return-, exp_stm -> .Semicolon  | break, unary_exp -> .postfix_exp  | OR, exp_stm -> .Semicolon  | -double-, block_item -> .dec  | LBrace, block_item -> .stm  | -do-, postfix_exp -> .postfix_exp Decrement  | LE, exp_stm -> .Semicolon  | Number, block_item -> .dec  | if, binary_exp -> .unary_exp  | AND, block_item -> .dec  | LParen, compound_stm -> .LBrace block_item_list RBrace  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, primary_exp -> .ID  | Dot, stm -> .selection_stm  | -double-, stm -> .iteration_stm  | NOT, primary_exp -> .Number  | NEQ, jump_stm -> .-continue-  | -double-, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, jump_stm -> .-goto- ID  | -half2-, stm -> .selection_stm  | Semicolon, postfix_exp -> .postfix_exp Increment  | EQ, exp_stm -> .exp Semicolon  | NOT, jump_stm -> .-continue-  | -float3-, unary_exp -> .postfix_exp  | Percent, unary_exp -> .postfix_exp  | GE, binary_exp -> .unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, jump_stm -> .-continue-  | Increment, exp_stm -> .Semicolon  | -half2-, compound_stm -> .LBrace block_item_list RBrace  | -char-, unary_exp -> .postfix_exp  | Assign, compound_stm -> .LBrace RBrace  | -float3-, stm -> .jump_stm  | -double-, dec -> .dec_specifier init_dec_list Semicolon  | -half3-, compound_stm -> .LBrace block_item_list RBrace  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | -half4-, jump_stm -> .break  | LBrace, jump_stm -> .break  | -short-, block_item -> .stm  | Decrement, jump_stm -> .-continue-  | String, primary_exp -> .String  | OR, dec -> .struct_specifier Semicolon  | Semicolon, stm -> .selection_stm  | for, postfix_exp -> .postfix_exp Decrement  | EQ, selection_stm -> .if LParen exp RParen stm else stm  | -do-, compound_stm -> .LBrace block_item_list RBrace  | Increment, unary_exp -> .Decrement unary_exp  | Ampersand, stm -> .jump_stm  | Tilde, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, block_item_list -> .block_item  | String, selection_stm -> .if LParen exp RParen stm  | -half3-, stm -> .jump_stm  | -goto-, postfix_exp -> .primary_exp  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -float3-, block_item -> .stm  | Number, unary_exp -> .Decrement unary_exp  | GE, selection_stm -> .if LParen exp RParen stm else stm  | for, jump_stm -> .break  | Plus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float4-, type_qualifier -> .-uniform-  | -half4-, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, exp_stm -> .exp Semicolon  | Increment, dec -> .dec_specifier init_dec_list Semicolon  | while, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, stm -> .jump_stm  | -fixed2-, stm -> .compound_stm  | -return-, type_qualifier -> .-uniform-  | -int-, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, compound_stm -> .LBrace RBrace  | -struct-, primary_exp -> .LParen exp RParen  | AND, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -do-, exp_stm -> .exp Semicolon  | Minus, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, stm -> .selection_stm  | -continue-, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, dec -> .dec_specifier init_dec_list Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | -return-, jump_stm -> .-continue-  | Number, stm -> .jump_stm  | -fixed4-, unary_exp -> .unary_op unary_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | -struct-, primary_exp -> .LParen exp RParen  | VerticalBar, jump_stm -> .break  | break, compound_stm -> .LBrace RBrace  | -double-, postfix_exp -> .postfix_exp Decrement  | OR, compound_stm -> .LBrace block_item_list RBrace  | -half3-, block_item -> .dec  | RBrace, stm -> .jump_stm  | -sampler2D-, block_item_list -> .block_item_list block_item  | LBrace, block_item -> .dec  | Number, stm -> .compound_stm  | -uniform-, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .primary_exp  | LeftShift, primary_exp -> .ID  | Plus, stm -> .exp_stm  | -half2-, primary_exp -> .ID  | GT, selection_stm -> .if LParen exp RParen stm else stm  | -long-, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, block_item_list -> .block_item  | -int-, dec -> .dec_specifier init_dec_list Semicolon  | -half2-, stm -> .compound_stm  | -half3-, dec -> .struct_specifier Semicolon  | -float3-, jump_stm -> .-continue-  | if, compound_stm -> .LBrace block_item_list RBrace  | Decrement, jump_stm -> .-goto- ID  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -goto-, block_item_list -> .block_item  | Tilde, primary_exp -> .Number  | Question, jump_stm -> .-goto- ID  | -long-, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, jump_stm -> .-continue-  | -struct-, jump_stm -> .-return- exp Semicolon  | -int-, block_item_list -> .block_item_list block_item  | NOT, stm -> .iteration_stm  | -half2-, primary_exp -> .Number  | LBrack, stm -> .exp_stm  | -long-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, iteration_stm -> .while LParen exp RParen stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Comma, exp_stm -> .Semicolon  | -int-, dec -> .struct_specifier Semicolon  | ID, dec -> .struct_specifier Semicolon  | -short-, struct_specifier -> .-struct- ID LBrace struct_dec_list RBrace  | Semicolon, jump_stm -> .-goto- ID  | -fixed2-, stm -> .exp_stm  | Tilde, exp_stm -> .exp Semicolon  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | String, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, selection_stm -> .if LParen exp RParen stm  | -void-, stm -> .exp_stm  | -do-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Tilde, stm -> .exp_stm  | while, postfix_exp -> .postfix_exp Increment  | Question, type_qualifier -> .-uniform-  | -fixed4-, block_item_list -> .block_item  | Plus, compound_stm -> .LBrace block_item_list RBrace  | Plus, iteration_stm -> .while LParen exp RParen stm  | -do-, dec -> .dec_specifier init_dec_list Semicolon  | -void-, primary_exp -> .LParen exp RParen  | EQ, block_item -> .dec  | String, block_item -> .stm  | String, postfix_exp -> .postfix_exp LParen RParen  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | Plus, postfix_exp -> .primary_exp  | Times, block_item -> .stm  | LParen, block_item -> .stm  | -continue-, block_item -> .dec  | -long-, jump_stm -> .-continue-  | break, exp_stm -> .Semicolon  | -short-, block_item -> .stm  | if, block_item_list -> .block_item_list block_item  | -float4-, type_specifier -> .typedef_name  | ID, dec -> .struct_specifier Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm  | -sampler2D-, selection_stm -> .if LParen exp RParen stm else stm  | -float4-, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp Decrement  | NEQ, dec -> .struct_specifier Semicolon  | -uniform-, dec -> .dec_specifier init_dec_list Semicolon  | NOT, selection_stm -> .if LParen exp RParen stm else stm  | -short-, primary_exp -> .ID  | LeftShift, selection_stm -> .if LParen exp RParen stm  | -float2-, block_item_list -> .block_item  | for, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Increment, jump_stm -> .-goto- ID  | while, type_specifier -> .-short-  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | NEQ, stm -> .jump_stm  | -do-, postfix_exp -> .postfix_exp Decrement  | Plus, exp_stm -> .exp Semicolon  | -half4-, block_item_list -> .block_item  | -fixed4-, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, primary_exp -> .Number  | OR, jump_stm -> .break  | Increment, selection_stm -> .if LParen exp RParen stm else stm  | -half3-, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, jump_stm -> .-goto- ID  | String, jump_stm -> .-goto- ID  | -float3-, stm -> .exp_stm  | if, jump_stm -> .break  | String, block_item_list -> .block_item  | -fixed3-, postfix_exp -> .postfix_exp Increment  | LT, compound_stm -> .LBrace block_item_list RBrace  | -return-, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, block_item_list -> .block_item_list block_item  | -long-, exp_stm -> .Semicolon  | -void-, dec -> .dec_specifier init_dec_list Semicolon  | LBrace, stm -> .selection_stm  | -do-, jump_stm -> .-return- exp Semicolon  | -double-, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Divide, dec -> .dec_specifier init_dec_list Semicolon  | Decrement, stm -> .selection_stm  | -void-, stm -> .selection_stm  | -half2-, stm -> .exp_stm  | -struct-, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, stm -> .iteration_stm  | Semicolon, jump_stm -> .break  | -fixed3-, primary_exp -> .LParen exp RParen  | Percent, dec -> .dec_specifier init_dec_list Semicolon  | -continue-, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, jump_stm -> .-return- exp Semicolon  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | Semicolon, primary_exp -> .ID  | GE, unary_op -> .Plus  | Plus, stm -> .exp_stm  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | -sampler2D-, block_item_list -> .block_item_list block_item  | -double-, exp_stm -> .Semicolon  | -float-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, dec -> .struct_specifier Semicolon  | LParen, jump_stm -> .-goto- ID  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | String, stm -> .jump_stm  | LBrace, primary_exp -> .ID  | Assign, stm -> .iteration_stm  | -half4-, stm -> .compound_stm  | -half2-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed4-, dec -> .dec_specifier init_dec_list Semicolon  | Plus, type_specifier -> .-half2-  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, stm -> .compound_stm  | String, dec -> .dec_specifier init_dec_list Semicolon  | if, jump_stm -> .break  | Number, postfix_exp -> .postfix_exp LParen RParen  | LE, type_specifier -> .-fixed2-  | ID, jump_stm -> .-goto- ID  | -fixed4-, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, stm -> .jump_stm  | NOT, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, type_qualifier -> .-uniform-  | -sampler2D-, exp_stm -> .Semicolon  | -float4-, binary_exp -> .binary_exp binary_op unary_exp  | LE, block_item -> .dec  | -fixed3-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed2-, stm -> .selection_stm  | Increment, jump_stm -> .-continue-  | Semicolon, block_item -> .dec  | -return-, binary_exp -> .unary_exp  | NEQ, primary_exp -> .LParen exp RParen  | Minus, compound_stm -> .LBrace RBrace  | Number, block_item_list -> .block_item  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | -float2-, dec -> .struct_specifier Semicolon  | -sampler2D-, block_item_list -> .block_item  | Minus, primary_exp -> .Number  | Plus, dec -> .struct_specifier Semicolon  | Minus, unary_exp -> .Decrement unary_exp  | LE, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, stm -> .jump_stm  | -half3-, exp_stm -> .exp Semicolon  | -fixed3-, jump_stm -> .-goto- ID  | -double-, postfix_exp -> .postfix_exp LParen RParen  | Question, jump_stm -> .-return- exp Semicolon  | Semicolon, selection_stm -> .if LParen exp RParen stm  | Decrement, unary_exp -> .postfix_exp  | LE, exp_stm -> .exp Semicolon  | -short-, primary_exp -> .String  | Assign, block_item -> .dec  | -struct-, stm -> .exp_stm  | for, exp_stm -> .Semicolon  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | String, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, stm -> .selection_stm  | -half4-, primary_exp -> .LParen exp RParen  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | if, stm -> .iteration_stm  | -uniform-, unary_exp -> .unary_op unary_exp  | GT, compound_stm -> .LBrace block_item_list RBrace  | NOT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, block_item -> .dec  | break, primary_exp -> .LParen exp RParen  | LParen, stm -> .jump_stm  | Number, exp_stm -> .exp Semicolon  | RBrace, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half4-, exp_stm -> .Semicolon  | for, unary_exp -> .unary_op unary_exp  | AND, stm -> .jump_stm  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Number, postfix_exp -> .primary_exp  | Assign, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -continue-, exp_stm -> .Semicolon  | LBrace, jump_stm -> .-goto- ID  | -short-, stm -> .exp_stm  | -half4-, compound_stm -> .LBrace RBrace  | -fixed2-, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_exp -> .unary_op unary_exp  | Percent, exp_stm -> .exp Semicolon  | if, dec -> .struct_specifier Semicolon  | while, postfix_exp -> .primary_exp  | Divide, block_item -> .dec  | -char-, postfix_exp -> .postfix_exp LParen RParen  | Increment, stm -> .compound_stm  | ID, selection_stm -> .if LParen exp RParen stm  | while, block_item -> .dec  | -double-, block_item_list -> .block_item_list block_item  | -return-, iteration_stm -> .while LParen exp RParen stm  | -continue-, block_item -> .dec  | -fixed4-, postfix_exp -> .primary_exp  | LBrack, dec -> .struct_specifier Semicolon  | -half2-, jump_stm -> .-continue-  | while, exp_stm -> .Semicolon  | -goto-, jump_stm -> .break  | -float3-, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, block_item_list -> .block_item  | -short-, block_item_list -> .block_item  | -struct-, jump_stm -> .-return- exp Semicolon  | -void-, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, binary_exp -> .unary_exp  | EQ, jump_stm -> .-continue-  | -float2-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, jump_stm -> .-continue-  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -float3-, primary_exp -> .ID  | Divide, selection_stm -> .if LParen exp RParen stm else stm  | -uniform-, stm -> .compound_stm  | Decrement, type_qualifier -> .-uniform-  | -half2-, jump_stm -> .-goto- ID  | ID, stm -> .exp_stm  | -fixed3-, postfix_exp -> .postfix_exp Dot ID  | EQ, unary_exp -> .unary_op unary_exp  | Comma, jump_stm -> .-return- exp Semicolon  | -float-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Semicolon, binary_exp -> .unary_exp  | GE, compound_stm -> .LBrace block_item_list RBrace  | -goto-, iteration_stm -> .while LParen exp RParen stm  | break, stm -> .selection_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -int-, stm -> .compound_stm  | for, dec -> .dec_specifier init_dec_list Semicolon  | -return-, stm -> .jump_stm  | if, jump_stm -> .-goto- ID  | -float2-, stm -> .selection_stm  | Tilde, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, stm -> .compound_stm  | -long-, assignment_exp -> .conditional_exp  | Comma, jump_stm -> .-goto- ID  | Increment, postfix_exp -> .postfix_exp Dot ID  | Assign, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half2-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LBrace, exp_stm -> .Semicolon  | -fixed3-, stm -> .iteration_stm  | -half3-, primary_exp -> .String  | Decrement, exp_stm -> .Semicolon  | Tilde, block_item_list -> .block_item  | -half4-, selection_stm -> .if LParen exp RParen stm else stm  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | Plus, stm -> .iteration_stm  | while, stm -> .selection_stm  | LBrace, postfix_exp -> .postfix_exp LParen RParen  | Assign, compound_stm -> .LBrace RBrace  | -half3-, stm -> .jump_stm  | break, stm -> .iteration_stm  | -float-, exp_stm -> .Semicolon  | -float3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Number, stm -> .compound_stm  | -continue-, stm -> .exp_stm  | Plus, postfix_exp -> .postfix_exp Decrement  | Minus, stm -> .selection_stm  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, stm -> .iteration_stm  | ID, stm -> .compound_stm  | Plus, unary_exp -> .Increment unary_exp  | LeftShift, block_item_list -> .block_item_list block_item  | String, primary_exp -> .Number  | EQ, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Increment, exp_stm -> .exp Semicolon  | -long-, compound_stm -> .LBrace RBrace  | String, selection_stm -> .if LParen exp RParen stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -void-, exp_stm -> .Semicolon  | Increment, dec -> .dec_specifier init_dec_list Semicolon  | -goto-, primary_exp -> .String  | LeftShift, block_item -> .dec  | -int-, jump_stm -> .-continue-  | -fixed3-, postfix_exp -> .postfix_exp LParen RParen  | GE, postfix_exp -> .primary_exp  | OR, iteration_stm -> .while LParen exp RParen stm  | RBrace, unary_exp -> .postfix_exp  | RightShift, compound_stm -> .LBrace block_item_list RBrace  | -fixed4-, block_item_list -> .block_item  | -continue-, block_item_list -> .block_item  | -double-, unary_op -> .Tilde  | Decrement, exp_stm -> .exp Semicolon  | -half3-, iteration_stm -> .while LParen exp RParen stm  | Plus, block_item_list -> .block_item  | -return-, postfix_exp -> .postfix_exp Dot ID  | Minus, stm -> .selection_stm  | Plus, compound_stm -> .LBrace RBrace  | NOT, exp_stm -> .Semicolon  | Decrement, type_specifier -> .-char-  | ID, block_item_list -> .block_item_list block_item  | -uniform-, exp_stm -> .Semicolon  | -float2-, dec -> .dec_specifier init_dec_list Semicolon  | -half4-, iteration_stm -> .while LParen exp RParen stm  | Number, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, exp_stm -> .exp Semicolon  | Decrement, block_item -> .dec  | -half3-, stm -> .iteration_stm  | LParen, stm -> .jump_stm  | -half2-, selection_stm -> .if LParen exp RParen stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Percent, jump_stm -> .break  | ID, jump_stm -> .-goto- ID  | Semicolon, block_item -> .stm  | -half2-, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, stm -> .selection_stm  | -struct-, stm -> .iteration_stm  | Tilde, block_item_list -> .block_item  | Number, compound_stm -> .LBrace block_item_list RBrace  | LBrace, postfix_exp -> .postfix_exp Increment  | Semicolon, jump_stm -> .break  | -sampler2D-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, block_item_list -> .block_item  | -float-, type_specifier -> .-double-  | ID, exp_stm -> .exp Semicolon  | -double-, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -long-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LParen, compound_stm -> .LBrace RBrace  | -half2-, jump_stm -> .-goto- ID  | -do-, exp_stm -> .exp Semicolon  | -float-, stm -> .jump_stm  | -float-, unary_exp -> .unary_op unary_exp  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | RBrace, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, dec -> .dec_specifier init_dec_list Semicolon  | -fixed2-, unary_op -> .Minus  | Decrement, selection_stm -> .if LParen exp RParen stm  | Plus, jump_stm -> .-return- exp Semicolon  | -fixed4-, exp_stm -> .exp Semicolon  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | LT, dec -> .dec_specifier init_dec_list Semicolon  | -double-, postfix_exp -> .postfix_exp Increment  | Comma, block_item_list -> .block_item_list block_item  | -sampler2D-, jump_stm -> .-continue-  | -fixed2-, stm -> .compound_stm  | LBrace, selection_stm -> .if LParen exp RParen stm  | -short-, block_item -> .stm  | -fixed4-, exp_stm -> .exp Semicolon  | LBrace, jump_stm -> .-continue-  | -short-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, block_item_list -> .block_item_list block_item  | break, binary_exp -> .binary_exp binary_op unary_exp  | EQ, dec -> .struct_specifier Semicolon  | -int-, block_item -> .dec  | Tilde, postfix_exp -> .primary_exp  | Percent, primary_exp -> .String  | Comma, stm -> .iteration_stm  | -fixed2-, binary_exp -> .binary_exp binary_op unary_exp  | Question, exp_stm -> .Semicolon  | -char-, block_item -> .stm  | ID, jump_stm -> .-return- exp Semicolon  | LBrace, block_item_list -> .block_item  | -sampler2D-, unary_exp -> .Increment unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Plus, primary_exp -> .Number  | GE, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | for, primary_exp -> .Number  | Times, jump_stm -> .-return- exp Semicolon  | Increment, jump_stm -> .break  | -struct-, binary_exp -> .unary_exp  | RightShift, block_item_list -> .block_item_list block_item  | Tilde, primary_exp -> .ID  | Minus, dec -> .struct_specifier Semicolon  | LBrace, selection_stm -> .if LParen exp RParen stm  | -continue-, type_qualifier -> .-uniform-  | ID, selection_stm -> .if LParen exp RParen stm else stm  | -half4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, unary_op -> .Minus  | LParen, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -sampler2D-, selection_stm -> .if LParen exp RParen stm  | -half2-, block_item_list -> .block_item_list block_item  | -half3-, jump_stm -> .break  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, unary_exp -> .postfix_exp  | AND, selection_stm -> .if LParen exp RParen stm  | break, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, type_qualifier -> .-uniform-  | -double-, block_item_list -> .block_item_list block_item  | -float-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, stm -> .selection_stm  | -char-, compound_stm -> .LBrace block_item_list RBrace  | ID, stm -> .iteration_stm  | for, stm -> .exp_stm  | String, jump_stm -> .break  | -double-, postfix_exp -> .postfix_exp LParen RParen  | OR, exp_stm -> .exp Semicolon  | -void-, exp_stm -> .exp Semicolon  | -return-, block_item -> .stm  | Increment, stm -> .compound_stm  | -double-, compound_stm -> .LBrace RBrace  | -continue-, jump_stm -> .-goto- ID  | Tilde, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | NOT, postfix_exp -> .postfix_exp Increment  | RightShift, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .primary_exp  | Caret, compound_stm -> .LBrace block_item_list RBrace  | break, selection_stm -> .if LParen exp RParen stm  | -float3-, postfix_exp -> .postfix_exp Increment  | Caret, type_specifier -> .-half3-  | ID, jump_stm -> .-goto- ID  | Number, postfix_exp -> .primary_exp  | Decrement, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -continue-, dec -> .dec_specifier init_dec_list Semicolon  | Tilde, jump_stm -> .-goto- ID  | Decrement, postfix_exp -> .primary_exp  | Ampersand, block_item_list -> .block_item_list block_item  | -short-, jump_stm -> .-goto- ID  | -uniform-, compound_stm -> .LBrace RBrace  | -uniform-, dec -> .struct_specifier Semicolon  | if, compound_stm -> .LBrace block_item_list RBrace  | -short-, compound_stm -> .LBrace block_item_list RBrace  | -long-, selection_stm -> .if LParen exp RParen stm  | -return-, stm -> .exp_stm  | -fixed2-, exp_stm -> .Semicolon  | -return-, selection_stm -> .if LParen exp RParen stm  | LBrace, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, jump_stm -> .-continue-  | LParen, stm -> .iteration_stm  | -goto-, stm -> .compound_stm  | while, stm -> .exp_stm  | -sampler2D-, jump_stm -> .-goto- ID  | RBrace, postfix_exp -> .postfix_exp LParen RParen  | LT, compound_stm -> .LBrace RBrace  | -int-, binary_exp -> .unary_exp  | Caret, primary_exp -> .LParen exp RParen  | Assign, dec -> .dec_specifier init_dec_list Semicolon  | -uniform-, jump_stm -> .-continue-  | LBrace, dec -> .struct_specifier Semicolon  | -struct-, jump_stm -> .-return- exp Semicolon  | break, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, block_item -> .stm  | Minus, stm -> .exp_stm  | Number, unary_exp -> .Increment unary_exp  | Caret, block_item_list -> .block_item  | -float2-, block_item -> .dec  | Minus, block_item -> .dec  | -short-, primary_exp -> .String  | AND, unary_exp -> .unary_op unary_exp  | Divide, block_item_list -> .block_item_list block_item  | -do-, dec_specifier -> .type_qualifier type_specifier  | ID, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, block_item -> .stm  | -uniform-, postfix_exp -> .postfix_exp Dot ID  | Percent, exp_stm -> .exp Semicolon  | break, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, iteration_stm -> .while LParen exp RParen stm  | -fixed2-, stm -> .selection_stm  | -float-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -do-, unary_exp -> .postfix_exp  | Comma, binary_exp -> .unary_exp  | LeftShift, jump_stm -> .break  | -half2-, jump_stm -> .-continue-  | -long-, block_item -> .dec  | -half4-, compound_stm -> .LBrace block_item_list RBrace  | -float2-, stm -> .compound_stm  | -fixed3-, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -sampler2D-, block_item -> .stm  | -fixed3-, jump_stm -> .-return- exp Semicolon  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -short-, primary_exp -> .ID  | Percent, stm -> .compound_stm  | Number, primary_exp -> .Number  | Comma, stm -> .compound_stm  | LParen, compound_stm -> .LBrace RBrace  | -short-, stm -> .compound_stm  | Semicolon, stm -> .selection_stm  | break, dec -> .dec_specifier init_dec_list Semicolon  | -float-, block_item -> .dec  | -half2-, binary_exp -> .binary_exp binary_op unary_exp  | AND, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Decrement, unary_exp -> .postfix_exp  | Divide, jump_stm -> .-return- exp Semicolon  | -sampler2D-, block_item_list -> .block_item_list block_item  | Increment, dec -> .dec_specifier init_dec_list Semicolon  | Increment, selection_stm -> .if LParen exp RParen stm else stm  | -continue-, block_item -> .dec  | Plus, compound_stm -> .LBrace RBrace  | -half4-, dec -> .struct_specifier Semicolon  | -goto-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float2-, stm -> .jump_stm  | RBrace, jump_stm -> .-goto- ID  | -half4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, stm -> .selection_stm  | -float3-, exp_stm -> .exp Semicolon  | while, stm -> .jump_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half2-, primary_exp -> .ID  | Comma, unary_exp -> .Increment unary_exp  | Assign, jump_stm -> .-goto- ID  | -return-, postfix_exp -> .postfix_exp Increment  | Assign, jump_stm -> .break  | Tilde, block_item -> .dec  | -do-, type_specifier -> .-float3-  | ID, jump_stm -> .-continue-  | -half3-, block_item_list -> .block_item  | if, primary_exp -> .Number  | Minus, stm -> .iteration_stm  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -half4-, exp_stm -> .exp Semicolon  | -goto-, jump_stm -> .-goto- ID  | for, stm -> .iteration_stm  | Decrement, stm -> .jump_stm  | -int-, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, selection_stm -> .if LParen exp RParen stm else stm  | -struct-, stm -> .exp_stm  | -goto-, block_item_list -> .block_item  | -goto-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | ID, unary_exp -> .Increment unary_exp  | VerticalBar, dec -> .struct_specifier Semicolon  | -return-, block_item -> .stm  | -short-, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, block_item -> .stm  | NOT, postfix_exp -> .postfix_exp LParen RParen  | Caret, primary_exp -> .ID  | AND, postfix_exp -> .postfix_exp LParen RParen  | Dot, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | String, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, exp_stm -> .Semicolon  | NOT, jump_stm -> .-goto- ID  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | Tilde, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, block_item_list -> .block_item_list block_item  | ID, selection_stm -> .if LParen exp RParen stm  | -fixed3-, dec -> .dec_specifier init_dec_list Semicolon  | -float4-, exp_stm -> .exp Semicolon  | for, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Decrement  | LBrack, primary_exp -> .ID  | Ampersand, stm -> .exp_stm  | RBrace, exp_stm -> .Semicolon  | RBrace, stm -> .exp_stm  | Decrement, block_item -> .dec  | -fixed2-, compound_stm -> .LBrace RBrace  | RBrace, primary_exp -> .LParen exp RParen  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, stm -> .selection_stm  | -long-, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, block_item_list -> .block_item  | -do-, unary_op -> .NOT  | NOT, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | ID, binary_exp -> .binary_exp binary_op unary_exp  | GT, jump_stm -> .-goto- ID  | -continue-, exp_stm -> .Semicolon  | String, postfix_exp -> .postfix_exp Decrement  | Assign, stm -> .iteration_stm  | RBrace, stm -> .iteration_stm  | -struct-, dec -> .dec_specifier init_dec_list Semicolon  | break, jump_stm -> .break  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | RBrace, exp_stm -> .exp Semicolon  | -float2-, iteration_stm -> .while LParen exp RParen stm  | -float4-, exp_stm -> .Semicolon  | -half3-, dec -> .struct_specifier Semicolon  | Increment, unary_exp -> .Decrement unary_exp  | Plus, primary_exp -> .LParen exp RParen  | Plus, type_specifier -> .-sampler2D-  | ID, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, compound_stm -> .LBrace RBrace  | -float-, unary_exp -> .unary_op unary_exp  | LeftShift, block_item_list -> .block_item  | -float3-, dec -> .dec_specifier init_dec_list Semicolon  | -do-, block_item_list -> .block_item  | Semicolon, block_item -> .stm  | -long-, stm -> .iteration_stm  | -sampler2D-, jump_stm -> .-goto- ID  | NOT, jump_stm -> .-continue-  | Decrement, unary_exp -> .postfix_exp  | Plus, type_specifier -> .-float4-  | ID, unary_op -> .Plus  | Tilde, compound_stm -> .LBrace RBrace  | Minus, iteration_stm -> .while LParen exp RParen stm  | -char-, iteration_stm -> .while LParen exp RParen stm  | ID, unary_exp -> .Increment unary_exp  | LE, jump_stm -> .-return- exp Semicolon  | -uniform-, jump_stm -> .-goto- ID  | -char-, stm -> .iteration_stm  | -return-, jump_stm -> .-return- exp Semicolon  | for, dec -> .struct_specifier Semicolon  | -void-, block_item -> .stm  | -void-, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, compound_stm -> .LBrace block_item_list RBrace  | -struct-, stm -> .iteration_stm  | if, type_specifier -> .-void-  | ID, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, jump_stm -> .break  | -float2-, primary_exp -> .Number  | LParen, jump_stm -> .break  | -half3-, typedef_name -> .ID  | ID, selection_stm -> .if LParen exp RParen stm  | -char-, stm -> .jump_stm  | -fixed3-, postfix_exp -> .postfix_exp Decrement  | LParen, stm -> .compound_stm  | Minus, type_qualifier -> .-uniform-  | -float3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, compound_stm -> LBrace .RBrace  | else, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -void-, block_item -> .stm  | RBrace, unary_exp -> .postfix_exp  | LeftShift, )
477 <- (391, 'Semicolon') (exp_stm -> Semicolon.  | else, exp_stm -> Semicolon.  | while, )
478 <- (391, 'break') (jump_stm -> break.  | else, jump_stm -> break.  | while, )
479 <- (391, 'compound_stm') (stm -> compound_stm.  | else, stm -> compound_stm.  | while, )
480 <- (391, 'exp') (exp_stm -> exp .Semicolon  | else, exp -> exp .Comma assignment_exp  | Comma, exp_stm -> exp .Semicolon  | while, exp -> exp .Comma assignment_exp  | Semicolon, )
481 <- (391, 'exp_stm') (stm -> exp_stm.  | while, stm -> exp_stm.  | else, )
482 <- (391, 'for') (iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | else, iteration_stm -> for .LParen exp Semicolon exp Semicolon exp RParen stm  | while, )
483 <- (391, 'if') (selection_stm -> if .LParen exp RParen stm else stm  | while, selection_stm -> if .LParen exp RParen stm  | while, selection_stm -> if .LParen exp RParen stm else stm  | else, selection_stm -> if .LParen exp RParen stm  | else, )
484 <- (391, 'iteration_stm') (stm -> iteration_stm.  | else, stm -> iteration_stm.  | while, )
485 <- (391, 'jump_stm') (stm -> jump_stm.  | while, stm -> jump_stm.  | else, )
486 <- (391, 'selection_stm') (stm -> selection_stm.  | while, stm -> selection_stm.  | else, )
487 <- (391, 'stm') (selection_stm -> if LParen exp RParen stm .else stm  | while, selection_stm -> if LParen exp RParen stm.  | while, )
488 <- (391, 'while') (iteration_stm -> while .LParen exp RParen stm  | while, iteration_stm -> while .LParen exp RParen stm  | else, )
489 <- (392, 'RParen') (iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | Minus, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | Plus, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -fixed4-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -double-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -half4-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -struct-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -continue-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | for, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | ID, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | Increment, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -half2-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | Decrement, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | break, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | String, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -float4-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -long-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | while, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | Number, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | RBrace, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -uniform-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -short-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -half3-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | if, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | Tilde, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -fixed3-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | LBrace, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -do-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -float2-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | LParen, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -fixed2-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | NOT, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -float3-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -goto-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -sampler2D-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | Semicolon, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -return-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -void-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -int-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -float-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -char-, )
490 <- (393, 'stm') (iteration_stm -> while LParen exp RParen stm.  | while, )
491 <- (394, 'conditional_exp') (conditional_exp -> binary_exp Question exp Colon conditional_exp.  | RParen, conditional_exp -> binary_exp Question exp Colon conditional_exp.  | Comma, )
492 <- (394, 'unary_exp') (binary_exp -> unary_exp.  | RParen, binary_exp -> unary_exp.  | Percent, binary_exp -> unary_exp.  | GE, binary_exp -> unary_exp.  | Times, binary_exp -> unary_exp.  | Comma, binary_exp -> unary_exp.  | Minus, binary_exp -> unary_exp.  | Plus, binary_exp -> unary_exp.  | GT, binary_exp -> unary_exp.  | LeftShift, binary_exp -> unary_exp.  | AND, binary_exp -> unary_exp.  | EQ, binary_exp -> unary_exp.  | LE, binary_exp -> unary_exp.  | LT, binary_exp -> unary_exp.  | Divide, binary_exp -> unary_exp.  | RightShift, binary_exp -> unary_exp.  | Question, binary_exp -> unary_exp.  | Caret, binary_exp -> unary_exp.  | OR, binary_exp -> unary_exp.  | NEQ, binary_exp -> unary_exp.  | Ampersand, binary_exp -> unary_exp.  | VerticalBar, )
493 <- (397, 'RParen') (primary_exp -> LParen exp RParen.  | Percent, primary_exp -> LParen exp RParen.  | Minus, primary_exp -> LParen exp RParen.  | Question, primary_exp -> LParen exp RParen.  | RParen, primary_exp -> LParen exp RParen.  | LT, primary_exp -> LParen exp RParen.  | GT, primary_exp -> LParen exp RParen.  | AND, primary_exp -> LParen exp RParen.  | Caret, primary_exp -> LParen exp RParen.  | Decrement, primary_exp -> LParen exp RParen.  | NEQ, primary_exp -> LParen exp RParen.  | Divide, primary_exp -> LParen exp RParen.  | Dot, primary_exp -> LParen exp RParen.  | LParen, primary_exp -> LParen exp RParen.  | GE, primary_exp -> LParen exp RParen.  | VerticalBar, primary_exp -> LParen exp RParen.  | OR, primary_exp -> LParen exp RParen.  | LBrack, primary_exp -> LParen exp RParen.  | Plus, primary_exp -> LParen exp RParen.  | EQ, primary_exp -> LParen exp RParen.  | LE, primary_exp -> LParen exp RParen.  | Comma, primary_exp -> LParen exp RParen.  | Times, primary_exp -> LParen exp RParen.  | Ampersand, primary_exp -> LParen exp RParen.  | RightShift, primary_exp -> LParen exp RParen.  | LeftShift, primary_exp -> LParen exp RParen.  | Increment, )
494 <- (399, 'ID') (postfix_exp -> postfix_exp Dot ID.  | OR, postfix_exp -> postfix_exp Dot ID.  | Times, postfix_exp -> postfix_exp Dot ID.  | Percent, postfix_exp -> postfix_exp Dot ID.  | Minus, postfix_exp -> postfix_exp Dot ID.  | AND, postfix_exp -> postfix_exp Dot ID.  | Plus, postfix_exp -> postfix_exp Dot ID.  | Ampersand, postfix_exp -> postfix_exp Dot ID.  | LParen, postfix_exp -> postfix_exp Dot ID.  | Caret, postfix_exp -> postfix_exp Dot ID.  | VerticalBar, postfix_exp -> postfix_exp Dot ID.  | GT, postfix_exp -> postfix_exp Dot ID.  | Divide, postfix_exp -> postfix_exp Dot ID.  | Increment, postfix_exp -> postfix_exp Dot ID.  | RParen, postfix_exp -> postfix_exp Dot ID.  | EQ, postfix_exp -> postfix_exp Dot ID.  | Decrement, postfix_exp -> postfix_exp Dot ID.  | GE, postfix_exp -> postfix_exp Dot ID.  | LeftShift, postfix_exp -> postfix_exp Dot ID.  | Dot, postfix_exp -> postfix_exp Dot ID.  | LBrack, postfix_exp -> postfix_exp Dot ID.  | Comma, postfix_exp -> postfix_exp Dot ID.  | NEQ, postfix_exp -> postfix_exp Dot ID.  | RightShift, postfix_exp -> postfix_exp Dot ID.  | LT, postfix_exp -> postfix_exp Dot ID.  | LE, postfix_exp -> postfix_exp Dot ID.  | Question, )
495 <- (401, 'exp') (postfix_exp -> postfix_exp LBrack exp .RBrack  | Caret, postfix_exp -> postfix_exp LBrack exp .RBrack  | Question, postfix_exp -> postfix_exp LBrack exp .RBrack  | EQ, postfix_exp -> postfix_exp LBrack exp .RBrack  | LBrack, postfix_exp -> postfix_exp LBrack exp .RBrack  | AND, postfix_exp -> postfix_exp LBrack exp .RBrack  | Decrement, postfix_exp -> postfix_exp LBrack exp .RBrack  | LeftShift, exp -> exp .Comma assignment_exp  | RBrack, postfix_exp -> postfix_exp LBrack exp .RBrack  | Percent, postfix_exp -> postfix_exp LBrack exp .RBrack  | Increment, postfix_exp -> postfix_exp LBrack exp .RBrack  | Ampersand, postfix_exp -> postfix_exp LBrack exp .RBrack  | RightShift, exp -> exp .Comma assignment_exp  | Comma, postfix_exp -> postfix_exp LBrack exp .RBrack  | OR, postfix_exp -> postfix_exp LBrack exp .RBrack  | Divide, postfix_exp -> postfix_exp LBrack exp .RBrack  | Minus, postfix_exp -> postfix_exp LBrack exp .RBrack  | GT, postfix_exp -> postfix_exp LBrack exp .RBrack  | Comma, postfix_exp -> postfix_exp LBrack exp .RBrack  | NEQ, postfix_exp -> postfix_exp LBrack exp .RBrack  | Plus, postfix_exp -> postfix_exp LBrack exp .RBrack  | LParen, postfix_exp -> postfix_exp LBrack exp .RBrack  | LT, postfix_exp -> postfix_exp LBrack exp .RBrack  | Times, postfix_exp -> postfix_exp LBrack exp .RBrack  | RParen, postfix_exp -> postfix_exp LBrack exp .RBrack  | LE, postfix_exp -> postfix_exp LBrack exp .RBrack  | VerticalBar, postfix_exp -> postfix_exp LBrack exp .RBrack  | GE, postfix_exp -> postfix_exp LBrack exp .RBrack  | Dot, )
496 <- (402, 'RParen') (postfix_exp -> postfix_exp LParen RParen.  | Comma, postfix_exp -> postfix_exp LParen RParen.  | GE, postfix_exp -> postfix_exp LParen RParen.  | Decrement, postfix_exp -> postfix_exp LParen RParen.  | Divide, postfix_exp -> postfix_exp LParen RParen.  | Question, postfix_exp -> postfix_exp LParen RParen.  | LE, postfix_exp -> postfix_exp LParen RParen.  | LT, postfix_exp -> postfix_exp LParen RParen.  | LeftShift, postfix_exp -> postfix_exp LParen RParen.  | Percent, postfix_exp -> postfix_exp LParen RParen.  | GT, postfix_exp -> postfix_exp LParen RParen.  | RightShift, postfix_exp -> postfix_exp LParen RParen.  | Ampersand, postfix_exp -> postfix_exp LParen RParen.  | Minus, postfix_exp -> postfix_exp LParen RParen.  | Plus, postfix_exp -> postfix_exp LParen RParen.  | LParen, postfix_exp -> postfix_exp LParen RParen.  | OR, postfix_exp -> postfix_exp LParen RParen.  | NEQ, postfix_exp -> postfix_exp LParen RParen.  | LBrack, postfix_exp -> postfix_exp LParen RParen.  | Increment, postfix_exp -> postfix_exp LParen RParen.  | Caret, postfix_exp -> postfix_exp LParen RParen.  | AND, postfix_exp -> postfix_exp LParen RParen.  | Dot, postfix_exp -> postfix_exp LParen RParen.  | RParen, postfix_exp -> postfix_exp LParen RParen.  | EQ, postfix_exp -> postfix_exp LParen RParen.  | Times, postfix_exp -> postfix_exp LParen RParen.  | VerticalBar, )
497 <- (402, 'argument_exp_list') (postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LBrack, argument_exp_list -> argument_exp_list .Comma assignment_exp  | Comma, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | NEQ, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Times, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Plus, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Ampersand, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | EQ, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Increment, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | OR, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | GT, argument_exp_list -> argument_exp_list .Comma assignment_exp  | RParen, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | VerticalBar, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | GE, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LT, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Dot, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Caret, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Percent, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | RParen, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LeftShift, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | RightShift, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LParen, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Question, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Minus, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Decrement, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Comma, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Divide, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LE, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | AND, )
498 <- (407, 'Colon') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .unary_op unary_exp  | Colon, unary_exp -> .Increment unary_exp  | Colon, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, postfix_exp -> .postfix_exp LParen RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, conditional_exp -> .binary_exp  | Colon, binary_exp -> .unary_exp  | EQ, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, primary_exp -> .String  | Colon, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | Colon, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Colon, primary_exp -> .ID  | Plus, unary_exp -> .postfix_exp  | Colon, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, postfix_exp -> .postfix_exp Decrement  | Colon, binary_exp -> .unary_exp  | LE, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Colon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Colon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .Decrement unary_exp  | Colon, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_op -> .Plus  | Minus, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, postfix_exp -> .postfix_exp Increment  | Colon, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .Tilde  | Number, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .Number  | Colon, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | LT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, binary_exp -> .unary_exp  | AND, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, conditional_exp -> binary_exp Question exp Colon .conditional_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp Decrement  | LT, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, primary_exp -> .LParen exp RParen  | Colon, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, conditional_exp -> binary_exp Question exp Colon .conditional_exp  | Colon, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, binary_exp -> .unary_exp  | Colon, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, postfix_exp -> .postfix_exp Dot ID  | Colon, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, binary_exp -> .unary_exp  | Question, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Colon, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .ID  | Comma, primary_exp -> .ID  | LBrack, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .Decrement unary_exp  | AND, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Times, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | Colon, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .Number  | Plus, unary_op -> .NOT  | Plus, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, binary_exp -> .binary_exp binary_op unary_exp  | Comma, unary_op -> .NOT  | String, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Colon, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .String  | GE, postfix_exp -> .postfix_exp Increment  | Dot, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
499 <- (408, 'unary_exp') (unary_exp -> Decrement unary_exp.  | RightShift, unary_exp -> Decrement unary_exp.  | LeftShift, unary_exp -> Decrement unary_exp.  | Question, unary_exp -> Decrement unary_exp.  | Minus, unary_exp -> Decrement unary_exp.  | VerticalBar, unary_exp -> Decrement unary_exp.  | Plus, unary_exp -> Decrement unary_exp.  | LE, unary_exp -> Decrement unary_exp.  | Colon, unary_exp -> Decrement unary_exp.  | Times, unary_exp -> Decrement unary_exp.  | Divide, unary_exp -> Decrement unary_exp.  | Caret, unary_exp -> Decrement unary_exp.  | AND, unary_exp -> Decrement unary_exp.  | Percent, unary_exp -> Decrement unary_exp.  | EQ, unary_exp -> Decrement unary_exp.  | OR, unary_exp -> Decrement unary_exp.  | LT, unary_exp -> Decrement unary_exp.  | GE, unary_exp -> Decrement unary_exp.  | Comma, unary_exp -> Decrement unary_exp.  | GT, unary_exp -> Decrement unary_exp.  | Ampersand, unary_exp -> Decrement unary_exp.  | NEQ, )
500 <- (410, 'unary_exp') (unary_exp -> Increment unary_exp.  | Minus, unary_exp -> Increment unary_exp.  | AND, unary_exp -> Increment unary_exp.  | Question, unary_exp -> Increment unary_exp.  | LT, unary_exp -> Increment unary_exp.  | Caret, unary_exp -> Increment unary_exp.  | NEQ, unary_exp -> Increment unary_exp.  | LE, unary_exp -> Increment unary_exp.  | Comma, unary_exp -> Increment unary_exp.  | LeftShift, unary_exp -> Increment unary_exp.  | Colon, unary_exp -> Increment unary_exp.  | Divide, unary_exp -> Increment unary_exp.  | GT, unary_exp -> Increment unary_exp.  | Plus, unary_exp -> Increment unary_exp.  | OR, unary_exp -> Increment unary_exp.  | VerticalBar, unary_exp -> Increment unary_exp.  | GE, unary_exp -> Increment unary_exp.  | Times, unary_exp -> Increment unary_exp.  | RightShift, unary_exp -> Increment unary_exp.  | EQ, unary_exp -> Increment unary_exp.  | Percent, unary_exp -> Increment unary_exp.  | Ampersand, )
501 <- (411, 'exp') (primary_exp -> LParen exp .RParen  | LeftShift, primary_exp -> LParen exp .RParen  | RightShift, primary_exp -> LParen exp .RParen  | NEQ, primary_exp -> LParen exp .RParen  | Ampersand, primary_exp -> LParen exp .RParen  | AND, primary_exp -> LParen exp .RParen  | LBrack, primary_exp -> LParen exp .RParen  | LParen, primary_exp -> LParen exp .RParen  | EQ, primary_exp -> LParen exp .RParen  | LE, exp -> exp .Comma assignment_exp  | Comma, primary_exp -> LParen exp .RParen  | Minus, primary_exp -> LParen exp .RParen  | VerticalBar, primary_exp -> LParen exp .RParen  | Percent, primary_exp -> LParen exp .RParen  | Divide, primary_exp -> LParen exp .RParen  | Dot, primary_exp -> LParen exp .RParen  | GT, primary_exp -> LParen exp .RParen  | LT, primary_exp -> LParen exp .RParen  | Comma, primary_exp -> LParen exp .RParen  | Increment, primary_exp -> LParen exp .RParen  | Plus, primary_exp -> LParen exp .RParen  | Times, primary_exp -> LParen exp .RParen  | Colon, primary_exp -> LParen exp .RParen  | Decrement, primary_exp -> LParen exp .RParen  | OR, exp -> exp .Comma assignment_exp  | RParen, primary_exp -> LParen exp .RParen  | Question, primary_exp -> LParen exp .RParen  | GE, primary_exp -> LParen exp .RParen  | Caret, )
502 <- (414, 'Decrement') (postfix_exp -> postfix_exp Decrement.  | OR, postfix_exp -> postfix_exp Decrement.  | RightShift, postfix_exp -> postfix_exp Decrement.  | Caret, postfix_exp -> postfix_exp Decrement.  | LParen, postfix_exp -> postfix_exp Decrement.  | Dot, postfix_exp -> postfix_exp Decrement.  | EQ, postfix_exp -> postfix_exp Decrement.  | GT, postfix_exp -> postfix_exp Decrement.  | LT, postfix_exp -> postfix_exp Decrement.  | Question, postfix_exp -> postfix_exp Decrement.  | Plus, postfix_exp -> postfix_exp Decrement.  | Comma, postfix_exp -> postfix_exp Decrement.  | Percent, postfix_exp -> postfix_exp Decrement.  | GE, postfix_exp -> postfix_exp Decrement.  | Divide, postfix_exp -> postfix_exp Decrement.  | Colon, postfix_exp -> postfix_exp Decrement.  | Times, postfix_exp -> postfix_exp Decrement.  | Decrement, postfix_exp -> postfix_exp Decrement.  | Increment, postfix_exp -> postfix_exp Decrement.  | NEQ, postfix_exp -> postfix_exp Decrement.  | Minus, postfix_exp -> postfix_exp Decrement.  | LBrack, postfix_exp -> postfix_exp Decrement.  | Ampersand, postfix_exp -> postfix_exp Decrement.  | AND, postfix_exp -> postfix_exp Decrement.  | LE, postfix_exp -> postfix_exp Decrement.  | VerticalBar, postfix_exp -> postfix_exp Decrement.  | LeftShift, )
503 <- (414, 'Dot') (postfix_exp -> postfix_exp Dot .ID  | Percent, postfix_exp -> postfix_exp Dot .ID  | LBrack, postfix_exp -> postfix_exp Dot .ID  | Question, postfix_exp -> postfix_exp Dot .ID  | Divide, postfix_exp -> postfix_exp Dot .ID  | Plus, postfix_exp -> postfix_exp Dot .ID  | AND, postfix_exp -> postfix_exp Dot .ID  | Ampersand, postfix_exp -> postfix_exp Dot .ID  | NEQ, postfix_exp -> postfix_exp Dot .ID  | VerticalBar, postfix_exp -> postfix_exp Dot .ID  | Dot, postfix_exp -> postfix_exp Dot .ID  | Decrement, postfix_exp -> postfix_exp Dot .ID  | LE, postfix_exp -> postfix_exp Dot .ID  | Increment, postfix_exp -> postfix_exp Dot .ID  | LT, postfix_exp -> postfix_exp Dot .ID  | Times, postfix_exp -> postfix_exp Dot .ID  | Minus, postfix_exp -> postfix_exp Dot .ID  | OR, postfix_exp -> postfix_exp Dot .ID  | LeftShift, postfix_exp -> postfix_exp Dot .ID  | Colon, postfix_exp -> postfix_exp Dot .ID  | EQ, postfix_exp -> postfix_exp Dot .ID  | Caret, postfix_exp -> postfix_exp Dot .ID  | GT, postfix_exp -> postfix_exp Dot .ID  | GE, postfix_exp -> postfix_exp Dot .ID  | LParen, postfix_exp -> postfix_exp Dot .ID  | RightShift, postfix_exp -> postfix_exp Dot .ID  | Comma, )
504 <- (414, 'Increment') (postfix_exp -> postfix_exp Increment.  | VerticalBar, postfix_exp -> postfix_exp Increment.  | Dot, postfix_exp -> postfix_exp Increment.  | Percent, postfix_exp -> postfix_exp Increment.  | GE, postfix_exp -> postfix_exp Increment.  | Comma, postfix_exp -> postfix_exp Increment.  | OR, postfix_exp -> postfix_exp Increment.  | LT, postfix_exp -> postfix_exp Increment.  | LE, postfix_exp -> postfix_exp Increment.  | AND, postfix_exp -> postfix_exp Increment.  | GT, postfix_exp -> postfix_exp Increment.  | RightShift, postfix_exp -> postfix_exp Increment.  | Caret, postfix_exp -> postfix_exp Increment.  | LeftShift, postfix_exp -> postfix_exp Increment.  | LBrack, postfix_exp -> postfix_exp Increment.  | Increment, postfix_exp -> postfix_exp Increment.  | Question, postfix_exp -> postfix_exp Increment.  | Ampersand, postfix_exp -> postfix_exp Increment.  | NEQ, postfix_exp -> postfix_exp Increment.  | Minus, postfix_exp -> postfix_exp Increment.  | Colon, postfix_exp -> postfix_exp Increment.  | Decrement, postfix_exp -> postfix_exp Increment.  | LParen, postfix_exp -> postfix_exp Increment.  | Divide, postfix_exp -> postfix_exp Increment.  | Plus, postfix_exp -> postfix_exp Increment.  | EQ, postfix_exp -> postfix_exp Increment.  | Times, )
505 <- (414, 'LBrack') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, postfix_exp -> postfix_exp LBrack .exp RBrack  | RightShift, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | LBrack, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_exp -> .Increment unary_exp  | Divide, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> postfix_exp LBrack .exp RBrack  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RBrack, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, primary_exp -> .String  | Ampersand, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, postfix_exp -> .postfix_exp LParen RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RBrack, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, postfix_exp -> postfix_exp LBrack .exp RBrack  | OR, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, postfix_exp -> postfix_exp LBrack .exp RBrack  | NEQ, postfix_exp -> .postfix_exp Dot ID  | Ampersand, primary_exp -> .ID  | RBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | LParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> postfix_exp LBrack .exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, postfix_exp -> postfix_exp LBrack .exp RBrack  | EQ, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, unary_exp -> .postfix_exp  | LE, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | Decrement, postfix_exp -> .postfix_exp Increment  | LeftShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | LT, unary_exp -> .unary_op unary_exp  | Assign, postfix_exp -> .postfix_exp Decrement  | LeftShift, unary_op -> .Minus  | Number, primary_exp -> .Number  | RBrack, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, postfix_exp -> .postfix_exp Decrement  | RBrack, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, unary_exp -> .postfix_exp  | RBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> postfix_exp LBrack .exp RBrack  | VerticalBar, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> postfix_exp LBrack .exp RBrack  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, unary_exp -> .Decrement unary_exp  | Plus, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | RBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, binary_exp -> .unary_exp  | LT, exp -> .exp Comma assignment_exp  | RBrack, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, unary_exp -> .Decrement unary_exp  | RBrack, postfix_exp -> .primary_exp  | Increment, postfix_exp -> .postfix_exp LParen RParen  | RBrack, primary_exp -> .LParen exp RParen  | GE, unary_exp -> .Decrement unary_exp  | OR, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | LeftShift, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .primary_exp  | Decrement, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .primary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> postfix_exp LBrack .exp RBrack  | Increment, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, conditional_exp -> .binary_exp  | RBrack, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | EQ, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .Tilde  | Number, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | RBrack, primary_exp -> .String  | Question, primary_exp -> .Number  | Percent, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, primary_exp -> .ID  | GE, postfix_exp -> .postfix_exp Decrement  | LE, postfix_exp -> postfix_exp LBrack .exp RBrack  | Minus, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, exp -> .assignment_exp  | RBrack, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | Decrement, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> postfix_exp LBrack .exp RBrack  | GT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, unary_exp -> .postfix_exp  | OR, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, unary_exp -> .Decrement unary_exp  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> postfix_exp LBrack .exp RBrack  | Ampersand, binary_exp -> .unary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | RBrack, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> postfix_exp LBrack .exp RBrack  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | RBrack, unary_op -> .Plus  | Decrement, postfix_exp -> postfix_exp LBrack .exp RBrack  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Assign, primary_exp -> .String  | Assign, postfix_exp -> postfix_exp LBrack .exp RBrack  | Dot, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | Caret, assignment_exp -> .conditional_exp  | RBrack, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, primary_exp -> .String  | RBrack, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .primary_exp  | GT, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .postfix_exp  | NEQ, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, postfix_exp -> postfix_exp LBrack .exp RBrack  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, postfix_exp -> postfix_exp LBrack .exp RBrack  | Plus, primary_exp -> .Number  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Caret, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .ID  | NEQ, binary_exp -> .unary_exp  | RBrack, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | RBrack, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Increment  | RBrack, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> postfix_exp LBrack .exp RBrack  | Comma, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .primary_exp  | RBrack, primary_exp -> .ID  | Increment, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, postfix_exp -> postfix_exp LBrack .exp RBrack  | Question, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> postfix_exp LBrack .exp RBrack  | LParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, postfix_exp -> postfix_exp LBrack .exp RBrack  | Colon, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, postfix_exp -> .postfix_exp Decrement  | LT, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, unary_exp -> .Increment unary_exp  | RBrack, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp Decrement  | Assign, postfix_exp -> .postfix_exp Increment  | LBrack, primary_exp -> .ID  | Dot, assignment_exp -> .unary_exp assignment_op assignment_exp  | RBrack, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | GE, )
506 <- (414, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, postfix_exp -> postfix_exp LParen .RParen  | LParen, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Question, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, unary_exp -> .postfix_exp  | Assign, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, unary_exp -> .postfix_exp  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp Dot ID  | Decrement, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Ampersand, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, unary_exp -> .postfix_exp  | RParen, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, postfix_exp -> postfix_exp LParen .RParen  | GT, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, postfix_exp -> postfix_exp LParen .RParen  | Colon, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Plus, primary_exp -> .Number  | Times, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, postfix_exp -> postfix_exp LParen .RParen  | LBrack, unary_exp -> .Increment unary_exp  | Ampersand, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, postfix_exp -> postfix_exp LParen .RParen  | EQ, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, postfix_exp -> postfix_exp LParen .RParen  | RightShift, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .unary_exp  | Plus, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Decrement, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, argument_exp_list -> .argument_exp_list Comma assignment_exp  | Comma, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> postfix_exp LParen .RParen  | LE, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, primary_exp -> .ID  | GT, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LE, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, postfix_exp -> .postfix_exp Increment  | LeftShift, postfix_exp -> postfix_exp LParen .RParen  | AND, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, postfix_exp -> postfix_exp LParen .RParen  | LeftShift, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> postfix_exp LParen .RParen  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, postfix_exp -> postfix_exp LParen .RParen  | VerticalBar, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, postfix_exp -> postfix_exp LParen .RParen  | Minus, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, argument_exp_list -> .argument_exp_list Comma assignment_exp  | RParen, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Plus, unary_exp -> .unary_op unary_exp  | Question, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | GT, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, postfix_exp -> postfix_exp LParen .RParen  | Divide, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, primary_exp -> .ID  | Divide, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, binary_exp -> .unary_exp  | LT, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Divide, postfix_exp -> postfix_exp LParen .RParen  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | GT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Comma, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, binary_exp -> .binary_exp binary_op unary_exp  | Question, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .unary_exp  | Ampersand, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, postfix_exp -> postfix_exp LParen .RParen  | LT, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | AND, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | RParen, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Minus  | Number, primary_exp -> .Number  | Percent, primary_exp -> .LParen exp RParen  | Question, postfix_exp -> postfix_exp LParen .RParen  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, unary_op -> .Tilde  | NOT, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, primary_exp -> .Number  | RParen, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | Decrement, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Percent, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | GE, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Dot, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, postfix_exp -> postfix_exp LParen .RParen  | Caret, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Increment  | LE, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Colon, postfix_exp -> postfix_exp LParen .RParen  | GE, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, primary_exp -> .ID  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Assign, unary_exp -> .Decrement unary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | RParen, primary_exp -> .String  | Assign, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | OR, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, primary_exp -> .ID  | LeftShift, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp LParen RParen  | Caret, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, primary_exp -> .Number  | NEQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Caret, binary_exp -> .unary_exp  | VerticalBar, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LParen, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, assignment_exp -> .conditional_exp  | RParen, postfix_exp -> .primary_exp  | GE, postfix_exp -> .postfix_exp Decrement  | Percent, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, postfix_exp -> postfix_exp LParen .RParen  | OR, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, argument_exp_list -> .assignment_exp  | RParen, primary_exp -> .Number  | Increment, postfix_exp -> postfix_exp LParen .RParen  | Increment, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LT, unary_exp -> .Increment unary_exp  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> postfix_exp LParen .RParen  | Percent, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Times, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | VerticalBar, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> postfix_exp LParen .RParen  | Question, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | EQ, postfix_exp -> postfix_exp LParen .RParen  | Decrement, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .unary_op unary_exp  | Assign, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .postfix_exp  | Comma, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .postfix_exp Dot ID  | RParen, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> postfix_exp LParen .RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .ID  | VerticalBar, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> postfix_exp LParen .RParen  | NEQ, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, argument_exp_list -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> postfix_exp LParen .RParen  | Plus, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, unary_exp -> .Increment unary_exp  | Question, unary_exp -> .postfix_exp  | LeftShift, )
507 <- (417, 'unary_exp') (unary_exp -> unary_op unary_exp.  | Comma, unary_exp -> unary_op unary_exp.  | GE, unary_exp -> unary_op unary_exp.  | RightShift, unary_exp -> unary_op unary_exp.  | Question, unary_exp -> unary_op unary_exp.  | LeftShift, unary_exp -> unary_op unary_exp.  | Plus, unary_exp -> unary_op unary_exp.  | Ampersand, unary_exp -> unary_op unary_exp.  | Divide, unary_exp -> unary_op unary_exp.  | NEQ, unary_exp -> unary_op unary_exp.  | EQ, unary_exp -> unary_op unary_exp.  | LE, unary_exp -> unary_op unary_exp.  | OR, unary_exp -> unary_op unary_exp.  | GT, unary_exp -> unary_op unary_exp.  | Percent, unary_exp -> unary_op unary_exp.  | LT, unary_exp -> unary_op unary_exp.  | Colon, unary_exp -> unary_op unary_exp.  | AND, unary_exp -> unary_op unary_exp.  | Caret, unary_exp -> unary_op unary_exp.  | Times, unary_exp -> unary_op unary_exp.  | VerticalBar, unary_exp -> unary_op unary_exp.  | Minus, )
508 <- (422, 'RBrack') (postfix_exp -> postfix_exp LBrack exp RBrack.  | NEQ, postfix_exp -> postfix_exp LBrack exp RBrack.  | Plus, postfix_exp -> postfix_exp LBrack exp RBrack.  | Question, postfix_exp -> postfix_exp LBrack exp RBrack.  | LT, postfix_exp -> postfix_exp LBrack exp RBrack.  | Assign, postfix_exp -> postfix_exp LBrack exp RBrack.  | LParen, postfix_exp -> postfix_exp LBrack exp RBrack.  | VerticalBar, postfix_exp -> postfix_exp LBrack exp RBrack.  | AND, postfix_exp -> postfix_exp LBrack exp RBrack.  | EQ, postfix_exp -> postfix_exp LBrack exp RBrack.  | Times, postfix_exp -> postfix_exp LBrack exp RBrack.  | LBrack, postfix_exp -> postfix_exp LBrack exp RBrack.  | Increment, postfix_exp -> postfix_exp LBrack exp RBrack.  | OR, postfix_exp -> postfix_exp LBrack exp RBrack.  | Caret, postfix_exp -> postfix_exp LBrack exp RBrack.  | Dot, postfix_exp -> postfix_exp LBrack exp RBrack.  | RightShift, postfix_exp -> postfix_exp LBrack exp RBrack.  | Colon, postfix_exp -> postfix_exp LBrack exp RBrack.  | Ampersand, postfix_exp -> postfix_exp LBrack exp RBrack.  | GT, postfix_exp -> postfix_exp LBrack exp RBrack.  | GE, postfix_exp -> postfix_exp LBrack exp RBrack.  | Minus, postfix_exp -> postfix_exp LBrack exp RBrack.  | Comma, postfix_exp -> postfix_exp LBrack exp RBrack.  | LeftShift, postfix_exp -> postfix_exp LBrack exp RBrack.  | Divide, postfix_exp -> postfix_exp LBrack exp RBrack.  | LE, postfix_exp -> postfix_exp LBrack exp RBrack.  | Percent, postfix_exp -> postfix_exp LBrack exp RBrack.  | Decrement, )
509 <- (424, 'RParen') (postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Comma, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Increment, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LeftShift, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | OR, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LParen, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | VerticalBar, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | EQ, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | RightShift, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Caret, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Minus, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Decrement, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Plus, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | GT, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Ampersand, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Dot, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Question, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LT, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Percent, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Times, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | NEQ, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Assign, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LBrack, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | AND, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Divide, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | GE, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Colon, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LE, )
510 <- (428, 'RBrack') (postfix_exp -> postfix_exp LBrack exp RBrack.  | NEQ, postfix_exp -> postfix_exp LBrack exp RBrack.  | Plus, postfix_exp -> postfix_exp LBrack exp RBrack.  | Question, postfix_exp -> postfix_exp LBrack exp RBrack.  | LT, postfix_exp -> postfix_exp LBrack exp RBrack.  | LParen, postfix_exp -> postfix_exp LBrack exp RBrack.  | VerticalBar, postfix_exp -> postfix_exp LBrack exp RBrack.  | AND, postfix_exp -> postfix_exp LBrack exp RBrack.  | EQ, postfix_exp -> postfix_exp LBrack exp RBrack.  | Times, postfix_exp -> postfix_exp LBrack exp RBrack.  | LBrack, postfix_exp -> postfix_exp LBrack exp RBrack.  | Increment, postfix_exp -> postfix_exp LBrack exp RBrack.  | OR, postfix_exp -> postfix_exp LBrack exp RBrack.  | Caret, postfix_exp -> postfix_exp LBrack exp RBrack.  | Dot, postfix_exp -> postfix_exp LBrack exp RBrack.  | RightShift, postfix_exp -> postfix_exp LBrack exp RBrack.  | Percent, postfix_exp -> postfix_exp LBrack exp RBrack.  | Ampersand, postfix_exp -> postfix_exp LBrack exp RBrack.  | GT, postfix_exp -> postfix_exp LBrack exp RBrack.  | GE, postfix_exp -> postfix_exp LBrack exp RBrack.  | Minus, postfix_exp -> postfix_exp LBrack exp RBrack.  | Comma, postfix_exp -> postfix_exp LBrack exp RBrack.  | LeftShift, postfix_exp -> postfix_exp LBrack exp RBrack.  | Divide, postfix_exp -> postfix_exp LBrack exp RBrack.  | LE, postfix_exp -> postfix_exp LBrack exp RBrack.  | Semicolon, postfix_exp -> postfix_exp LBrack exp RBrack.  | Decrement, )
511 <- (430, 'RParen') (postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Comma, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Increment, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LeftShift, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | OR, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Semicolon, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LParen, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | RightShift, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Minus, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Ampersand, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Times, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | EQ, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | VerticalBar, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Plus, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | GT, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Caret, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Dot, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Question, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Percent, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LT, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Decrement, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | NEQ, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LBrack, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | AND, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Divide, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | GE, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LE, )
512 <- (431, 'Semicolon') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -float4-, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | LParen, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -fixed3-, binary_exp -> .unary_exp  | RParen, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, primary_exp -> .ID  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -void-, postfix_exp -> .postfix_exp Dot ID  | Decrement, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, unary_exp -> .postfix_exp  | RParen, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | RParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .Increment unary_exp  | Ampersand, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | RightShift, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, postfix_exp -> .primary_exp  | LT, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | Number, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | Increment, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, unary_exp -> .unary_op unary_exp  | LE, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -short-, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -uniform-, postfix_exp -> .postfix_exp Dot ID  | RParen, primary_exp -> .String  | LeftShift, postfix_exp -> .postfix_exp Increment  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .primary_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, unary_exp -> .Increment unary_exp  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | LBrace, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | Plus, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | break, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -continue-, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | Question, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -half2-, postfix_exp -> .primary_exp  | LE, exp -> .assignment_exp  | RParen, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | RBrace, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -sampler2D-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | for, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | Minus, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | while, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, postfix_exp -> .primary_exp  | Minus, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .Number  | RParen, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -do-, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -double-, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -struct-, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .primary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -float2-, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | Tilde, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | LParen, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Increment, unary_op -> .Minus  | Number, primary_exp -> .Number  | Percent, assignment_exp -> .conditional_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, primary_exp -> .LParen exp RParen  | GE, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | ID, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -float3-, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, unary_exp -> .Increment unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, exp -> .exp Comma assignment_exp  | RParen, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_op -> .NOT  | Number, primary_exp -> .ID  | Assign, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -long-, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -int-, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | NOT, unary_exp -> .Decrement unary_exp  | Percent, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, primary_exp -> .Number  | Dot, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -return-, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -char-, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | RParen, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -fixed2-, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .Decrement unary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | RParen, primary_exp -> .String  | Assign, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -fixed4-, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, binary_exp -> .unary_exp  | Caret, primary_exp -> .ID  | VerticalBar, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .Number  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -half4-, primary_exp -> .String  | Caret, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -float-, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .ID  | NEQ, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -goto-, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, primary_exp -> .LParen exp RParen  | NEQ, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | String, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, primary_exp -> .String  | Comma, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -half3-, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .unary_op unary_exp  | Assign, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, postfix_exp -> .primary_exp  | Ampersand, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | if, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .String  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
513 <- (433, 'stm') (iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -float4-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -sampler2D-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | if, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -long-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | String, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -short-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -half2-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -void-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -float-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -fixed3-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | Minus, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -fixed4-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -uniform-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -fixed2-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | LBrace, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -float3-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -goto-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | ID, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | Increment, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -int-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -half4-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | break, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | Decrement, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | LParen, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -continue-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | RBrace, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -do-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -float2-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | NOT, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | else, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | while, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | Plus, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | Tilde, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -half3-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -struct-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | Number, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -return-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | for, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -double-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | -char-, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | Semicolon, )
514 <- (434, 'ID') (jump_stm -> -goto- ID.  | Number, jump_stm -> -goto- ID.  | -do-, jump_stm -> -goto- ID.  | -float-, jump_stm -> -goto- ID.  | -char-, jump_stm -> -goto- ID.  | NOT, jump_stm -> -goto- ID.  | -float3-, jump_stm -> -goto- ID.  | -float4-, jump_stm -> -goto- ID.  | else, jump_stm -> -goto- ID.  | Increment, jump_stm -> -goto- ID.  | -int-, jump_stm -> -goto- ID.  | Tilde, jump_stm -> -goto- ID.  | Decrement, jump_stm -> -goto- ID.  | LParen, jump_stm -> -goto- ID.  | -half2-, jump_stm -> -goto- ID.  | -half4-, jump_stm -> -goto- ID.  | ID, jump_stm -> -goto- ID.  | -float2-, jump_stm -> -goto- ID.  | -uniform-, jump_stm -> -goto- ID.  | break, jump_stm -> -goto- ID.  | -sampler2D-, jump_stm -> -goto- ID.  | -fixed4-, jump_stm -> -goto- ID.  | -half3-, jump_stm -> -goto- ID.  | -void-, jump_stm -> -goto- ID.  | -struct-, jump_stm -> -goto- ID.  | -fixed3-, jump_stm -> -goto- ID.  | String, jump_stm -> -goto- ID.  | -return-, jump_stm -> -goto- ID.  | -fixed2-, jump_stm -> -goto- ID.  | Semicolon, jump_stm -> -goto- ID.  | -long-, jump_stm -> -goto- ID.  | -goto-, jump_stm -> -goto- ID.  | RBrace, jump_stm -> -goto- ID.  | for, jump_stm -> -goto- ID.  | -continue-, jump_stm -> -goto- ID.  | while, jump_stm -> -goto- ID.  | if, jump_stm -> -goto- ID.  | Minus, jump_stm -> -goto- ID.  | Plus, jump_stm -> -goto- ID.  | -short-, jump_stm -> -goto- ID.  | LBrace, jump_stm -> -goto- ID.  | -double-, )
515 <- (435, 'exp') (jump_stm -> -return- exp .Semicolon  | Semicolon, jump_stm -> -return- exp .Semicolon  | LBrace, jump_stm -> -return- exp .Semicolon  | -do-, jump_stm -> -return- exp .Semicolon  | break, jump_stm -> -return- exp .Semicolon  | Number, jump_stm -> -return- exp .Semicolon  | -int-, jump_stm -> -return- exp .Semicolon  | Minus, jump_stm -> -return- exp .Semicolon  | -fixed3-, jump_stm -> -return- exp .Semicolon  | -void-, jump_stm -> -return- exp .Semicolon  | String, jump_stm -> -return- exp .Semicolon  | -return-, jump_stm -> -return- exp .Semicolon  | for, jump_stm -> -return- exp .Semicolon  | Decrement, jump_stm -> -return- exp .Semicolon  | Plus, exp -> exp .Comma assignment_exp  | Comma, jump_stm -> -return- exp .Semicolon  | -half4-, jump_stm -> -return- exp .Semicolon  | -float2-, jump_stm -> -return- exp .Semicolon  | -struct-, jump_stm -> -return- exp .Semicolon  | -long-, jump_stm -> -return- exp .Semicolon  | LParen, jump_stm -> -return- exp .Semicolon  | NOT, jump_stm -> -return- exp .Semicolon  | -goto-, jump_stm -> -return- exp .Semicolon  | else, jump_stm -> -return- exp .Semicolon  | -double-, jump_stm -> -return- exp .Semicolon  | Increment, jump_stm -> -return- exp .Semicolon  | RBrace, jump_stm -> -return- exp .Semicolon  | -float4-, exp -> exp .Comma assignment_exp  | Semicolon, jump_stm -> -return- exp .Semicolon  | if, jump_stm -> -return- exp .Semicolon  | -uniform-, jump_stm -> -return- exp .Semicolon  | -short-, jump_stm -> -return- exp .Semicolon  | -half3-, jump_stm -> -return- exp .Semicolon  | -sampler2D-, jump_stm -> -return- exp .Semicolon  | -continue-, jump_stm -> -return- exp .Semicolon  | ID, jump_stm -> -return- exp .Semicolon  | while, jump_stm -> -return- exp .Semicolon  | -float-, jump_stm -> -return- exp .Semicolon  | -float3-, jump_stm -> -return- exp .Semicolon  | Tilde, jump_stm -> -return- exp .Semicolon  | -fixed2-, jump_stm -> -return- exp .Semicolon  | -char-, jump_stm -> -return- exp .Semicolon  | -half2-, jump_stm -> -return- exp .Semicolon  | -fixed4-, )
516 <- (436, 'RBrace') (compound_stm -> LBrace RBrace.  | Minus, compound_stm -> LBrace RBrace.  | -half3-, compound_stm -> LBrace RBrace.  | String, compound_stm -> LBrace RBrace.  | for, compound_stm -> LBrace RBrace.  | -return-, compound_stm -> LBrace RBrace.  | -void-, compound_stm -> LBrace RBrace.  | Increment, compound_stm -> LBrace RBrace.  | -int-, compound_stm -> LBrace RBrace.  | Decrement, compound_stm -> LBrace RBrace.  | Plus, compound_stm -> LBrace RBrace.  | -goto-, compound_stm -> LBrace RBrace.  | -fixed3-, compound_stm -> LBrace RBrace.  | -continue-, compound_stm -> LBrace RBrace.  | -sampler2D-, compound_stm -> LBrace RBrace.  | -float4-, compound_stm -> LBrace RBrace.  | -float3-, compound_stm -> LBrace RBrace.  | Tilde, compound_stm -> LBrace RBrace.  | ID, compound_stm -> LBrace RBrace.  | Semicolon, compound_stm -> LBrace RBrace.  | -half2-, compound_stm -> LBrace RBrace.  | -do-, compound_stm -> LBrace RBrace.  | -long-, compound_stm -> LBrace RBrace.  | -float-, compound_stm -> LBrace RBrace.  | -fixed4-, compound_stm -> LBrace RBrace.  | LParen, compound_stm -> LBrace RBrace.  | if, compound_stm -> LBrace RBrace.  | while, compound_stm -> LBrace RBrace.  | Number, compound_stm -> LBrace RBrace.  | -char-, compound_stm -> LBrace RBrace.  | LBrace, compound_stm -> LBrace RBrace.  | else, compound_stm -> LBrace RBrace.  | -struct-, compound_stm -> LBrace RBrace.  | RBrace, compound_stm -> LBrace RBrace.  | -half4-, compound_stm -> LBrace RBrace.  | -short-, compound_stm -> LBrace RBrace.  | -uniform-, compound_stm -> LBrace RBrace.  | -float2-, compound_stm -> LBrace RBrace.  | NOT, compound_stm -> LBrace RBrace.  | -fixed2-, compound_stm -> LBrace RBrace.  | break, compound_stm -> LBrace RBrace.  | -double-, )
517 <- (436, 'block_item_list') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, iteration_stm -> .while LParen exp RParen stm  | -fixed3-, block_item_list -> block_item_list .block_item  | -void-, compound_stm -> LBrace block_item_list .RBrace  | -float3-, exp_stm -> .exp Semicolon  | LParen, stm -> .iteration_stm  | String, compound_stm -> LBrace block_item_list .RBrace  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -char-, jump_stm -> .break  | -continue-, exp_stm -> .exp Semicolon  | -float4-, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, stm -> .iteration_stm  | Number, unary_exp -> .postfix_exp  | Ampersand, dec -> .dec_specifier init_dec_list Semicolon  | -fixed3-, compound_stm -> .LBrace RBrace  | -do-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float3-, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_op -> .Minus  | Minus, stm -> .compound_stm  | if, exp_stm -> .Semicolon  | -struct-, unary_exp -> .postfix_exp  | Assign, postfix_exp -> .postfix_exp LParen RParen  | RightShift, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -long-, compound_stm -> LBrace block_item_list .RBrace  | while, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, jump_stm -> .-goto- ID  | LParen, postfix_exp -> .postfix_exp Increment  | GT, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, unary_exp -> .postfix_exp  | GT, compound_stm -> .LBrace RBrace  | ID, jump_stm -> .-goto- ID  | -float4-, postfix_exp -> .postfix_exp LParen RParen  | GT, selection_stm -> .if LParen exp RParen stm else stm  | while, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -struct-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LParen, compound_stm -> .LBrace block_item_list RBrace  | Number, postfix_exp -> .postfix_exp Increment  | OR, exp_stm -> .Semicolon  | -long-, iteration_stm -> .while LParen exp RParen stm  | -fixed4-, block_item -> .dec  | while, unary_op -> .NOT  | Tilde, dec -> .struct_specifier Semicolon  | for, binary_exp -> .unary_exp  | Divide, dec -> .struct_specifier Semicolon  | -continue-, unary_op -> .Tilde  | LParen, selection_stm -> .if LParen exp RParen stm else stm  | -int-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | break, compound_stm -> .LBrace block_item_list RBrace  | Tilde, block_item -> .stm  | -return-, compound_stm -> .LBrace RBrace  | -float2-, exp_stm -> .exp Semicolon  | -do-, unary_op -> .Plus  | ID, compound_stm -> .LBrace RBrace  | -goto-, selection_stm -> .if LParen exp RParen stm else stm  | RBrace, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Dot ID  | Divide, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, jump_stm -> .-continue-  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | LBrace, postfix_exp -> .primary_exp  | Semicolon, jump_stm -> .-continue-  | -fixed4-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, dec -> .struct_specifier Semicolon  | -double-, stm -> .jump_stm  | -struct-, unary_exp -> .Increment unary_exp  | Divide, jump_stm -> .-return- exp Semicolon  | while, dec -> .struct_specifier Semicolon  | LBrace, block_item_list -> block_item_list .block_item  | -uniform-, iteration_stm -> .while LParen exp RParen stm  | -sampler2D-, exp_stm -> .exp Semicolon  | -float3-, block_item -> .stm  | NOT, primary_exp -> .String  | Semicolon, block_item -> .stm  | -sampler2D-, stm -> .jump_stm  | -long-, jump_stm -> .-continue-  | ID, jump_stm -> .-return- exp Semicolon  | -struct-, dec -> .struct_specifier Semicolon  | -float2-, unary_op -> .Plus  | Minus, stm -> .iteration_stm  | -float4-, dec -> .dec_specifier init_dec_list Semicolon  | -int-, unary_exp -> .postfix_exp  | Times, compound_stm -> .LBrace RBrace  | -fixed3-, unary_exp -> .postfix_exp  | Semicolon, block_item_list -> block_item_list .block_item  | Semicolon, dec -> .struct_specifier Semicolon  | String, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed4-, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | if, compound_stm -> .LBrace block_item_list RBrace  | for, type_specifier -> .-half4-  | ID, postfix_exp -> .postfix_exp LParen RParen  | Percent, exp_stm -> .exp Semicolon  | -struct-, block_item -> .dec  | -float2-, selection_stm -> .if LParen exp RParen stm  | String, type_qualifier -> .-uniform-  | -long-, selection_stm -> .if LParen exp RParen stm  | -int-, type_specifier -> .-float2-  | ID, stm -> .jump_stm  | String, dec -> .struct_specifier Semicolon  | Number, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_exp -> .Increment unary_exp  | Plus, compound_stm -> LBrace block_item_list .RBrace  | LParen, exp_stm -> .Semicolon  | if, exp_stm -> .exp Semicolon  | -continue-, stm -> .iteration_stm  | -void-, postfix_exp -> .primary_exp  | LE, exp_stm -> .exp Semicolon  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | -float-, block_item -> .dec  | -uniform-, stm -> .jump_stm  | -half4-, jump_stm -> .-return- exp Semicolon  | -do-, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, dec -> .struct_specifier Semicolon  | -float-, stm -> .compound_stm  | NOT, compound_stm -> .LBrace RBrace  | for, postfix_exp -> .postfix_exp Dot ID  | AND, stm -> .jump_stm  | Decrement, primary_exp -> .String  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, stm -> .selection_stm  | -continue-, iteration_stm -> .while LParen exp RParen stm  | Tilde, exp -> .exp Comma assignment_exp  | Semicolon, jump_stm -> .-goto- ID  | -int-, exp_stm -> .Semicolon  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | -uniform-, type_specifier -> .-float-  | ID, block_item -> .stm  | for, selection_stm -> .if LParen exp RParen stm  | -float4-, type_specifier -> .-fixed3-  | ID, jump_stm -> .-return- exp Semicolon  | -return-, iteration_stm -> .while LParen exp RParen stm  | Minus, block_item -> .dec  | for, postfix_exp -> .postfix_exp LParen RParen  | LBrack, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, compound_stm -> LBrace block_item_list .RBrace  | -half3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed3-, compound_stm -> LBrace block_item_list .RBrace  | -sampler2D-, compound_stm -> .LBrace block_item_list RBrace  | -return-, jump_stm -> .break  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | -half2-, stm -> .iteration_stm  | LBrace, selection_stm -> .if LParen exp RParen stm else stm  | Number, stm -> .iteration_stm  | -uniform-, primary_exp -> .LParen exp RParen  | LE, primary_exp -> .LParen exp RParen  | Caret, compound_stm -> .LBrace block_item_list RBrace  | -float4-, compound_stm -> LBrace block_item_list .RBrace  | -short-, dec -> .struct_specifier Semicolon  | Tilde, binary_exp -> .unary_exp  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float-, binary_exp -> .unary_exp  | LT, selection_stm -> .if LParen exp RParen stm else stm  | -float3-, jump_stm -> .-return- exp Semicolon  | NOT, postfix_exp -> .postfix_exp Increment  | Times, selection_stm -> .if LParen exp RParen stm else stm  | Decrement, stm -> .selection_stm  | -fixed3-, stm -> .compound_stm  | -double-, jump_stm -> .break  | -do-, unary_exp -> .Increment unary_exp  | OR, exp_stm -> .Semicolon  | -continue-, selection_stm -> .if LParen exp RParen stm  | Minus, jump_stm -> .-continue-  | while, selection_stm -> .if LParen exp RParen stm else stm  | Tilde, primary_exp -> .ID  | Decrement, stm -> .selection_stm  | Number, compound_stm -> LBrace block_item_list .RBrace  | -float-, dec_specifier -> .type_specifier  | ID, unary_op -> .Minus  | ID, compound_stm -> LBrace block_item_list .RBrace  | else, compound_stm -> LBrace block_item_list .RBrace  | -half4-, dec -> .struct_specifier Semicolon  | -long-, compound_stm -> .LBrace RBrace  | while, stm -> .exp_stm  | -float-, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | EQ, compound_stm -> .LBrace block_item_list RBrace  | -int-, stm -> .exp_stm  | -double-, stm -> .selection_stm  | Minus, exp_stm -> .exp Semicolon  | -half3-, postfix_exp -> .postfix_exp Decrement  | Semicolon, stm -> .exp_stm  | while, unary_op -> .Tilde  | Number, dec -> .struct_specifier Semicolon  | -float4-, stm -> .jump_stm  | while, binary_exp -> .unary_exp  | Plus, stm -> .exp_stm  | -float4-, postfix_exp -> .postfix_exp LParen RParen  | OR, compound_stm -> .LBrace block_item_list RBrace  | if, postfix_exp -> .postfix_exp Dot ID  | LT, dec -> .dec_specifier init_dec_list Semicolon  | -fixed2-, unary_exp -> .unary_op unary_exp  | Assign, jump_stm -> .-return- exp Semicolon  | -half2-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, stm -> .iteration_stm  | -continue-, selection_stm -> .if LParen exp RParen stm else stm  | -float-, block_item -> .stm  | -float2-, dec -> .struct_specifier Semicolon  | -fixed2-, compound_stm -> .LBrace block_item_list RBrace  | String, block_item -> .dec  | Semicolon, unary_op -> .NOT  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | String, primary_exp -> .Number  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float4-, jump_stm -> .break  | -uniform-, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, dec -> .struct_specifier Semicolon  | NOT, dec -> .struct_specifier Semicolon  | Plus, dec -> .struct_specifier Semicolon  | -half3-, dec -> .struct_specifier Semicolon  | -half4-, jump_stm -> .-return- exp Semicolon  | -long-, compound_stm -> .LBrace RBrace  | -return-, stm -> .exp_stm  | NOT, compound_stm -> LBrace block_item_list .RBrace  | -float4-, stm -> .iteration_stm  | Increment, jump_stm -> .-return- exp Semicolon  | LParen, iteration_stm -> .while LParen exp RParen stm  | if, postfix_exp -> .primary_exp  | Plus, stm -> .jump_stm  | -float4-, primary_exp -> .String  | Minus, stm -> .compound_stm  | Tilde, stm -> .exp_stm  | -float2-, unary_op -> .Plus  | Increment, iteration_stm -> .while LParen exp RParen stm  | -goto-, block_item_list -> block_item_list .block_item  | -half4-, selection_stm -> .if LParen exp RParen stm  | NOT, primary_exp -> .String  | Times, stm -> .selection_stm  | while, stm -> .exp_stm  | -int-, stm -> .iteration_stm  | break, iteration_stm -> .while LParen exp RParen stm  | -half3-, stm -> .iteration_stm  | -double-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -short-, stm -> .iteration_stm  | -float3-, selection_stm -> .if LParen exp RParen stm  | -half4-, primary_exp -> .String  | Increment, jump_stm -> .-return- exp Semicolon  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -uniform-, block_item -> .dec  | -sampler2D-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, jump_stm -> .-return- exp Semicolon  | ID, jump_stm -> .-return- exp Semicolon  | -char-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed3-, primary_exp -> .Number  | Dot, exp_stm -> .Semicolon  | -do-, exp_stm -> .Semicolon  | for, primary_exp -> .LParen exp RParen  | Ampersand, block_item -> .dec  | -continue-, type_qualifier -> .-uniform-  | -fixed3-, block_item_list -> block_item_list .block_item  | Tilde, postfix_exp -> .primary_exp  | Comma, block_item -> .dec  | Increment, primary_exp -> .ID  | LBrack, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, block_item -> .dec  | NOT, selection_stm -> .if LParen exp RParen stm  | LParen, jump_stm -> .-continue-  | -int-, jump_stm -> .break  | -fixed2-, type_specifier -> .-fixed4-  | ID, compound_stm -> .LBrace RBrace  | Plus, block_item_list -> block_item_list .block_item  | -double-, unary_exp -> .unary_op unary_exp  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, stm -> .selection_stm  | -short-, postfix_exp -> .postfix_exp Dot ID  | Semicolon, type_specifier -> .-long-  | ID, compound_stm -> .LBrace RBrace  | break, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, stm -> .selection_stm  | -fixed4-, jump_stm -> .-goto- ID  | -void-, compound_stm -> .LBrace block_item_list RBrace  | -fixed2-, dec -> .dec_specifier init_dec_list Semicolon  | -long-, unary_op -> .Minus  | Tilde, primary_exp -> .LParen exp RParen  | LT, compound_stm -> .LBrace RBrace  | -char-, primary_exp -> .String  | LT, block_item -> .stm  | -int-, compound_stm -> LBrace block_item_list .RBrace  | -fixed4-, unary_exp -> .postfix_exp  | NEQ, selection_stm -> .if LParen exp RParen stm  | Semicolon, primary_exp -> .LParen exp RParen  | AND, stm -> .compound_stm  | -void-, stm -> .jump_stm  | -float2-, unary_exp -> .Increment unary_exp  | NEQ, stm -> .selection_stm  | -return-, compound_stm -> LBrace block_item_list .RBrace  | Semicolon, stm -> .iteration_stm  | -fixed3-, compound_stm -> LBrace block_item_list .RBrace  | LBrace, block_item -> .stm  | -float3-, compound_stm -> .LBrace RBrace  | Semicolon, unary_op -> .Minus  | NOT, block_item -> .dec  | ID, iteration_stm -> .while LParen exp RParen stm  | LParen, stm -> .iteration_stm  | -float2-, type_qualifier -> .-uniform-  | -fixed2-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | NOT, primary_exp -> .ID  | Semicolon, exp_stm -> .exp Semicolon  | -int-, postfix_exp -> .postfix_exp Decrement  | AND, unary_op -> .Tilde  | Increment, stm -> .iteration_stm  | -fixed4-, postfix_exp -> .postfix_exp LParen RParen  | EQ, stm -> .selection_stm  | Decrement, jump_stm -> .-continue-  | -do-, block_item -> .dec  | -void-, unary_exp -> .Decrement unary_exp  | LeftShift, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Decrement, compound_stm -> LBrace block_item_list .RBrace  | -int-, stm -> .exp_stm  | LBrace, jump_stm -> .-continue-  | -half4-, dec -> .struct_specifier Semicolon  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | OR, stm -> .jump_stm  | -float3-, jump_stm -> .break  | for, jump_stm -> .-continue-  | -half2-, compound_stm -> .LBrace RBrace  | -void-, exp_stm -> .Semicolon  | -fixed2-, selection_stm -> .if LParen exp RParen stm else stm  | -void-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Plus, exp_stm -> .Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | NOT, stm -> .iteration_stm  | -char-, block_item_list -> block_item_list .block_item  | Decrement, jump_stm -> .break  | -float4-, stm -> .jump_stm  | -void-, primary_exp -> .Number  | VerticalBar, block_item -> .dec  | Decrement, postfix_exp -> .primary_exp  | Divide, compound_stm -> .LBrace RBrace  | -fixed4-, dec -> .struct_specifier Semicolon  | -fixed3-, exp_stm -> .exp Semicolon  | -sampler2D-, binary_exp -> .unary_exp  | Times, exp_stm -> .Semicolon  | String, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float3-, stm -> .jump_stm  | Minus, stm -> .compound_stm  | ID, jump_stm -> .-continue-  | Tilde, postfix_exp -> .postfix_exp Increment  | VerticalBar, struct_specifier -> .-struct- ID  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | -fixed2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, jump_stm -> .break  | if, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half4-, jump_stm -> .-return- exp Semicolon  | -goto-, stm -> .compound_stm  | RBrace, jump_stm -> .-goto- ID  | -goto-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, stm -> .compound_stm  | -fixed4-, exp_stm -> .exp Semicolon  | -half2-, jump_stm -> .break  | -half2-, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | Minus, jump_stm -> .-continue-  | -continue-, stm -> .compound_stm  | -short-, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, iteration_stm -> .while LParen exp RParen stm  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -float2-, jump_stm -> .break  | -char-, binary_exp -> .unary_exp  | OR, stm -> .compound_stm  | -fixed2-, compound_stm -> .LBrace block_item_list RBrace  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | LParen, primary_exp -> .Number  | LBrack, stm -> .selection_stm  | RBrace, primary_exp -> .Number  | Caret, compound_stm -> LBrace block_item_list .RBrace  | RBrace, stm -> .compound_stm  | -char-, type_specifier -> .-int-  | ID, compound_stm -> .LBrace RBrace  | -long-, jump_stm -> .break  | -long-, jump_stm -> .-continue-  | -uniform-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LBrace, stm -> .compound_stm  | -goto-, jump_stm -> .break  | -return-, stm -> .compound_stm  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -uniform-, jump_stm -> .-continue-  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -short-, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, jump_stm -> .-return- exp Semicolon  | -half3-, primary_exp -> .LParen exp RParen  | NEQ, compound_stm -> .LBrace RBrace  | Increment, compound_stm -> .LBrace block_item_list RBrace  | -continue-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Plus, dec -> .dec_specifier init_dec_list Semicolon  | RBrace, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, postfix_exp -> .postfix_exp Decrement  | Times, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -int-, unary_op -> .NOT  | LParen, exp_stm -> .exp Semicolon  | String, block_item -> .stm  | -fixed2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .String  | Dot, postfix_exp -> .primary_exp  | AND, jump_stm -> .-return- exp Semicolon  | -short-, postfix_exp -> .postfix_exp Decrement  | OR, unary_exp -> .unary_op unary_exp  | Plus, dec -> .dec_specifier init_dec_list Semicolon  | -struct-, stm -> .compound_stm  | -float3-, block_item_list -> block_item_list .block_item  | while, stm -> .selection_stm  | -float4-, block_item -> .dec  | -float4-, dec -> .dec_specifier init_dec_list Semicolon  | -char-, binary_exp -> .unary_exp  | Percent, compound_stm -> .LBrace block_item_list RBrace  | while, stm -> .iteration_stm  | Minus, block_item -> .stm  | -half3-, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, selection_stm -> .if LParen exp RParen stm  | -float-, exp_stm -> .Semicolon  | ID, unary_op -> .NOT  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed2-, jump_stm -> .-goto- ID  | -struct-, jump_stm -> .break  | Minus, compound_stm -> .LBrace RBrace  | if, jump_stm -> .break  | -void-, iteration_stm -> .while LParen exp RParen stm  | -float-, block_item -> .stm  | Plus, type_qualifier -> .-uniform-  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | NOT, primary_exp -> .ID  | Times, stm -> .compound_stm  | -sampler2D-, stm -> .selection_stm  | LParen, dec -> .dec_specifier init_dec_list Semicolon  | for, block_item_list -> block_item_list .block_item  | NOT, selection_stm -> .if LParen exp RParen stm else stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | LBrace, binary_exp -> .unary_exp  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, binary_exp -> .binary_exp binary_op unary_exp  | Caret, primary_exp -> .LParen exp RParen  | Divide, unary_op -> .Tilde  | Tilde, jump_stm -> .-continue-  | -void-, type_qualifier -> .-uniform-  | -char-, stm -> .exp_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -return-, unary_exp -> .Decrement unary_exp  | Divide, stm -> .compound_stm  | -do-, jump_stm -> .-return- exp Semicolon  | -fixed3-, postfix_exp -> .postfix_exp Increment  | AND, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half3-, stm -> .exp_stm  | -return-, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, stm -> .exp_stm  | -char-, postfix_exp -> .postfix_exp Decrement  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, iteration_stm -> .while LParen exp RParen stm  | for, stm -> .selection_stm  | if, postfix_exp -> .postfix_exp Dot ID  | Increment, type_qualifier -> .-uniform-  | -float-, jump_stm -> .-continue-  | RBrace, binary_exp -> .unary_exp  | LE, jump_stm -> .-return- exp Semicolon  | -float4-, stm -> .exp_stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, stm -> .exp_stm  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -long-, selection_stm -> .if LParen exp RParen stm else stm  | -fixed3-, primary_exp -> .ID  | VerticalBar, stm -> .compound_stm  | Minus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | if, block_item -> .stm  | -uniform-, stm -> .compound_stm  | -float2-, compound_stm -> .LBrace block_item_list RBrace  | -float2-, primary_exp -> .Number  | LeftShift, exp_stm -> .exp Semicolon  | Tilde, jump_stm -> .break  | while, jump_stm -> .-continue-  | -char-, jump_stm -> .break  | LParen, compound_stm -> .LBrace RBrace  | LBrace, jump_stm -> .-goto- ID  | -float-, dec -> .dec_specifier init_dec_list Semicolon  | Number, unary_op -> .Tilde  | NOT, postfix_exp -> .postfix_exp Decrement  | Percent, jump_stm -> .break  | -float-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, selection_stm -> .if LParen exp RParen stm  | -fixed2-, primary_exp -> .LParen exp RParen  | Times, stm -> .selection_stm  | ID, selection_stm -> .if LParen exp RParen stm  | -double-, exp_stm -> .Semicolon  | LParen, jump_stm -> .break  | -goto-, stm -> .exp_stm  | Minus, exp_stm -> .exp Semicolon  | -uniform-, compound_stm -> .LBrace block_item_list RBrace  | -double-, stm -> .exp_stm  | -void-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, jump_stm -> .-continue-  | -goto-, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, jump_stm -> .break  | Decrement, stm -> .jump_stm  | Semicolon, iteration_stm -> .while LParen exp RParen stm  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | Times, exp_stm -> .Semicolon  | -half4-, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, compound_stm -> .LBrace RBrace  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, unary_exp -> .unary_op unary_exp  | Question, stm -> .selection_stm  | -half3-, selection_stm -> .if LParen exp RParen stm else stm  | -double-, unary_exp -> .unary_op unary_exp  | Times, stm -> .iteration_stm  | -int-, selection_stm -> .if LParen exp RParen stm  | if, exp_stm -> .exp Semicolon  | Plus, jump_stm -> .-continue-  | -float2-, block_item -> .stm  | -double-, primary_exp -> .String  | Question, iteration_stm -> .while LParen exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Comma, dec -> .dec_specifier init_dec_list Semicolon  | Minus, stm -> .iteration_stm  | -do-, unary_exp -> .Decrement unary_exp  | GT, block_item -> .stm  | -float-, primary_exp -> .ID  | LE, jump_stm -> .-continue-  | -float-, compound_stm -> .LBrace block_item_list RBrace  | -sampler2D-, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | LeftShift, jump_stm -> .-return- exp Semicolon  | Number, exp_stm -> .exp Semicolon  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, selection_stm -> .if LParen exp RParen stm  | -uniform-, jump_stm -> .-continue-  | -sampler2D-, dec -> .dec_specifier init_dec_list Semicolon  | ID, iteration_stm -> .while LParen exp RParen stm  | -int-, stm -> .compound_stm  | Increment, block_item_list -> block_item_list .block_item  | -do-, type_qualifier -> .-uniform-  | -half2-, jump_stm -> .-goto- ID  | Minus, dec -> .dec_specifier init_dec_list Semicolon  | Semicolon, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | for, postfix_exp -> .postfix_exp Decrement  | Increment, block_item -> .stm  | -goto-, binary_exp -> .binary_exp binary_op unary_exp  | Minus, primary_exp -> .LParen exp RParen  | OR, primary_exp -> .Number  | GT, postfix_exp -> .primary_exp  | Question, block_item -> .stm  | -char-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, jump_stm -> .break  | -fixed4-, dec -> .dec_specifier init_dec_list Semicolon  | -sampler2D-, postfix_exp -> .postfix_exp Increment  | Increment, unary_exp -> .unary_op unary_exp  | OR, selection_stm -> .if LParen exp RParen stm else stm  | -fixed4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, stm -> .iteration_stm  | -short-, selection_stm -> .if LParen exp RParen stm  | Tilde, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> .postfix_exp  | Caret, stm -> .jump_stm  | Increment, selection_stm -> .if LParen exp RParen stm  | Number, primary_exp -> .ID  | LT, postfix_exp -> .postfix_exp Dot ID  | Caret, iteration_stm -> .while LParen exp RParen stm  | NOT, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -return-, dec -> .struct_specifier Semicolon  | Decrement, primary_exp -> .Number  | Percent, iteration_stm -> .while LParen exp RParen stm  | -return-, unary_op -> .Minus  | Plus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -double-, primary_exp -> .Number  | Assign, jump_stm -> .-return- exp Semicolon  | for, block_item -> .dec  | -float3-, compound_stm -> .LBrace block_item_list RBrace  | -void-, block_item_list -> block_item_list .block_item  | -fixed3-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float-, postfix_exp -> .postfix_exp Dot ID  | GT, stm -> .exp_stm  | -continue-, stm -> .iteration_stm  | Plus, unary_exp -> .Decrement unary_exp  | Caret, selection_stm -> .if LParen exp RParen stm  | -fixed4-, exp_stm -> .Semicolon  | -uniform-, block_item_list -> block_item_list .block_item  | ID, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, stm -> .exp_stm  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Minus, postfix_exp -> .postfix_exp Decrement  | Divide, block_item_list -> block_item_list .block_item  | for, exp_stm -> .Semicolon  | Minus, unary_exp -> .postfix_exp  | VerticalBar, primary_exp -> .String  | Divide, block_item -> .dec  | -float-, unary_exp -> .postfix_exp  | EQ, stm -> .exp_stm  | ID, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, primary_exp -> .String  | LParen, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .postfix_exp Increment  | Plus, iteration_stm -> .while LParen exp RParen stm  | -double-, jump_stm -> .-goto- ID  | LBrace, primary_exp -> .ID  | RightShift, selection_stm -> .if LParen exp RParen stm else stm  | -char-, stm -> .iteration_stm  | -long-, primary_exp -> .String  | Plus, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .ID  | NEQ, compound_stm -> LBrace block_item_list .RBrace  | break, dec -> .struct_specifier Semicolon  | -int-, compound_stm -> LBrace block_item_list .RBrace  | Decrement, stm -> .selection_stm  | -struct-, stm -> .compound_stm  | -half4-, unary_exp -> .unary_op unary_exp  | NEQ, block_item -> .dec  | -goto-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -double-, block_item_list -> block_item_list .block_item  | Minus, selection_stm -> .if LParen exp RParen stm  | for, selection_stm -> .if LParen exp RParen stm  | ID, block_item -> .stm  | Tilde, stm -> .jump_stm  | ID, jump_stm -> .-return- exp Semicolon  | -half4-, block_item -> .stm  | -struct-, block_item_list -> block_item_list .block_item  | -fixed4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, dec -> .struct_specifier Semicolon  | RBrace, type_qualifier -> .-uniform-  | -void-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | RBrace, compound_stm -> .LBrace RBrace  | -struct-, unary_exp -> .postfix_exp  | Question, primary_exp -> .String  | LBrack, stm -> .jump_stm  | for, jump_stm -> .-return- exp Semicolon  | Plus, stm -> .exp_stm  | -float3-, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -uniform-, jump_stm -> .-return- exp Semicolon  | if, jump_stm -> .-goto- ID  | -fixed3-, dec -> .struct_specifier Semicolon  | -do-, block_item -> .stm  | LBrace, stm -> .selection_stm  | -fixed2-, jump_stm -> .-goto- ID  | if, compound_stm -> .LBrace RBrace  | LParen, block_item -> .stm  | while, jump_stm -> .-return- exp Semicolon  | -continue-, primary_exp -> .Number  | OR, stm -> .exp_stm  | -fixed4-, jump_stm -> .-goto- ID  | -float3-, postfix_exp -> .primary_exp  | GT, block_item -> .stm  | break, jump_stm -> .-return- exp Semicolon  | Minus, postfix_exp -> .primary_exp  | VerticalBar, primary_exp -> .Number  | RightShift, unary_op -> .Plus  | Decrement, primary_exp -> .String  | Ampersand, stm -> .jump_stm  | -short-, stm -> .exp_stm  | break, jump_stm -> .-continue-  | Semicolon, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -struct-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -char-, jump_stm -> .-goto- ID  | break, dec -> .dec_specifier init_dec_list Semicolon  | -short-, jump_stm -> .-continue-  | Plus, unary_exp -> .Increment unary_exp  | GE, unary_exp -> .Increment unary_exp  | EQ, compound_stm -> .LBrace RBrace  | Tilde, exp_stm -> .exp Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | ID, stm -> .jump_stm  | -char-, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | Comma, block_item_list -> block_item_list .block_item  | -float3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half2-, compound_stm -> LBrace block_item_list .RBrace  | -void-, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, conditional_exp -> .binary_exp  | Semicolon, iteration_stm -> .while LParen exp RParen stm  | -void-, exp_stm -> .Semicolon  | RBrace, postfix_exp -> .postfix_exp Dot ID  | Minus, stm -> .jump_stm  | -continue-, dec -> .struct_specifier Semicolon  | break, selection_stm -> .if LParen exp RParen stm else stm  | -half2-, stm -> .compound_stm  | -struct-, stm -> .selection_stm  | NOT, jump_stm -> .-return- exp Semicolon  | -float2-, postfix_exp -> .postfix_exp Dot ID  | LParen, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, jump_stm -> .-return- exp Semicolon  | -float3-, block_item_list -> block_item_list .block_item  | String, iteration_stm -> .while LParen exp RParen stm  | -struct-, postfix_exp -> .postfix_exp Increment  | Dot, type_qualifier -> .-uniform-  | -float4-, stm -> .compound_stm  | break, compound_stm -> .LBrace block_item_list RBrace  | -do-, block_item -> .stm  | -float4-, postfix_exp -> .postfix_exp Increment  | Divide, stm -> .selection_stm  | -float2-, stm -> .jump_stm  | -return-, exp_stm -> .Semicolon  | break, unary_exp -> .postfix_exp  | OR, exp_stm -> .Semicolon  | -double-, block_item_list -> block_item_list .block_item  | -int-, jump_stm -> .-goto- ID  | RBrace, postfix_exp -> .postfix_exp Decrement  | LE, exp_stm -> .Semicolon  | Number, block_item -> .dec  | if, binary_exp -> .unary_exp  | AND, block_item -> .dec  | LParen, compound_stm -> .LBrace block_item_list RBrace  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, compound_stm -> LBrace block_item_list .RBrace  | for, stm -> .selection_stm  | -double-, stm -> .iteration_stm  | NOT, primary_exp -> .Number  | NEQ, jump_stm -> .-continue-  | -double-, block_item_list -> block_item_list .block_item  | -continue-, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, jump_stm -> .-goto- ID  | -half2-, compound_stm -> LBrace block_item_list .RBrace  | -char-, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Increment  | EQ, exp_stm -> .exp Semicolon  | NOT, jump_stm -> .-continue-  | -float3-, compound_stm -> LBrace block_item_list .RBrace  | -do-, binary_exp -> .unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, jump_stm -> .-continue-  | Increment, exp_stm -> .Semicolon  | -half2-, compound_stm -> .LBrace block_item_list RBrace  | -char-, exp_stm -> .Semicolon  | Plus, compound_stm -> .LBrace RBrace  | -float3-, stm -> .jump_stm  | -double-, dec -> .dec_specifier init_dec_list Semicolon  | -half3-, compound_stm -> .LBrace block_item_list RBrace  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | -half4-, jump_stm -> .break  | LBrace, jump_stm -> .break  | -short-, block_item -> .stm  | Decrement, jump_stm -> .-continue-  | String, primary_exp -> .String  | OR, dec -> .struct_specifier Semicolon  | Semicolon, stm -> .selection_stm  | for, postfix_exp -> .postfix_exp Decrement  | EQ, selection_stm -> .if LParen exp RParen stm else stm  | -do-, compound_stm -> .LBrace block_item_list RBrace  | Increment, type_qualifier -> .-uniform-  | -fixed4-, stm -> .jump_stm  | Tilde, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, selection_stm -> .if LParen exp RParen stm  | -half3-, stm -> .jump_stm  | -goto-, postfix_exp -> .primary_exp  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -float3-, block_item -> .stm  | Number, unary_exp -> .Decrement unary_exp  | GE, selection_stm -> .if LParen exp RParen stm else stm  | for, jump_stm -> .break  | Plus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float4-, type_qualifier -> .-uniform-  | -half4-, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, compound_stm -> LBrace block_item_list .RBrace  | -fixed2-, exp_stm -> .exp Semicolon  | Increment, block_item_list -> block_item_list .block_item  | -return-, dec -> .dec_specifier init_dec_list Semicolon  | while, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, stm -> .jump_stm  | -fixed2-, stm -> .compound_stm  | -return-, type_qualifier -> .-uniform-  | -int-, unary_exp -> .Decrement unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | Minus, postfix_exp -> .primary_exp  | LT, selection_stm -> .if LParen exp RParen stm else stm  | break, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -do-, exp_stm -> .exp Semicolon  | Minus, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, block_item -> .stm  | -half4-, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, dec -> .dec_specifier init_dec_list Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | -return-, jump_stm -> .-continue-  | Number, stm -> .jump_stm  | -fixed4-, unary_exp -> .unary_op unary_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | -struct-, primary_exp -> .LParen exp RParen  | VerticalBar, jump_stm -> .break  | break, compound_stm -> .LBrace RBrace  | -double-, dec -> .dec_specifier init_dec_list Semicolon  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -half3-, block_item -> .dec  | RBrace, block_item_list -> block_item_list .block_item  | -struct-, stm -> .jump_stm  | -sampler2D-, block_item -> .dec  | Number, stm -> .compound_stm  | -uniform-, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .primary_exp  | LeftShift, unary_op -> .NOT  | ID, primary_exp -> .ID  | Plus, stm -> .exp_stm  | -half2-, primary_exp -> .ID  | GT, selection_stm -> .if LParen exp RParen stm else stm  | -long-, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | break, dec -> .dec_specifier init_dec_list Semicolon  | -half2-, stm -> .compound_stm  | -half3-, dec -> .struct_specifier Semicolon  | -float3-, jump_stm -> .-continue-  | if, compound_stm -> .LBrace block_item_list RBrace  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -goto-, primary_exp -> .Number  | Question, jump_stm -> .-goto- ID  | -long-, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, jump_stm -> .-continue-  | -struct-, jump_stm -> .-return- exp Semicolon  | -int-, stm -> .iteration_stm  | -half2-, compound_stm -> .LBrace RBrace  | -float4-, stm -> .exp_stm  | -long-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, iteration_stm -> .while LParen exp RParen stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Comma, exp_stm -> .Semicolon  | -int-, primary_exp -> .LParen exp RParen  | Question, dec -> .struct_specifier Semicolon  | ID, dec -> .struct_specifier Semicolon  | -short-, struct_specifier -> .-struct- ID LBrace struct_dec_list RBrace  | Semicolon, jump_stm -> .-goto- ID  | -fixed2-, stm -> .exp_stm  | Tilde, exp_stm -> .exp Semicolon  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | String, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, selection_stm -> .if LParen exp RParen stm  | -void-, stm -> .exp_stm  | -do-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Tilde, selection_stm -> .if LParen exp RParen stm  | Increment, postfix_exp -> .postfix_exp Increment  | Question, unary_exp -> .Decrement unary_exp  | Ampersand, compound_stm -> .LBrace block_item_list RBrace  | Plus, iteration_stm -> .while LParen exp RParen stm  | -do-, dec -> .dec_specifier init_dec_list Semicolon  | -void-, primary_exp -> .LParen exp RParen  | EQ, block_item -> .dec  | String, block_item -> .stm  | String, postfix_exp -> .postfix_exp LParen RParen  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | Plus, postfix_exp -> .primary_exp  | Times, block_item -> .stm  | LParen, block_item -> .stm  | -continue-, block_item -> .dec  | -long-, jump_stm -> .-continue-  | break, exp_stm -> .Semicolon  | -short-, block_item -> .stm  | if, stm -> .jump_stm  | -int-, type_specifier -> .typedef_name  | ID, dec -> .struct_specifier Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | -float4-, selection_stm -> .if LParen exp RParen stm  | -sampler2D-, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp Decrement  | NEQ, dec -> .struct_specifier Semicolon  | -uniform-, dec -> .dec_specifier init_dec_list Semicolon  | NOT, selection_stm -> .if LParen exp RParen stm else stm  | -short-, primary_exp -> .ID  | LeftShift, selection_stm -> .if LParen exp RParen stm  | -float2-, jump_stm -> .-return- exp Semicolon  | -double-, primary_exp -> .LParen exp RParen  | GT, jump_stm -> .break  | -fixed3-, jump_stm -> .-goto- ID  | while, type_specifier -> .-short-  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | NEQ, stm -> .jump_stm  | -do-, postfix_exp -> .postfix_exp Decrement  | Plus, exp_stm -> .exp Semicolon  | -half4-, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, stm -> .selection_stm  | -int-, compound_stm -> LBrace block_item_list .RBrace  | -fixed3-, selection_stm -> .if LParen exp RParen stm else stm  | -half3-, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, compound_stm -> LBrace block_item_list .RBrace  | -return-, jump_stm -> .-goto- ID  | String, stm -> .exp_stm  | if, jump_stm -> .break  | String, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .postfix_exp Increment  | LT, selection_stm -> .if LParen exp RParen stm  | RBrace, postfix_exp -> .postfix_exp Decrement  | LeftShift, compound_stm -> LBrace block_item_list .RBrace  | Plus, unary_exp -> .Decrement unary_exp  | OR, block_item_list -> block_item_list .block_item  | -sampler2D-, exp_stm -> .Semicolon  | -void-, dec -> .dec_specifier init_dec_list Semicolon  | LBrace, stm -> .selection_stm  | -do-, compound_stm -> LBrace block_item_list .RBrace  | Increment, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp Increment  | NEQ, dec -> .dec_specifier init_dec_list Semicolon  | Decrement, exp_stm -> .Semicolon  | Increment, stm -> .selection_stm  | -half2-, stm -> .exp_stm  | -struct-, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, stm -> .iteration_stm  | Semicolon, block_item_list -> block_item_list .block_item  | RBrace, postfix_exp -> .primary_exp  | Increment, primary_exp -> .LParen exp RParen  | Percent, dec -> .dec_specifier init_dec_list Semicolon  | -continue-, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, jump_stm -> .-return- exp Semicolon  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | Semicolon, primary_exp -> .ID  | GE, unary_op -> .Plus  | Plus, stm -> .exp_stm  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | -sampler2D-, exp_stm -> .Semicolon  | -float-, block_item_list -> block_item_list .block_item  | Number, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, dec -> .struct_specifier Semicolon  | LParen, jump_stm -> .-goto- ID  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | String, stm -> .jump_stm  | LBrace, primary_exp -> .ID  | Assign, stm -> .iteration_stm  | -half4-, stm -> .compound_stm  | -half2-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed4-, dec -> .dec_specifier init_dec_list Semicolon  | Plus, type_specifier -> .-half2-  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, stm -> .compound_stm  | String, dec -> .dec_specifier init_dec_list Semicolon  | if, jump_stm -> .break  | Number, postfix_exp -> .postfix_exp LParen RParen  | LE, type_specifier -> .-fixed2-  | ID, jump_stm -> .-goto- ID  | -fixed4-, unary_exp -> .Decrement unary_exp  | Times, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Decrement  | VerticalBar, block_item -> .stm  | Semicolon, stm -> .jump_stm  | NOT, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, type_qualifier -> .-uniform-  | -sampler2D-, exp_stm -> .Semicolon  | -float4-, binary_exp -> .binary_exp binary_op unary_exp  | LE, block_item -> .dec  | -fixed3-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, stm -> .iteration_stm  | -sampler2D-, stm -> .selection_stm  | Increment, binary_exp -> .unary_exp  | VerticalBar, block_item -> .dec  | -return-, binary_exp -> .unary_exp  | NEQ, primary_exp -> .LParen exp RParen  | Minus, compound_stm -> .LBrace RBrace  | Number, block_item_list -> block_item_list .block_item  | -float2-, iteration_stm -> .while LParen exp RParen stm  | -float2-, dec -> .struct_specifier Semicolon  | -sampler2D-, primary_exp -> .Number  | Plus, dec -> .struct_specifier Semicolon  | Minus, unary_exp -> .Decrement unary_exp  | LE, block_item_list -> block_item_list .block_item  | -char-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, stm -> .jump_stm  | -half3-, exp_stm -> .exp Semicolon  | -fixed3-, jump_stm -> .-goto- ID  | -double-, postfix_exp -> .postfix_exp LParen RParen  | Question, jump_stm -> .-return- exp Semicolon  | Semicolon, selection_stm -> .if LParen exp RParen stm  | Decrement, unary_exp -> .postfix_exp  | LE, exp_stm -> .exp Semicolon  | -short-, primary_exp -> .String  | Assign, block_item -> .dec  | -struct-, stm -> .exp_stm  | for, exp_stm -> .Semicolon  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | String, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, stm -> .selection_stm  | -half4-, primary_exp -> .LParen exp RParen  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | if, compound_stm -> LBrace block_item_list .RBrace  | -struct-, unary_exp -> .unary_op unary_exp  | GT, compound_stm -> .LBrace block_item_list RBrace  | NOT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, compound_stm -> .LBrace RBrace  | -sampler2D-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, block_item -> .dec  | break, primary_exp -> .LParen exp RParen  | LParen, stm -> .jump_stm  | Number, exp_stm -> .exp Semicolon  | RBrace, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half4-, iteration_stm -> .while LParen exp RParen stm  | -half2-, unary_exp -> .unary_op unary_exp  | AND, stm -> .jump_stm  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Number, postfix_exp -> .primary_exp  | Assign, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -continue-, exp_stm -> .Semicolon  | LBrace, jump_stm -> .-goto- ID  | -short-, stm -> .exp_stm  | -half4-, compound_stm -> .LBrace RBrace  | -fixed2-, compound_stm -> LBrace block_item_list .RBrace  | Tilde, unary_exp -> .unary_op unary_exp  | Percent, exp_stm -> .exp Semicolon  | if, dec -> .struct_specifier Semicolon  | while, stm -> .exp_stm  | Increment, block_item -> .dec  | -char-, block_item_list -> block_item_list .block_item  | Increment, selection_stm -> .if LParen exp RParen stm  | while, block_item -> .dec  | -double-, iteration_stm -> .while LParen exp RParen stm  | -continue-, block_item -> .dec  | -fixed4-, postfix_exp -> .primary_exp  | LBrack, compound_stm -> LBrace block_item_list .RBrace  | Minus, dec -> .struct_specifier Semicolon  | -half2-, jump_stm -> .break  | -int-, exp_stm -> .Semicolon  | -goto-, jump_stm -> .break  | -float3-, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, compound_stm -> LBrace block_item_list .RBrace  | Number, block_item_list -> block_item_list .block_item  | -half2-, jump_stm -> .-return- exp Semicolon  | -void-, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, dec -> .dec_specifier init_dec_list Semicolon  | String, selection_stm -> .if LParen exp RParen stm  | -goto-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, jump_stm -> .-continue-  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -float3-, primary_exp -> .ID  | Divide, selection_stm -> .if LParen exp RParen stm else stm  | -uniform-, stm -> .compound_stm  | Decrement, type_qualifier -> .-uniform-  | -float2-, jump_stm -> .-goto- ID  | ID, stm -> .exp_stm  | -fixed3-, block_item_list -> block_item_list .block_item  | -goto-, postfix_exp -> .postfix_exp Dot ID  | EQ, unary_exp -> .unary_op unary_exp  | Comma, jump_stm -> .-return- exp Semicolon  | -float-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Semicolon, binary_exp -> .unary_exp  | GE, block_item_list -> block_item_list .block_item  | -fixed2-, compound_stm -> .LBrace block_item_list RBrace  | -goto-, iteration_stm -> .while LParen exp RParen stm  | break, stm -> .selection_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -int-, block_item_list -> block_item_list .block_item  | if, stm -> .compound_stm  | for, dec -> .dec_specifier init_dec_list Semicolon  | -return-, stm -> .jump_stm  | if, jump_stm -> .-goto- ID  | -float2-, stm -> .selection_stm  | Tilde, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, compound_stm -> LBrace block_item_list .RBrace  | -half2-, stm -> .compound_stm  | -long-, assignment_exp -> .conditional_exp  | Comma, jump_stm -> .-goto- ID  | Increment, compound_stm -> LBrace block_item_list .RBrace  | -continue-, postfix_exp -> .postfix_exp Dot ID  | Assign, jump_stm -> .-goto- ID  | -half3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LBrace, exp_stm -> .Semicolon  | -fixed3-, stm -> .iteration_stm  | -half3-, exp_stm -> .Semicolon  | Tilde, selection_stm -> .if LParen exp RParen stm else stm  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | Plus, stm -> .iteration_stm  | while, stm -> .selection_stm  | LBrace, compound_stm -> LBrace block_item_list .RBrace  | -long-, postfix_exp -> .postfix_exp LParen RParen  | Assign, compound_stm -> .LBrace RBrace  | -half3-, jump_stm -> .break  | -half4-, block_item_list -> block_item_list .block_item  | LParen, stm -> .jump_stm  | break, stm -> .iteration_stm  | -float-, exp_stm -> .Semicolon  | -float3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Number, stm -> .compound_stm  | -continue-, stm -> .exp_stm  | Plus, postfix_exp -> .postfix_exp Decrement  | Minus, stm -> .selection_stm  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, stm -> .iteration_stm  | ID, stm -> .compound_stm  | Plus, unary_exp -> .Increment unary_exp  | LeftShift, primary_exp -> .Number  | EQ, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Increment, exp_stm -> .exp Semicolon  | -long-, compound_stm -> .LBrace RBrace  | String, compound_stm -> LBrace block_item_list .RBrace  | -double-, stm -> .compound_stm  | -float-, stm -> .selection_stm  | -void-, primary_exp -> .ID  | Comma, dec -> .dec_specifier init_dec_list Semicolon  | -goto-, primary_exp -> .String  | LeftShift, block_item -> .dec  | -int-, jump_stm -> .-continue-  | -fixed3-, postfix_exp -> .postfix_exp LParen RParen  | GE, postfix_exp -> .primary_exp  | OR, iteration_stm -> .while LParen exp RParen stm  | RBrace, unary_exp -> .postfix_exp  | RightShift, compound_stm -> .LBrace block_item_list RBrace  | -fixed4-, block_item_list -> block_item_list .block_item  | -half3-, unary_op -> .Tilde  | Decrement, jump_stm -> .-continue-  | -return-, iteration_stm -> .while LParen exp RParen stm  | Plus, selection_stm -> .if LParen exp RParen stm  | -do-, stm -> .selection_stm  | Plus, compound_stm -> .LBrace RBrace  | NOT, exp_stm -> .Semicolon  | Decrement, compound_stm -> LBrace block_item_list .RBrace  | ID, type_specifier -> .-char-  | ID, exp_stm -> .Semicolon  | -float2-, dec -> .dec_specifier init_dec_list Semicolon  | -half4-, compound_stm -> LBrace block_item_list .RBrace  | -float2-, iteration_stm -> .while LParen exp RParen stm  | Number, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, exp_stm -> .exp Semicolon  | Decrement, block_item -> .dec  | -half3-, stm -> .iteration_stm  | LParen, stm -> .jump_stm  | -half2-, selection_stm -> .if LParen exp RParen stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Percent, jump_stm -> .break  | ID, jump_stm -> .-goto- ID  | Semicolon, block_item -> .stm  | -half2-, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, jump_stm -> .break  | Increment, stm -> .iteration_stm  | Tilde, compound_stm -> .LBrace block_item_list RBrace  | LBrace, exp_stm -> .Semicolon  | while, postfix_exp -> .postfix_exp Increment  | Semicolon, jump_stm -> .break  | -sampler2D-, block_item_list -> block_item_list .block_item  | LBrace, block_item_list -> block_item_list .block_item  | -float4-, type_specifier -> .-double-  | ID, exp_stm -> .exp Semicolon  | -double-, stm -> .selection_stm  | -sampler2D-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -long-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LParen, compound_stm -> .LBrace RBrace  | -half2-, jump_stm -> .-goto- ID  | -do-, exp_stm -> .exp Semicolon  | -float-, stm -> .jump_stm  | -float-, unary_exp -> .unary_op unary_exp  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | RBrace, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, jump_stm -> .-continue-  | for, unary_op -> .Minus  | Decrement, dec -> .dec_specifier init_dec_list Semicolon  | -uniform-, jump_stm -> .-return- exp Semicolon  | -fixed4-, exp_stm -> .exp Semicolon  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | LT, dec -> .dec_specifier init_dec_list Semicolon  | -double-, postfix_exp -> .postfix_exp Increment  | Comma, jump_stm -> .-continue-  | -fixed2-, stm -> .compound_stm  | LBrace, selection_stm -> .if LParen exp RParen stm  | -short-, exp_stm -> .exp Semicolon  | while, exp_stm -> .exp Semicolon  | LBrace, jump_stm -> .-continue-  | -short-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, binary_exp -> .binary_exp binary_op unary_exp  | EQ, exp_stm -> .exp Semicolon  | for, block_item_list -> block_item_list .block_item  | -short-, block_item -> .dec  | Tilde, compound_stm -> LBrace block_item_list .RBrace  | if, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, primary_exp -> .String  | Comma, stm -> .iteration_stm  | -fixed2-, binary_exp -> .binary_exp binary_op unary_exp  | Question, exp_stm -> .Semicolon  | -char-, block_item -> .stm  | ID, jump_stm -> .-return- exp Semicolon  | LBrace, type_qualifier -> .-uniform-  | -float3-, unary_exp -> .Increment unary_exp  | Percent, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | for, primary_exp -> .Number  | Times, jump_stm -> .-return- exp Semicolon  | Increment, block_item_list -> block_item_list .block_item  | break, jump_stm -> .break  | -struct-, binary_exp -> .unary_exp  | RightShift, primary_exp -> .ID  | Minus, type_qualifier -> .-uniform-  | -short-, selection_stm -> .if LParen exp RParen stm  | -continue-, type_qualifier -> .-uniform-  | ID, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, unary_op -> .Minus  | LParen, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -sampler2D-, selection_stm -> .if LParen exp RParen stm  | -half2-, jump_stm -> .break  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, unary_exp -> .postfix_exp  | AND, selection_stm -> .if LParen exp RParen stm  | break, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, type_qualifier -> .-uniform-  | -double-, postfix_exp -> .primary_exp  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float2-, block_item_list -> block_item_list .block_item  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, stm -> .selection_stm  | -char-, compound_stm -> .LBrace block_item_list RBrace  | ID, stm -> .exp_stm  | String, jump_stm -> .break  | -double-, unary_exp -> .unary_op unary_exp  | Ampersand, exp_stm -> .exp Semicolon  | -void-, exp_stm -> .exp Semicolon  | -return-, block_item -> .stm  | Increment, compound_stm -> .LBrace RBrace  | -continue-, stm -> .iteration_stm  | for, postfix_exp -> .postfix_exp Increment  | RightShift, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .primary_exp  | Caret, compound_stm -> .LBrace block_item_list RBrace  | break, selection_stm -> .if LParen exp RParen stm  | -float3-, postfix_exp -> .postfix_exp Increment  | Caret, jump_stm -> .-goto- ID  | Tilde, type_specifier -> .-half3-  | ID, jump_stm -> .-goto- ID  | Number, postfix_exp -> .primary_exp  | Decrement, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -continue-, dec -> .dec_specifier init_dec_list Semicolon  | Tilde, jump_stm -> .-goto- ID  | Decrement, postfix_exp -> .primary_exp  | Ampersand, jump_stm -> .-goto- ID  | -uniform-, compound_stm -> .LBrace RBrace  | -uniform-, dec -> .struct_specifier Semicolon  | if, compound_stm -> .LBrace block_item_list RBrace  | -short-, dec -> .dec_specifier init_dec_list Semicolon  | -float2-, selection_stm -> .if LParen exp RParen stm  | -return-, jump_stm -> .-return- exp Semicolon  | -uniform-, exp_stm -> .Semicolon  | -return-, selection_stm -> .if LParen exp RParen stm  | LBrace, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, jump_stm -> .-continue-  | LParen, stm -> .iteration_stm  | -goto-, block_item -> .dec  | LBrace, stm -> .compound_stm  | while, stm -> .exp_stm  | -sampler2D-, block_item -> .stm  | -do-, postfix_exp -> .postfix_exp LParen RParen  | LT, compound_stm -> .LBrace RBrace  | -int-, binary_exp -> .unary_exp  | Caret, selection_stm -> .if LParen exp RParen stm  | Plus, jump_stm -> .-continue-  | LBrace, dec -> .struct_specifier Semicolon  | -struct-, jump_stm -> .-return- exp Semicolon  | break, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, block_item -> .stm  | Minus, stm -> .exp_stm  | Number, unary_exp -> .Increment unary_exp  | Caret, block_item -> .dec  | Minus, block_item -> .dec  | -short-, primary_exp -> .String  | AND, unary_exp -> .unary_op unary_exp  | Divide, dec_specifier -> .type_qualifier type_specifier  | ID, unary_exp -> .unary_op unary_exp  | Caret, stm -> .compound_stm  | -int-, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -void-, postfix_exp -> .postfix_exp Dot ID  | Percent, exp_stm -> .exp Semicolon  | break, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, iteration_stm -> .while LParen exp RParen stm  | -fixed2-, stm -> .selection_stm  | -float-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -do-, unary_exp -> .postfix_exp  | Comma, binary_exp -> .unary_exp  | LeftShift, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Tilde, jump_stm -> .-continue-  | -long-, block_item -> .dec  | -half4-, stm -> .compound_stm  | -fixed3-, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -sampler2D-, block_item -> .stm  | -fixed3-, jump_stm -> .-return- exp Semicolon  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -short-, primary_exp -> .ID  | Percent, stm -> .compound_stm  | Number, primary_exp -> .Number  | Comma, stm -> .compound_stm  | LParen, compound_stm -> .LBrace RBrace  | -short-, unary_exp -> .Decrement unary_exp  | Percent, stm -> .selection_stm  | break, dec -> .dec_specifier init_dec_list Semicolon  | -float-, block_item -> .dec  | -half2-, compound_stm -> .LBrace block_item_list RBrace  | -struct-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Decrement, unary_exp -> .postfix_exp  | Divide, jump_stm -> .-return- exp Semicolon  | -sampler2D-, unary_exp -> .postfix_exp  | GE, dec -> .dec_specifier init_dec_list Semicolon  | Increment, block_item_list -> block_item_list .block_item  | -long-, selection_stm -> .if LParen exp RParen stm else stm  | -continue-, block_item -> .dec  | Plus, compound_stm -> .LBrace RBrace  | -half4-, dec -> .struct_specifier Semicolon  | -goto-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float2-, stm -> .jump_stm  | RBrace, jump_stm -> .-goto- ID  | -half4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, stm -> .selection_stm  | -float3-, postfix_exp -> .postfix_exp LParen RParen  | Divide, block_item -> .stm  | -fixed4-, stm -> .jump_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half2-, primary_exp -> .LParen exp RParen  | Assign, unary_exp -> .Increment unary_exp  | Assign, jump_stm -> .-goto- ID  | -return-, postfix_exp -> .postfix_exp Increment  | Assign, jump_stm -> .break  | Tilde, block_item -> .dec  | -do-, type_specifier -> .-float3-  | ID, jump_stm -> .-continue-  | -half3-, primary_exp -> .Number  | Minus, iteration_stm -> .while LParen exp RParen stm  | -half4-, stm -> .jump_stm  | LParen, exp_stm -> .exp Semicolon  | -goto-, jump_stm -> .-goto- ID  | for, stm -> .iteration_stm  | Decrement, stm -> .selection_stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, selection_stm -> .if LParen exp RParen stm else stm  | -struct-, stm -> .exp_stm  | -goto-, primary_exp -> .ID  | OR, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | ID, unary_exp -> .Increment unary_exp  | VerticalBar, dec -> .struct_specifier Semicolon  | -return-, block_item -> .stm  | -short-, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, stm -> .selection_stm  | String, postfix_exp -> .postfix_exp LParen RParen  | Caret, primary_exp -> .ID  | AND, postfix_exp -> .postfix_exp LParen RParen  | Dot, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | String, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, exp_stm -> .Semicolon  | NOT, jump_stm -> .-goto- ID  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | Tilde, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, selection_stm -> .if LParen exp RParen stm  | -fixed3-, dec -> .dec_specifier init_dec_list Semicolon  | -float4-, dec -> .dec_specifier init_dec_list Semicolon  | -float3-, primary_exp -> .Number  | Ampersand, selection_stm -> .if LParen exp RParen stm  | -char-, primary_exp -> .ID  | Ampersand, stm -> .exp_stm  | RBrace, unary_exp -> .Increment unary_exp  | Semicolon, stm -> .exp_stm  | Decrement, block_item -> .dec  | -fixed2-, compound_stm -> .LBrace RBrace  | RBrace, primary_exp -> .LParen exp RParen  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, compound_stm -> LBrace block_item_list .RBrace  | -goto-, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_op -> .NOT  | NOT, unary_op -> .NOT  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -goto-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | ID, binary_exp -> .binary_exp binary_op unary_exp  | GT, jump_stm -> .-goto- ID  | -continue-, stm -> .selection_stm  | Semicolon, block_item_list -> block_item_list .block_item  | -float-, postfix_exp -> .postfix_exp Decrement  | Assign, stm -> .iteration_stm  | RBrace, stm -> .iteration_stm  | -struct-, dec -> .dec_specifier init_dec_list Semicolon  | break, jump_stm -> .break  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | RBrace, exp_stm -> .exp Semicolon  | -float2-, iteration_stm -> .while LParen exp RParen stm  | -float4-, compound_stm -> LBrace block_item_list .RBrace  | String, exp_stm -> .Semicolon  | -half3-, dec -> .struct_specifier Semicolon  | Increment, unary_exp -> .Decrement unary_exp  | Plus, primary_exp -> .LParen exp RParen  | Plus, type_specifier -> .-sampler2D-  | ID, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, postfix_exp -> .primary_exp  | Percent, compound_stm -> .LBrace RBrace  | -float-, unary_exp -> .unary_op unary_exp  | LeftShift, dec -> .dec_specifier init_dec_list Semicolon  | -do-, block_item -> .stm  | -long-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed2-, jump_stm -> .-goto- ID  | NOT, jump_stm -> .-continue-  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -half4-, compound_stm -> LBrace block_item_list .RBrace  | NOT, type_specifier -> .-float4-  | ID, unary_op -> .Plus  | Tilde, compound_stm -> .LBrace RBrace  | Minus, iteration_stm -> .while LParen exp RParen stm  | -char-, iteration_stm -> .while LParen exp RParen stm  | ID, exp_stm -> .exp Semicolon  | ID, unary_exp -> .Increment unary_exp  | LE, stm -> .exp_stm  | -fixed2-, jump_stm -> .-goto- ID  | -char-, unary_exp -> .postfix_exp  | Percent, stm -> .iteration_stm  | -return-, dec -> .struct_specifier Semicolon  | -void-, block_item -> .stm  | -void-, primary_exp -> .LParen exp RParen  | Decrement, stm -> .compound_stm  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | AND, stm -> .iteration_stm  | if, type_specifier -> .-void-  | ID, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, jump_stm -> .break  | -float2-, primary_exp -> .Number  | LParen, jump_stm -> .break  | -half3-, typedef_name -> .ID  | ID, postfix_exp -> .postfix_exp Decrement  | LBrack, stm -> .jump_stm  | -fixed3-, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -void-, block_item -> .stm  | RBrace, primary_exp -> .ID  | Dot, unary_exp -> .postfix_exp  | LeftShift, )
518 <- (440, 'Semicolon') (exp_stm -> exp Semicolon.  | -short-, exp_stm -> exp Semicolon.  | Decrement, exp_stm -> exp Semicolon.  | -return-, exp_stm -> exp Semicolon.  | -fixed4-, exp_stm -> exp Semicolon.  | -half2-, exp_stm -> exp Semicolon.  | Plus, exp_stm -> exp Semicolon.  | break, exp_stm -> exp Semicolon.  | -float2-, exp_stm -> exp Semicolon.  | -struct-, exp_stm -> exp Semicolon.  | String, exp_stm -> exp Semicolon.  | NOT, exp_stm -> exp Semicolon.  | -do-, exp_stm -> exp Semicolon.  | -int-, exp_stm -> exp Semicolon.  | -sampler2D-, exp_stm -> exp Semicolon.  | for, exp_stm -> exp Semicolon.  | LBrace, exp_stm -> exp Semicolon.  | -char-, exp_stm -> exp Semicolon.  | Increment, exp_stm -> exp Semicolon.  | Minus, exp_stm -> exp Semicolon.  | LParen, exp_stm -> exp Semicolon.  | -float4-, exp_stm -> exp Semicolon.  | -float-, exp_stm -> exp Semicolon.  | -long-, exp_stm -> exp Semicolon.  | -goto-, exp_stm -> exp Semicolon.  | Semicolon, exp_stm -> exp Semicolon.  | else, exp_stm -> exp Semicolon.  | -fixed3-, exp_stm -> exp Semicolon.  | -float3-, exp_stm -> exp Semicolon.  | -double-, exp_stm -> exp Semicolon.  | -half3-, exp_stm -> exp Semicolon.  | ID, exp_stm -> exp Semicolon.  | -void-, exp_stm -> exp Semicolon.  | -half4-, exp_stm -> exp Semicolon.  | Number, exp_stm -> exp Semicolon.  | while, exp_stm -> exp Semicolon.  | -fixed2-, exp_stm -> exp Semicolon.  | -uniform-, exp_stm -> exp Semicolon.  | if, exp_stm -> exp Semicolon.  | -continue-, exp_stm -> exp Semicolon.  | RBrace, exp_stm -> exp Semicolon.  | Tilde, )
519 <- (442, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -continue-, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | RBrace, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, unary_op -> .Tilde  | String, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -struct-, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, primary_exp -> .ID  | Semicolon, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, primary_exp -> .ID  | LT, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, unary_exp -> .unary_op unary_exp  | Semicolon, conditional_exp -> .binary_exp  | Comma, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Decrement  | Decrement, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .primary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, postfix_exp -> .primary_exp  | Increment, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | Number, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .Number  | AND, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -half2-, binary_exp -> .unary_exp  | LE, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -void-, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .String  | Question, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | break, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -do-, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, binary_exp -> .unary_exp  | Ampersand, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -half4-, unary_exp -> .Increment unary_exp  | Caret, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -fixed4-, postfix_exp -> .primary_exp  | LE, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -half3-, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Assign, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_exp -> .Increment unary_exp  | Percent, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -float3-, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -double-, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -goto-, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -float2-, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, unary_exp -> .Decrement unary_exp  | Plus, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -sampler2D-, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | Tilde, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .Number  | Semicolon, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .unary_op unary_exp  | GT, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -int-, postfix_exp -> .postfix_exp Decrement  | Semicolon, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | LT, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .postfix_exp LParen RParen  | OR, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -short-, unary_op -> .Minus  | Number, primary_exp -> .Number  | Percent, unary_exp -> .unary_op unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, postfix_exp -> .postfix_exp Dot ID  | LBrack, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | Decrement, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_op -> .NOT  | Number, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | while, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -float4-, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | LBrace, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, primary_exp -> .Number  | Plus, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | Semicolon, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -fixed2-, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, unary_op -> .Minus  | Tilde, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -uniform-, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, unary_exp -> .postfix_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .Decrement unary_exp  | AND, primary_exp -> .String  | Assign, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -float-, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | NOT, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | Decrement, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Caret, unary_exp -> .postfix_exp  | NEQ, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | Plus, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -fixed3-, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_op -> .NOT  | Plus, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | LParen, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | else, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -long-, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | for, conditional_exp -> .binary_exp  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | Increment, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | String, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | ID, unary_exp -> .Increment unary_exp  | RightShift, postfix_exp -> .primary_exp  | Percent, postfix_exp -> .primary_exp  | Ampersand, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, primary_exp -> .String  | Comma, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | Minus, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | if, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | Dot, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -return-, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | -char-, unary_exp -> .postfix_exp  | LeftShift, unary_op -> .NOT  | Decrement, )
520 <- (443, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, selection_stm -> if LParen .exp RParen stm  | Increment, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, primary_exp -> .LParen exp RParen  | RightShift, selection_stm -> if LParen .exp RParen stm else stm  | Plus, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, selection_stm -> if LParen .exp RParen stm  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, selection_stm -> if LParen .exp RParen stm else stm  | -continue-, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, selection_stm -> if LParen .exp RParen stm  | for, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, selection_stm -> if LParen .exp RParen stm else stm  | break, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | GE, selection_stm -> if LParen .exp RParen stm  | Decrement, postfix_exp -> .postfix_exp Dot ID  | NEQ, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, unary_exp -> .postfix_exp  | RParen, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | Caret, selection_stm -> if LParen .exp RParen stm else stm  | -short-, unary_exp -> .Decrement unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | RParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, selection_stm -> if LParen .exp RParen stm  | LBrace, unary_exp -> .Increment unary_exp  | Ampersand, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, selection_stm -> if LParen .exp RParen stm else stm  | -struct-, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, selection_stm -> if LParen .exp RParen stm  | Plus, postfix_exp -> .postfix_exp Decrement  | Caret, selection_stm -> if LParen .exp RParen stm  | -float2-, primary_exp -> .String  | RightShift, unary_op -> .Tilde  | LParen, selection_stm -> if LParen .exp RParen stm  | NOT, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, selection_stm -> if LParen .exp RParen stm  | String, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, unary_exp -> .unary_op unary_exp  | LE, selection_stm -> if LParen .exp RParen stm else stm  | -half2-, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .primary_exp  | Caret, selection_stm -> if LParen .exp RParen stm else stm  | NOT, primary_exp -> .Number  | VerticalBar, primary_exp -> .String  | LeftShift, postfix_exp -> .postfix_exp Increment  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .primary_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, selection_stm -> if LParen .exp RParen stm  | -half4-, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, selection_stm -> if LParen .exp RParen stm else stm  | -double-, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, selection_stm -> if LParen .exp RParen stm else stm  | while, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, selection_stm -> if LParen .exp RParen stm  | -struct-, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, selection_stm -> if LParen .exp RParen stm  | -do-, selection_stm -> if LParen .exp RParen stm else stm  | Semicolon, selection_stm -> if LParen .exp RParen stm else stm  | Decrement, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, selection_stm -> if LParen .exp RParen stm  | -fixed4-, binary_exp -> .unary_exp  | Ampersand, selection_stm -> if LParen .exp RParen stm  | -float3-, selection_stm -> if LParen .exp RParen stm  | -half3-, primary_exp -> .Number  | LBrack, selection_stm -> if LParen .exp RParen stm  | RBrace, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, selection_stm -> if LParen .exp RParen stm  | -goto-, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, primary_exp -> .LParen exp RParen  | Ampersand, selection_stm -> if LParen .exp RParen stm else stm  | -void-, binary_exp -> .binary_exp binary_op unary_exp  | Comma, binary_exp -> .unary_exp  | Times, primary_exp -> .LParen exp RParen  | Times, selection_stm -> if LParen .exp RParen stm  | -int-, primary_exp -> .ID  | GT, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, selection_stm -> if LParen .exp RParen stm else stm  | -half3-, primary_exp -> .ID  | Question, selection_stm -> if LParen .exp RParen stm else stm  | -fixed4-, postfix_exp -> .primary_exp  | LE, exp -> .assignment_exp  | RParen, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, selection_stm -> if LParen .exp RParen stm else stm  | -char-, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, selection_stm -> if LParen .exp RParen stm  | -char-, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, selection_stm -> if LParen .exp RParen stm  | Tilde, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, selection_stm -> if LParen .exp RParen stm else stm  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, selection_stm -> if LParen .exp RParen stm  | ID, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, selection_stm -> if LParen .exp RParen stm else stm  | -do-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, binary_exp -> .unary_exp  | LT, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, unary_exp -> .Increment unary_exp  | GT, unary_exp -> .unary_op unary_exp  | Ampersand, selection_stm -> if LParen .exp RParen stm  | LParen, primary_exp -> .Number  | RParen, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, selection_stm -> if LParen .exp RParen stm  | -uniform-, selection_stm -> if LParen .exp RParen stm else stm  | -goto-, selection_stm -> if LParen .exp RParen stm else stm  | for, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | Percent, selection_stm -> if LParen .exp RParen stm  | -fixed2-, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Times, unary_op -> .Plus  | Minus, selection_stm -> if LParen .exp RParen stm  | -float-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_op -> .Tilde  | Number, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Divide, unary_op -> .Minus  | String, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> .unary_op unary_exp  | Percent, selection_stm -> if LParen .exp RParen stm else stm  | String, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Question, selection_stm -> if LParen .exp RParen stm else stm  | RBrace, selection_stm -> if LParen .exp RParen stm  | Semicolon, unary_op -> .Minus  | Number, primary_exp -> .Number  | Percent, selection_stm -> if LParen .exp RParen stm else stm  | LBrace, assignment_exp -> .conditional_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, selection_stm -> if LParen .exp RParen stm else stm  | Tilde, primary_exp -> .ID  | LE, primary_exp -> .LParen exp RParen  | GE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, selection_stm -> if LParen .exp RParen stm  | while, unary_op -> .NOT  | Minus, selection_stm -> if LParen .exp RParen stm  | -void-, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, exp -> .exp Comma assignment_exp  | RParen, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_op -> .NOT  | Number, unary_exp -> .Decrement unary_exp  | NEQ, selection_stm -> if LParen .exp RParen stm else stm  | -half4-, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, selection_stm -> if LParen .exp RParen stm  | -fixed3-, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, unary_exp -> .postfix_exp  | EQ, unary_exp -> .Decrement unary_exp  | Times, selection_stm -> if LParen .exp RParen stm  | -long-, postfix_exp -> .postfix_exp Decrement  | VerticalBar, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, unary_exp -> .unary_op unary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, selection_stm -> if LParen .exp RParen stm else stm  | -int-, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, binary_exp -> .unary_exp  | VerticalBar, selection_stm -> if LParen .exp RParen stm else stm  | LParen, primary_exp -> .LParen exp RParen  | Minus, selection_stm -> if LParen .exp RParen stm else stm  | -long-, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, selection_stm -> if LParen .exp RParen stm  | -short-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp Decrement  | Assign, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, selection_stm -> if LParen .exp RParen stm  | if, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, postfix_exp -> .primary_exp  | Plus, selection_stm -> if LParen .exp RParen stm  | -sampler2D-, postfix_exp -> .postfix_exp Decrement  | RParen, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, selection_stm -> if LParen .exp RParen stm else stm  | -uniform-, selection_stm -> if LParen .exp RParen stm else stm  | -fixed2-, binary_exp -> .binary_exp binary_op unary_exp  | RParen, primary_exp -> .String  | Assign, selection_stm -> if LParen .exp RParen stm else stm  | -float3-, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, selection_stm -> if LParen .exp RParen stm else stm  | -fixed3-, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, selection_stm -> if LParen .exp RParen stm  | -return-, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .ID  | LeftShift, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, selection_stm -> if LParen .exp RParen stm else stm  | -float4-, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .Number  | Plus, unary_op -> .NOT  | Plus, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, primary_exp -> .ID  | RightShift, postfix_exp -> .primary_exp  | GE, selection_stm -> if LParen .exp RParen stm  | else, selection_stm -> if LParen .exp RParen stm else stm  | Increment, primary_exp -> .ID  | Times, selection_stm -> if LParen .exp RParen stm else stm  | -sampler2D-, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, selection_stm -> if LParen .exp RParen stm else stm  | else, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, postfix_exp -> .primary_exp  | Decrement, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .primary_exp  | GT, selection_stm -> if LParen .exp RParen stm  | -float4-, unary_op -> .NOT  | NOT, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, selection_stm -> if LParen .exp RParen stm  | break, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Ampersand, unary_op -> .Tilde  | NOT, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, selection_stm -> if LParen .exp RParen stm else stm  | -return-, selection_stm -> if LParen .exp RParen stm  | -continue-, primary_exp -> .String  | EQ, selection_stm -> if LParen .exp RParen stm  | -half2-, primary_exp -> .String  | Comma, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, selection_stm -> if LParen .exp RParen stm  | -double-, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .unary_op unary_exp  | Assign, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, binary_exp -> .binary_exp binary_op unary_exp  | OR, selection_stm -> if LParen .exp RParen stm else stm  | ID, selection_stm -> if LParen .exp RParen stm else stm  | if, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .postfix_exp Dot ID  | RParen, unary_exp -> .unary_op unary_exp  | Comma, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, selection_stm -> if LParen .exp RParen stm else stm  | -float-, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, selection_stm -> if LParen .exp RParen stm  | Number, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | Dot, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, selection_stm -> if LParen .exp RParen stm else stm  | Number, postfix_exp -> .postfix_exp Dot ID  | Plus, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .primary_exp  | LParen, primary_exp -> .ID  | Dot, selection_stm -> if LParen .exp RParen stm else stm  | -float2-, postfix_exp -> .postfix_exp LParen RParen  | Assign, unary_exp -> .Increment unary_exp  | Question, unary_exp -> .postfix_exp  | LeftShift, )
521 <- (447, 'else') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, exp_stm -> .Semicolon  | -half2-, iteration_stm -> .while LParen exp RParen stm  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | -char-, exp_stm -> .Semicolon  | Plus, exp_stm -> .exp Semicolon  | LParen, stm -> .iteration_stm  | String, compound_stm -> .LBrace RBrace  | -float3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -char-, jump_stm -> .break  | -continue-, exp_stm -> .exp Semicolon  | -float4-, unary_exp -> .Increment unary_exp  | Ampersand, compound_stm -> .LBrace block_item_list RBrace  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | -half4-, jump_stm -> .break  | LBrace, stm -> .iteration_stm  | Number, unary_exp -> .postfix_exp  | Ampersand, selection_stm -> .if LParen exp RParen stm  | -fixed3-, compound_stm -> .LBrace RBrace  | -do-, primary_exp -> .ID  | Dot, jump_stm -> .-continue-  | Minus, jump_stm -> .-continue-  | String, unary_op -> .Minus  | Minus, jump_stm -> .-goto- ID  | -half3-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Plus, exp_stm -> .Semicolon  | -struct-, unary_exp -> .postfix_exp  | Assign, unary_op -> .Tilde  | String, primary_exp -> .String  | OR, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -long-, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .unary_op unary_exp  | LT, selection_stm -> if LParen exp RParen stm else .stm  | Tilde, stm -> .selection_stm  | for, postfix_exp -> .postfix_exp Decrement  | EQ, jump_stm -> .-goto- ID  | LParen, jump_stm -> .-goto- ID  | -fixed4-, compound_stm -> .LBrace block_item_list RBrace  | Increment, selection_stm -> if LParen exp RParen stm else .stm  | Plus, postfix_exp -> .postfix_exp Increment  | GT, stm -> .jump_stm  | Tilde, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, stm -> .jump_stm  | -goto-, unary_exp -> .postfix_exp  | GT, selection_stm -> if LParen exp RParen stm else .stm  | -void-, unary_exp -> .Decrement unary_exp  | LE, compound_stm -> .LBrace block_item_list RBrace  | -float3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | for, selection_stm -> .if LParen exp RParen stm else stm  | while, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -struct-, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | GE, jump_stm -> .-return- exp Semicolon  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LParen, compound_stm -> .LBrace block_item_list RBrace  | Number, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float4-, jump_stm -> .-return- exp Semicolon  | -float-, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Increment  | OR, exp_stm -> .exp Semicolon  | Increment, exp_stm -> .Semicolon  | -long-, iteration_stm -> .while LParen exp RParen stm  | -fixed4-, postfix_exp -> .postfix_exp Decrement  | Assign, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, jump_stm -> .-return- exp Semicolon  | -char-, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, unary_op -> .Tilde  | LParen, selection_stm -> if LParen exp RParen stm else .stm  | -int-, stm -> .jump_stm  | -fixed2-, stm -> .compound_stm  | -return-, unary_exp -> .Decrement unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | Minus, postfix_exp -> .primary_exp  | LT, selection_stm -> .if LParen exp RParen stm else stm  | break, jump_stm -> .break  | -struct-, selection_stm -> .if LParen exp RParen stm else stm  | Semicolon, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, postfix_exp -> .postfix_exp Decrement  | LParen, compound_stm -> .LBrace RBrace  | -float2-, exp_stm -> .exp Semicolon  | -do-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -do-, selection_stm -> if LParen exp RParen stm else .stm  | -do-, exp_stm -> .exp Semicolon  | Minus, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, selection_stm -> .if LParen exp RParen stm else stm  | RBrace, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, jump_stm -> .break  | -half2-, jump_stm -> .-continue-  | Number, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_exp -> .unary_op unary_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | -struct-, postfix_exp -> .postfix_exp Increment  | LE, exp_stm -> .exp Semicolon  | -half2-, primary_exp -> .LParen exp RParen  | VerticalBar, selection_stm -> .if LParen exp RParen stm else stm  | LBrace, jump_stm -> .break  | break, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, jump_stm -> .-continue-  | -fixed4-, compound_stm -> .LBrace RBrace  | -double-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, compound_stm -> .LBrace block_item_list RBrace  | -half3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half2-, selection_stm -> .if LParen exp RParen stm  | -float-, jump_stm -> .-return- exp Semicolon  | while, stm -> .compound_stm  | Minus, stm -> .jump_stm  | -sampler2D-, iteration_stm -> .while LParen exp RParen stm  | -sampler2D-, jump_stm -> .break  | String, selection_stm -> if LParen exp RParen stm else .stm  | for, primary_exp -> .String  | Divide, exp_stm -> .exp Semicolon  | -float3-, jump_stm -> .-continue-  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .primary_exp  | LeftShift, primary_exp -> .String  | Semicolon, stm -> .jump_stm  | -long-, jump_stm -> .-continue-  | ID, stm -> .iteration_stm  | ID, selection_stm -> .if LParen exp RParen stm else stm  | -long-, compound_stm -> .LBrace block_item_list RBrace  | -double-, primary_exp -> .LParen exp RParen  | Increment, jump_stm -> .break  | Decrement, stm -> .exp_stm  | -float2-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | break, unary_exp -> .postfix_exp  | Times, stm -> .compound_stm  | -half3-, selection_stm -> .if LParen exp RParen stm  | if, unary_exp -> .postfix_exp  | Semicolon, jump_stm -> .-continue-  | if, jump_stm -> .-goto- ID  | -return-, compound_stm -> .LBrace block_item_list RBrace  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -goto-, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | if, compound_stm -> .LBrace block_item_list RBrace  | for, primary_exp -> .Number  | Question, selection_stm -> .if LParen exp RParen stm  | -int-, exp_stm -> .exp Semicolon  | -struct-, jump_stm -> .-goto- ID  | -long-, selection_stm -> .if LParen exp RParen stm  | String, postfix_exp -> .postfix_exp Dot ID  | GE, jump_stm -> .-continue-  | -struct-, jump_stm -> .-return- exp Semicolon  | -int-, compound_stm -> .LBrace block_item_list RBrace  | -continue-, unary_exp -> .postfix_exp  | Question, unary_exp -> .Decrement unary_exp  | Minus, stm -> .jump_stm  | String, stm -> .iteration_stm  | -half2-, compound_stm -> .LBrace RBrace  | -float4-, stm -> .exp_stm  | ID, stm -> .exp_stm  | -long-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_exp -> .Increment unary_exp  | Plus, iteration_stm -> .while LParen exp RParen stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Comma, exp_stm -> .Semicolon  | if, exp_stm -> .exp Semicolon  | -continue-, primary_exp -> .LParen exp RParen  | Question, iteration_stm -> .while LParen exp RParen stm  | Minus, stm -> .iteration_stm  | -void-, stm -> .exp_stm  | Tilde, postfix_exp -> .primary_exp  | LE, compound_stm -> .LBrace block_item_list RBrace  | LParen, exp_stm -> .exp Semicolon  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | String, compound_stm -> .LBrace block_item_list RBrace  | -float-, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, selection_stm -> .if LParen exp RParen stm  | -void-, stm -> .exp_stm  | -do-, jump_stm -> .-continue-  | Increment, jump_stm -> .-return- exp Semicolon  | -do-, postfix_exp -> .postfix_exp Increment  | Question, stm -> .compound_stm  | NOT, unary_exp -> .Decrement unary_exp  | Ampersand, unary_exp -> .postfix_exp  | AND, compound_stm -> .LBrace block_item_list RBrace  | Plus, unary_exp -> .Decrement unary_exp  | Assign, iteration_stm -> .while LParen exp RParen stm  | -do-, stm -> .jump_stm  | Decrement, primary_exp -> .String  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, stm -> .selection_stm  | -continue-, iteration_stm -> .while LParen exp RParen stm  | Tilde, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, jump_stm -> .-goto- ID  | -int-, exp_stm -> .Semicolon  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | -uniform-, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, selection_stm -> .if LParen exp RParen stm else stm  | Plus, postfix_exp -> .primary_exp  | Times, jump_stm -> .-goto- ID  | if, stm -> .iteration_stm  | -do-, primary_exp -> .LParen exp RParen  | AND, binary_exp -> .unary_exp  | NEQ, selection_stm -> if LParen exp RParen stm else .stm  | Increment, jump_stm -> .-continue-  | break, exp_stm -> .Semicolon  | -short-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Tilde, postfix_exp -> .postfix_exp LParen RParen  | LBrack, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | -float4-, iteration_stm -> .while LParen exp RParen stm  | LParen, selection_stm -> .if LParen exp RParen stm  | -sampler2D-, selection_stm -> if LParen exp RParen stm else .stm  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp Decrement  | NEQ, selection_stm -> .if LParen exp RParen stm else stm  | -short-, jump_stm -> .-continue-  | -void-, compound_stm -> .LBrace block_item_list RBrace  | -return-, jump_stm -> .break  | RBrace, selection_stm -> .if LParen exp RParen stm  | -float2-, compound_stm -> .LBrace block_item_list RBrace  | -half2-, jump_stm -> .-return- exp Semicolon  | -double-, primary_exp -> .LParen exp RParen  | GT, stm -> .iteration_stm  | LBrace, jump_stm -> .break  | -fixed3-, jump_stm -> .-goto- ID  | while, stm -> .jump_stm  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | NEQ, jump_stm -> .break  | Number, stm -> .jump_stm  | -do-, postfix_exp -> .postfix_exp Decrement  | Plus, exp_stm -> .exp Semicolon  | -half4-, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, stm -> .selection_stm  | -int-, stm -> .jump_stm  | break, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed3-, selection_stm -> .if LParen exp RParen stm else stm  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float-, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, jump_stm -> .-return- exp Semicolon  | NOT, postfix_exp -> .postfix_exp Increment  | Times, selection_stm -> .if LParen exp RParen stm else stm  | Decrement, stm -> .selection_stm  | -fixed3-, jump_stm -> .-goto- ID  | String, stm -> .compound_stm  | -double-, stm -> .exp_stm  | if, jump_stm -> .break  | -do-, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, selection_stm -> .if LParen exp RParen stm  | Minus, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, selection_stm -> .if LParen exp RParen stm  | RBrace, postfix_exp -> .postfix_exp Decrement  | LeftShift, selection_stm -> .if LParen exp RParen stm else stm  | Tilde, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, stm -> .selection_stm  | Number, selection_stm -> if LParen exp RParen stm else .stm  | -half2-, compound_stm -> .LBrace RBrace  | -char-, jump_stm -> .-goto- ID  | -short-, exp_stm -> .Semicolon  | -int-, unary_op -> .Minus  | ID, stm -> .selection_stm  | -uniform-, compound_stm -> .LBrace block_item_list RBrace  | -void-, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, compound_stm -> .LBrace RBrace  | while, jump_stm -> .break  | if, stm -> .exp_stm  | -float-, unary_exp -> .Increment unary_exp  | Minus, stm -> .exp_stm  | -fixed2-, postfix_exp -> .primary_exp  | Decrement, stm -> .iteration_stm  | Plus, stm -> .selection_stm  | -void-, jump_stm -> .break  | Plus, stm -> .exp_stm  | -double-, stm -> .selection_stm  | Minus, jump_stm -> .-continue-  | -return-, stm -> .exp_stm  | -struct-, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Semicolon, stm -> .exp_stm  | while, unary_op -> .Tilde  | Number, exp_stm -> .exp Semicolon  | -goto-, stm -> .jump_stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | Percent, stm -> .iteration_stm  | Semicolon, stm -> .exp_stm  | -float4-, postfix_exp -> .primary_exp  | Increment, compound_stm -> .LBrace block_item_list RBrace  | if, postfix_exp -> .postfix_exp Dot ID  | LT, jump_stm -> .-continue-  | for, unary_exp -> .unary_op unary_exp  | Assign, jump_stm -> .-return- exp Semicolon  | -half2-, jump_stm -> .-return- exp Semicolon  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, stm -> .iteration_stm  | -continue-, selection_stm -> .if LParen exp RParen stm else stm  | -float-, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, primary_exp -> .LParen exp RParen  | GE, stm -> .exp_stm  | Semicolon, binary_exp -> .unary_exp  | RightShift, selection_stm -> .if LParen exp RParen stm else stm  | -sampler2D-, unary_op -> .Minus  | LParen, exp_stm -> .Semicolon  | -float-, unary_op -> .NOT  | Minus, stm -> .iteration_stm  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | String, primary_exp -> .ID  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float4-, jump_stm -> .break  | -uniform-, jump_stm -> .-goto- ID  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | String, stm -> .jump_stm  | LBrace, exp -> .exp Comma assignment_exp  | Comma, primary_exp -> .ID  | Assign, stm -> .iteration_stm  | -half4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Dot ID  | Comma, unary_exp -> .Increment unary_exp  | NEQ, stm -> .compound_stm  | String, compound_stm -> .LBrace RBrace  | -return-, stm -> .exp_stm  | NOT, selection_stm -> if LParen exp RParen stm else .stm  | -return-, primary_exp -> .ID  | Percent, stm -> .iteration_stm  | Increment, jump_stm -> .-return- exp Semicolon  | LParen, iteration_stm -> .while LParen exp RParen stm  | if, stm -> .selection_stm  | -float3-, postfix_exp -> .primary_exp  | Plus, stm -> .jump_stm  | -float4-, primary_exp -> .String  | Minus, stm -> .compound_stm  | Tilde, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, iteration_stm -> .while LParen exp RParen stm  | -goto-, stm -> .jump_stm  | NOT, selection_stm -> .if LParen exp RParen stm  | NOT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, exp_stm -> .Semicolon  | -float4-, stm -> .selection_stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | AND, stm -> .exp_stm  | -int-, stm -> .iteration_stm  | break, exp_stm -> .exp Semicolon  | -float-, compound_stm -> .LBrace block_item_list RBrace  | -int-, stm -> .selection_stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -half3-, compound_stm -> .LBrace block_item_list RBrace  | Tilde, stm -> .iteration_stm  | -double-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -short-, iteration_stm -> .while LParen exp RParen stm  | -float4-, stm -> .iteration_stm  | -float3-, compound_stm -> .LBrace RBrace  | Number, selection_stm -> .if LParen exp RParen stm  | -half4-, primary_exp -> .String  | Increment, selection_stm -> if LParen exp RParen stm else .stm  | -half3-, unary_exp -> .postfix_exp  | Percent, jump_stm -> .-return- exp Semicolon  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -uniform-, selection_stm -> if LParen exp RParen stm else .stm  | Semicolon, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float3-, stm -> .compound_stm  | if, primary_exp -> .Number  | Plus, jump_stm -> .-return- exp Semicolon  | ID, jump_stm -> .-goto- ID  | -float4-, selection_stm -> if LParen exp RParen stm else .stm  | ID, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed3-, stm -> .jump_stm  | -half3-, primary_exp -> .Number  | Dot, exp_stm -> .Semicolon  | -do-, exp_stm -> .Semicolon  | for, primary_exp -> .LParen exp RParen  | Ampersand, jump_stm -> .-goto- ID  | -double-, stm -> .jump_stm  | -struct-, postfix_exp -> .primary_exp  | Comma, primary_exp -> .ID  | LBrack, jump_stm -> .-return- exp Semicolon  | Semicolon, selection_stm -> .if LParen exp RParen stm  | Decrement, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, selection_stm -> .if LParen exp RParen stm  | LParen, jump_stm -> .-continue-  | -int-, jump_stm -> .break  | -fixed2-, exp_stm -> .exp Semicolon  | -short-, primary_exp -> .String  | Assign, compound_stm -> .LBrace RBrace  | Plus, unary_exp -> .unary_op unary_exp  | EQ, stm -> .exp_stm  | for, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, jump_stm -> .-return- exp Semicolon  | String, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, stm -> .selection_stm  | -half4-, primary_exp -> .LParen exp RParen  | Semicolon, compound_stm -> .LBrace RBrace  | break, selection_stm -> .if LParen exp RParen stm else stm  | -int-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, selection_stm -> .if LParen exp RParen stm else stm  | if, stm -> .iteration_stm  | -uniform-, stm -> .selection_stm  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | -continue-, jump_stm -> .-goto- ID  | -void-, stm -> .exp_stm  | -half4-, compound_stm -> .LBrace block_item_list RBrace  | NOT, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp Decrement  | Comma, primary_exp -> .String  | LT, compound_stm -> .LBrace RBrace  | -sampler2D-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, postfix_exp -> .postfix_exp Increment  | AND, selection_stm -> .if LParen exp RParen stm  | Semicolon, primary_exp -> .LParen exp RParen  | LParen, stm -> .compound_stm  | -void-, stm -> .jump_stm  | -float2-, stm -> .jump_stm  | Number, unary_exp -> .unary_op unary_exp  | Ampersand, exp_stm -> .exp Semicolon  | RBrace, exp_stm -> .exp Semicolon  | -int-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half4-, iteration_stm -> .while LParen exp RParen stm  | -half2-, stm -> .iteration_stm  | -fixed3-, stm -> .jump_stm  | Plus, compound_stm -> .LBrace RBrace  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Number, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | VerticalBar, stm -> .iteration_stm  | -float2-, exp_stm -> .Semicolon  | LBrace, exp_stm -> .exp Semicolon  | -void-, compound_stm -> .LBrace block_item_list RBrace  | -fixed2-, primary_exp -> .ID  | Times, compound_stm -> .LBrace RBrace  | -fixed2-, exp_stm -> .exp Semicolon  | -long-, stm -> .selection_stm  | -return-, exp_stm -> .Semicolon  | -continue-, unary_op -> .Tilde  | Increment, selection_stm -> .if LParen exp RParen stm  | while, selection_stm -> .if LParen exp RParen stm else stm  | -do-, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, stm -> .selection_stm  | Decrement, jump_stm -> .-continue-  | -do-, exp_stm -> .exp Semicolon  | if, assignment_exp -> .conditional_exp  | Comma, unary_exp -> .Decrement unary_exp  | LeftShift, stm -> .exp_stm  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -continue-, stm -> .compound_stm  | ID, jump_stm -> .-continue-  | Tilde, stm -> .exp_stm  | LBrace, jump_stm -> .-continue-  | -half4-, iteration_stm -> .while LParen exp RParen stm  | -continue-, compound_stm -> .LBrace block_item_list RBrace  | Minus, jump_stm -> .break  | for, compound_stm -> .LBrace RBrace  | -long-, jump_stm -> .break  | -return-, primary_exp -> .Number  | Increment, compound_stm -> .LBrace RBrace  | -void-, exp_stm -> .Semicolon  | -fixed2-, selection_stm -> .if LParen exp RParen stm else stm  | -void-, jump_stm -> .-continue-  | while, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Plus, selection_stm -> if LParen exp RParen stm else .stm  | -struct-, exp_stm -> .Semicolon  | -fixed4-, exp_stm -> .Semicolon  | -goto-, iteration_stm -> .while LParen exp RParen stm  | -float2-, stm -> .iteration_stm  | -char-, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, jump_stm -> .break  | -float4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, selection_stm -> .if LParen exp RParen stm else stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | LBrace, primary_exp -> .Number  | VerticalBar, primary_exp -> .String  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, unary_op -> .Minus  | Number, compound_stm -> .LBrace RBrace  | Tilde, postfix_exp -> .primary_exp  | Ampersand, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | LT, jump_stm -> .-return- exp Semicolon  | -void-, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, compound_stm -> .LBrace RBrace  | -fixed4-, postfix_exp -> .postfix_exp Dot ID  | Question, selection_stm -> if LParen exp RParen stm else .stm  | -float3-, exp_stm -> .exp Semicolon  | -sampler2D-, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float3-, selection_stm -> .if LParen exp RParen stm  | -goto-, selection_stm -> .if LParen exp RParen stm  | -half2-, selection_stm -> if LParen exp RParen stm else .stm  | Decrement, primary_exp -> .String  | EQ, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | ID, jump_stm -> .-continue-  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -float3-, primary_exp -> .ID  | Divide, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed4-, stm -> .exp_stm  | -goto-, postfix_exp -> .postfix_exp Dot ID  | Dot, selection_stm -> .if LParen exp RParen stm else stm  | -uniform-, stm -> .compound_stm  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Plus, jump_stm -> .-goto- ID  | ID, jump_stm -> .break  | Increment, selection_stm -> .if LParen exp RParen stm else stm  | -fixed2-, stm -> .exp_stm  | -fixed3-, stm -> .compound_stm  | LParen, postfix_exp -> .postfix_exp Dot ID  | EQ, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half4-, unary_exp -> .unary_op unary_exp  | Comma, jump_stm -> .-return- exp Semicolon  | -goto-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float-, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Semicolon, stm -> .compound_stm  | -fixed4-, binary_exp -> .unary_exp  | GE, selection_stm -> .if LParen exp RParen stm else stm  | -return-, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | -goto-, iteration_stm -> .while LParen exp RParen stm  | break, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -int-, jump_stm -> .-continue-  | -continue-, stm -> .compound_stm  | for, stm -> .jump_stm  | if, stm -> .compound_stm  | -short-, jump_stm -> .-goto- ID  | -float2-, primary_exp -> .ID  | Question, stm -> .selection_stm  | Tilde, postfix_exp -> .postfix_exp Increment  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -float2-, stm -> .exp_stm  | -fixed4-, jump_stm -> .break  | -char-, binary_exp -> .unary_exp  | OR, stm -> .compound_stm  | -long-, stm -> .compound_stm  | -fixed2-, stm -> .jump_stm  | -float3-, jump_stm -> .-goto- ID  | Increment, selection_stm -> .if LParen exp RParen stm else stm  | LParen, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | LBrack, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LBrace, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, stm -> .iteration_stm  | -half3-, stm -> .compound_stm  | -char-, jump_stm -> .break  | NOT, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | break, postfix_exp -> .primary_exp  | LBrack, jump_stm -> .break  | -long-, jump_stm -> .-continue-  | -uniform-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LBrace, stm -> .compound_stm  | -goto-, selection_stm -> .if LParen exp RParen stm  | -short-, postfix_exp -> .primary_exp  | LParen, stm -> .selection_stm  | LBrace, stm -> .compound_stm  | -float4-, postfix_exp -> .postfix_exp LParen RParen  | Assign, compound_stm -> .LBrace RBrace  | -half3-, selection_stm -> .if LParen exp RParen stm else stm  | -fixed4-, iteration_stm -> .while LParen exp RParen stm  | -uniform-, jump_stm -> .-continue-  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -short-, postfix_exp -> .postfix_exp LParen RParen  | NEQ, stm -> .iteration_stm  | -float-, unary_exp -> .postfix_exp  | LT, selection_stm -> if LParen exp RParen stm else .stm  | NOT, postfix_exp -> .postfix_exp Dot ID  | Times, exp_stm -> .Semicolon  | -float3-, primary_exp -> .LParen exp RParen  | NEQ, compound_stm -> .LBrace RBrace  | Increment, stm -> .compound_stm  | -continue-, stm -> .exp_stm  | Plus, postfix_exp -> .postfix_exp Decrement  | Minus, stm -> .selection_stm  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, postfix_exp -> .postfix_exp Decrement  | Times, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -int-, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, stm -> .compound_stm  | Plus, exp_stm -> .exp Semicolon  | String, compound_stm -> .LBrace block_item_list RBrace  | RBrace, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, exp_stm -> .exp Semicolon  | -float2-, postfix_exp -> .primary_exp  | AND, jump_stm -> .-return- exp Semicolon  | -short-, compound_stm -> .LBrace RBrace  | String, selection_stm -> .if LParen exp RParen stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -void-, compound_stm -> .LBrace RBrace  | -struct-, exp_stm -> .Semicolon  | Increment, unary_exp -> .unary_op unary_exp  | Plus, exp_stm -> .Semicolon  | while, stm -> .compound_stm  | -float3-, primary_exp -> .String  | LeftShift, jump_stm -> .-continue-  | -fixed3-, postfix_exp -> .postfix_exp LParen RParen  | GE, stm -> .selection_stm  | -float4-, postfix_exp -> .primary_exp  | OR, iteration_stm -> .while LParen exp RParen stm  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | while, unary_exp -> .postfix_exp  | RightShift, compound_stm -> .LBrace block_item_list RBrace  | -fixed4-, selection_stm -> if LParen exp RParen stm else .stm  | -continue-, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_exp -> .Increment unary_exp  | Divide, exp_stm -> .Semicolon  | ID, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed2-, jump_stm -> .-goto- ID  | -struct-, primary_exp -> .Number  | AND, exp_stm -> .exp Semicolon  | -half3-, jump_stm -> .break  | Minus, iteration_stm -> .while LParen exp RParen stm  | Plus, postfix_exp -> .postfix_exp Dot ID  | Minus, compound_stm -> .LBrace RBrace  | if, jump_stm -> .break  | -void-, selection_stm -> if LParen exp RParen stm else .stm  | -float2-, iteration_stm -> .while LParen exp RParen stm  | -float-, stm -> .selection_stm  | Plus, compound_stm -> .LBrace RBrace  | NOT, exp_stm -> .Semicolon  | Decrement, stm -> .exp_stm  | -sampler2D-, primary_exp -> .String  | Ampersand, exp_stm -> .Semicolon  | -float2-, selection_stm -> if LParen exp RParen stm else .stm  | -float4-, iteration_stm -> .while LParen exp RParen stm  | Number, jump_stm -> .-return- exp Semicolon  | -long-, unary_op -> .Tilde  | Plus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -continue-, primary_exp -> .String  | Caret, exp_stm -> .exp Semicolon  | Decrement, stm -> .compound_stm  | -sampler2D-, stm -> .selection_stm  | LParen, selection_stm -> if LParen exp RParen stm else .stm  | -fixed2-, stm -> .iteration_stm  | LParen, stm -> .jump_stm  | -half2-, stm -> .jump_stm  | -void-, selection_stm -> .if LParen exp RParen stm  | -long-, binary_exp -> .unary_exp  | EQ, unary_exp -> .postfix_exp  | Minus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, binary_exp -> .binary_exp binary_op unary_exp  | Caret, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half2-, unary_op -> .Tilde  | Tilde, jump_stm -> .break  | ID, exp_stm -> .Semicolon  | -fixed3-, stm -> .compound_stm  | -struct-, jump_stm -> .-goto- ID  | Semicolon, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, stm -> .selection_stm  | -struct-, stm -> .exp_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -return-, unary_exp -> .Decrement unary_exp  | Divide, stm -> .iteration_stm  | Tilde, compound_stm -> .LBrace block_item_list RBrace  | LBrace, postfix_exp -> .postfix_exp Increment  | Semicolon, jump_stm -> .break  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | -fixed3-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half3-, stm -> .exp_stm  | -return-, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, stm -> .exp_stm  | -char-, postfix_exp -> .postfix_exp Decrement  | Ampersand, exp_stm -> .exp Semicolon  | -double-, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -long-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, iteration_stm -> .while LParen exp RParen stm  | for, compound_stm -> .LBrace RBrace  | -half2-, jump_stm -> .-goto- ID  | -do-, stm -> .selection_stm  | if, stm -> .compound_stm  | -uniform-, compound_stm -> .LBrace RBrace  | -int-, selection_stm -> .if LParen exp RParen stm else stm  | -half2-, stm -> .jump_stm  | -float-, selection_stm -> if LParen exp RParen stm else .stm  | while, jump_stm -> .-continue-  | RBrace, unary_exp -> .unary_op unary_exp  | VerticalBar, jump_stm -> .-return- exp Semicolon  | -float4-, stm -> .selection_stm  | -sampler2D-, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, stm -> .exp_stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, unary_op -> .Minus  | Decrement, compound_stm -> .LBrace block_item_list RBrace  | -long-, primary_exp -> .LParen exp RParen  | Percent, selection_stm -> .if LParen exp RParen stm  | Plus, jump_stm -> .-return- exp Semicolon  | -fixed4-, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | if, exp_stm -> .exp Semicolon  | -char-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -void-, stm -> .compound_stm  | -float2-, postfix_exp -> .postfix_exp Increment  | Comma, compound_stm -> .LBrace block_item_list RBrace  | -float2-, jump_stm -> .-continue-  | -fixed2-, primary_exp -> .Number  | LeftShift, exp_stm -> .exp Semicolon  | Tilde, stm -> .compound_stm  | LBrace, jump_stm -> .break  | while, exp_stm -> .exp Semicolon  | while, jump_stm -> .break  | LParen, compound_stm -> .LBrace RBrace  | LBrace, jump_stm -> .-goto- ID  | -float-, exp_stm -> .exp Semicolon  | LBrace, jump_stm -> .-continue-  | -short-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, binary_exp -> .binary_exp binary_op unary_exp  | EQ, exp_stm -> .exp Semicolon  | for, postfix_exp -> .postfix_exp Decrement  | Percent, jump_stm -> .-continue-  | -double-, jump_stm -> .break  | -float-, compound_stm -> .LBrace RBrace  | ID, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, selection_stm -> .if LParen exp RParen stm  | -fixed2-, primary_exp -> .LParen exp RParen  | Times, stm -> .selection_stm  | ID, selection_stm -> .if LParen exp RParen stm  | -double-, exp_stm -> .Semicolon  | LParen, postfix_exp -> .primary_exp  | Percent, primary_exp -> .String  | Comma, jump_stm -> .break  | -goto-, stm -> .iteration_stm  | -fixed2-, jump_stm -> .-return- exp Semicolon  | -struct-, binary_exp -> .binary_exp binary_op unary_exp  | Question, stm -> .exp_stm  | Minus, exp_stm -> .exp Semicolon  | -uniform-, exp_stm -> .Semicolon  | -char-, primary_exp -> .Number  | RightShift, jump_stm -> .-continue-  | -goto-, stm -> .exp_stm  | -half2-, primary_exp -> .ID  | OR, stm -> .exp_stm  | -void-, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_exp -> .Increment unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Plus, primary_exp -> .Number  | GE, stm -> .jump_stm  | Semicolon, stm -> .jump_stm  | Minus, postfix_exp -> .postfix_exp LParen RParen  | GT, iteration_stm -> .while LParen exp RParen stm  | Semicolon, primary_exp -> .Number  | Times, jump_stm -> .-return- exp Semicolon  | Increment, binary_exp -> .binary_exp binary_op unary_exp  | Times, exp_stm -> .Semicolon  | -half4-, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, compound_stm -> .LBrace RBrace  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, primary_exp -> .ID  | Minus, selection_stm -> .if LParen exp RParen stm  | -continue-, unary_exp -> .unary_op unary_exp  | Question, stm -> .selection_stm  | -half3-, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, unary_op -> .Plus  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -sampler2D-, selection_stm -> .if LParen exp RParen stm else stm  | -double-, unary_exp -> .unary_op unary_exp  | Times, stm -> .iteration_stm  | -int-, stm -> .jump_stm  | -double-, binary_exp -> .unary_exp  | Question, exp_stm -> .exp Semicolon  | Plus, jump_stm -> .-continue-  | -float2-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .String  | Question, jump_stm -> .-continue-  | -char-, primary_exp -> .Number  | Decrement, iteration_stm -> .while LParen exp RParen stm  | while, selection_stm -> .if LParen exp RParen stm  | break, postfix_exp -> .postfix_exp LParen RParen  | Comma, selection_stm -> .if LParen exp RParen stm  | -float4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, unary_exp -> .Decrement unary_exp  | GT, stm -> .selection_stm  | -char-, compound_stm -> .LBrace block_item_list RBrace  | ID, binary_exp -> .unary_exp  | LE, stm -> .exp_stm  | String, jump_stm -> .-continue-  | -float-, selection_stm -> if LParen exp RParen stm else .stm  | -char-, jump_stm -> .break  | -double-, postfix_exp -> .postfix_exp LParen RParen  | OR, compound_stm -> .LBrace block_item_list RBrace  | -sampler2D-, exp_stm -> .exp Semicolon  | -return-, selection_stm -> if LParen exp RParen stm else .stm  | -sampler2D-, iteration_stm -> .while LParen exp RParen stm  | -char-, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | LeftShift, jump_stm -> .-return- exp Semicolon  | Number, compound_stm -> .LBrace RBrace  | -continue-, exp_stm -> .exp Semicolon  | Number, selection_stm -> if LParen exp RParen stm else .stm  | String, stm -> .iteration_stm  | for, postfix_exp -> .postfix_exp Increment  | RightShift, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | NEQ, selection_stm -> .if LParen exp RParen stm  | -uniform-, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .primary_exp  | Caret, compound_stm -> .LBrace block_item_list RBrace  | break, exp_stm -> .Semicolon  | -double-, selection_stm -> .if LParen exp RParen stm  | -float3-, jump_stm -> .-continue-  | -sampler2D-, stm -> .selection_stm  | -short-, iteration_stm -> .while LParen exp RParen stm  | -int-, selection_stm -> if LParen exp RParen stm else .stm  | break, jump_stm -> .-goto- ID  | Tilde, stm -> .compound_stm  | Increment, selection_stm -> if LParen exp RParen stm else .stm  | Number, jump_stm -> .-goto- ID  | Number, postfix_exp -> .postfix_exp Increment  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | for, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | NOT, postfix_exp -> .postfix_exp Decrement  | Increment, binary_exp -> .binary_exp binary_op unary_exp  | Minus, jump_stm -> .-goto- ID  | Decrement, stm -> .exp_stm  | LParen, primary_exp -> .LParen exp RParen  | OR, primary_exp -> .Number  | GT, postfix_exp -> .primary_exp  | Question, jump_stm -> .-goto- ID  | -uniform-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, stm -> .exp_stm  | Number, jump_stm -> .break  | -fixed4-, compound_stm -> .LBrace RBrace  | -uniform-, unary_exp -> .unary_op unary_exp  | GT, compound_stm -> .LBrace block_item_list RBrace  | -short-, stm -> .iteration_stm  | while, stm -> .compound_stm  | -int-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | RBrace, jump_stm -> .-continue-  | -long-, selection_stm -> .if LParen exp RParen stm  | -return-, stm -> .compound_stm  | -half2-, exp_stm -> .Semicolon  | -return-, selection_stm -> .if LParen exp RParen stm  | LBrace, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, stm -> .iteration_stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_op -> .Minus  | Plus, jump_stm -> .-continue-  | LParen, selection_stm -> .if LParen exp RParen stm  | Tilde, stm -> .iteration_stm  | -goto-, selection_stm -> .if LParen exp RParen stm else stm  | -fixed3-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, stm -> .compound_stm  | while, unary_exp -> .postfix_exp  | Caret, stm -> .jump_stm  | Increment, selection_stm -> .if LParen exp RParen stm  | Number, primary_exp -> .ID  | LT, stm -> .selection_stm  | NOT, postfix_exp -> .postfix_exp Dot ID  | Caret, iteration_stm -> .while LParen exp RParen stm  | NOT, stm -> .iteration_stm  | -fixed4-, binary_exp -> .unary_exp  | Caret, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, stm -> .selection_stm  | -do-, primary_exp -> .LParen exp RParen  | Assign, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -return-, primary_exp -> .ID  | VerticalBar, primary_exp -> .Number  | Percent, jump_stm -> .-continue-  | LBrace, stm -> .jump_stm  | -fixed4-, iteration_stm -> .while LParen exp RParen stm  | -return-, jump_stm -> .-return- exp Semicolon  | break, selection_stm -> if LParen exp RParen stm else .stm  | -fixed4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -double-, primary_exp -> .Number  | Assign, jump_stm -> .-return- exp Semicolon  | for, jump_stm -> .-goto- ID  | -float3-, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Increment, stm -> .compound_stm  | RBrace, selection_stm -> if LParen exp RParen stm else .stm  | -uniform-, compound_stm -> .LBrace block_item_list RBrace  | String, jump_stm -> .-goto- ID  | -goto-, stm -> .exp_stm  | -continue-, unary_exp -> .Increment unary_exp  | Question, binary_exp -> .unary_exp  | AND, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, selection_stm -> .if LParen exp RParen stm  | -fixed4-, exp_stm -> .Semicolon  | -uniform-, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, stm -> .jump_stm  | -fixed3-, stm -> .exp_stm  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Minus, postfix_exp -> .postfix_exp Dot ID  | Plus, stm -> .selection_stm  | -half2-, postfix_exp -> .postfix_exp Decrement  | Divide, exp_stm -> .exp Semicolon  | break, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, iteration_stm -> .while LParen exp RParen stm  | -fixed2-, stm -> .selection_stm  | -float-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -do-, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, unary_exp -> .postfix_exp  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Tilde, primary_exp -> .ID  | GE, selection_stm -> .if LParen exp RParen stm else stm  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, stm -> .compound_stm  | -fixed3-, primary_exp -> .String  | LParen, postfix_exp -> .postfix_exp Increment  | Minus, binary_exp -> .unary_exp  | LeftShift, iteration_stm -> .while LParen exp RParen stm  | -double-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -sampler2D-, jump_stm -> .-goto- ID  | LBrace, primary_exp -> .ID  | RightShift, jump_stm -> .-return- exp Semicolon  | -fixed2-, selection_stm -> .if LParen exp RParen stm else stm  | -char-, jump_stm -> .-return- exp Semicolon  | -continue-, iteration_stm -> .while LParen exp RParen stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -short-, stm -> .exp_stm  | break, primary_exp -> .ID  | EQ, postfix_exp -> .postfix_exp Dot ID  | RightShift, stm -> .compound_stm  | Number, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, unary_exp -> .unary_op unary_exp  | Minus, unary_exp -> .unary_op unary_exp  | RightShift, compound_stm -> .LBrace RBrace  | -short-, unary_exp -> .Decrement unary_exp  | Percent, stm -> .selection_stm  | break, stm -> .compound_stm  | -do-, primary_exp -> .LParen exp RParen  | LE, compound_stm -> .LBrace block_item_list RBrace  | -struct-, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, stm -> .compound_stm  | -half4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Decrement, stm -> .iteration_stm  | if, compound_stm -> .LBrace block_item_list RBrace  | -float4-, unary_exp -> .unary_op unary_exp  | NEQ, stm -> .selection_stm  | -double-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -double-, unary_exp -> .postfix_exp  | GE, selection_stm -> .if LParen exp RParen stm  | for, selection_stm -> .if LParen exp RParen stm  | ID, jump_stm -> .-goto- ID  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp LParen RParen  | LE, jump_stm -> .-return- exp Semicolon  | -half4-, selection_stm -> .if LParen exp RParen stm  | -half3-, compound_stm -> .LBrace RBrace  | -half4-, binary_exp -> .binary_exp binary_op unary_exp  | Divide, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float2-, stm -> .jump_stm  | RBrace, jump_stm -> .-goto- ID  | -half4-, postfix_exp -> .postfix_exp Decrement  | GE, compound_stm -> .LBrace RBrace  | -goto-, postfix_exp -> .postfix_exp LParen RParen  | Divide, jump_stm -> .-return- exp Semicolon  | Plus, stm -> .jump_stm  | -uniform-, stm -> .exp_stm  | -float3-, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -uniform-, primary_exp -> .ID  | Comma, selection_stm -> .if LParen exp RParen stm else stm  | for, unary_exp -> .Increment unary_exp  | Assign, jump_stm -> .-return- exp Semicolon  | if, postfix_exp -> .postfix_exp Increment  | Assign, jump_stm -> .break  | Tilde, selection_stm -> .if LParen exp RParen stm else stm  | -float3-, jump_stm -> .-goto- ID  | -fixed3-, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | LT, jump_stm -> .-continue-  | -half3-, primary_exp -> .Number  | Minus, stm -> .iteration_stm  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -half4-, stm -> .jump_stm  | LParen, iteration_stm -> .while LParen exp RParen stm  | Decrement, unary_exp -> .Decrement unary_exp  | AND, jump_stm -> .-goto- ID  | for, stm -> .iteration_stm  | Decrement, compound_stm -> .LBrace RBrace  | LParen, exp_stm -> .Semicolon  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, selection_stm -> .if LParen exp RParen stm else stm  | -struct-, stm -> .iteration_stm  | -long-, primary_exp -> .Number  | OR, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | ID, primary_exp -> .String  | LBrack, jump_stm -> .break  | -half4-, postfix_exp -> .primary_exp  | GT, exp_stm -> .Semicolon  | -void-, jump_stm -> .-return- exp Semicolon  | Minus, postfix_exp -> .postfix_exp Decrement  | VerticalBar, selection_stm -> if LParen exp RParen stm else .stm  | LBrace, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, stm -> .selection_stm  | String, postfix_exp -> .postfix_exp LParen RParen  | Caret, primary_exp -> .ID  | AND, postfix_exp -> .postfix_exp LParen RParen  | Dot, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | String, unary_op -> .Plus  | Decrement, exp_stm -> .Semicolon  | NOT, jump_stm -> .-goto- ID  | -sampler2D-, stm -> .jump_stm  | -short-, exp_stm -> .exp Semicolon  | -fixed3-, jump_stm -> .-return- exp Semicolon  | Tilde, binary_exp -> .unary_exp  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -struct-, selection_stm -> .if LParen exp RParen stm else stm  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -char-, primary_exp -> .Number  | Ampersand, selection_stm -> .if LParen exp RParen stm  | -char-, primary_exp -> .ID  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | RightShift, selection_stm -> if LParen exp RParen stm else .stm  | -float-, jump_stm -> .-goto- ID  | break, stm -> .exp_stm  | RBrace, unary_exp -> .Increment unary_exp  | Semicolon, stm -> .exp_stm  | Decrement, stm -> .selection_stm  | -fixed2-, compound_stm -> .LBrace RBrace  | RBrace, primary_exp -> .LParen exp RParen  | Dot, primary_exp -> .Number  | Divide, stm -> .selection_stm  | -long-, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, jump_stm -> .-continue-  | Plus, primary_exp -> .Number  | Semicolon, unary_op -> .Minus  | NOT, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, jump_stm -> .break  | -short-, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -goto-, jump_stm -> .break  | -float3-, exp_stm -> .exp Semicolon  | -fixed4-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | ID, stm -> .jump_stm  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .String  | Times, jump_stm -> .-goto- ID  | -continue-, stm -> .selection_stm  | Semicolon, jump_stm -> .break  | -int-, primary_exp -> .LParen exp RParen  | Divide, stm -> .selection_stm  | RBrace, stm -> .iteration_stm  | RBrace, stm -> .iteration_stm  | -struct-, selection_stm -> if LParen exp RParen stm else .stm  | if, jump_stm -> .break  | Semicolon, conditional_exp -> .binary_exp  | Semicolon, selection_stm -> if LParen exp RParen stm else .stm  | Minus, unary_exp -> .Increment unary_exp  | LeftShift, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Increment, stm -> .compound_stm  | -float-, exp_stm -> .Semicolon  | RBrace, selection_stm -> if LParen exp RParen stm else .stm  | RBrace, selection_stm -> .if LParen exp RParen stm  | -do-, exp_stm -> .Semicolon  | -half3-, unary_exp -> .Decrement unary_exp  | Plus, primary_exp -> .LParen exp RParen  | Plus, jump_stm -> .-continue-  | -half2-, postfix_exp -> .postfix_exp Decrement  | Decrement, selection_stm -> if LParen exp RParen stm else .stm  | -fixed3-, unary_exp -> .Increment unary_exp  | RightShift, jump_stm -> .-return- exp Semicolon  | -float2-, postfix_exp -> .postfix_exp Dot ID  | LParen, compound_stm -> .LBrace RBrace  | -float-, selection_stm -> if LParen exp RParen stm else .stm  | -double-, unary_exp -> .unary_op unary_exp  | LeftShift, selection_stm -> if LParen exp RParen stm else .stm  | -short-, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Decrement  | Question, jump_stm -> .-return- exp Semicolon  | -float3-, postfix_exp -> .postfix_exp LParen RParen  | Question, stm -> .iteration_stm  | -sampler2D-, iteration_stm -> .while LParen exp RParen stm  | -struct-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed2-, postfix_exp -> .postfix_exp Increment  | Dot, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | RBrace, exp_stm -> .Semicolon  | Tilde, jump_stm -> .-goto- ID  | NOT, jump_stm -> .-continue-  | Decrement, stm -> .compound_stm  | break, selection_stm -> .if LParen exp RParen stm else stm  | -half4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, stm -> .jump_stm  | for, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Number, unary_op -> .Plus  | Tilde, compound_stm -> .LBrace RBrace  | Minus, selection_stm -> if LParen exp RParen stm else .stm  | -long-, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, stm -> .selection_stm  | -float2-, stm -> .jump_stm  | -return-, selection_stm -> if LParen exp RParen stm else .stm  | -half4-, iteration_stm -> .while LParen exp RParen stm  | ID, jump_stm -> .-goto- ID  | -fixed2-, unary_exp -> .Increment unary_exp  | LE, unary_exp -> .postfix_exp  | OR, jump_stm -> .-return- exp Semicolon  | -uniform-, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .NOT  | String, jump_stm -> .-goto- ID  | RBrace, selection_stm -> if LParen exp RParen stm else .stm  | LParen, jump_stm -> .-goto- ID  | -char-, exp_stm -> .Semicolon  | Number, stm -> .iteration_stm  | -return-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, unary_op -> .Tilde  | ID, exp_stm -> .exp Semicolon  | Semicolon, exp_stm -> .Semicolon  | break, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .primary_exp  | Divide, primary_exp -> .LParen exp RParen  | Decrement, stm -> .compound_stm  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, jump_stm -> .-return- exp Semicolon  | -sampler2D-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -goto-, postfix_exp -> .postfix_exp Dot ID  | Percent, stm -> .iteration_stm  | NOT, jump_stm -> .break  | -float2-, primary_exp -> .Number  | LParen, exp_stm -> .exp Semicolon  | ID, primary_exp -> .Number  | NEQ, exp_stm -> .Semicolon  | -sampler2D-, compound_stm -> .LBrace RBrace  | for, stm -> .jump_stm  | -continue-, jump_stm -> .break  | -half3-, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, jump_stm -> .-goto- ID  | -half2-, binary_exp -> .unary_exp  | Ampersand, primary_exp -> .String  | Decrement, primary_exp -> .LParen exp RParen  | Minus, compound_stm -> .LBrace block_item_list RBrace  | -do-, jump_stm -> .-return- exp Semicolon  | LBrace, exp_stm -> .Semicolon  | String, postfix_exp -> .postfix_exp Decrement  | OR, jump_stm -> .-return- exp Semicolon  | -return-, primary_exp -> .ID  | LeftShift, stm -> .jump_stm  | -half4-, postfix_exp -> .postfix_exp Increment  | EQ, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Times, exp_stm -> .exp Semicolon  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, selection_stm -> .if LParen exp RParen stm else stm  | Number, jump_stm -> .-continue-  | -float3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -void-, stm -> .jump_stm  | -int-, compound_stm -> .LBrace RBrace  | -fixed3-, postfix_exp -> .postfix_exp Decrement  | Dot, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .postfix_exp  | LeftShift, )
522 <- (448, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp Dot ID  | NEQ, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, iteration_stm -> while LParen .exp RParen stm  | -do-, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, iteration_stm -> while LParen .exp RParen stm  | -char-, unary_exp -> .Increment unary_exp  | Ampersand, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, conditional_exp -> .binary_exp  | Comma, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, iteration_stm -> while LParen .exp RParen stm  | Decrement, postfix_exp -> .postfix_exp Dot ID  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | RParen, iteration_stm -> while LParen .exp RParen stm  | Number, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, iteration_stm -> while LParen .exp RParen stm  | NOT, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, iteration_stm -> while LParen .exp RParen stm  | while, primary_exp -> .Number  | Percent, iteration_stm -> while LParen .exp RParen stm  | -fixed3-, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, iteration_stm -> while LParen .exp RParen stm  | -float3-, postfix_exp -> .primary_exp  | RightShift, iteration_stm -> while LParen .exp RParen stm  | Increment, postfix_exp -> .postfix_exp Increment  | LeftShift, assignment_exp -> .conditional_exp  | RParen, primary_exp -> .String  | Question, iteration_stm -> while LParen .exp RParen stm  | if, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, iteration_stm -> while LParen .exp RParen stm  | LBrace, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, iteration_stm -> while LParen .exp RParen stm  | -struct-, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, exp -> .assignment_exp  | RParen, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, iteration_stm -> while LParen .exp RParen stm  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, unary_exp -> .Decrement unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, binary_exp -> .unary_exp  | RightShift, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, iteration_stm -> while LParen .exp RParen stm  | -continue-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, iteration_stm -> while LParen .exp RParen stm  | -short-, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, iteration_stm -> while LParen .exp RParen stm  | -float-, iteration_stm -> while LParen .exp RParen stm  | for, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, postfix_exp -> .primary_exp  | Minus, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, iteration_stm -> while LParen .exp RParen stm  | LParen, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .Number  | RParen, primary_exp -> .LParen exp RParen  | LE, primary_exp -> .LParen exp RParen  | Caret, iteration_stm -> while LParen .exp RParen stm  | -fixed4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, binary_exp -> .binary_exp binary_op unary_exp  | RParen, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_op -> .Minus  | ID, unary_op -> .Minus  | Decrement, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, iteration_stm -> while LParen .exp RParen stm  | RBrace, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | RParen, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, iteration_stm -> while LParen .exp RParen stm  | -float2-, unary_op -> .Tilde  | Number, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Increment, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .unary_op unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, iteration_stm -> while LParen .exp RParen stm  | -float4-, primary_exp -> .ID  | LE, primary_exp -> .LParen exp RParen  | GE, iteration_stm -> while LParen .exp RParen stm  | Tilde, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, binary_exp -> .unary_exp  | AND, primary_exp -> .String  | Decrement, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, exp -> .exp Comma assignment_exp  | RParen, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_op -> .NOT  | Number, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, iteration_stm -> while LParen .exp RParen stm  | -uniform-, primary_exp -> .ID  | RightShift, iteration_stm -> while LParen .exp RParen stm  | -sampler2D-, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .Number  | GE, iteration_stm -> while LParen .exp RParen stm  | Semicolon, iteration_stm -> while LParen .exp RParen stm  | else, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Minus, iteration_stm -> while LParen .exp RParen stm  | -int-, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, postfix_exp -> .postfix_exp Increment  | Percent, iteration_stm -> while LParen .exp RParen stm  | -half3-, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, unary_op -> .Minus  | Tilde, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, iteration_stm -> while LParen .exp RParen stm  | -half2-, iteration_stm -> while LParen .exp RParen stm  | ID, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .postfix_exp  | RParen, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, iteration_stm -> while LParen .exp RParen stm  | -fixed2-, primary_exp -> .ID  | VerticalBar, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, iteration_stm -> while LParen .exp RParen stm  | break, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, iteration_stm -> while LParen .exp RParen stm  | -double-, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, unary_op -> .Minus  | NOT, iteration_stm -> while LParen .exp RParen stm  | -goto-, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, unary_op -> .Plus  | Plus, iteration_stm -> while LParen .exp RParen stm  | -return-, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, iteration_stm -> while LParen .exp RParen stm  | -void-, primary_exp -> .Number  | Increment, postfix_exp -> .postfix_exp Dot ID  | GT, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .primary_exp  | Ampersand, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Question, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, iteration_stm -> while LParen .exp RParen stm  | String, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, iteration_stm -> while LParen .exp RParen stm  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, iteration_stm -> while LParen .exp RParen stm  | -long-, primary_exp -> .Number  | Caret, primary_exp -> .ID  | LeftShift, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, iteration_stm -> while LParen .exp RParen stm  | -half4-, unary_exp -> .postfix_exp  | LeftShift, )
523 <- (450, 'Colon') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RBrack, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RBrack, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, conditional_exp -> .binary_exp  | Comma, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, primary_exp -> .ID  | RBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, unary_exp -> .Increment unary_exp  | RBrack, binary_exp -> .unary_exp  | LE, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .ID  | VerticalBar, primary_exp -> .Number  | RBrack, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, unary_exp -> .postfix_exp  | RBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | Question, binary_exp -> .unary_exp  | NEQ, binary_exp -> .unary_exp  | LT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | RBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | RBrack, primary_exp -> .LParen exp RParen  | GE, unary_exp -> .Decrement unary_exp  | OR, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, primary_exp -> .Number  | Plus, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_op -> .Plus  | Minus, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> .Decrement unary_exp  | RBrack, unary_op -> .Tilde  | Number, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .postfix_exp LParen RParen  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | RBrack, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | LT, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, conditional_exp -> binary_exp Question exp Colon .conditional_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, unary_exp -> .unary_op unary_exp  | GE, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, binary_exp -> .unary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | RBrack, primary_exp -> .LParen exp RParen  | Minus, postfix_exp -> .primary_exp  | GT, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, binary_exp -> .binary_exp binary_op unary_exp  | RBrack, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .ID  | Comma, primary_exp -> .ID  | LBrack, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Times, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, primary_exp -> .String  | RBrack, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, conditional_exp -> binary_exp Question exp Colon .conditional_exp  | RBrack, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, postfix_exp -> .postfix_exp Decrement  | RBrack, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, unary_op -> .NOT  | Plus, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, binary_exp -> .unary_exp  | RBrack, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | RBrack, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Increment  | RBrack, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .primary_exp  | RBrack, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, conditional_exp -> .binary_exp  | RBrack, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Increment  | LBrack, primary_exp -> .ID  | Dot, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
524 <- (451, 'unary_exp') (unary_exp -> Decrement unary_exp.  | RightShift, unary_exp -> Decrement unary_exp.  | Caret, unary_exp -> Decrement unary_exp.  | OR, unary_exp -> Decrement unary_exp.  | Question, unary_exp -> Decrement unary_exp.  | Minus, unary_exp -> Decrement unary_exp.  | Plus, unary_exp -> Decrement unary_exp.  | LE, unary_exp -> Decrement unary_exp.  | Times, unary_exp -> Decrement unary_exp.  | Divide, unary_exp -> Decrement unary_exp.  | RBrack, unary_exp -> Decrement unary_exp.  | VerticalBar, unary_exp -> Decrement unary_exp.  | AND, unary_exp -> Decrement unary_exp.  | Percent, unary_exp -> Decrement unary_exp.  | EQ, unary_exp -> Decrement unary_exp.  | LeftShift, unary_exp -> Decrement unary_exp.  | LT, unary_exp -> Decrement unary_exp.  | GE, unary_exp -> Decrement unary_exp.  | Comma, unary_exp -> Decrement unary_exp.  | GT, unary_exp -> Decrement unary_exp.  | Ampersand, unary_exp -> Decrement unary_exp.  | NEQ, )
525 <- (453, 'unary_exp') (unary_exp -> Increment unary_exp.  | LeftShift, unary_exp -> Increment unary_exp.  | AND, unary_exp -> Increment unary_exp.  | Question, unary_exp -> Increment unary_exp.  | LT, unary_exp -> Increment unary_exp.  | Caret, unary_exp -> Increment unary_exp.  | NEQ, unary_exp -> Increment unary_exp.  | LE, unary_exp -> Increment unary_exp.  | Comma, unary_exp -> Increment unary_exp.  | EQ, unary_exp -> Increment unary_exp.  | Divide, unary_exp -> Increment unary_exp.  | GT, unary_exp -> Increment unary_exp.  | Plus, unary_exp -> Increment unary_exp.  | OR, unary_exp -> Increment unary_exp.  | VerticalBar, unary_exp -> Increment unary_exp.  | GE, unary_exp -> Increment unary_exp.  | Times, unary_exp -> Increment unary_exp.  | RBrack, unary_exp -> Increment unary_exp.  | Minus, unary_exp -> Increment unary_exp.  | RightShift, unary_exp -> Increment unary_exp.  | Percent, unary_exp -> Increment unary_exp.  | Ampersand, )
526 <- (454, 'exp') (primary_exp -> LParen exp .RParen  | LeftShift, primary_exp -> LParen exp .RParen  | RightShift, primary_exp -> LParen exp .RParen  | NEQ, primary_exp -> LParen exp .RParen  | Ampersand, primary_exp -> LParen exp .RParen  | AND, primary_exp -> LParen exp .RParen  | LBrack, primary_exp -> LParen exp .RParen  | LParen, primary_exp -> LParen exp .RParen  | EQ, primary_exp -> LParen exp .RParen  | LE, exp -> exp .Comma assignment_exp  | Comma, primary_exp -> LParen exp .RParen  | Minus, primary_exp -> LParen exp .RParen  | VerticalBar, primary_exp -> LParen exp .RParen  | Percent, primary_exp -> LParen exp .RParen  | Divide, primary_exp -> LParen exp .RParen  | Dot, primary_exp -> LParen exp .RParen  | GT, primary_exp -> LParen exp .RParen  | LT, primary_exp -> LParen exp .RParen  | Comma, primary_exp -> LParen exp .RParen  | Increment, primary_exp -> LParen exp .RParen  | Plus, primary_exp -> LParen exp .RParen  | Times, primary_exp -> LParen exp .RParen  | Decrement, primary_exp -> LParen exp .RParen  | OR, primary_exp -> LParen exp .RParen  | RBrack, exp -> exp .Comma assignment_exp  | RParen, primary_exp -> LParen exp .RParen  | Question, primary_exp -> LParen exp .RParen  | GE, primary_exp -> LParen exp .RParen  | Caret, )
527 <- (457, 'Decrement') (postfix_exp -> postfix_exp Decrement.  | OR, postfix_exp -> postfix_exp Decrement.  | RightShift, postfix_exp -> postfix_exp Decrement.  | Caret, postfix_exp -> postfix_exp Decrement.  | LParen, postfix_exp -> postfix_exp Decrement.  | Dot, postfix_exp -> postfix_exp Decrement.  | EQ, postfix_exp -> postfix_exp Decrement.  | GT, postfix_exp -> postfix_exp Decrement.  | LT, postfix_exp -> postfix_exp Decrement.  | Question, postfix_exp -> postfix_exp Decrement.  | Plus, postfix_exp -> postfix_exp Decrement.  | Comma, postfix_exp -> postfix_exp Decrement.  | Percent, postfix_exp -> postfix_exp Decrement.  | GE, postfix_exp -> postfix_exp Decrement.  | Divide, postfix_exp -> postfix_exp Decrement.  | Times, postfix_exp -> postfix_exp Decrement.  | Decrement, postfix_exp -> postfix_exp Decrement.  | Increment, postfix_exp -> postfix_exp Decrement.  | NEQ, postfix_exp -> postfix_exp Decrement.  | Minus, postfix_exp -> postfix_exp Decrement.  | LBrack, postfix_exp -> postfix_exp Decrement.  | Ampersand, postfix_exp -> postfix_exp Decrement.  | AND, postfix_exp -> postfix_exp Decrement.  | LE, postfix_exp -> postfix_exp Decrement.  | VerticalBar, postfix_exp -> postfix_exp Decrement.  | LeftShift, postfix_exp -> postfix_exp Decrement.  | RBrack, )
528 <- (457, 'Dot') (postfix_exp -> postfix_exp Dot .ID  | Percent, postfix_exp -> postfix_exp Dot .ID  | LBrack, postfix_exp -> postfix_exp Dot .ID  | Question, postfix_exp -> postfix_exp Dot .ID  | Divide, postfix_exp -> postfix_exp Dot .ID  | Plus, postfix_exp -> postfix_exp Dot .ID  | AND, postfix_exp -> postfix_exp Dot .ID  | Ampersand, postfix_exp -> postfix_exp Dot .ID  | NEQ, postfix_exp -> postfix_exp Dot .ID  | VerticalBar, postfix_exp -> postfix_exp Dot .ID  | Dot, postfix_exp -> postfix_exp Dot .ID  | Decrement, postfix_exp -> postfix_exp Dot .ID  | LE, postfix_exp -> postfix_exp Dot .ID  | Increment, postfix_exp -> postfix_exp Dot .ID  | LT, postfix_exp -> postfix_exp Dot .ID  | RBrack, postfix_exp -> postfix_exp Dot .ID  | Times, postfix_exp -> postfix_exp Dot .ID  | Minus, postfix_exp -> postfix_exp Dot .ID  | OR, postfix_exp -> postfix_exp Dot .ID  | LeftShift, postfix_exp -> postfix_exp Dot .ID  | EQ, postfix_exp -> postfix_exp Dot .ID  | Caret, postfix_exp -> postfix_exp Dot .ID  | GT, postfix_exp -> postfix_exp Dot .ID  | GE, postfix_exp -> postfix_exp Dot .ID  | LParen, postfix_exp -> postfix_exp Dot .ID  | RightShift, postfix_exp -> postfix_exp Dot .ID  | Comma, )
529 <- (457, 'Increment') (postfix_exp -> postfix_exp Increment.  | VerticalBar, postfix_exp -> postfix_exp Increment.  | Dot, postfix_exp -> postfix_exp Increment.  | Percent, postfix_exp -> postfix_exp Increment.  | GE, postfix_exp -> postfix_exp Increment.  | Comma, postfix_exp -> postfix_exp Increment.  | OR, postfix_exp -> postfix_exp Increment.  | LT, postfix_exp -> postfix_exp Increment.  | LE, postfix_exp -> postfix_exp Increment.  | AND, postfix_exp -> postfix_exp Increment.  | GT, postfix_exp -> postfix_exp Increment.  | RightShift, postfix_exp -> postfix_exp Increment.  | Caret, postfix_exp -> postfix_exp Increment.  | LeftShift, postfix_exp -> postfix_exp Increment.  | LBrack, postfix_exp -> postfix_exp Increment.  | Increment, postfix_exp -> postfix_exp Increment.  | Question, postfix_exp -> postfix_exp Increment.  | Ampersand, postfix_exp -> postfix_exp Increment.  | NEQ, postfix_exp -> postfix_exp Increment.  | Minus, postfix_exp -> postfix_exp Increment.  | Decrement, postfix_exp -> postfix_exp Increment.  | LParen, postfix_exp -> postfix_exp Increment.  | RBrack, postfix_exp -> postfix_exp Increment.  | Divide, postfix_exp -> postfix_exp Increment.  | Plus, postfix_exp -> postfix_exp Increment.  | EQ, postfix_exp -> postfix_exp Increment.  | Times, )
530 <- (457, 'LBrack') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, postfix_exp -> postfix_exp LBrack .exp RBrack  | RightShift, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, primary_exp -> .ID  | EQ, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | LBrack, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .primary_exp  | OR, postfix_exp -> postfix_exp LBrack .exp RBrack  | Question, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_exp -> .Increment unary_exp  | Divide, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> postfix_exp LBrack .exp RBrack  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RBrack, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | Number, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RBrack, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, postfix_exp -> postfix_exp LBrack .exp RBrack  | OR, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, postfix_exp -> postfix_exp LBrack .exp RBrack  | NEQ, postfix_exp -> .postfix_exp Dot ID  | Ampersand, primary_exp -> .ID  | RBrack, postfix_exp -> .postfix_exp Increment  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | LParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> postfix_exp LBrack .exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, postfix_exp -> postfix_exp LBrack .exp RBrack  | EQ, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | Decrement, postfix_exp -> .postfix_exp Increment  | LeftShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | LT, unary_exp -> .unary_op unary_exp  | Assign, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Question, primary_exp -> .Number  | RBrack, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> postfix_exp LBrack .exp RBrack  | RBrack, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Question, primary_exp -> .Number  | NEQ, unary_exp -> .postfix_exp  | RBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> postfix_exp LBrack .exp RBrack  | VerticalBar, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> postfix_exp LBrack .exp RBrack  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | Question, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | RBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, binary_exp -> .unary_exp  | LT, exp -> .exp Comma assignment_exp  | RBrack, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, unary_exp -> .Decrement unary_exp  | RBrack, unary_exp -> .unary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | RBrack, primary_exp -> .LParen exp RParen  | GE, unary_exp -> .Decrement unary_exp  | OR, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | LeftShift, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .primary_exp  | Decrement, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .primary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> postfix_exp LBrack .exp RBrack  | Increment, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, postfix_exp -> .postfix_exp LParen RParen  | LT, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | RBrack, unary_op -> .Minus  | Number, primary_exp -> .Number  | Percent, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, primary_exp -> .ID  | GE, postfix_exp -> .postfix_exp Decrement  | LE, postfix_exp -> postfix_exp LBrack .exp RBrack  | Minus, unary_exp -> .Increment unary_exp  | Caret, conditional_exp -> .binary_exp  | RBrack, primary_exp -> .ID  | LE, exp -> .assignment_exp  | RBrack, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> postfix_exp LBrack .exp RBrack  | GT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> postfix_exp LBrack .exp RBrack  | Ampersand, binary_exp -> .unary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | RBrack, primary_exp -> .LParen exp RParen  | Minus, postfix_exp -> .primary_exp  | VerticalBar, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> postfix_exp LBrack .exp RBrack  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | RBrack, postfix_exp -> postfix_exp LBrack .exp RBrack  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, primary_exp -> .String  | Assign, postfix_exp -> postfix_exp LBrack .exp RBrack  | Dot, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, assignment_exp -> .conditional_exp  | RBrack, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, primary_exp -> .String  | RBrack, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .primary_exp  | GT, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Caret, unary_exp -> .postfix_exp  | NEQ, primary_exp -> .ID  | AND, postfix_exp -> postfix_exp LBrack .exp RBrack  | Caret, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | RBrack, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, postfix_exp -> postfix_exp LBrack .exp RBrack  | Plus, primary_exp -> .Number  | Plus, unary_op -> .NOT  | Plus, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Divide, primary_exp -> .String  | Caret, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .ID  | NEQ, binary_exp -> .unary_exp  | RBrack, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | RBrack, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, postfix_exp -> .postfix_exp Increment  | RBrack, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> postfix_exp LBrack .exp RBrack  | Comma, postfix_exp -> .postfix_exp Increment  | Divide, postfix_exp -> .primary_exp  | RBrack, primary_exp -> .ID  | Increment, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .primary_exp  | LE, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> postfix_exp LBrack .exp RBrack  | LParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, postfix_exp -> .postfix_exp Decrement  | LT, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, unary_exp -> .Increment unary_exp  | RBrack, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .Increment unary_exp  | Question, postfix_exp -> .postfix_exp Increment  | LBrack, primary_exp -> .ID  | Dot, assignment_exp -> .unary_exp assignment_op assignment_exp  | RBrack, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, postfix_exp -> postfix_exp LBrack .exp RBrack  | GE, )
531 <- (457, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, postfix_exp -> postfix_exp LParen .RParen  | LParen, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Question, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, unary_exp -> .postfix_exp  | Assign, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, unary_exp -> .postfix_exp  | LE, postfix_exp -> .postfix_exp Dot ID  | Decrement, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Ampersand, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, unary_exp -> .postfix_exp  | RParen, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, postfix_exp -> postfix_exp LParen .RParen  | GT, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Plus, primary_exp -> .Number  | Times, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, postfix_exp -> postfix_exp LParen .RParen  | LBrack, unary_exp -> .Increment unary_exp  | Ampersand, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | RightShift, unary_op -> .Tilde  | LParen, postfix_exp -> postfix_exp LParen .RParen  | EQ, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, postfix_exp -> .primary_exp  | LT, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, postfix_exp -> postfix_exp LParen .RParen  | RightShift, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, primary_exp -> .String  | EQ, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .unary_exp  | Plus, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, postfix_exp -> postfix_exp LParen .RParen  | LT, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | RParen, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> postfix_exp LParen .RParen  | LE, primary_exp -> .String  | LE, postfix_exp -> .primary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .NOT  | ID, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Increment, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LE, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, postfix_exp -> .postfix_exp Increment  | LeftShift, postfix_exp -> postfix_exp LParen .RParen  | AND, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, postfix_exp -> postfix_exp LParen .RParen  | LeftShift, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> postfix_exp LParen .RParen  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, primary_exp -> .ID  | GT, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, postfix_exp -> postfix_exp LParen .RParen  | VerticalBar, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, argument_exp_list -> .argument_exp_list Comma assignment_exp  | RParen, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Plus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | GT, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, postfix_exp -> postfix_exp LParen .RParen  | Divide, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, primary_exp -> .ID  | Divide, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Divide, postfix_exp -> postfix_exp LParen .RParen  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, unary_op -> .Tilde  | Minus, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | RBrack, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Comma, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | AND, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | RParen, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, unary_exp -> .Decrement unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Minus  | Number, primary_exp -> .Number  | Percent, primary_exp -> .LParen exp RParen  | Question, postfix_exp -> postfix_exp LParen .RParen  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, unary_op -> .Tilde  | NOT, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, primary_exp -> .Number  | RParen, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Percent, unary_exp -> .unary_op unary_exp  | Divide, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | RightShift, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | GE, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Dot, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, postfix_exp -> postfix_exp LParen .RParen  | Caret, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, postfix_exp -> postfix_exp LParen .RParen  | RBrack, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, binary_exp -> .unary_exp  | VerticalBar, postfix_exp -> postfix_exp LParen .RParen  | GE, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, primary_exp -> .Number  | Dot, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, argument_exp_list -> .argument_exp_list Comma assignment_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Decrement  | RParen, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | RParen, primary_exp -> .String  | Assign, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | OR, unary_exp -> .unary_op unary_exp  | EQ, postfix_exp -> postfix_exp LParen .RParen  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, primary_exp -> .ID  | LeftShift, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Caret, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LParen, primary_exp -> .Number  | Plus, unary_op -> .NOT  | Plus, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, assignment_exp -> .conditional_exp  | RParen, postfix_exp -> .primary_exp  | GE, postfix_exp -> .postfix_exp Decrement  | Percent, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, postfix_exp -> postfix_exp LParen .RParen  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, postfix_exp -> postfix_exp LParen .RParen  | Percent, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, argument_exp_list -> .assignment_exp  | RParen, primary_exp -> .Number  | Increment, postfix_exp -> postfix_exp LParen .RParen  | Increment, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | LT, unary_exp -> .Increment unary_exp  | LeftShift, unary_op -> .NOT  | NOT, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, binary_exp -> .unary_exp  | LT, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Times, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | VerticalBar, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> postfix_exp LParen .RParen  | Question, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | EQ, postfix_exp -> postfix_exp LParen .RParen  | Decrement, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .unary_op unary_exp  | Assign, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .postfix_exp  | Comma, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> postfix_exp LParen .RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> postfix_exp LParen .argument_exp_list RParen  | Decrement, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, primary_exp -> .Number  | NEQ, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, primary_exp -> .ID  | VerticalBar, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> postfix_exp LParen .RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, argument_exp_list -> .assignment_exp  | Comma, unary_exp -> .Increment unary_exp  | Question, postfix_exp -> postfix_exp LParen .RParen  | Plus, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
532 <- (460, 'unary_exp') (unary_exp -> unary_op unary_exp.  | RBrack, unary_exp -> unary_op unary_exp.  | NEQ, unary_exp -> unary_op unary_exp.  | GE, unary_exp -> unary_op unary_exp.  | RightShift, unary_exp -> unary_op unary_exp.  | Question, unary_exp -> unary_op unary_exp.  | LeftShift, unary_exp -> unary_op unary_exp.  | Plus, unary_exp -> unary_op unary_exp.  | Ampersand, unary_exp -> unary_op unary_exp.  | Divide, unary_exp -> unary_op unary_exp.  | Comma, unary_exp -> unary_op unary_exp.  | EQ, unary_exp -> unary_op unary_exp.  | LE, unary_exp -> unary_op unary_exp.  | OR, unary_exp -> unary_op unary_exp.  | GT, unary_exp -> unary_op unary_exp.  | Percent, unary_exp -> unary_op unary_exp.  | LT, unary_exp -> unary_op unary_exp.  | AND, unary_exp -> unary_op unary_exp.  | Caret, unary_exp -> unary_op unary_exp.  | Times, unary_exp -> unary_op unary_exp.  | VerticalBar, unary_exp -> unary_op unary_exp.  | Minus, )
533 <- (463, 'RBrack') (postfix_exp -> postfix_exp LBrack exp RBrack.  | NEQ, postfix_exp -> postfix_exp LBrack exp RBrack.  | Plus, postfix_exp -> postfix_exp LBrack exp RBrack.  | Question, postfix_exp -> postfix_exp LBrack exp RBrack.  | LT, postfix_exp -> postfix_exp LBrack exp RBrack.  | Assign, postfix_exp -> postfix_exp LBrack exp RBrack.  | LParen, postfix_exp -> postfix_exp LBrack exp RBrack.  | VerticalBar, postfix_exp -> postfix_exp LBrack exp RBrack.  | AND, postfix_exp -> postfix_exp LBrack exp RBrack.  | EQ, postfix_exp -> postfix_exp LBrack exp RBrack.  | Times, postfix_exp -> postfix_exp LBrack exp RBrack.  | LBrack, postfix_exp -> postfix_exp LBrack exp RBrack.  | Increment, postfix_exp -> postfix_exp LBrack exp RBrack.  | OR, postfix_exp -> postfix_exp LBrack exp RBrack.  | Caret, postfix_exp -> postfix_exp LBrack exp RBrack.  | Dot, postfix_exp -> postfix_exp LBrack exp RBrack.  | RBrack, postfix_exp -> postfix_exp LBrack exp RBrack.  | RightShift, postfix_exp -> postfix_exp LBrack exp RBrack.  | Percent, postfix_exp -> postfix_exp LBrack exp RBrack.  | Ampersand, postfix_exp -> postfix_exp LBrack exp RBrack.  | GT, postfix_exp -> postfix_exp LBrack exp RBrack.  | GE, postfix_exp -> postfix_exp LBrack exp RBrack.  | Minus, postfix_exp -> postfix_exp LBrack exp RBrack.  | Comma, postfix_exp -> postfix_exp LBrack exp RBrack.  | LeftShift, postfix_exp -> postfix_exp LBrack exp RBrack.  | Divide, postfix_exp -> postfix_exp LBrack exp RBrack.  | LE, postfix_exp -> postfix_exp LBrack exp RBrack.  | Decrement, )
534 <- (465, 'RParen') (postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Comma, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Increment, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LeftShift, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | OR, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LParen, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | RBrack, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | VerticalBar, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | RightShift, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Minus, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Caret, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | EQ, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Decrement, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Plus, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | GT, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Ampersand, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Dot, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Question, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LT, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Percent, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Times, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | NEQ, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Assign, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LBrack, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | AND, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Divide, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | GE, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LE, )
535 <- (470, 'RParen') (iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | while, )
536 <- (471, 'Semicolon') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, postfix_exp -> .postfix_exp LParen RParen  | RParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .Increment unary_exp  | Ampersand, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, binary_exp -> .binary_exp binary_op unary_exp  | Comma, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, conditional_exp -> .binary_exp  | Comma, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .primary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, binary_exp -> .unary_exp  | LE, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, exp -> .assignment_exp  | RParen, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | while, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, postfix_exp -> .primary_exp  | Minus, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | RParen, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .primary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | LParen, primary_exp -> .ID  | EQ, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, assignment_exp -> .conditional_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, primary_exp -> .Number  | RParen, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, unary_exp -> .Increment unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | Decrement, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, exp -> .exp Comma assignment_exp  | RParen, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_op -> .NOT  | Number, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | RParen, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_op -> .Plus  | String, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .postfix_exp  | RParen, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp LParen RParen  | Caret, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .Number  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, binary_exp -> .unary_exp  | LT, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
537 <- (473, 'stm') (iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | else, iteration_stm -> -do- stm .while LParen exp RParen Semicolon  | while, )
538 <- (474, 'ID') (jump_stm -> -goto- ID.  | while, jump_stm -> -goto- ID.  | else, )
539 <- (475, 'exp') (jump_stm -> -return- exp .Semicolon  | else, exp -> exp .Comma assignment_exp  | Comma, exp -> exp .Comma assignment_exp  | Semicolon, jump_stm -> -return- exp .Semicolon  | while, )
540 <- (476, 'RBrace') (compound_stm -> LBrace RBrace.  | while, compound_stm -> LBrace RBrace.  | else, )
541 <- (476, 'block_item_list') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, iteration_stm -> .while LParen exp RParen stm  | -fixed3-, block_item_list -> block_item_list .block_item  | -void-, exp_stm -> .exp Semicolon  | LParen, stm -> .iteration_stm  | String, dec -> .dec_specifier init_dec_list Semicolon  | -struct-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -char-, jump_stm -> .break  | -continue-, exp_stm -> .exp Semicolon  | -float4-, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, stm -> .iteration_stm  | Number, unary_exp -> .postfix_exp  | Ampersand, block_item -> .stm  | -return-, compound_stm -> .LBrace RBrace  | -do-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float3-, unary_op -> .Minus  | Minus, stm -> .compound_stm  | if, exp_stm -> .Semicolon  | -struct-, unary_exp -> .postfix_exp  | Assign, postfix_exp -> .postfix_exp LParen RParen  | RightShift, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -long-, compound_stm -> LBrace block_item_list .RBrace  | while, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, jump_stm -> .-goto- ID  | LParen, postfix_exp -> .postfix_exp Increment  | GT, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, unary_exp -> .postfix_exp  | GT, compound_stm -> .LBrace RBrace  | ID, jump_stm -> .-goto- ID  | -float4-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | for, selection_stm -> .if LParen exp RParen stm else stm  | while, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -struct-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LParen, compound_stm -> .LBrace block_item_list RBrace  | Number, postfix_exp -> .postfix_exp Increment  | OR, exp_stm -> .Semicolon  | -long-, iteration_stm -> .while LParen exp RParen stm  | -fixed4-, block_item -> .dec  | while, unary_op -> .NOT  | Tilde, dec -> .struct_specifier Semicolon  | for, binary_exp -> .unary_exp  | Divide, dec -> .struct_specifier Semicolon  | -continue-, unary_op -> .Tilde  | LParen, selection_stm -> .if LParen exp RParen stm else stm  | -int-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | break, compound_stm -> .LBrace block_item_list RBrace  | Tilde, dec -> .dec_specifier init_dec_list Semicolon  | -fixed3-, compound_stm -> .LBrace RBrace  | -float2-, exp_stm -> .exp Semicolon  | -do-, unary_op -> .Plus  | ID, selection_stm -> .if LParen exp RParen stm else stm  | RBrace, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Dot ID  | Divide, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, jump_stm -> .-continue-  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | LBrace, postfix_exp -> .primary_exp  | Semicolon, jump_stm -> .-continue-  | -fixed4-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, exp_stm -> .Semicolon  | while, dec -> .struct_specifier Semicolon  | -double-, stm -> .jump_stm  | -struct-, selection_stm -> .if LParen exp RParen stm  | -float-, jump_stm -> .-return- exp Semicolon  | while, type_qualifier -> .-uniform-  | -short-, block_item_list -> block_item_list .block_item  | -uniform-, iteration_stm -> .while LParen exp RParen stm  | -sampler2D-, exp_stm -> .exp Semicolon  | -float3-, block_item -> .stm  | NOT, primary_exp -> .String  | Semicolon, block_item -> .stm  | -sampler2D-, stm -> .jump_stm  | -long-, jump_stm -> .-continue-  | ID, jump_stm -> .-return- exp Semicolon  | -struct-, dec -> .struct_specifier Semicolon  | -float2-, unary_op -> .Plus  | Minus, stm -> .iteration_stm  | -float4-, dec -> .dec_specifier init_dec_list Semicolon  | -int-, unary_exp -> .postfix_exp  | Times, compound_stm -> .LBrace RBrace  | -fixed3-, primary_exp -> .Number  | AND, block_item_list -> block_item_list .block_item  | Semicolon, dec -> .struct_specifier Semicolon  | String, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed4-, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | if, jump_stm -> .-continue-  | -int-, type_specifier -> .-half4-  | ID, dec -> .dec_specifier init_dec_list Semicolon  | -short-, postfix_exp -> .postfix_exp LParen RParen  | Percent, selection_stm -> .if LParen exp RParen stm  | -int-, exp_stm -> .exp Semicolon  | -struct-, block_item -> .dec  | -float2-, selection_stm -> .if LParen exp RParen stm  | String, type_qualifier -> .-uniform-  | -long-, compound_stm -> .LBrace block_item_list RBrace  | -continue-, type_specifier -> .-float2-  | ID, stm -> .jump_stm  | String, dec -> .struct_specifier Semicolon  | Number, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_exp -> .Increment unary_exp  | Plus, exp_stm -> .Semicolon  | if, selection_stm -> .if LParen exp RParen stm else stm  | -do-, stm -> .iteration_stm  | -void-, postfix_exp -> .primary_exp  | LE, compound_stm -> .LBrace block_item_list RBrace  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -float-, block_item -> .dec  | -uniform-, stm -> .jump_stm  | -half4-, jump_stm -> .-return- exp Semicolon  | -do-, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, dec -> .struct_specifier Semicolon  | -float-, stm -> .compound_stm  | NOT, compound_stm -> .LBrace RBrace  | for, postfix_exp -> .postfix_exp Dot ID  | AND, stm -> .jump_stm  | Decrement, primary_exp -> .String  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, stm -> .selection_stm  | -continue-, iteration_stm -> .while LParen exp RParen stm  | Tilde, exp -> .exp Comma assignment_exp  | Semicolon, jump_stm -> .-goto- ID  | -int-, exp_stm -> .Semicolon  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | -uniform-, type_specifier -> .-float-  | ID, block_item -> .stm  | for, selection_stm -> .if LParen exp RParen stm  | -float4-, type_specifier -> .-fixed3-  | ID, jump_stm -> .-return- exp Semicolon  | -return-, iteration_stm -> .while LParen exp RParen stm  | Minus, block_item -> .dec  | for, postfix_exp -> .postfix_exp LParen RParen  | LBrack, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | -return-, jump_stm -> .break  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | -half2-, stm -> .iteration_stm  | LBrace, selection_stm -> .if LParen exp RParen stm else stm  | Number, primary_exp -> .LParen exp RParen  | LE, primary_exp -> .LParen exp RParen  | Caret, compound_stm -> .LBrace block_item_list RBrace  | -float4-, block_item -> .stm  | Semicolon, binary_exp -> .unary_exp  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float-, unary_exp -> .Decrement unary_exp  | GT, selection_stm -> .if LParen exp RParen stm else stm  | -float3-, jump_stm -> .-return- exp Semicolon  | NOT, postfix_exp -> .postfix_exp Increment  | Times, selection_stm -> .if LParen exp RParen stm else stm  | Decrement, stm -> .selection_stm  | -fixed3-, stm -> .compound_stm  | -double-, iteration_stm -> .while LParen exp RParen stm  | -half2-, unary_exp -> .Increment unary_exp  | OR, exp_stm -> .Semicolon  | -continue-, selection_stm -> .if LParen exp RParen stm  | Minus, jump_stm -> .-continue-  | while, selection_stm -> .if LParen exp RParen stm else stm  | Tilde, primary_exp -> .ID  | Decrement, stm -> .selection_stm  | Number, dec_specifier -> .type_specifier  | ID, unary_op -> .Minus  | ID, compound_stm -> LBrace block_item_list .RBrace  | else, stm -> .exp_stm  | String, dec -> .struct_specifier Semicolon  | -long-, compound_stm -> .LBrace RBrace  | while, jump_stm -> .-continue-  | -float-, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | EQ, stm -> .exp_stm  | -double-, stm -> .selection_stm  | Minus, exp_stm -> .exp Semicolon  | -half3-, postfix_exp -> .postfix_exp Decrement  | Semicolon, unary_op -> .Tilde  | Number, exp_stm -> .exp Semicolon  | -goto-, stm -> .jump_stm  | while, binary_exp -> .unary_exp  | Plus, stm -> .exp_stm  | -float4-, unary_exp -> .unary_op unary_exp  | Ampersand, compound_stm -> .LBrace block_item_list RBrace  | if, postfix_exp -> .postfix_exp Dot ID  | LT, jump_stm -> .-continue-  | for, unary_exp -> .unary_op unary_exp  | Assign, jump_stm -> .-return- exp Semicolon  | -half2-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, stm -> .iteration_stm  | -continue-, selection_stm -> .if LParen exp RParen stm else stm  | -float-, block_item -> .stm  | -float2-, dec -> .struct_specifier Semicolon  | -fixed2-, compound_stm -> .LBrace block_item_list RBrace  | String, block_item -> .dec  | Semicolon, unary_op -> .NOT  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | String, primary_exp -> .Number  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float4-, jump_stm -> .break  | -uniform-, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, dec -> .struct_specifier Semicolon  | NOT, dec -> .struct_specifier Semicolon  | Plus, dec -> .struct_specifier Semicolon  | -half3-, dec -> .struct_specifier Semicolon  | -half4-, jump_stm -> .-return- exp Semicolon  | -long-, compound_stm -> .LBrace RBrace  | -return-, stm -> .exp_stm  | NOT, stm -> .iteration_stm  | Increment, jump_stm -> .-return- exp Semicolon  | LParen, iteration_stm -> .while LParen exp RParen stm  | if, postfix_exp -> .primary_exp  | Plus, stm -> .jump_stm  | -float4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, stm -> .compound_stm  | Tilde, stm -> .exp_stm  | -float2-, unary_op -> .Plus  | Increment, iteration_stm -> .while LParen exp RParen stm  | -goto-, block_item_list -> block_item_list .block_item  | -half4-, selection_stm -> .if LParen exp RParen stm  | NOT, primary_exp -> .String  | Times, stm -> .selection_stm  | while, stm -> .exp_stm  | -int-, stm -> .iteration_stm  | break, iteration_stm -> .while LParen exp RParen stm  | -half3-, stm -> .iteration_stm  | -double-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -goto-, stm -> .iteration_stm  | -float3-, selection_stm -> .if LParen exp RParen stm  | -half4-, primary_exp -> .String  | Increment, jump_stm -> .-return- exp Semicolon  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -uniform-, block_item -> .dec  | -sampler2D-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, jump_stm -> .-return- exp Semicolon  | ID, jump_stm -> .-return- exp Semicolon  | -char-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed3-, primary_exp -> .Number  | Dot, exp_stm -> .Semicolon  | -do-, primary_exp -> .LParen exp RParen  | Ampersand, block_item -> .dec  | -continue-, type_qualifier -> .-uniform-  | -fixed3-, block_item_list -> block_item_list .block_item  | Tilde, postfix_exp -> .primary_exp  | Comma, block_item -> .dec  | Increment, primary_exp -> .ID  | LBrack, unary_exp -> .postfix_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LBrack, block_item -> .dec  | NOT, selection_stm -> .if LParen exp RParen stm  | LParen, compound_stm -> .LBrace block_item_list RBrace  | for, jump_stm -> .break  | -fixed2-, type_specifier -> .-fixed4-  | ID, compound_stm -> .LBrace RBrace  | Plus, block_item_list -> block_item_list .block_item  | -double-, unary_exp -> .unary_op unary_exp  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, stm -> .selection_stm  | -short-, postfix_exp -> .postfix_exp Dot ID  | Semicolon, type_specifier -> .-long-  | ID, compound_stm -> .LBrace RBrace  | break, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, stm -> .selection_stm  | -fixed4-, jump_stm -> .-goto- ID  | -void-, stm -> .exp_stm  | -half4-, dec -> .dec_specifier init_dec_list Semicolon  | -long-, unary_op -> .Minus  | Tilde, primary_exp -> .LParen exp RParen  | LT, compound_stm -> .LBrace RBrace  | -char-, primary_exp -> .String  | LT, block_item -> .stm  | -int-, unary_exp -> .postfix_exp  | NEQ, selection_stm -> .if LParen exp RParen stm  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | break, stm -> .compound_stm  | -void-, stm -> .jump_stm  | -float2-, unary_exp -> .Increment unary_exp  | NEQ, stm -> .selection_stm  | -return-, stm -> .iteration_stm  | -fixed3-, block_item -> .stm  | -float3-, compound_stm -> .LBrace RBrace  | Semicolon, unary_op -> .Minus  | NOT, block_item -> .dec  | ID, iteration_stm -> .while LParen exp RParen stm  | LParen, stm -> .iteration_stm  | -float2-, type_qualifier -> .-uniform-  | -fixed2-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | NOT, primary_exp -> .ID  | Semicolon, exp_stm -> .exp Semicolon  | -int-, postfix_exp -> .postfix_exp Decrement  | AND, unary_op -> .Tilde  | Increment, stm -> .iteration_stm  | -fixed4-, postfix_exp -> .postfix_exp LParen RParen  | EQ, stm -> .selection_stm  | Decrement, jump_stm -> .-continue-  | -do-, block_item -> .dec  | -void-, unary_exp -> .Decrement unary_exp  | LeftShift, jump_stm -> .-continue-  | Tilde, stm -> .exp_stm  | LBrace, jump_stm -> .-continue-  | -half4-, dec -> .struct_specifier Semicolon  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | OR, stm -> .jump_stm  | -float3-, jump_stm -> .break  | for, jump_stm -> .-continue-  | -goto-, compound_stm -> .LBrace RBrace  | -void-, exp_stm -> .Semicolon  | -fixed2-, selection_stm -> .if LParen exp RParen stm else stm  | -void-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Plus, exp_stm -> .Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | NOT, stm -> .iteration_stm  | -char-, block_item_list -> block_item_list .block_item  | Decrement, jump_stm -> .break  | -float4-, stm -> .jump_stm  | -void-, primary_exp -> .Number  | VerticalBar, block_item -> .dec  | Decrement, postfix_exp -> .primary_exp  | Divide, compound_stm -> .LBrace RBrace  | -fixed4-, dec -> .struct_specifier Semicolon  | -fixed3-, exp_stm -> .exp Semicolon  | -sampler2D-, binary_exp -> .unary_exp  | Times, exp_stm -> .Semicolon  | String, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float3-, stm -> .jump_stm  | Minus, stm -> .compound_stm  | ID, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half3-, postfix_exp -> .postfix_exp Increment  | VerticalBar, struct_specifier -> .-struct- ID  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | -fixed2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, unary_op -> .Minus  | String, jump_stm -> .break  | if, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half4-, jump_stm -> .-return- exp Semicolon  | -goto-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float-, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, stm -> .compound_stm  | -fixed4-, exp_stm -> .exp Semicolon  | -half2-, jump_stm -> .break  | -half2-, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | Minus, jump_stm -> .-continue-  | -continue-, stm -> .compound_stm  | -short-, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, iteration_stm -> .while LParen exp RParen stm  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -float2-, jump_stm -> .break  | -char-, binary_exp -> .unary_exp  | OR, stm -> .compound_stm  | -fixed2-, compound_stm -> .LBrace block_item_list RBrace  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | LParen, primary_exp -> .Number  | LBrack, stm -> .selection_stm  | RBrace, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, stm -> .compound_stm  | -char-, type_specifier -> .-int-  | ID, compound_stm -> .LBrace RBrace  | -long-, compound_stm -> .LBrace block_item_list RBrace  | -do-, jump_stm -> .-continue-  | -uniform-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LBrace, stm -> .compound_stm  | -goto-, jump_stm -> .break  | -return-, stm -> .compound_stm  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -uniform-, jump_stm -> .-continue-  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -short-, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, jump_stm -> .-return- exp Semicolon  | -half3-, primary_exp -> .LParen exp RParen  | NEQ, compound_stm -> .LBrace RBrace  | Increment, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Plus, dec -> .dec_specifier init_dec_list Semicolon  | RBrace, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, postfix_exp -> .postfix_exp Decrement  | Times, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -int-, unary_op -> .NOT  | LParen, exp_stm -> .exp Semicolon  | String, block_item -> .stm  | -fixed2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .String  | Dot, stm -> .jump_stm  | LParen, jump_stm -> .-return- exp Semicolon  | -short-, postfix_exp -> .postfix_exp Decrement  | OR, unary_exp -> .unary_op unary_exp  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Increment, stm -> .compound_stm  | -float3-, block_item_list -> block_item_list .block_item  | while, stm -> .selection_stm  | -float4-, block_item -> .dec  | -float4-, dec -> .dec_specifier init_dec_list Semicolon  | -char-, binary_exp -> .unary_exp  | Percent, compound_stm -> .LBrace block_item_list RBrace  | while, stm -> .iteration_stm  | Minus, block_item -> .stm  | -half3-, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_exp -> .Increment unary_exp  | Divide, exp_stm -> .Semicolon  | ID, unary_op -> .NOT  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed2-, jump_stm -> .-goto- ID  | -struct-, jump_stm -> .break  | Minus, compound_stm -> .LBrace RBrace  | if, jump_stm -> .break  | -void-, iteration_stm -> .while LParen exp RParen stm  | -float-, block_item -> .stm  | Plus, type_qualifier -> .-uniform-  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | NOT, primary_exp -> .ID  | Times, stm -> .compound_stm  | -sampler2D-, stm -> .selection_stm  | LParen, dec -> .dec_specifier init_dec_list Semicolon  | for, block_item_list -> block_item_list .block_item  | NOT, selection_stm -> .if LParen exp RParen stm else stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | LBrace, binary_exp -> .unary_exp  | EQ, unary_exp -> .postfix_exp  | Minus, unary_exp -> .Increment unary_exp  | GT, binary_exp -> .binary_exp binary_op unary_exp  | Caret, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half2-, unary_op -> .Tilde  | Tilde, jump_stm -> .-continue-  | -void-, type_qualifier -> .-uniform-  | -char-, dec -> .dec_specifier init_dec_list Semicolon  | ID, stm -> .exp_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -return-, unary_exp -> .Decrement unary_exp  | Divide, stm -> .compound_stm  | -do-, jump_stm -> .-return- exp Semicolon  | -fixed3-, postfix_exp -> .postfix_exp Increment  | AND, stm -> .selection_stm  | -struct-, stm -> .exp_stm  | -return-, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -long-, postfix_exp -> .postfix_exp Decrement  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, iteration_stm -> .while LParen exp RParen stm  | for, stm -> .selection_stm  | if, postfix_exp -> .postfix_exp Dot ID  | Increment, compound_stm -> .LBrace RBrace  | -float4-, jump_stm -> .-continue-  | RBrace, binary_exp -> .unary_exp  | LE, jump_stm -> .-return- exp Semicolon  | -float4-, stm -> .exp_stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, stm -> .exp_stm  | LParen, dec -> .dec_specifier init_dec_list Semicolon  | -float2-, selection_stm -> .if LParen exp RParen stm else stm  | -fixed3-, primary_exp -> .String  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | if, postfix_exp -> .postfix_exp Dot ID  | Plus, stm -> .compound_stm  | -float2-, compound_stm -> .LBrace block_item_list RBrace  | -float2-, primary_exp -> .Number  | LeftShift, exp_stm -> .exp Semicolon  | Tilde, jump_stm -> .break  | while, jump_stm -> .-continue-  | -char-, jump_stm -> .break  | LParen, compound_stm -> .LBrace RBrace  | LBrace, jump_stm -> .-goto- ID  | -float-, dec -> .dec_specifier init_dec_list Semicolon  | Number, unary_op -> .Tilde  | NOT, postfix_exp -> .postfix_exp Decrement  | Percent, jump_stm -> .break  | -float-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, selection_stm -> .if LParen exp RParen stm  | -fixed2-, primary_exp -> .LParen exp RParen  | Times, stm -> .selection_stm  | ID, selection_stm -> .if LParen exp RParen stm  | -double-, exp_stm -> .Semicolon  | LParen, jump_stm -> .break  | -goto-, stm -> .exp_stm  | Minus, exp_stm -> .exp Semicolon  | -uniform-, compound_stm -> .LBrace block_item_list RBrace  | -double-, selection_stm -> .if LParen exp RParen stm  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, selection_stm -> .if LParen exp RParen stm  | -fixed3-, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, jump_stm -> .break  | Decrement, stm -> .jump_stm  | Semicolon, iteration_stm -> .while LParen exp RParen stm  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | Times, exp_stm -> .Semicolon  | -half4-, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, compound_stm -> .LBrace RBrace  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, unary_exp -> .unary_op unary_exp  | Question, stm -> .selection_stm  | -half3-, selection_stm -> .if LParen exp RParen stm else stm  | -double-, unary_exp -> .unary_op unary_exp  | Times, stm -> .iteration_stm  | -int-, selection_stm -> .if LParen exp RParen stm  | if, exp_stm -> .exp Semicolon  | Plus, jump_stm -> .-continue-  | -float2-, block_item -> .stm  | -double-, iteration_stm -> .while LParen exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Comma, dec -> .dec_specifier init_dec_list Semicolon  | Minus, stm -> .iteration_stm  | -do-, binary_exp -> .unary_exp  | LT, block_item -> .stm  | -float-, primary_exp -> .ID  | LE, stm -> .exp_stm  | -float-, compound_stm -> .LBrace block_item_list RBrace  | -sampler2D-, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | LeftShift, jump_stm -> .-return- exp Semicolon  | Number, exp_stm -> .exp Semicolon  | Semicolon, exp_stm -> .Semicolon  | -uniform-, primary_exp -> .String  | Minus, selection_stm -> .if LParen exp RParen stm  | -uniform-, jump_stm -> .-continue-  | -sampler2D-, postfix_exp -> .postfix_exp Decrement  | EQ, iteration_stm -> .while LParen exp RParen stm  | -int-, stm -> .compound_stm  | Increment, block_item_list -> block_item_list .block_item  | -do-, type_qualifier -> .-uniform-  | -float2-, jump_stm -> .-goto- ID  | Minus, dec -> .dec_specifier init_dec_list Semicolon  | Semicolon, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | for, postfix_exp -> .postfix_exp Decrement  | Increment, block_item -> .stm  | -goto-, binary_exp -> .binary_exp binary_op unary_exp  | Minus, primary_exp -> .LParen exp RParen  | OR, primary_exp -> .Number  | GT, postfix_exp -> .primary_exp  | Question, block_item -> .stm  | -char-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, jump_stm -> .break  | -fixed4-, dec -> .dec_specifier init_dec_list Semicolon  | -sampler2D-, stm -> .compound_stm  | -int-, unary_exp -> .unary_op unary_exp  | OR, selection_stm -> .if LParen exp RParen stm else stm  | -fixed4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, stm -> .iteration_stm  | -short-, selection_stm -> .if LParen exp RParen stm  | Tilde, postfix_exp -> .postfix_exp Decrement  | Comma, unary_exp -> .postfix_exp  | Caret, stm -> .jump_stm  | Increment, selection_stm -> .if LParen exp RParen stm  | Number, primary_exp -> .ID  | LT, postfix_exp -> .postfix_exp Dot ID  | Caret, iteration_stm -> .while LParen exp RParen stm  | NOT, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -return-, dec -> .struct_specifier Semicolon  | Decrement, primary_exp -> .Number  | Percent, iteration_stm -> .while LParen exp RParen stm  | -return-, unary_op -> .Minus  | Plus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -double-, primary_exp -> .Number  | Assign, jump_stm -> .-return- exp Semicolon  | for, block_item -> .dec  | -float3-, compound_stm -> .LBrace block_item_list RBrace  | -void-, block_item_list -> block_item_list .block_item  | -fixed3-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Increment, stm -> .compound_stm  | RBrace, jump_stm -> .-goto- ID  | -goto-, stm -> .exp_stm  | -continue-, stm -> .iteration_stm  | Plus, unary_exp -> .Decrement unary_exp  | Caret, selection_stm -> .if LParen exp RParen stm  | -fixed4-, exp_stm -> .exp Semicolon  | Number, block_item_list -> block_item_list .block_item  | ID, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, stm -> .exp_stm  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Minus, postfix_exp -> .postfix_exp Decrement  | Divide, block_item_list -> block_item_list .block_item  | for, exp_stm -> .Semicolon  | Minus, unary_exp -> .postfix_exp  | VerticalBar, primary_exp -> .String  | Divide, block_item -> .dec  | -float-, unary_exp -> .postfix_exp  | EQ, stm -> .exp_stm  | ID, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, primary_exp -> .String  | LParen, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .postfix_exp Increment  | Plus, iteration_stm -> .while LParen exp RParen stm  | -double-, jump_stm -> .-goto- ID  | LBrace, primary_exp -> .ID  | RightShift, selection_stm -> .if LParen exp RParen stm else stm  | -char-, jump_stm -> .-return- exp Semicolon  | -continue-, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .ID  | NEQ, stm -> .compound_stm  | -half4-, unary_exp -> .unary_op unary_exp  | NEQ, block_item -> .dec  | -goto-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -double-, block_item_list -> block_item_list .block_item  | Minus, selection_stm -> .if LParen exp RParen stm  | for, selection_stm -> .if LParen exp RParen stm  | ID, block_item -> .stm  | Tilde, stm -> .jump_stm  | ID, jump_stm -> .-return- exp Semicolon  | -half4-, block_item -> .stm  | -struct-, block_item_list -> block_item_list .block_item  | -fixed4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, dec -> .struct_specifier Semicolon  | RBrace, type_qualifier -> .-uniform-  | -void-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | RBrace, postfix_exp -> .primary_exp  | LT, unary_exp -> .postfix_exp  | Question, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, jump_stm -> .-return- exp Semicolon  | Plus, stm -> .exp_stm  | -float3-, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -uniform-, jump_stm -> .-return- exp Semicolon  | if, jump_stm -> .-goto- ID  | -fixed3-, dec -> .struct_specifier Semicolon  | -do-, block_item -> .stm  | LBrace, stm -> .selection_stm  | -fixed2-, jump_stm -> .-goto- ID  | if, compound_stm -> .LBrace RBrace  | LParen, block_item -> .stm  | while, stm -> .iteration_stm  | -long-, primary_exp -> .Number  | OR, stm -> .exp_stm  | -fixed4-, jump_stm -> .break  | -half4-, postfix_exp -> .primary_exp  | GT, exp_stm -> .Semicolon  | -void-, jump_stm -> .-return- exp Semicolon  | Minus, postfix_exp -> .primary_exp  | VerticalBar, primary_exp -> .Number  | RightShift, unary_op -> .Plus  | Decrement, primary_exp -> .String  | Ampersand, stm -> .jump_stm  | -short-, primary_exp -> .ID  | Percent, jump_stm -> .-continue-  | Semicolon, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -struct-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -char-, jump_stm -> .-goto- ID  | break, compound_stm -> .LBrace RBrace  | -sampler2D-, jump_stm -> .-continue-  | Plus, unary_exp -> .Increment unary_exp  | GE, jump_stm -> .-continue-  | -half2-, unary_exp -> .Increment unary_exp  | EQ, compound_stm -> .LBrace RBrace  | Tilde, exp_stm -> .exp Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | ID, stm -> .jump_stm  | -char-, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | Comma, block_item_list -> block_item_list .block_item  | -float3-, primary_exp -> .LParen exp RParen  | Divide, stm -> .iteration_stm  | while, primary_exp -> .Number  | Increment, conditional_exp -> .binary_exp  | Semicolon, iteration_stm -> .while LParen exp RParen stm  | -void-, exp_stm -> .Semicolon  | RBrace, postfix_exp -> .postfix_exp Dot ID  | Minus, stm -> .jump_stm  | -continue-, dec -> .struct_specifier Semicolon  | break, selection_stm -> .if LParen exp RParen stm else stm  | -half2-, stm -> .compound_stm  | -struct-, stm -> .selection_stm  | NOT, jump_stm -> .-return- exp Semicolon  | -float2-, postfix_exp -> .postfix_exp Dot ID  | LParen, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, jump_stm -> .-return- exp Semicolon  | -float3-, block_item_list -> block_item_list .block_item  | String, iteration_stm -> .while LParen exp RParen stm  | -struct-, postfix_exp -> .postfix_exp Increment  | Dot, type_qualifier -> .-uniform-  | -float4-, stm -> .compound_stm  | break, jump_stm -> .break  | -long-, block_item -> .stm  | -float4-, postfix_exp -> .postfix_exp Increment  | Divide, stm -> .selection_stm  | -float2-, stm -> .jump_stm  | -return-, exp_stm -> .Semicolon  | break, unary_exp -> .postfix_exp  | OR, exp_stm -> .Semicolon  | -double-, block_item_list -> block_item_list .block_item  | -int-, block_item -> .stm  | -do-, postfix_exp -> .postfix_exp Decrement  | LE, selection_stm -> .if LParen exp RParen stm  | -short-, block_item -> .dec  | if, binary_exp -> .unary_exp  | AND, block_item -> .dec  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, primary_exp -> .ID  | Dot, stm -> .selection_stm  | -double-, stm -> .iteration_stm  | NOT, primary_exp -> .Number  | NEQ, jump_stm -> .-continue-  | -double-, block_item_list -> block_item_list .block_item  | -continue-, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, jump_stm -> .-goto- ID  | -half2-, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Increment  | EQ, exp_stm -> .exp Semicolon  | NOT, jump_stm -> .-continue-  | -float3-, unary_exp -> .postfix_exp  | Percent, binary_exp -> .unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, jump_stm -> .-continue-  | Increment, exp_stm -> .Semicolon  | -half2-, compound_stm -> .LBrace block_item_list RBrace  | -char-, exp_stm -> .Semicolon  | Plus, compound_stm -> .LBrace RBrace  | -float3-, stm -> .jump_stm  | -double-, dec -> .dec_specifier init_dec_list Semicolon  | -half3-, compound_stm -> .LBrace block_item_list RBrace  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | -half4-, jump_stm -> .break  | LBrace, jump_stm -> .break  | -short-, block_item -> .stm  | Decrement, jump_stm -> .-continue-  | String, primary_exp -> .String  | OR, dec -> .struct_specifier Semicolon  | Semicolon, stm -> .selection_stm  | for, exp_stm -> .exp Semicolon  | -continue-, compound_stm -> .LBrace block_item_list RBrace  | Increment, type_qualifier -> .-uniform-  | -fixed4-, stm -> .jump_stm  | Tilde, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, selection_stm -> .if LParen exp RParen stm  | -half3-, stm -> .jump_stm  | -goto-, postfix_exp -> .primary_exp  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -float3-, block_item -> .dec  | Plus, unary_exp -> .Decrement unary_exp  | GE, selection_stm -> .if LParen exp RParen stm else stm  | for, jump_stm -> .break  | Plus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float4-, type_qualifier -> .-uniform-  | -half4-, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, exp_stm -> .exp Semicolon  | Increment, block_item_list -> block_item_list .block_item  | -return-, dec -> .dec_specifier init_dec_list Semicolon  | while, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, stm -> .jump_stm  | -fixed2-, stm -> .compound_stm  | -return-, type_qualifier -> .-uniform-  | -int-, unary_exp -> .Decrement unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | Minus, compound_stm -> .LBrace RBrace  | -struct-, primary_exp -> .LParen exp RParen  | AND, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -do-, exp_stm -> .exp Semicolon  | for, exp_stm -> .exp Semicolon  | Minus, primary_exp -> .Number  | LE, stm -> .jump_stm  | for, unary_exp -> .Increment unary_exp  | LT, block_item -> .stm  | -half4-, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, dec -> .dec_specifier init_dec_list Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | -return-, jump_stm -> .-continue-  | Number, stm -> .jump_stm  | -fixed4-, unary_exp -> .unary_op unary_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | -struct-, primary_exp -> .LParen exp RParen  | VerticalBar, jump_stm -> .break  | break, compound_stm -> .LBrace RBrace  | -double-, dec -> .dec_specifier init_dec_list Semicolon  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -half3-, block_item -> .dec  | RBrace, block_item_list -> block_item_list .block_item  | -struct-, stm -> .jump_stm  | -sampler2D-, jump_stm -> .break  | String, block_item -> .dec  | Number, stm -> .compound_stm  | -uniform-, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .primary_exp  | LeftShift, unary_op -> .NOT  | ID, primary_exp -> .ID  | Plus, stm -> .exp_stm  | -half2-, primary_exp -> .ID  | GT, selection_stm -> .if LParen exp RParen stm else stm  | -long-, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | break, dec -> .dec_specifier init_dec_list Semicolon  | -half2-, stm -> .compound_stm  | -half3-, dec -> .struct_specifier Semicolon  | -float3-, jump_stm -> .-continue-  | if, compound_stm -> .LBrace block_item_list RBrace  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -goto-, primary_exp -> .Number  | Question, jump_stm -> .-goto- ID  | -long-, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, jump_stm -> .-continue-  | -struct-, jump_stm -> .-return- exp Semicolon  | -int-, stm -> .iteration_stm  | -half2-, postfix_exp -> .primary_exp  | AND, stm -> .exp_stm  | -long-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, iteration_stm -> .while LParen exp RParen stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Comma, exp_stm -> .Semicolon  | -int-, primary_exp -> .LParen exp RParen  | Question, dec -> .struct_specifier Semicolon  | ID, exp_stm -> .Semicolon  | -short-, struct_specifier -> .-struct- ID LBrace struct_dec_list RBrace  | Semicolon, jump_stm -> .-goto- ID  | -fixed2-, stm -> .exp_stm  | Tilde, exp_stm -> .exp Semicolon  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | String, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, selection_stm -> .if LParen exp RParen stm  | -void-, stm -> .exp_stm  | -do-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Tilde, stm -> .exp_stm  | while, postfix_exp -> .postfix_exp Increment  | Question, unary_exp -> .Decrement unary_exp  | Ampersand, primary_exp -> .ID  | VerticalBar, compound_stm -> .LBrace block_item_list RBrace  | Plus, iteration_stm -> .while LParen exp RParen stm  | -do-, dec -> .dec_specifier init_dec_list Semicolon  | -void-, primary_exp -> .LParen exp RParen  | EQ, block_item -> .dec  | String, block_item -> .stm  | String, postfix_exp -> .postfix_exp LParen RParen  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | Plus, postfix_exp -> .primary_exp  | Times, block_item -> .stm  | LParen, block_item -> .stm  | -continue-, block_item -> .dec  | -long-, jump_stm -> .-continue-  | break, dec -> .struct_specifier Semicolon  | -short-, block_item -> .stm  | if, stm -> .jump_stm  | -int-, type_specifier -> .typedef_name  | ID, dec -> .struct_specifier Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm  | -sampler2D-, selection_stm -> .if LParen exp RParen stm else stm  | -float4-, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp Decrement  | NEQ, dec -> .struct_specifier Semicolon  | -uniform-, dec -> .dec_specifier init_dec_list Semicolon  | NOT, selection_stm -> .if LParen exp RParen stm else stm  | -short-, primary_exp -> .ID  | LeftShift, selection_stm -> .if LParen exp RParen stm  | -float2-, jump_stm -> .-return- exp Semicolon  | -double-, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Increment, jump_stm -> .-goto- ID  | while, type_specifier -> .-short-  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | NEQ, stm -> .jump_stm  | -do-, postfix_exp -> .postfix_exp Decrement  | Plus, exp_stm -> .exp Semicolon  | -half4-, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, stm -> .selection_stm  | -int-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -half3-, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, jump_stm -> .-goto- ID  | String, jump_stm -> .-goto- ID  | -float3-, stm -> .exp_stm  | if, exp_stm -> .Semicolon  | for, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .postfix_exp Increment  | LT, selection_stm -> .if LParen exp RParen stm  | RBrace, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, block_item_list -> block_item_list .block_item  | -sampler2D-, block_item -> .stm  | break, dec -> .dec_specifier init_dec_list Semicolon  | LBrace, stm -> .selection_stm  | -do-, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp Increment  | NEQ, dec -> .dec_specifier init_dec_list Semicolon  | Decrement, exp_stm -> .Semicolon  | Increment, stm -> .selection_stm  | -half2-, stm -> .exp_stm  | -struct-, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, stm -> .iteration_stm  | Semicolon, block_item_list -> block_item_list .block_item  | RBrace, unary_op -> .Plus  | LParen, jump_stm -> .break  | -fixed3-, primary_exp -> .LParen exp RParen  | Percent, dec -> .dec_specifier init_dec_list Semicolon  | -continue-, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, jump_stm -> .-return- exp Semicolon  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | Semicolon, type_qualifier -> .-uniform-  | -float-, unary_op -> .Plus  | Plus, stm -> .exp_stm  | Semicolon, exp_stm -> .Semicolon  | Number, selection_stm -> .if LParen exp RParen stm else stm  | -sampler2D-, exp_stm -> .Semicolon  | -float-, block_item_list -> block_item_list .block_item  | Number, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, dec -> .struct_specifier Semicolon  | LParen, jump_stm -> .-goto- ID  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | String, stm -> .jump_stm  | LBrace, primary_exp -> .ID  | Assign, stm -> .iteration_stm  | -half4-, stm -> .compound_stm  | -half2-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed4-, dec -> .dec_specifier init_dec_list Semicolon  | Plus, type_specifier -> .-half2-  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, stm -> .compound_stm  | String, dec -> .dec_specifier init_dec_list Semicolon  | if, jump_stm -> .break  | Number, postfix_exp -> .postfix_exp LParen RParen  | LE, type_specifier -> .-fixed2-  | ID, jump_stm -> .break  | -float3-, jump_stm -> .-goto- ID  | -fixed4-, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, stm -> .jump_stm  | NOT, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, type_qualifier -> .-uniform-  | -sampler2D-, exp_stm -> .Semicolon  | -float4-, binary_exp -> .binary_exp binary_op unary_exp  | LE, block_item -> .dec  | -fixed3-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed2-, stm -> .selection_stm  | Increment, binary_exp -> .unary_exp  | VerticalBar, block_item -> .dec  | -return-, binary_exp -> .unary_exp  | NEQ, primary_exp -> .LParen exp RParen  | Minus, compound_stm -> .LBrace RBrace  | Number, block_item_list -> block_item_list .block_item  | -float2-, dec -> .struct_specifier Semicolon  | -sampler2D-, primary_exp -> .Number  | Plus, dec -> .struct_specifier Semicolon  | Minus, unary_exp -> .Decrement unary_exp  | LE, block_item_list -> block_item_list .block_item  | -char-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, stm -> .jump_stm  | -half3-, exp_stm -> .exp Semicolon  | -fixed3-, jump_stm -> .-goto- ID  | -double-, postfix_exp -> .postfix_exp LParen RParen  | Question, jump_stm -> .-return- exp Semicolon  | Semicolon, selection_stm -> .if LParen exp RParen stm  | Decrement, unary_exp -> .postfix_exp  | LE, exp_stm -> .exp Semicolon  | -short-, primary_exp -> .String  | Assign, block_item -> .dec  | -struct-, stm -> .exp_stm  | for, exp_stm -> .Semicolon  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | String, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, stm -> .selection_stm  | -half4-, primary_exp -> .LParen exp RParen  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | if, stm -> .iteration_stm  | -uniform-, unary_exp -> .unary_op unary_exp  | GT, compound_stm -> .LBrace block_item_list RBrace  | NOT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, block_item -> .dec  | break, primary_exp -> .LParen exp RParen  | LParen, stm -> .jump_stm  | Number, exp_stm -> .exp Semicolon  | RBrace, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half4-, jump_stm -> .break  | -do-, unary_exp -> .unary_op unary_exp  | AND, stm -> .jump_stm  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Number, postfix_exp -> .primary_exp  | Assign, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -continue-, exp_stm -> .Semicolon  | LBrace, jump_stm -> .-goto- ID  | -short-, compound_stm -> .LBrace block_item_list RBrace  | -fixed2-, compound_stm -> .LBrace RBrace  | -fixed2-, unary_exp -> .unary_op unary_exp  | Percent, exp_stm -> .exp Semicolon  | if, stm -> .exp_stm  | Increment, block_item -> .dec  | -char-, block_item_list -> block_item_list .block_item  | Increment, selection_stm -> .if LParen exp RParen stm  | while, block_item -> .dec  | -double-, iteration_stm -> .while LParen exp RParen stm  | -continue-, block_item -> .dec  | -fixed4-, postfix_exp -> .primary_exp  | LBrack, dec -> .struct_specifier Semicolon  | -half2-, jump_stm -> .break  | -int-, exp_stm -> .Semicolon  | -goto-, iteration_stm -> .while LParen exp RParen stm  | -float2-, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, block_item_list -> block_item_list .block_item  | -half2-, jump_stm -> .-return- exp Semicolon  | -void-, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, dec -> .dec_specifier init_dec_list Semicolon  | String, stm -> .exp_stm  | -void-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | ID, jump_stm -> .-continue-  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -float3-, primary_exp -> .ID  | Divide, selection_stm -> .if LParen exp RParen stm else stm  | -uniform-, stm -> .compound_stm  | Decrement, type_qualifier -> .-uniform-  | -half2-, jump_stm -> .-goto- ID  | ID, stm -> .exp_stm  | -fixed3-, block_item_list -> block_item_list .block_item  | -goto-, postfix_exp -> .postfix_exp Dot ID  | EQ, stm -> .selection_stm  | -float3-, unary_exp -> .unary_op unary_exp  | Comma, jump_stm -> .-return- exp Semicolon  | -float-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Semicolon, binary_exp -> .unary_exp  | GE, block_item_list -> block_item_list .block_item  | -fixed2-, compound_stm -> .LBrace block_item_list RBrace  | -goto-, iteration_stm -> .while LParen exp RParen stm  | break, stm -> .selection_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -int-, block_item_list -> block_item_list .block_item  | if, stm -> .compound_stm  | for, dec -> .dec_specifier init_dec_list Semicolon  | -return-, stm -> .jump_stm  | if, jump_stm -> .-goto- ID  | -float2-, stm -> .selection_stm  | Tilde, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, stm -> .compound_stm  | -long-, assignment_exp -> .conditional_exp  | Comma, jump_stm -> .-goto- ID  | Increment, postfix_exp -> .postfix_exp Dot ID  | Assign, jump_stm -> .-goto- ID  | -half3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LBrace, exp_stm -> .Semicolon  | -fixed3-, stm -> .iteration_stm  | -half3-, primary_exp -> .String  | Decrement, exp_stm -> .Semicolon  | Tilde, selection_stm -> .if LParen exp RParen stm else stm  | Semicolon, unary_exp -> .Increment unary_exp  | Question, stm -> .selection_stm  | LBrace, postfix_exp -> .postfix_exp LParen RParen  | Assign, compound_stm -> .LBrace RBrace  | -half3-, block_item_list -> block_item_list .block_item  | LParen, stm -> .jump_stm  | break, stm -> .iteration_stm  | -float-, exp_stm -> .Semicolon  | -float3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Number, stm -> .compound_stm  | -continue-, stm -> .exp_stm  | Plus, postfix_exp -> .postfix_exp Decrement  | Minus, stm -> .selection_stm  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, stm -> .iteration_stm  | ID, stm -> .compound_stm  | Plus, compound_stm -> .LBrace block_item_list RBrace  | RBrace, primary_exp -> .Number  | EQ, exp_stm -> .exp Semicolon  | -float2-, exp_stm -> .exp Semicolon  | -long-, compound_stm -> .LBrace RBrace  | String, selection_stm -> .if LParen exp RParen stm  | Increment, stm -> .compound_stm  | -float-, stm -> .selection_stm  | -void-, primary_exp -> .ID  | Comma, dec -> .dec_specifier init_dec_list Semicolon  | -goto-, primary_exp -> .String  | LeftShift, block_item -> .dec  | -int-, jump_stm -> .-continue-  | -fixed3-, postfix_exp -> .postfix_exp LParen RParen  | GE, postfix_exp -> .primary_exp  | OR, iteration_stm -> .while LParen exp RParen stm  | RBrace, unary_exp -> .postfix_exp  | RightShift, compound_stm -> .LBrace block_item_list RBrace  | -fixed4-, block_item_list -> block_item_list .block_item  | -half3-, unary_op -> .Tilde  | Decrement, jump_stm -> .-continue-  | -return-, iteration_stm -> .while LParen exp RParen stm  | Plus, selection_stm -> .if LParen exp RParen stm  | -do-, stm -> .selection_stm  | Plus, compound_stm -> .LBrace RBrace  | NOT, exp_stm -> .Semicolon  | Decrement, type_specifier -> .-char-  | ID, exp_stm -> .Semicolon  | -float2-, dec -> .dec_specifier init_dec_list Semicolon  | -half4-, iteration_stm -> .while LParen exp RParen stm  | Number, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, exp_stm -> .exp Semicolon  | Decrement, block_item -> .dec  | -half3-, dec -> .struct_specifier Semicolon  | -float4-, stm -> .jump_stm  | -half2-, selection_stm -> .if LParen exp RParen stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Percent, jump_stm -> .break  | ID, jump_stm -> .-goto- ID  | Semicolon, block_item -> .stm  | -half2-, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, jump_stm -> .break  | Increment, stm -> .iteration_stm  | Tilde, compound_stm -> .LBrace block_item_list RBrace  | LBrace, postfix_exp -> .postfix_exp Increment  | Semicolon, jump_stm -> .break  | -sampler2D-, block_item_list -> block_item_list .block_item  | LBrace, block_item_list -> block_item_list .block_item  | -float4-, type_specifier -> .-double-  | ID, exp_stm -> .exp Semicolon  | -double-, stm -> .selection_stm  | -sampler2D-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, stm -> .exp_stm  | -char-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LParen, compound_stm -> .LBrace RBrace  | -half2-, jump_stm -> .-goto- ID  | -do-, exp_stm -> .exp Semicolon  | -float-, stm -> .jump_stm  | -float-, unary_exp -> .unary_op unary_exp  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | RBrace, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, dec -> .dec_specifier init_dec_list Semicolon  | -fixed2-, unary_op -> .Minus  | Decrement, selection_stm -> .if LParen exp RParen stm  | Plus, jump_stm -> .-return- exp Semicolon  | -fixed4-, exp_stm -> .exp Semicolon  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | LT, dec -> .dec_specifier init_dec_list Semicolon  | -double-, postfix_exp -> .postfix_exp Increment  | Comma, jump_stm -> .-continue-  | -fixed2-, stm -> .compound_stm  | LBrace, exp_stm -> .exp Semicolon  | while, exp_stm -> .exp Semicolon  | LBrace, jump_stm -> .-continue-  | -short-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, binary_exp -> .binary_exp binary_op unary_exp  | EQ, dec -> .struct_specifier Semicolon  | -int-, block_item_list -> block_item_list .block_item  | -short-, block_item -> .dec  | Tilde, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, primary_exp -> .String  | Comma, stm -> .iteration_stm  | -fixed2-, binary_exp -> .binary_exp binary_op unary_exp  | Question, exp_stm -> .Semicolon  | -char-, block_item -> .stm  | ID, jump_stm -> .-return- exp Semicolon  | LBrace, type_qualifier -> .-uniform-  | -float3-, unary_exp -> .Increment unary_exp  | Percent, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, jump_stm -> .-return- exp Semicolon  | Increment, block_item_list -> block_item_list .block_item  | break, jump_stm -> .break  | -struct-, binary_exp -> .unary_exp  | RightShift, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -void-, primary_exp -> .ID  | Minus, dec -> .struct_specifier Semicolon  | LBrace, selection_stm -> .if LParen exp RParen stm  | -continue-, type_qualifier -> .-uniform-  | ID, unary_exp -> .postfix_exp  | Plus, dec -> .struct_specifier Semicolon  | while, unary_op -> .Minus  | LParen, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -sampler2D-, selection_stm -> .if LParen exp RParen stm  | -half2-, jump_stm -> .break  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, stm -> .iteration_stm  | -sampler2D-, primary_exp -> .Number  | Decrement, unary_exp -> .postfix_exp  | AND, selection_stm -> .if LParen exp RParen stm  | break, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, type_qualifier -> .-uniform-  | -double-, postfix_exp -> .primary_exp  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float2-, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, stm -> .selection_stm  | -char-, compound_stm -> .LBrace block_item_list RBrace  | ID, dec -> .struct_specifier Semicolon  | Tilde, jump_stm -> .break  | -double-, postfix_exp -> .postfix_exp LParen RParen  | OR, exp_stm -> .exp Semicolon  | -void-, exp_stm -> .exp Semicolon  | -return-, block_item -> .stm  | Increment, compound_stm -> .LBrace RBrace  | -continue-, stm -> .iteration_stm  | for, postfix_exp -> .postfix_exp Increment  | RightShift, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .primary_exp  | Caret, compound_stm -> .LBrace block_item_list RBrace  | break, selection_stm -> .if LParen exp RParen stm  | -float3-, postfix_exp -> .postfix_exp Increment  | Caret, jump_stm -> .-goto- ID  | Tilde, type_specifier -> .-half3-  | ID, jump_stm -> .-goto- ID  | Number, postfix_exp -> .primary_exp  | Decrement, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -continue-, dec -> .dec_specifier init_dec_list Semicolon  | Tilde, jump_stm -> .-goto- ID  | Decrement, postfix_exp -> .primary_exp  | Ampersand, jump_stm -> .-goto- ID  | -uniform-, compound_stm -> .LBrace RBrace  | -uniform-, dec -> .struct_specifier Semicolon  | if, compound_stm -> .LBrace block_item_list RBrace  | -short-, compound_stm -> .LBrace block_item_list RBrace  | -long-, selection_stm -> .if LParen exp RParen stm  | -return-, jump_stm -> .-return- exp Semicolon  | -uniform-, exp_stm -> .Semicolon  | -return-, selection_stm -> .if LParen exp RParen stm  | LBrace, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, jump_stm -> .-continue-  | LParen, stm -> .iteration_stm  | -goto-, block_item -> .dec  | LBrace, stm -> .compound_stm  | while, stm -> .exp_stm  | -sampler2D-, jump_stm -> .-goto- ID  | RBrace, postfix_exp -> .postfix_exp LParen RParen  | LT, compound_stm -> .LBrace RBrace  | -int-, binary_exp -> .unary_exp  | Caret, dec -> .dec_specifier init_dec_list Semicolon  | -uniform-, jump_stm -> .-continue-  | LBrace, dec -> .struct_specifier Semicolon  | -struct-, jump_stm -> .-return- exp Semicolon  | break, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, block_item -> .stm  | Minus, stm -> .exp_stm  | Number, unary_exp -> .Increment unary_exp  | Caret, block_item -> .dec  | Minus, block_item -> .dec  | -short-, primary_exp -> .String  | AND, unary_exp -> .unary_op unary_exp  | Divide, dec_specifier -> .type_qualifier type_specifier  | ID, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, block_item -> .stm  | -uniform-, postfix_exp -> .postfix_exp Dot ID  | Percent, exp_stm -> .exp Semicolon  | break, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, iteration_stm -> .while LParen exp RParen stm  | -fixed2-, stm -> .selection_stm  | -float-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -do-, unary_exp -> .postfix_exp  | Comma, binary_exp -> .unary_exp  | LeftShift, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Tilde, primary_exp -> .ID  | GE, jump_stm -> .-continue-  | -long-, block_item -> .dec  | -half4-, stm -> .compound_stm  | -fixed3-, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -sampler2D-, block_item -> .stm  | -fixed3-, jump_stm -> .-return- exp Semicolon  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -short-, stm -> .exp_stm  | break, stm -> .compound_stm  | Number, primary_exp -> .Number  | Comma, stm -> .compound_stm  | LParen, compound_stm -> .LBrace RBrace  | -short-, stm -> .compound_stm  | Semicolon, stm -> .selection_stm  | break, dec -> .dec_specifier init_dec_list Semicolon  | -float-, block_item -> .dec  | -half2-, binary_exp -> .binary_exp binary_op unary_exp  | AND, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Decrement, unary_exp -> .postfix_exp  | Divide, jump_stm -> .-return- exp Semicolon  | -sampler2D-, unary_exp -> .postfix_exp  | GE, dec -> .dec_specifier init_dec_list Semicolon  | Increment, block_item_list -> block_item_list .block_item  | -long-, selection_stm -> .if LParen exp RParen stm else stm  | -continue-, block_item -> .stm  | Number, compound_stm -> .LBrace RBrace  | -half4-, dec -> .struct_specifier Semicolon  | -goto-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float2-, stm -> .jump_stm  | RBrace, jump_stm -> .-goto- ID  | -half4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, compound_stm -> .LBrace RBrace  | -goto-, postfix_exp -> .postfix_exp LParen RParen  | Divide, block_item -> .stm  | -fixed4-, stm -> .jump_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half2-, primary_exp -> .LParen exp RParen  | Assign, unary_exp -> .Increment unary_exp  | Assign, jump_stm -> .-goto- ID  | -return-, postfix_exp -> .postfix_exp Increment  | Assign, jump_stm -> .break  | Tilde, block_item -> .dec  | -do-, type_specifier -> .-float3-  | ID, jump_stm -> .-continue-  | -half3-, primary_exp -> .Number  | Minus, iteration_stm -> .while LParen exp RParen stm  | -half4-, jump_stm -> .-goto- ID  | for, stm -> .iteration_stm  | Decrement, stm -> .selection_stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, selection_stm -> .if LParen exp RParen stm else stm  | -struct-, stm -> .exp_stm  | -goto-, primary_exp -> .ID  | OR, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | ID, unary_exp -> .Increment unary_exp  | VerticalBar, dec -> .struct_specifier Semicolon  | -return-, block_item -> .stm  | -short-, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, stm -> .selection_stm  | String, postfix_exp -> .postfix_exp LParen RParen  | Caret, primary_exp -> .ID  | AND, postfix_exp -> .postfix_exp LParen RParen  | Dot, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | String, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, exp_stm -> .Semicolon  | NOT, jump_stm -> .-goto- ID  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | Tilde, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, dec -> .dec_specifier init_dec_list Semicolon  | -float4-, dec -> .dec_specifier init_dec_list Semicolon  | -float3-, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Decrement  | LBrack, primary_exp -> .ID  | Ampersand, stm -> .exp_stm  | RBrace, unary_exp -> .Increment unary_exp  | Semicolon, stm -> .exp_stm  | Decrement, block_item -> .dec  | -fixed2-, compound_stm -> .LBrace RBrace  | RBrace, primary_exp -> .LParen exp RParen  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_op -> .NOT  | NOT, unary_op -> .NOT  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -goto-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | GT, jump_stm -> .-goto- ID  | -continue-, stm -> .selection_stm  | Semicolon, block_item_list -> block_item_list .block_item  | -float-, postfix_exp -> .postfix_exp Decrement  | Assign, stm -> .iteration_stm  | RBrace, stm -> .iteration_stm  | -struct-, dec -> .dec_specifier init_dec_list Semicolon  | break, jump_stm -> .break  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Increment, iteration_stm -> .while LParen exp RParen stm  | -float4-, exp_stm -> .Semicolon  | -half3-, dec -> .struct_specifier Semicolon  | Increment, unary_exp -> .Decrement unary_exp  | Plus, primary_exp -> .LParen exp RParen  | Plus, type_specifier -> .-sampler2D-  | ID, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, postfix_exp -> .primary_exp  | Percent, compound_stm -> .LBrace RBrace  | -float-, unary_exp -> .unary_op unary_exp  | LeftShift, dec -> .dec_specifier init_dec_list Semicolon  | -do-, block_item -> .stm  | -long-, compound_stm -> .LBrace block_item_list RBrace  | -int-, jump_stm -> .-goto- ID  | NOT, jump_stm -> .-continue-  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -half4-, type_specifier -> .-float4-  | ID, block_item_list -> block_item_list .block_item  | Plus, compound_stm -> .LBrace RBrace  | Minus, iteration_stm -> .while LParen exp RParen stm  | -char-, iteration_stm -> .while LParen exp RParen stm  | ID, exp_stm -> .exp Semicolon  | ID, unary_exp -> .Increment unary_exp  | LE, stm -> .exp_stm  | -fixed2-, jump_stm -> .-goto- ID  | -char-, stm -> .iteration_stm  | -return-, dec -> .struct_specifier Semicolon  | -void-, block_item -> .stm  | -void-, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, compound_stm -> .LBrace block_item_list RBrace  | -struct-, stm -> .iteration_stm  | if, type_specifier -> .-void-  | ID, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, jump_stm -> .break  | -float2-, primary_exp -> .Number  | LParen, jump_stm -> .break  | -half3-, typedef_name -> .ID  | ID, selection_stm -> .if LParen exp RParen stm  | -char-, stm -> .jump_stm  | -fixed3-, postfix_exp -> .postfix_exp Decrement  | LParen, stm -> .compound_stm  | Minus, stm -> .iteration_stm  | LParen, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -void-, block_item -> .stm  | RBrace, unary_exp -> .postfix_exp  | LeftShift, )
542 <- (480, 'Semicolon') (exp_stm -> exp Semicolon.  | while, exp_stm -> exp Semicolon.  | else, )
543 <- (482, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, primary_exp -> .ID  | LT, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, unary_exp -> .unary_op unary_exp  | Semicolon, conditional_exp -> .binary_exp  | Comma, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, postfix_exp -> .primary_exp  | Increment, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, unary_exp -> .postfix_exp  | Semicolon, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, binary_exp -> .unary_exp  | LT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, binary_exp -> .unary_exp  | LE, primary_exp -> .Number  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .primary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Increment  | EQ, primary_exp -> .ID  | EQ, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Semicolon, unary_op -> .Tilde  | Number, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, postfix_exp -> .postfix_exp Dot ID  | LBrack, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, unary_exp -> .Increment unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_op -> .NOT  | Number, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | while, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, unary_exp -> .unary_op unary_exp  | Percent, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, iteration_stm -> for LParen .exp Semicolon exp Semicolon exp RParen stm  | else, conditional_exp -> .binary_exp  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | Dot, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .String  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
544 <- (483, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .Increment unary_exp  | Ampersand, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_exp -> .Decrement unary_exp  | Comma, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .primary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, binary_exp -> .unary_exp  | LE, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, assignment_exp -> .conditional_exp  | RParen, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, binary_exp -> .unary_exp  | Ampersand, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, selection_stm -> if LParen .exp RParen stm else stm  | else, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, exp -> .assignment_exp  | RParen, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, selection_stm -> if LParen .exp RParen stm else stm  | while, primary_exp -> .LParen exp RParen  | GT, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .primary_exp  | LParen, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, binary_exp -> .binary_exp binary_op unary_exp  | Question, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | RParen, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Increment, primary_exp -> .String  | Question, primary_exp -> .Number  | Percent, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, primary_exp -> .Number  | RParen, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, selection_stm -> if LParen .exp RParen stm  | while, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | Decrement, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, exp -> .exp Comma assignment_exp  | RParen, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_op -> .NOT  | Number, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | RParen, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, binary_exp -> .binary_exp binary_op unary_exp  | RParen, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .postfix_exp  | RParen, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .Number  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, selection_stm -> if LParen .exp RParen stm  | else, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, binary_exp -> .unary_exp  | LT, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .primary_exp  | Ampersand, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .unary_op unary_exp  | Assign, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .postfix_exp Dot ID  | RParen, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, unary_exp -> .Increment unary_exp  | Question, unary_exp -> .postfix_exp  | LeftShift, )
545 <- (487, 'else') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, compound_stm -> .LBrace RBrace  | while, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, stm -> .exp_stm  | while, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, exp_stm -> .Semicolon  | while, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, selection_stm -> .if LParen exp RParen stm else stm  | while, stm -> .compound_stm  | while, compound_stm -> .LBrace block_item_list RBrace  | while, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, binary_exp -> .unary_exp  | EQ, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, unary_exp -> .unary_op unary_exp  | Semicolon, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, jump_stm -> .-return- exp Semicolon  | while, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | Ampersand, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, selection_stm -> if LParen exp RParen stm else .stm  | while, primary_exp -> .Number  | AND, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, jump_stm -> .break  | while, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | Percent, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, iteration_stm -> .while LParen exp RParen stm  | while, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, binary_exp -> .unary_exp  | LE, primary_exp -> .String  | AND, postfix_exp -> .primary_exp  | Increment, jump_stm -> .-goto- ID  | while, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, jump_stm -> .-continue-  | while, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .Tilde  | Number, stm -> .jump_stm  | while, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .Number  | Semicolon, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | GE, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Comma, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, stm -> .selection_stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .Decrement unary_exp  | Percent, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp Decrement  | Assign, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, exp_stm -> .exp Semicolon  | while, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, unary_op -> .Minus  | Tilde, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, unary_exp -> .postfix_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .Decrement unary_exp  | AND, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Caret, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Dot, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | Comma, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, stm -> .iteration_stm  | while, primary_exp -> .Number  | Increment, postfix_exp -> .postfix_exp Increment  | LT, conditional_exp -> .binary_exp  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .String  | GE, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, postfix_exp -> .primary_exp  | Ampersand, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | Dot, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .String  | Decrement, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .unary_op unary_exp  | Caret, unary_exp -> .postfix_exp  | LeftShift, )
546 <- (488, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .Increment unary_exp  | Ampersand, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, postfix_exp -> .primary_exp  | LT, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .primary_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, assignment_exp -> .conditional_exp  | RParen, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, exp -> .assignment_exp  | RParen, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, iteration_stm -> while LParen .exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, binary_exp -> .binary_exp binary_op unary_exp  | Question, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | RParen, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .Tilde  | Number, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Increment, unary_op -> .Minus  | Number, primary_exp -> .Number  | Percent, unary_exp -> .unary_op unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, primary_exp -> .Number  | RParen, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, unary_exp -> .Increment unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, exp -> .exp Comma assignment_exp  | RParen, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, iteration_stm -> while LParen .exp RParen stm  | else, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, primary_exp -> .Number  | Dot, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Decrement  | RParen, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, binary_exp -> .binary_exp binary_op unary_exp  | RParen, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .postfix_exp  | RParen, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Caret, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, binary_exp -> .unary_exp  | LT, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Ampersand, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .postfix_exp Dot ID  | RParen, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .String  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
547 <- (489, 'Semicolon') (iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | ID, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -half3-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -float3-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | for, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -return-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -struct-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -sampler2D-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -int-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -goto-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -do-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | if, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -half4-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -short-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -fixed4-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -double-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | String, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | Tilde, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -void-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -long-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | Minus, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | LBrace, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | while, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -fixed2-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -uniform-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -float4-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -fixed3-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | NOT, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | Semicolon, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -float2-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -float-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -continue-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | break, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -half2-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | RBrace, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | LParen, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -char-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | Decrement, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | Increment, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | Plus, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | Number, )
548 <- (495, 'RBrack') (postfix_exp -> postfix_exp LBrack exp RBrack.  | NEQ, postfix_exp -> postfix_exp LBrack exp RBrack.  | Plus, postfix_exp -> postfix_exp LBrack exp RBrack.  | Question, postfix_exp -> postfix_exp LBrack exp RBrack.  | LT, postfix_exp -> postfix_exp LBrack exp RBrack.  | LParen, postfix_exp -> postfix_exp LBrack exp RBrack.  | VerticalBar, postfix_exp -> postfix_exp LBrack exp RBrack.  | AND, postfix_exp -> postfix_exp LBrack exp RBrack.  | EQ, postfix_exp -> postfix_exp LBrack exp RBrack.  | Times, postfix_exp -> postfix_exp LBrack exp RBrack.  | LBrack, postfix_exp -> postfix_exp LBrack exp RBrack.  | Increment, postfix_exp -> postfix_exp LBrack exp RBrack.  | OR, postfix_exp -> postfix_exp LBrack exp RBrack.  | Caret, postfix_exp -> postfix_exp LBrack exp RBrack.  | Dot, postfix_exp -> postfix_exp LBrack exp RBrack.  | RightShift, postfix_exp -> postfix_exp LBrack exp RBrack.  | Percent, postfix_exp -> postfix_exp LBrack exp RBrack.  | Ampersand, postfix_exp -> postfix_exp LBrack exp RBrack.  | GT, postfix_exp -> postfix_exp LBrack exp RBrack.  | GE, postfix_exp -> postfix_exp LBrack exp RBrack.  | Minus, postfix_exp -> postfix_exp LBrack exp RBrack.  | Comma, postfix_exp -> postfix_exp LBrack exp RBrack.  | LeftShift, postfix_exp -> postfix_exp LBrack exp RBrack.  | Divide, postfix_exp -> postfix_exp LBrack exp RBrack.  | LE, postfix_exp -> postfix_exp LBrack exp RBrack.  | RParen, postfix_exp -> postfix_exp LBrack exp RBrack.  | Decrement, )
549 <- (497, 'RParen') (postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Comma, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Increment, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LeftShift, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | OR, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LParen, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | RParen, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | RightShift, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Minus, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Caret, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | EQ, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | VerticalBar, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Plus, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | GT, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Ampersand, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Dot, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Question, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LT, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Percent, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Times, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Decrement, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | NEQ, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LBrack, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | AND, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Divide, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | GE, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LE, )
550 <- (498, 'conditional_exp') (conditional_exp -> binary_exp Question exp Colon conditional_exp.  | Comma, conditional_exp -> binary_exp Question exp Colon conditional_exp.  | Colon, )
551 <- (498, 'unary_exp') (binary_exp -> unary_exp.  | Caret, binary_exp -> unary_exp.  | RightShift, binary_exp -> unary_exp.  | Percent, binary_exp -> unary_exp.  | GE, binary_exp -> unary_exp.  | Times, binary_exp -> unary_exp.  | Comma, binary_exp -> unary_exp.  | Minus, binary_exp -> unary_exp.  | GT, binary_exp -> unary_exp.  | LeftShift, binary_exp -> unary_exp.  | AND, binary_exp -> unary_exp.  | EQ, binary_exp -> unary_exp.  | LE, binary_exp -> unary_exp.  | LT, binary_exp -> unary_exp.  | Divide, binary_exp -> unary_exp.  | Colon, binary_exp -> unary_exp.  | Question, binary_exp -> unary_exp.  | NEQ, binary_exp -> unary_exp.  | OR, binary_exp -> unary_exp.  | Plus, binary_exp -> unary_exp.  | Ampersand, binary_exp -> unary_exp.  | VerticalBar, )
552 <- (501, 'RParen') (primary_exp -> LParen exp RParen.  | Percent, primary_exp -> LParen exp RParen.  | Minus, primary_exp -> LParen exp RParen.  | Increment, primary_exp -> LParen exp RParen.  | Question, primary_exp -> LParen exp RParen.  | Colon, primary_exp -> LParen exp RParen.  | LT, primary_exp -> LParen exp RParen.  | GT, primary_exp -> LParen exp RParen.  | AND, primary_exp -> LParen exp RParen.  | Caret, primary_exp -> LParen exp RParen.  | Decrement, primary_exp -> LParen exp RParen.  | NEQ, primary_exp -> LParen exp RParen.  | Divide, primary_exp -> LParen exp RParen.  | Dot, primary_exp -> LParen exp RParen.  | LParen, primary_exp -> LParen exp RParen.  | GE, primary_exp -> LParen exp RParen.  | VerticalBar, primary_exp -> LParen exp RParen.  | LBrack, primary_exp -> LParen exp RParen.  | OR, primary_exp -> LParen exp RParen.  | EQ, primary_exp -> LParen exp RParen.  | LE, primary_exp -> LParen exp RParen.  | Comma, primary_exp -> LParen exp RParen.  | Times, primary_exp -> LParen exp RParen.  | Ampersand, primary_exp -> LParen exp RParen.  | RightShift, primary_exp -> LParen exp RParen.  | LeftShift, primary_exp -> LParen exp RParen.  | Plus, )
553 <- (503, 'ID') (postfix_exp -> postfix_exp Dot ID.  | OR, postfix_exp -> postfix_exp Dot ID.  | Times, postfix_exp -> postfix_exp Dot ID.  | Percent, postfix_exp -> postfix_exp Dot ID.  | AND, postfix_exp -> postfix_exp Dot ID.  | Plus, postfix_exp -> postfix_exp Dot ID.  | Ampersand, postfix_exp -> postfix_exp Dot ID.  | VerticalBar, postfix_exp -> postfix_exp Dot ID.  | Colon, postfix_exp -> postfix_exp Dot ID.  | Caret, postfix_exp -> postfix_exp Dot ID.  | LT, postfix_exp -> postfix_exp Dot ID.  | GT, postfix_exp -> postfix_exp Dot ID.  | Divide, postfix_exp -> postfix_exp Dot ID.  | Increment, postfix_exp -> postfix_exp Dot ID.  | Minus, postfix_exp -> postfix_exp Dot ID.  | EQ, postfix_exp -> postfix_exp Dot ID.  | Decrement, postfix_exp -> postfix_exp Dot ID.  | GE, postfix_exp -> postfix_exp Dot ID.  | LeftShift, postfix_exp -> postfix_exp Dot ID.  | Dot, postfix_exp -> postfix_exp Dot ID.  | LBrack, postfix_exp -> postfix_exp Dot ID.  | Comma, postfix_exp -> postfix_exp Dot ID.  | NEQ, postfix_exp -> postfix_exp Dot ID.  | RightShift, postfix_exp -> postfix_exp Dot ID.  | LParen, postfix_exp -> postfix_exp Dot ID.  | LE, postfix_exp -> postfix_exp Dot ID.  | Question, )
554 <- (505, 'exp') (postfix_exp -> postfix_exp LBrack exp .RBrack  | Caret, postfix_exp -> postfix_exp LBrack exp .RBrack  | Question, postfix_exp -> postfix_exp LBrack exp .RBrack  | EQ, postfix_exp -> postfix_exp LBrack exp .RBrack  | LBrack, postfix_exp -> postfix_exp LBrack exp .RBrack  | AND, postfix_exp -> postfix_exp LBrack exp .RBrack  | Decrement, postfix_exp -> postfix_exp LBrack exp .RBrack  | LeftShift, exp -> exp .Comma assignment_exp  | RBrack, postfix_exp -> postfix_exp LBrack exp .RBrack  | Percent, postfix_exp -> postfix_exp LBrack exp .RBrack  | Increment, postfix_exp -> postfix_exp LBrack exp .RBrack  | Ampersand, postfix_exp -> postfix_exp LBrack exp .RBrack  | RightShift, exp -> exp .Comma assignment_exp  | Comma, postfix_exp -> postfix_exp LBrack exp .RBrack  | OR, postfix_exp -> postfix_exp LBrack exp .RBrack  | Divide, postfix_exp -> postfix_exp LBrack exp .RBrack  | Minus, postfix_exp -> postfix_exp LBrack exp .RBrack  | GT, postfix_exp -> postfix_exp LBrack exp .RBrack  | Comma, postfix_exp -> postfix_exp LBrack exp .RBrack  | NEQ, postfix_exp -> postfix_exp LBrack exp .RBrack  | Colon, postfix_exp -> postfix_exp LBrack exp .RBrack  | Plus, postfix_exp -> postfix_exp LBrack exp .RBrack  | LParen, postfix_exp -> postfix_exp LBrack exp .RBrack  | LT, postfix_exp -> postfix_exp LBrack exp .RBrack  | Times, postfix_exp -> postfix_exp LBrack exp .RBrack  | LE, postfix_exp -> postfix_exp LBrack exp .RBrack  | VerticalBar, postfix_exp -> postfix_exp LBrack exp .RBrack  | GE, postfix_exp -> postfix_exp LBrack exp .RBrack  | Dot, )
555 <- (506, 'RParen') (postfix_exp -> postfix_exp LParen RParen.  | Comma, postfix_exp -> postfix_exp LParen RParen.  | GE, postfix_exp -> postfix_exp LParen RParen.  | Decrement, postfix_exp -> postfix_exp LParen RParen.  | Divide, postfix_exp -> postfix_exp LParen RParen.  | Question, postfix_exp -> postfix_exp LParen RParen.  | LE, postfix_exp -> postfix_exp LParen RParen.  | LT, postfix_exp -> postfix_exp LParen RParen.  | LeftShift, postfix_exp -> postfix_exp LParen RParen.  | Percent, postfix_exp -> postfix_exp LParen RParen.  | GT, postfix_exp -> postfix_exp LParen RParen.  | RightShift, postfix_exp -> postfix_exp LParen RParen.  | Ampersand, postfix_exp -> postfix_exp LParen RParen.  | Minus, postfix_exp -> postfix_exp LParen RParen.  | Plus, postfix_exp -> postfix_exp LParen RParen.  | LParen, postfix_exp -> postfix_exp LParen RParen.  | OR, postfix_exp -> postfix_exp LParen RParen.  | Colon, postfix_exp -> postfix_exp LParen RParen.  | NEQ, postfix_exp -> postfix_exp LParen RParen.  | LBrack, postfix_exp -> postfix_exp LParen RParen.  | Increment, postfix_exp -> postfix_exp LParen RParen.  | Caret, postfix_exp -> postfix_exp LParen RParen.  | AND, postfix_exp -> postfix_exp LParen RParen.  | Dot, postfix_exp -> postfix_exp LParen RParen.  | EQ, postfix_exp -> postfix_exp LParen RParen.  | Times, postfix_exp -> postfix_exp LParen RParen.  | VerticalBar, )
556 <- (506, 'argument_exp_list') (postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LBrack, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | GE, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | NEQ, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Times, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Plus, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Divide, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Increment, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | GT, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Question, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | EQ, argument_exp_list -> argument_exp_list .Comma assignment_exp  | RParen, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | VerticalBar, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LT, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Dot, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Decrement, argument_exp_list -> argument_exp_list .Comma assignment_exp  | Comma, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Caret, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Percent, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LeftShift, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | RightShift, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Colon, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LParen, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Minus, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | OR, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Comma, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Ampersand, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LE, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | AND, )
557 <- (512, 'exp') (iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -struct-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -float2-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | RBrace, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -short-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -fixed2-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | LParen, exp -> exp .Comma assignment_exp  | RParen, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -return-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -float-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | Minus, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -do-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -fixed3-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -continue-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -char-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | for, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | while, exp -> exp .Comma assignment_exp  | Comma, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -float4-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -double-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | break, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | Number, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -long-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | if, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -half3-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -float3-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | Increment, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -fixed4-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | NOT, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -half2-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | Plus, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -int-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | Tilde, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | String, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | LBrace, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | ID, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -sampler2D-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | Semicolon, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -uniform-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -void-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -goto-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | Decrement, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -half4-, )
558 <- (513, 'while') (iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -long-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -sampler2D-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | Plus, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -continue-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | else, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | NOT, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -double-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | String, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | Minus, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | Semicolon, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | for, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -half3-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -float4-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -float3-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -float2-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -void-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -char-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | Tilde, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | while, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | Decrement, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | RBrace, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -fixed4-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -fixed2-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -uniform-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | LParen, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -half4-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -half2-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -goto-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -int-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | if, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -float-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | break, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -do-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -struct-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | Increment, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | Number, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | LBrace, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -fixed3-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -return-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | -short-, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | ID, )
559 <- (515, 'Semicolon') (jump_stm -> -return- exp Semicolon.  | RBrace, jump_stm -> -return- exp Semicolon.  | -int-, jump_stm -> -return- exp Semicolon.  | -float-, jump_stm -> -return- exp Semicolon.  | NOT, jump_stm -> -return- exp Semicolon.  | Decrement, jump_stm -> -return- exp Semicolon.  | Plus, jump_stm -> -return- exp Semicolon.  | else, jump_stm -> -return- exp Semicolon.  | -fixed3-, jump_stm -> -return- exp Semicolon.  | String, jump_stm -> -return- exp Semicolon.  | -sampler2D-, jump_stm -> -return- exp Semicolon.  | -half2-, jump_stm -> -return- exp Semicolon.  | -short-, jump_stm -> -return- exp Semicolon.  | break, jump_stm -> -return- exp Semicolon.  | -double-, jump_stm -> -return- exp Semicolon.  | -float4-, jump_stm -> -return- exp Semicolon.  | -return-, jump_stm -> -return- exp Semicolon.  | -long-, jump_stm -> -return- exp Semicolon.  | Semicolon, jump_stm -> -return- exp Semicolon.  | LParen, jump_stm -> -return- exp Semicolon.  | -void-, jump_stm -> -return- exp Semicolon.  | -fixed2-, jump_stm -> -return- exp Semicolon.  | -float3-, jump_stm -> -return- exp Semicolon.  | -do-, jump_stm -> -return- exp Semicolon.  | Tilde, jump_stm -> -return- exp Semicolon.  | -continue-, jump_stm -> -return- exp Semicolon.  | -fixed4-, jump_stm -> -return- exp Semicolon.  | Increment, jump_stm -> -return- exp Semicolon.  | while, jump_stm -> -return- exp Semicolon.  | -struct-, jump_stm -> -return- exp Semicolon.  | Number, jump_stm -> -return- exp Semicolon.  | -float2-, jump_stm -> -return- exp Semicolon.  | if, jump_stm -> -return- exp Semicolon.  | for, jump_stm -> -return- exp Semicolon.  | -char-, jump_stm -> -return- exp Semicolon.  | LBrace, jump_stm -> -return- exp Semicolon.  | -half4-, jump_stm -> -return- exp Semicolon.  | ID, jump_stm -> -return- exp Semicolon.  | -uniform-, jump_stm -> -return- exp Semicolon.  | -goto-, jump_stm -> -return- exp Semicolon.  | Minus, jump_stm -> -return- exp Semicolon.  | -half3-, )
560 <- (517, 'RBrace') (compound_stm -> LBrace block_item_list RBrace.  | -do-, compound_stm -> LBrace block_item_list RBrace.  | Semicolon, compound_stm -> LBrace block_item_list RBrace.  | NOT, compound_stm -> LBrace block_item_list RBrace.  | -double-, compound_stm -> LBrace block_item_list RBrace.  | -return-, compound_stm -> LBrace block_item_list RBrace.  | -char-, compound_stm -> LBrace block_item_list RBrace.  | -float3-, compound_stm -> LBrace block_item_list RBrace.  | -half4-, compound_stm -> LBrace block_item_list RBrace.  | Number, compound_stm -> LBrace block_item_list RBrace.  | -uniform-, compound_stm -> LBrace block_item_list RBrace.  | Increment, compound_stm -> LBrace block_item_list RBrace.  | LParen, compound_stm -> LBrace block_item_list RBrace.  | Plus, compound_stm -> LBrace block_item_list RBrace.  | -half3-, compound_stm -> LBrace block_item_list RBrace.  | else, compound_stm -> LBrace block_item_list RBrace.  | -short-, compound_stm -> LBrace block_item_list RBrace.  | RBrace, compound_stm -> LBrace block_item_list RBrace.  | -int-, compound_stm -> LBrace block_item_list RBrace.  | while, compound_stm -> LBrace block_item_list RBrace.  | ID, compound_stm -> LBrace block_item_list RBrace.  | Tilde, compound_stm -> LBrace block_item_list RBrace.  | -float-, compound_stm -> LBrace block_item_list RBrace.  | -sampler2D-, compound_stm -> LBrace block_item_list RBrace.  | break, compound_stm -> LBrace block_item_list RBrace.  | -goto-, compound_stm -> LBrace block_item_list RBrace.  | -float2-, compound_stm -> LBrace block_item_list RBrace.  | Minus, compound_stm -> LBrace block_item_list RBrace.  | -struct-, compound_stm -> LBrace block_item_list RBrace.  | for, compound_stm -> LBrace block_item_list RBrace.  | -continue-, compound_stm -> LBrace block_item_list RBrace.  | -void-, compound_stm -> LBrace block_item_list RBrace.  | -half2-, compound_stm -> LBrace block_item_list RBrace.  | -fixed4-, compound_stm -> LBrace block_item_list RBrace.  | -long-, compound_stm -> LBrace block_item_list RBrace.  | -fixed2-, compound_stm -> LBrace block_item_list RBrace.  | -fixed3-, compound_stm -> LBrace block_item_list RBrace.  | -float4-, compound_stm -> LBrace block_item_list RBrace.  | LBrace, compound_stm -> LBrace block_item_list RBrace.  | Decrement, compound_stm -> LBrace block_item_list RBrace.  | String, compound_stm -> LBrace block_item_list RBrace.  | if, )
561 <- (519, 'exp') (iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | break, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -float2-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -half3-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -half2-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -fixed4-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | Number, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -continue-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | for, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | Minus, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | Tilde, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -void-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | ID, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | LBrace, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | LParen, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | RBrace, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | Increment, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -fixed2-, exp -> exp .Comma assignment_exp  | Comma, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -int-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -short-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -sampler2D-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | String, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | NOT, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -goto-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -struct-, exp -> exp .Comma assignment_exp  | Semicolon, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -uniform-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -long-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -float-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -char-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -fixed3-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -do-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -float3-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | while, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -double-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | if, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -return-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | Semicolon, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | else, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -half4-, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | Plus, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | Decrement, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | -float4-, )
562 <- (520, 'exp') (selection_stm -> if LParen exp .RParen stm  | -float4-, selection_stm -> if LParen exp .RParen stm else stm  | -float2-, selection_stm -> if LParen exp .RParen stm  | -float2-, selection_stm -> if LParen exp .RParen stm  | -int-, selection_stm -> if LParen exp .RParen stm else stm  | ID, selection_stm -> if LParen exp .RParen stm else stm  | -half4-, selection_stm -> if LParen exp .RParen stm  | -goto-, selection_stm -> if LParen exp .RParen stm  | else, selection_stm -> if LParen exp .RParen stm else stm  | -do-, selection_stm -> if LParen exp .RParen stm  | String, selection_stm -> if LParen exp .RParen stm else stm  | for, selection_stm -> if LParen exp .RParen stm  | -float-, selection_stm -> if LParen exp .RParen stm  | -char-, selection_stm -> if LParen exp .RParen stm  | -return-, selection_stm -> if LParen exp .RParen stm  | -half4-, selection_stm -> if LParen exp .RParen stm else stm  | -uniform-, selection_stm -> if LParen exp .RParen stm else stm  | RBrace, exp -> exp .Comma assignment_exp  | Comma, selection_stm -> if LParen exp .RParen stm  | LParen, selection_stm -> if LParen exp .RParen stm else stm  | -struct-, selection_stm -> if LParen exp .RParen stm  | LBrace, selection_stm -> if LParen exp .RParen stm else stm  | -fixed4-, selection_stm -> if LParen exp .RParen stm  | Decrement, selection_stm -> if LParen exp .RParen stm else stm  | LParen, selection_stm -> if LParen exp .RParen stm  | -fixed2-, selection_stm -> if LParen exp .RParen stm  | -half2-, selection_stm -> if LParen exp .RParen stm  | if, selection_stm -> if LParen exp .RParen stm else stm  | -double-, selection_stm -> if LParen exp .RParen stm  | -half3-, selection_stm -> if LParen exp .RParen stm else stm  | Plus, selection_stm -> if LParen exp .RParen stm else stm  | -void-, selection_stm -> if LParen exp .RParen stm else stm  | NOT, selection_stm -> if LParen exp .RParen stm  | -fixed4-, exp -> exp .Comma assignment_exp  | RParen, selection_stm -> if LParen exp .RParen stm  | -struct-, selection_stm -> if LParen exp .RParen stm  | Semicolon, selection_stm -> if LParen exp .RParen stm  | for, selection_stm -> if LParen exp .RParen stm  | Minus, selection_stm -> if LParen exp .RParen stm  | -sampler2D-, selection_stm -> if LParen exp .RParen stm  | Tilde, selection_stm -> if LParen exp .RParen stm  | RBrace, selection_stm -> if LParen exp .RParen stm else stm  | Minus, selection_stm -> if LParen exp .RParen stm else stm  | -return-, selection_stm -> if LParen exp .RParen stm  | Plus, selection_stm -> if LParen exp .RParen stm  | Number, selection_stm -> if LParen exp .RParen stm else stm  | -float4-, selection_stm -> if LParen exp .RParen stm  | while, selection_stm -> if LParen exp .RParen stm else stm  | -short-, selection_stm -> if LParen exp .RParen stm else stm  | -long-, selection_stm -> if LParen exp .RParen stm  | -do-, selection_stm -> if LParen exp .RParen stm  | -void-, selection_stm -> if LParen exp .RParen stm else stm  | -int-, selection_stm -> if LParen exp .RParen stm  | ID, selection_stm -> if LParen exp .RParen stm else stm  | Tilde, selection_stm -> if LParen exp .RParen stm else stm  | -fixed2-, selection_stm -> if LParen exp .RParen stm else stm  | -fixed3-, selection_stm -> if LParen exp .RParen stm else stm  | -sampler2D-, selection_stm -> if LParen exp .RParen stm else stm  | -continue-, selection_stm -> if LParen exp .RParen stm else stm  | LBrace, selection_stm -> if LParen exp .RParen stm else stm  | -goto-, selection_stm -> if LParen exp .RParen stm  | break, selection_stm -> if LParen exp .RParen stm  | -continue-, selection_stm -> if LParen exp .RParen stm else stm  | Increment, selection_stm -> if LParen exp .RParen stm  | -double-, selection_stm -> if LParen exp .RParen stm else stm  | while, selection_stm -> if LParen exp .RParen stm else stm  | -half2-, selection_stm -> if LParen exp .RParen stm  | -long-, selection_stm -> if LParen exp .RParen stm else stm  | if, selection_stm -> if LParen exp .RParen stm  | Increment, selection_stm -> if LParen exp .RParen stm  | -float3-, selection_stm -> if LParen exp .RParen stm  | -fixed3-, selection_stm -> if LParen exp .RParen stm else stm  | break, selection_stm -> if LParen exp .RParen stm else stm  | String, selection_stm -> if LParen exp .RParen stm else stm  | Decrement, selection_stm -> if LParen exp .RParen stm else stm  | -char-, selection_stm -> if LParen exp .RParen stm else stm  | -half3-, selection_stm -> if LParen exp .RParen stm  | -uniform-, selection_stm -> if LParen exp .RParen stm else stm  | Semicolon, selection_stm -> if LParen exp .RParen stm else stm  | else, selection_stm -> if LParen exp .RParen stm  | NOT, selection_stm -> if LParen exp .RParen stm else stm  | Number, selection_stm -> if LParen exp .RParen stm  | -short-, selection_stm -> if LParen exp .RParen stm else stm  | -float-, selection_stm -> if LParen exp .RParen stm else stm  | -float3-, )
563 <- (521, 'stm') (selection_stm -> if LParen exp RParen stm else stm.  | -return-, selection_stm -> if LParen exp RParen stm else stm.  | -float3-, selection_stm -> if LParen exp RParen stm else stm.  | Plus, selection_stm -> if LParen exp RParen stm else stm.  | -fixed2-, selection_stm -> if LParen exp RParen stm else stm.  | -continue-, selection_stm -> if LParen exp RParen stm else stm.  | for, selection_stm -> if LParen exp RParen stm else stm.  | Tilde, selection_stm -> if LParen exp RParen stm else stm.  | -float4-, selection_stm -> if LParen exp RParen stm else stm.  | -fixed3-, selection_stm -> if LParen exp RParen stm else stm.  | -do-, selection_stm -> if LParen exp RParen stm else stm.  | Decrement, selection_stm -> if LParen exp RParen stm else stm.  | -half2-, selection_stm -> if LParen exp RParen stm else stm.  | LBrace, selection_stm -> if LParen exp RParen stm else stm.  | -half3-, selection_stm -> if LParen exp RParen stm else stm.  | -struct-, selection_stm -> if LParen exp RParen stm else stm.  | while, selection_stm -> if LParen exp RParen stm else stm.  | String, selection_stm -> if LParen exp RParen stm else stm.  | NOT, selection_stm -> if LParen exp RParen stm else stm.  | break, selection_stm -> if LParen exp RParen stm else stm.  | Number, selection_stm -> if LParen exp RParen stm else stm.  | -half4-, selection_stm -> if LParen exp RParen stm else stm.  | -double-, selection_stm -> if LParen exp RParen stm else stm.  | Minus, selection_stm -> if LParen exp RParen stm else stm.  | LParen, selection_stm -> if LParen exp RParen stm else stm.  | RBrace, selection_stm -> if LParen exp RParen stm else stm.  | Increment, selection_stm -> if LParen exp RParen stm else stm.  | if, selection_stm -> if LParen exp RParen stm else stm.  | -sampler2D-, selection_stm -> if LParen exp RParen stm else stm.  | -short-, selection_stm -> if LParen exp RParen stm else stm.  | -uniform-, selection_stm -> if LParen exp RParen stm else stm.  | -void-, selection_stm -> if LParen exp RParen stm else stm.  | -int-, selection_stm -> if LParen exp RParen stm else stm.  | -float-, selection_stm -> if LParen exp RParen stm else stm.  | -char-, selection_stm -> if LParen exp RParen stm else stm.  | Semicolon, selection_stm -> if LParen exp RParen stm else stm.  | -fixed4-, selection_stm -> if LParen exp RParen stm else stm.  | -float2-, selection_stm -> if LParen exp RParen stm else stm.  | -long-, selection_stm -> if LParen exp RParen stm else stm.  | -goto-, selection_stm -> if LParen exp RParen stm else stm.  | ID, )
564 <- (522, 'exp') (iteration_stm -> while LParen exp .RParen stm  | LParen, iteration_stm -> while LParen exp .RParen stm  | -continue-, iteration_stm -> while LParen exp .RParen stm  | -return-, iteration_stm -> while LParen exp .RParen stm  | if, iteration_stm -> while LParen exp .RParen stm  | NOT, iteration_stm -> while LParen exp .RParen stm  | -int-, iteration_stm -> while LParen exp .RParen stm  | -fixed4-, iteration_stm -> while LParen exp .RParen stm  | -float2-, iteration_stm -> while LParen exp .RParen stm  | -half4-, iteration_stm -> while LParen exp .RParen stm  | LBrace, iteration_stm -> while LParen exp .RParen stm  | break, iteration_stm -> while LParen exp .RParen stm  | String, iteration_stm -> while LParen exp .RParen stm  | -fixed3-, iteration_stm -> while LParen exp .RParen stm  | Tilde, iteration_stm -> while LParen exp .RParen stm  | -char-, iteration_stm -> while LParen exp .RParen stm  | -double-, iteration_stm -> while LParen exp .RParen stm  | -void-, iteration_stm -> while LParen exp .RParen stm  | -float-, exp -> exp .Comma assignment_exp  | Comma, iteration_stm -> while LParen exp .RParen stm  | -float3-, iteration_stm -> while LParen exp .RParen stm  | -do-, iteration_stm -> while LParen exp .RParen stm  | -struct-, iteration_stm -> while LParen exp .RParen stm  | ID, iteration_stm -> while LParen exp .RParen stm  | -fixed2-, iteration_stm -> while LParen exp .RParen stm  | -sampler2D-, iteration_stm -> while LParen exp .RParen stm  | -half3-, iteration_stm -> while LParen exp .RParen stm  | -short-, iteration_stm -> while LParen exp .RParen stm  | Semicolon, iteration_stm -> while LParen exp .RParen stm  | RBrace, iteration_stm -> while LParen exp .RParen stm  | -float4-, iteration_stm -> while LParen exp .RParen stm  | -half2-, iteration_stm -> while LParen exp .RParen stm  | -goto-, iteration_stm -> while LParen exp .RParen stm  | else, iteration_stm -> while LParen exp .RParen stm  | Increment, iteration_stm -> while LParen exp .RParen stm  | for, iteration_stm -> while LParen exp .RParen stm  | Number, exp -> exp .Comma assignment_exp  | RParen, iteration_stm -> while LParen exp .RParen stm  | Decrement, iteration_stm -> while LParen exp .RParen stm  | -uniform-, iteration_stm -> while LParen exp .RParen stm  | Minus, iteration_stm -> while LParen exp .RParen stm  | -long-, iteration_stm -> while LParen exp .RParen stm  | Plus, iteration_stm -> while LParen exp .RParen stm  | while, )
565 <- (523, 'conditional_exp') (conditional_exp -> binary_exp Question exp Colon conditional_exp.  | RBrack, conditional_exp -> binary_exp Question exp Colon conditional_exp.  | Comma, )
566 <- (523, 'unary_exp') (binary_exp -> unary_exp.  | Caret, binary_exp -> unary_exp.  | Percent, binary_exp -> unary_exp.  | GE, binary_exp -> unary_exp.  | Times, binary_exp -> unary_exp.  | Comma, binary_exp -> unary_exp.  | Minus, binary_exp -> unary_exp.  | Plus, binary_exp -> unary_exp.  | GT, binary_exp -> unary_exp.  | LeftShift, binary_exp -> unary_exp.  | AND, binary_exp -> unary_exp.  | EQ, binary_exp -> unary_exp.  | LE, binary_exp -> unary_exp.  | LT, binary_exp -> unary_exp.  | Divide, binary_exp -> unary_exp.  | RightShift, binary_exp -> unary_exp.  | Question, binary_exp -> unary_exp.  | RBrack, binary_exp -> unary_exp.  | OR, binary_exp -> unary_exp.  | NEQ, binary_exp -> unary_exp.  | Ampersand, binary_exp -> unary_exp.  | VerticalBar, )
567 <- (526, 'RParen') (primary_exp -> LParen exp RParen.  | Percent, primary_exp -> LParen exp RParen.  | Minus, primary_exp -> LParen exp RParen.  | Question, primary_exp -> LParen exp RParen.  | LT, primary_exp -> LParen exp RParen.  | GT, primary_exp -> LParen exp RParen.  | AND, primary_exp -> LParen exp RParen.  | Caret, primary_exp -> LParen exp RParen.  | Decrement, primary_exp -> LParen exp RParen.  | NEQ, primary_exp -> LParen exp RParen.  | Divide, primary_exp -> LParen exp RParen.  | Dot, primary_exp -> LParen exp RParen.  | LParen, primary_exp -> LParen exp RParen.  | GE, primary_exp -> LParen exp RParen.  | VerticalBar, primary_exp -> LParen exp RParen.  | OR, primary_exp -> LParen exp RParen.  | LBrack, primary_exp -> LParen exp RParen.  | Plus, primary_exp -> LParen exp RParen.  | EQ, primary_exp -> LParen exp RParen.  | LE, primary_exp -> LParen exp RParen.  | Comma, primary_exp -> LParen exp RParen.  | Times, primary_exp -> LParen exp RParen.  | Ampersand, primary_exp -> LParen exp RParen.  | RBrack, primary_exp -> LParen exp RParen.  | RightShift, primary_exp -> LParen exp RParen.  | LeftShift, primary_exp -> LParen exp RParen.  | Increment, )
568 <- (528, 'ID') (postfix_exp -> postfix_exp Dot ID.  | OR, postfix_exp -> postfix_exp Dot ID.  | RBrack, postfix_exp -> postfix_exp Dot ID.  | Times, postfix_exp -> postfix_exp Dot ID.  | Percent, postfix_exp -> postfix_exp Dot ID.  | AND, postfix_exp -> postfix_exp Dot ID.  | Plus, postfix_exp -> postfix_exp Dot ID.  | Ampersand, postfix_exp -> postfix_exp Dot ID.  | VerticalBar, postfix_exp -> postfix_exp Dot ID.  | Caret, postfix_exp -> postfix_exp Dot ID.  | LParen, postfix_exp -> postfix_exp Dot ID.  | GT, postfix_exp -> postfix_exp Dot ID.  | Divide, postfix_exp -> postfix_exp Dot ID.  | Increment, postfix_exp -> postfix_exp Dot ID.  | Minus, postfix_exp -> postfix_exp Dot ID.  | EQ, postfix_exp -> postfix_exp Dot ID.  | Decrement, postfix_exp -> postfix_exp Dot ID.  | GE, postfix_exp -> postfix_exp Dot ID.  | LeftShift, postfix_exp -> postfix_exp Dot ID.  | Dot, postfix_exp -> postfix_exp Dot ID.  | LBrack, postfix_exp -> postfix_exp Dot ID.  | Comma, postfix_exp -> postfix_exp Dot ID.  | NEQ, postfix_exp -> postfix_exp Dot ID.  | RightShift, postfix_exp -> postfix_exp Dot ID.  | LT, postfix_exp -> postfix_exp Dot ID.  | LE, postfix_exp -> postfix_exp Dot ID.  | Question, )
569 <- (530, 'exp') (postfix_exp -> postfix_exp LBrack exp .RBrack  | Caret, postfix_exp -> postfix_exp LBrack exp .RBrack  | Question, postfix_exp -> postfix_exp LBrack exp .RBrack  | RBrack, postfix_exp -> postfix_exp LBrack exp .RBrack  | EQ, postfix_exp -> postfix_exp LBrack exp .RBrack  | LBrack, postfix_exp -> postfix_exp LBrack exp .RBrack  | AND, postfix_exp -> postfix_exp LBrack exp .RBrack  | Decrement, postfix_exp -> postfix_exp LBrack exp .RBrack  | LeftShift, exp -> exp .Comma assignment_exp  | RBrack, postfix_exp -> postfix_exp LBrack exp .RBrack  | Percent, postfix_exp -> postfix_exp LBrack exp .RBrack  | Increment, postfix_exp -> postfix_exp LBrack exp .RBrack  | Ampersand, postfix_exp -> postfix_exp LBrack exp .RBrack  | RightShift, exp -> exp .Comma assignment_exp  | Comma, postfix_exp -> postfix_exp LBrack exp .RBrack  | OR, postfix_exp -> postfix_exp LBrack exp .RBrack  | Divide, postfix_exp -> postfix_exp LBrack exp .RBrack  | Minus, postfix_exp -> postfix_exp LBrack exp .RBrack  | GT, postfix_exp -> postfix_exp LBrack exp .RBrack  | Comma, postfix_exp -> postfix_exp LBrack exp .RBrack  | NEQ, postfix_exp -> postfix_exp LBrack exp .RBrack  | Plus, postfix_exp -> postfix_exp LBrack exp .RBrack  | LParen, postfix_exp -> postfix_exp LBrack exp .RBrack  | LT, postfix_exp -> postfix_exp LBrack exp .RBrack  | Times, postfix_exp -> postfix_exp LBrack exp .RBrack  | LE, postfix_exp -> postfix_exp LBrack exp .RBrack  | VerticalBar, postfix_exp -> postfix_exp LBrack exp .RBrack  | GE, postfix_exp -> postfix_exp LBrack exp .RBrack  | Dot, )
570 <- (531, 'RParen') (postfix_exp -> postfix_exp LParen RParen.  | Comma, postfix_exp -> postfix_exp LParen RParen.  | GE, postfix_exp -> postfix_exp LParen RParen.  | Decrement, postfix_exp -> postfix_exp LParen RParen.  | NEQ, postfix_exp -> postfix_exp LParen RParen.  | Divide, postfix_exp -> postfix_exp LParen RParen.  | Question, postfix_exp -> postfix_exp LParen RParen.  | LE, postfix_exp -> postfix_exp LParen RParen.  | LT, postfix_exp -> postfix_exp LParen RParen.  | LeftShift, postfix_exp -> postfix_exp LParen RParen.  | Caret, postfix_exp -> postfix_exp LParen RParen.  | GT, postfix_exp -> postfix_exp LParen RParen.  | Percent, postfix_exp -> postfix_exp LParen RParen.  | Ampersand, postfix_exp -> postfix_exp LParen RParen.  | Minus, postfix_exp -> postfix_exp LParen RParen.  | Plus, postfix_exp -> postfix_exp LParen RParen.  | LParen, postfix_exp -> postfix_exp LParen RParen.  | OR, postfix_exp -> postfix_exp LParen RParen.  | RBrack, postfix_exp -> postfix_exp LParen RParen.  | LBrack, postfix_exp -> postfix_exp LParen RParen.  | Increment, postfix_exp -> postfix_exp LParen RParen.  | RightShift, postfix_exp -> postfix_exp LParen RParen.  | AND, postfix_exp -> postfix_exp LParen RParen.  | Dot, postfix_exp -> postfix_exp LParen RParen.  | EQ, postfix_exp -> postfix_exp LParen RParen.  | Times, postfix_exp -> postfix_exp LParen RParen.  | VerticalBar, )
571 <- (531, 'argument_exp_list') (postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LBrack, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | GE, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | NEQ, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Times, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Plus, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Divide, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Increment, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | EQ, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Question, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | GT, argument_exp_list -> argument_exp_list .Comma assignment_exp  | RParen, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | VerticalBar, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LT, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Dot, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Decrement, argument_exp_list -> argument_exp_list .Comma assignment_exp  | Comma, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Caret, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Percent, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LeftShift, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | RightShift, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LParen, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Minus, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | OR, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Comma, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | Ampersand, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | RBrack, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | LE, postfix_exp -> postfix_exp LParen argument_exp_list .RParen  | AND, )
572 <- (535, 'Semicolon') (iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | while, )
573 <- (536, 'exp') (iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | while, exp -> exp .Comma assignment_exp  | Comma, exp -> exp .Comma assignment_exp  | RParen, )
574 <- (537, 'while') (iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | else, iteration_stm -> -do- stm while .LParen exp RParen Semicolon  | while, )
575 <- (539, 'Semicolon') (jump_stm -> -return- exp Semicolon.  | while, jump_stm -> -return- exp Semicolon.  | else, )
576 <- (541, 'RBrace') (compound_stm -> LBrace block_item_list RBrace.  | while, compound_stm -> LBrace block_item_list RBrace.  | else, )
577 <- (543, 'exp') (exp -> exp .Comma assignment_exp  | Comma, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | else, exp -> exp .Comma assignment_exp  | Semicolon, iteration_stm -> for LParen exp .Semicolon exp Semicolon exp RParen stm  | while, )
578 <- (544, 'exp') (selection_stm -> if LParen exp .RParen stm  | else, selection_stm -> if LParen exp .RParen stm  | while, selection_stm -> if LParen exp .RParen stm else stm  | while, exp -> exp .Comma assignment_exp  | RParen, selection_stm -> if LParen exp .RParen stm else stm  | else, exp -> exp .Comma assignment_exp  | Comma, )
579 <- (545, 'stm') (selection_stm -> if LParen exp RParen stm else stm.  | while, )
580 <- (546, 'exp') (iteration_stm -> while LParen exp .RParen stm  | else, exp -> exp .Comma assignment_exp  | Comma, iteration_stm -> while LParen exp .RParen stm  | while, exp -> exp .Comma assignment_exp  | RParen, )
581 <- (554, 'RBrack') (postfix_exp -> postfix_exp LBrack exp RBrack.  | NEQ, postfix_exp -> postfix_exp LBrack exp RBrack.  | Plus, postfix_exp -> postfix_exp LBrack exp RBrack.  | Question, postfix_exp -> postfix_exp LBrack exp RBrack.  | LT, postfix_exp -> postfix_exp LBrack exp RBrack.  | LParen, postfix_exp -> postfix_exp LBrack exp RBrack.  | VerticalBar, postfix_exp -> postfix_exp LBrack exp RBrack.  | AND, postfix_exp -> postfix_exp LBrack exp RBrack.  | EQ, postfix_exp -> postfix_exp LBrack exp RBrack.  | Times, postfix_exp -> postfix_exp LBrack exp RBrack.  | LBrack, postfix_exp -> postfix_exp LBrack exp RBrack.  | Increment, postfix_exp -> postfix_exp LBrack exp RBrack.  | OR, postfix_exp -> postfix_exp LBrack exp RBrack.  | Caret, postfix_exp -> postfix_exp LBrack exp RBrack.  | Dot, postfix_exp -> postfix_exp LBrack exp RBrack.  | RightShift, postfix_exp -> postfix_exp LBrack exp RBrack.  | Colon, postfix_exp -> postfix_exp LBrack exp RBrack.  | Ampersand, postfix_exp -> postfix_exp LBrack exp RBrack.  | GT, postfix_exp -> postfix_exp LBrack exp RBrack.  | GE, postfix_exp -> postfix_exp LBrack exp RBrack.  | Minus, postfix_exp -> postfix_exp LBrack exp RBrack.  | Comma, postfix_exp -> postfix_exp LBrack exp RBrack.  | LeftShift, postfix_exp -> postfix_exp LBrack exp RBrack.  | Divide, postfix_exp -> postfix_exp LBrack exp RBrack.  | LE, postfix_exp -> postfix_exp LBrack exp RBrack.  | Percent, postfix_exp -> postfix_exp LBrack exp RBrack.  | Decrement, )
582 <- (556, 'RParen') (postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Comma, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Increment, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Decrement, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | OR, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LeftShift, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | VerticalBar, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | EQ, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | RightShift, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Minus, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Caret, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Question, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LT, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Plus, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | GT, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Ampersand, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Dot, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LParen, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Percent, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Times, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | NEQ, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LBrack, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | AND, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Divide, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | GE, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Colon, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LE, )
583 <- (557, 'RParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, exp_stm -> .Semicolon  | -half2-, iteration_stm -> .while LParen exp RParen stm  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | -char-, exp_stm -> .Semicolon  | Plus, exp_stm -> .exp Semicolon  | LParen, stm -> .iteration_stm  | String, compound_stm -> .LBrace RBrace  | -float3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -char-, jump_stm -> .break  | -continue-, exp_stm -> .exp Semicolon  | -float4-, unary_exp -> .Increment unary_exp  | Ampersand, compound_stm -> .LBrace block_item_list RBrace  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | -half4-, jump_stm -> .break  | LBrace, stm -> .iteration_stm  | Number, unary_exp -> .postfix_exp  | Ampersand, selection_stm -> .if LParen exp RParen stm  | -fixed3-, compound_stm -> .LBrace RBrace  | -do-, primary_exp -> .ID  | Dot, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | Semicolon, jump_stm -> .-continue-  | Minus, jump_stm -> .-continue-  | String, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, exp_stm -> .Semicolon  | -struct-, unary_exp -> .postfix_exp  | Assign, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -long-, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .unary_op unary_exp  | LT, unary_exp -> .Decrement unary_exp  | Minus, stm -> .selection_stm  | for, postfix_exp -> .postfix_exp Decrement  | EQ, jump_stm -> .-goto- ID  | LParen, jump_stm -> .-goto- ID  | -fixed4-, compound_stm -> .LBrace block_item_list RBrace  | Increment, primary_exp -> .Number  | GE, stm -> .jump_stm  | Tilde, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -float-, stm -> .jump_stm  | -half2-, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, stm -> .jump_stm  | -goto-, unary_exp -> .postfix_exp  | GT, compound_stm -> .LBrace RBrace  | ID, unary_exp -> .Decrement unary_exp  | LE, compound_stm -> .LBrace block_item_list RBrace  | -float3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | for, selection_stm -> .if LParen exp RParen stm else stm  | while, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -struct-, postfix_exp -> .postfix_exp Increment  | Caret, unary_exp -> .Decrement unary_exp  | GE, exp_stm -> .Semicolon  | -float3-, jump_stm -> .break  | Plus, compound_stm -> .LBrace block_item_list RBrace  | Number, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float4-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | LParen, jump_stm -> .-return- exp Semicolon  | -float-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -int-, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Increment  | OR, exp_stm -> .exp Semicolon  | Increment, exp_stm -> .Semicolon  | -long-, iteration_stm -> .while LParen exp RParen stm  | -fixed4-, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, jump_stm -> .-return- exp Semicolon  | -char-, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, unary_op -> .Tilde  | LParen, stm -> .jump_stm  | -fixed2-, stm -> .compound_stm  | -return-, unary_exp -> .Decrement unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | Minus, postfix_exp -> .primary_exp  | LT, selection_stm -> .if LParen exp RParen stm else stm  | break, compound_stm -> .LBrace RBrace  | Decrement, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, compound_stm -> .LBrace RBrace  | -float2-, exp_stm -> .exp Semicolon  | -do-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -do-, exp_stm -> .exp Semicolon  | Minus, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, selection_stm -> .if LParen exp RParen stm else stm  | RBrace, stm -> .selection_stm  | -continue-, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, jump_stm -> .break  | -half2-, jump_stm -> .-continue-  | Number, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_exp -> .unary_op unary_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | -struct-, postfix_exp -> .postfix_exp Increment  | LE, compound_stm -> .LBrace RBrace  | -half4-, primary_exp -> .LParen exp RParen  | VerticalBar, jump_stm -> .-return- exp Semicolon  | Plus, selection_stm -> .if LParen exp RParen stm else stm  | LBrace, jump_stm -> .break  | break, postfix_exp -> .postfix_exp LParen RParen  | Plus, jump_stm -> .-continue-  | -fixed4-, compound_stm -> .LBrace RBrace  | -double-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | Decrement, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, exp_stm -> .Semicolon  | while, compound_stm -> .LBrace block_item_list RBrace  | -half3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half2-, selection_stm -> .if LParen exp RParen stm  | -float-, jump_stm -> .-return- exp Semicolon  | while, stm -> .jump_stm  | -sampler2D-, iteration_stm -> .while LParen exp RParen stm  | -sampler2D-, jump_stm -> .break  | String, primary_exp -> .String  | Divide, exp_stm -> .exp Semicolon  | -float3-, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .primary_exp  | LeftShift, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | for, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -half4-, jump_stm -> .-continue-  | ID, stm -> .iteration_stm  | ID, selection_stm -> .if LParen exp RParen stm else stm  | -long-, compound_stm -> .LBrace block_item_list RBrace  | -double-, primary_exp -> .LParen exp RParen  | Increment, jump_stm -> .break  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | break, unary_exp -> .postfix_exp  | Times, stm -> .compound_stm  | -half3-, selection_stm -> .if LParen exp RParen stm  | if, unary_exp -> .postfix_exp  | Semicolon, jump_stm -> .-continue-  | if, jump_stm -> .-return- exp Semicolon  | if, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -half2-, compound_stm -> .LBrace block_item_list RBrace  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -goto-, postfix_exp -> .primary_exp  | RightShift, stm -> .iteration_stm  | RBrace, stm -> .iteration_stm  | -int-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | if, jump_stm -> .-continue-  | -int-, stm -> .selection_stm  | RBrace, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | Number, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -sampler2D-, primary_exp -> .Number  | Question, exp_stm -> .exp Semicolon  | -struct-, jump_stm -> .-goto- ID  | -long-, selection_stm -> .if LParen exp RParen stm  | String, postfix_exp -> .postfix_exp Dot ID  | GE, jump_stm -> .-continue-  | -struct-, jump_stm -> .-return- exp Semicolon  | -int-, compound_stm -> .LBrace block_item_list RBrace  | -continue-, unary_exp -> .postfix_exp  | Question, stm -> .jump_stm  | String, stm -> .iteration_stm  | -half2-, compound_stm -> .LBrace RBrace  | -float4-, stm -> .exp_stm  | ID, stm -> .exp_stm  | -long-, jump_stm -> .-return- exp Semicolon  | -return-, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_exp -> .Increment unary_exp  | Plus, iteration_stm -> .while LParen exp RParen stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Comma, exp_stm -> .Semicolon  | if, jump_stm -> .-goto- ID  | -half4-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | LBrace, exp_stm -> .exp Semicolon  | -continue-, exp_stm -> .Semicolon  | -short-, stm -> .iteration_stm  | -void-, stm -> .exp_stm  | Tilde, postfix_exp -> .primary_exp  | LE, compound_stm -> .LBrace block_item_list RBrace  | LParen, exp_stm -> .exp Semicolon  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | String, compound_stm -> .LBrace block_item_list RBrace  | -float-, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, selection_stm -> .if LParen exp RParen stm  | -void-, stm -> .exp_stm  | -do-, jump_stm -> .-continue-  | Increment, selection_stm -> .if LParen exp RParen stm  | Increment, postfix_exp -> .postfix_exp Increment  | Question, stm -> .compound_stm  | NOT, unary_exp -> .Decrement unary_exp  | Ampersand, unary_exp -> .postfix_exp  | AND, primary_exp -> .ID  | VerticalBar, compound_stm -> .LBrace block_item_list RBrace  | Plus, unary_exp -> .Decrement unary_exp  | Assign, iteration_stm -> .while LParen exp RParen stm  | -do-, stm -> .jump_stm  | Decrement, jump_stm -> .-return- exp Semicolon  | Number, primary_exp -> .String  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, iteration_stm -> .while LParen exp RParen stm  | Tilde, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .primary_exp  | Semicolon, jump_stm -> .-goto- ID  | -int-, exp_stm -> .Semicolon  | Semicolon, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -continue-, compound_stm -> .LBrace block_item_list RBrace  | -uniform-, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | Plus, postfix_exp -> .primary_exp  | Times, stm -> .iteration_stm  | Decrement, stm -> .iteration_stm  | -do-, primary_exp -> .LParen exp RParen  | AND, binary_exp -> .unary_exp  | NEQ, jump_stm -> .-continue-  | break, iteration_stm -> .while LParen exp RParen stm  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Tilde, postfix_exp -> .postfix_exp LParen RParen  | LBrack, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | -float4-, selection_stm -> .if LParen exp RParen stm  | -sampler2D-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, exp_stm -> .Semicolon  | -fixed3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed3-, selection_stm -> .if LParen exp RParen stm else stm  | -short-, compound_stm -> .LBrace block_item_list RBrace  | -return-, jump_stm -> .break  | RBrace, selection_stm -> .if LParen exp RParen stm  | -float2-, compound_stm -> .LBrace block_item_list RBrace  | -half2-, jump_stm -> .-return- exp Semicolon  | -double-, primary_exp -> .LParen exp RParen  | GT, stm -> .iteration_stm  | LBrace, jump_stm -> .break  | -fixed3-, jump_stm -> .-goto- ID  | while, stm -> .jump_stm  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | NEQ, compound_stm -> .LBrace block_item_list RBrace  | -float4-, stm -> .jump_stm  | -do-, postfix_exp -> .postfix_exp Decrement  | Plus, exp_stm -> .exp Semicolon  | -half4-, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, stm -> .selection_stm  | -int-, stm -> .jump_stm  | break, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float-, unary_exp -> .Decrement unary_exp  | GT, unary_op -> .Plus  | String, jump_stm -> .-return- exp Semicolon  | NOT, postfix_exp -> .postfix_exp Increment  | Times, selection_stm -> .if LParen exp RParen stm else stm  | Decrement, stm -> .selection_stm  | -fixed3-, jump_stm -> .-goto- ID  | String, stm -> .compound_stm  | -double-, stm -> .exp_stm  | if, jump_stm -> .break  | -do-, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, selection_stm -> .if LParen exp RParen stm  | Minus, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, selection_stm -> .if LParen exp RParen stm  | RBrace, postfix_exp -> .postfix_exp Decrement  | LeftShift, selection_stm -> .if LParen exp RParen stm else stm  | Tilde, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, stm -> .selection_stm  | Number, compound_stm -> .LBrace block_item_list RBrace  | -fixed4-, compound_stm -> .LBrace RBrace  | -char-, jump_stm -> .-goto- ID  | -short-, unary_op -> .Minus  | ID, stm -> .selection_stm  | -uniform-, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp Increment  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, compound_stm -> .LBrace RBrace  | while, jump_stm -> .-continue-  | -float-, unary_exp -> .Increment unary_exp  | Minus, stm -> .iteration_stm  | Plus, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -void-, stm -> .selection_stm  | -void-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LParen, stm -> .exp_stm  | -double-, stm -> .selection_stm  | Minus, exp_stm -> .exp Semicolon  | -half3-, stm -> .exp_stm  | -struct-, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Semicolon, unary_op -> .Tilde  | Number, exp_stm -> .exp Semicolon  | -goto-, stm -> .jump_stm  | while, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, stm -> .iteration_stm  | Semicolon, stm -> .exp_stm  | -float4-, postfix_exp -> .primary_exp  | Increment, compound_stm -> .LBrace block_item_list RBrace  | if, postfix_exp -> .postfix_exp Dot ID  | LT, jump_stm -> .-continue-  | for, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -fixed3-, unary_exp -> .unary_op unary_exp  | Assign, jump_stm -> .-return- exp Semicolon  | -half2-, jump_stm -> .-return- exp Semicolon  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, stm -> .iteration_stm  | -continue-, selection_stm -> .if LParen exp RParen stm else stm  | -float-, unary_op -> .Plus  | Plus, jump_stm -> .-goto- ID  | -half2-, primary_exp -> .ID  | LE, stm -> .exp_stm  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | String, selection_stm -> .if LParen exp RParen stm else stm  | -sampler2D-, unary_op -> .Minus  | LParen, exp_stm -> .Semicolon  | -float-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -uniform-, selection_stm -> .if LParen exp RParen stm else stm  | String, primary_exp -> .ID  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float4-, jump_stm -> .break  | -uniform-, jump_stm -> .-goto- ID  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | String, stm -> .jump_stm  | LBrace, unary_op -> .NOT  | Number, primary_exp -> .ID  | Assign, stm -> .exp_stm  | Number, stm -> .iteration_stm  | -half4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Dot ID  | Comma, unary_exp -> .Increment unary_exp  | NEQ, stm -> .compound_stm  | String, primary_exp -> .LParen exp RParen  | Divide, compound_stm -> .LBrace RBrace  | -return-, stm -> .exp_stm  | NOT, jump_stm -> .break  | Number, stm -> .iteration_stm  | Increment, jump_stm -> .-return- exp Semicolon  | LParen, iteration_stm -> .while LParen exp RParen stm  | if, stm -> .selection_stm  | -float3-, postfix_exp -> .primary_exp  | Plus, stm -> .jump_stm  | -float4-, primary_exp -> .String  | Minus, stm -> .compound_stm  | Tilde, stm -> .exp_stm  | -float2-, unary_op -> .Plus  | Increment, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -do-, iteration_stm -> .while LParen exp RParen stm  | -goto-, stm -> .jump_stm  | NOT, selection_stm -> .if LParen exp RParen stm  | NOT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, exp_stm -> .Semicolon  | -float4-, stm -> .selection_stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | AND, stm -> .exp_stm  | -int-, stm -> .iteration_stm  | break, compound_stm -> .LBrace block_item_list RBrace  | -int-, stm -> .selection_stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -half3-, compound_stm -> .LBrace block_item_list RBrace  | Tilde, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | -half2-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -short-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -struct-, stm -> .iteration_stm  | -float3-, compound_stm -> .LBrace RBrace  | Number, selection_stm -> .if LParen exp RParen stm  | -half4-, primary_exp -> .String  | Increment, jump_stm -> .-return- exp Semicolon  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -uniform-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float3-, stm -> .compound_stm  | if, primary_exp -> .Number  | Plus, unary_op -> .Plus  | Decrement, jump_stm -> .-return- exp Semicolon  | ID, jump_stm -> .-goto- ID  | -float4-, postfix_exp -> .postfix_exp Decrement  | Assign, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed3-, stm -> .jump_stm  | -half3-, primary_exp -> .Number  | Dot, exp_stm -> .Semicolon  | -do-, exp_stm -> .Semicolon  | for, primary_exp -> .LParen exp RParen  | Ampersand, jump_stm -> .-goto- ID  | -double-, stm -> .jump_stm  | -struct-, binary_exp -> .unary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Comma, primary_exp -> .ID  | LBrack, jump_stm -> .-return- exp Semicolon  | Semicolon, selection_stm -> .if LParen exp RParen stm  | Decrement, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, selection_stm -> .if LParen exp RParen stm  | LParen, compound_stm -> .LBrace block_item_list RBrace  | for, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, jump_stm -> .break  | -fixed2-, exp_stm -> .exp Semicolon  | -short-, primary_exp -> .String  | Assign, compound_stm -> .LBrace RBrace  | Plus, unary_exp -> .unary_op unary_exp  | EQ, stm -> .exp_stm  | for, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | break, exp_stm -> .Semicolon  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | String, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, stm -> .selection_stm  | -half4-, primary_exp -> .LParen exp RParen  | Semicolon, compound_stm -> .LBrace RBrace  | break, selection_stm -> .if LParen exp RParen stm else stm  | -int-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, selection_stm -> .if LParen exp RParen stm else stm  | if, stm -> .iteration_stm  | -uniform-, stm -> .selection_stm  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | -continue-, jump_stm -> .-goto- ID  | -void-, compound_stm -> .LBrace block_item_list RBrace  | -fixed2-, primary_exp -> .ID  | LeftShift, compound_stm -> .LBrace block_item_list RBrace  | NOT, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp Decrement  | Comma, primary_exp -> .String  | LT, compound_stm -> .LBrace RBrace  | -sampler2D-, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, postfix_exp -> .postfix_exp Increment  | AND, selection_stm -> .if LParen exp RParen stm  | Semicolon, primary_exp -> .LParen exp RParen  | LParen, stm -> .compound_stm  | -void-, stm -> .jump_stm  | -float2-, stm -> .jump_stm  | Number, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -float3-, unary_exp -> .unary_op unary_exp  | Ampersand, exp_stm -> .exp Semicolon  | RBrace, stm -> .selection_stm  | -return-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half4-, iteration_stm -> .while LParen exp RParen stm  | -half2-, stm -> .iteration_stm  | -fixed3-, stm -> .jump_stm  | Plus, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | Tilde, compound_stm -> .LBrace RBrace  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Number, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | VerticalBar, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -struct-, stm -> .iteration_stm  | -float2-, exp_stm -> .Semicolon  | LBrace, exp_stm -> .exp Semicolon  | -void-, stm -> .exp_stm  | -half4-, primary_exp -> .ID  | Times, compound_stm -> .LBrace RBrace  | -fixed2-, exp_stm -> .exp Semicolon  | -long-, exp_stm -> .exp Semicolon  | -int-, exp_stm -> .Semicolon  | -continue-, unary_op -> .Tilde  | Increment, postfix_exp -> .postfix_exp Decrement  | Increment, selection_stm -> .if LParen exp RParen stm else stm  | -do-, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, stm -> .selection_stm  | Decrement, jump_stm -> .-continue-  | -do-, exp_stm -> .exp Semicolon  | if, assignment_exp -> .conditional_exp  | Comma, unary_exp -> .Decrement unary_exp  | LeftShift, stm -> .exp_stm  | Increment, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -goto-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -continue-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -void-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | String, jump_stm -> .-continue-  | Tilde, stm -> .exp_stm  | LBrace, jump_stm -> .-continue-  | -half4-, iteration_stm -> .while LParen exp RParen stm  | -continue-, compound_stm -> .LBrace block_item_list RBrace  | Minus, jump_stm -> .break  | for, compound_stm -> .LBrace RBrace  | -long-, jump_stm -> .break  | -return-, compound_stm -> .LBrace RBrace  | -void-, exp_stm -> .Semicolon  | -fixed2-, selection_stm -> .if LParen exp RParen stm else stm  | -void-, jump_stm -> .-continue-  | while, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Plus, exp_stm -> .Semicolon  | -goto-, jump_stm -> .break  | -float3-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -short-, stm -> .iteration_stm  | -char-, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, jump_stm -> .break  | -float4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -char-, stm -> .jump_stm  | -void-, primary_exp -> .Number  | VerticalBar, primary_exp -> .String  | Plus, compound_stm -> .LBrace RBrace  | Tilde, postfix_exp -> .primary_exp  | Ampersand, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | LT, jump_stm -> .-return- exp Semicolon  | -void-, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, compound_stm -> .LBrace RBrace  | -fixed4-, postfix_exp -> .postfix_exp Dot ID  | Question, exp_stm -> .exp Semicolon  | -sampler2D-, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed2-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float3-, stm -> .exp_stm  | -void-, selection_stm -> .if LParen exp RParen stm  | -half2-, stm -> .jump_stm  | Minus, primary_exp -> .String  | EQ, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, jump_stm -> .-continue-  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -float3-, stm -> .compound_stm  | ID, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed4-, stm -> .exp_stm  | -goto-, selection_stm -> .if LParen exp RParen stm  | while, jump_stm -> .-continue-  | -goto-, stm -> .compound_stm  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Plus, jump_stm -> .-goto- ID  | ID, jump_stm -> .break  | Increment, selection_stm -> .if LParen exp RParen stm else stm  | -fixed2-, stm -> .exp_stm  | -fixed3-, stm -> .compound_stm  | LParen, postfix_exp -> .postfix_exp Dot ID  | EQ, unary_op -> .Minus  | String, jump_stm -> .break  | if, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half4-, unary_exp -> .unary_op unary_exp  | Comma, jump_stm -> .-return- exp Semicolon  | -goto-, stm -> .compound_stm  | RBrace, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Semicolon, stm -> .compound_stm  | -fixed4-, binary_exp -> .unary_exp  | GE, selection_stm -> .if LParen exp RParen stm else stm  | -return-, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | Minus, iteration_stm -> .while LParen exp RParen stm  | break, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -int-, jump_stm -> .-continue-  | -continue-, jump_stm -> .-return- exp Semicolon  | -do-, stm -> .jump_stm  | if, stm -> .compound_stm  | -short-, jump_stm -> .-goto- ID  | -float2-, primary_exp -> .ID  | Question, stm -> .selection_stm  | Tilde, postfix_exp -> .postfix_exp Increment  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -float2-, jump_stm -> .break  | -char-, binary_exp -> .unary_exp  | OR, stm -> .compound_stm  | -long-, stm -> .compound_stm  | -fixed2-, stm -> .jump_stm  | -float3-, postfix_exp -> .postfix_exp Decrement  | Dot, jump_stm -> .-goto- ID  | Increment, selection_stm -> .if LParen exp RParen stm else stm  | LParen, unary_exp -> .unary_op unary_exp  | OR, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -float2-, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | LBrack, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LBrace, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, stm -> .iteration_stm  | -half3-, stm -> .compound_stm  | -char-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | break, postfix_exp -> .primary_exp  | LBrack, jump_stm -> .break  | -long-, jump_stm -> .-continue-  | -uniform-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LBrace, stm -> .compound_stm  | -goto-, selection_stm -> .if LParen exp RParen stm  | -short-, postfix_exp -> .primary_exp  | LParen, stm -> .selection_stm  | LBrace, stm -> .compound_stm  | -float4-, postfix_exp -> .postfix_exp LParen RParen  | Assign, compound_stm -> .LBrace RBrace  | -half3-, selection_stm -> .if LParen exp RParen stm else stm  | -fixed4-, jump_stm -> .break  | -half4-, iteration_stm -> .while LParen exp RParen stm  | -uniform-, jump_stm -> .-continue-  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -short-, postfix_exp -> .postfix_exp LParen RParen  | NEQ, jump_stm -> .-return- exp Semicolon  | -continue-, stm -> .iteration_stm  | -float-, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, jump_stm -> .-return- exp Semicolon  | -half3-, primary_exp -> .LParen exp RParen  | NEQ, compound_stm -> .LBrace RBrace  | Increment, stm -> .compound_stm  | -continue-, stm -> .exp_stm  | Plus, postfix_exp -> .postfix_exp Decrement  | Minus, stm -> .selection_stm  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -continue-, postfix_exp -> .postfix_exp Decrement  | Times, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -int-, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, stm -> .compound_stm  | Plus, exp_stm -> .exp Semicolon  | String, compound_stm -> .LBrace block_item_list RBrace  | RBrace, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, exp_stm -> .exp Semicolon  | -float2-, postfix_exp -> .primary_exp  | AND, jump_stm -> .-return- exp Semicolon  | -short-, compound_stm -> .LBrace RBrace  | String, stm -> .exp_stm  | while, iteration_stm -> .while LParen exp RParen stm  | -void-, compound_stm -> .LBrace RBrace  | -struct-, exp_stm -> .Semicolon  | Increment, unary_exp -> .unary_op unary_exp  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Increment, primary_exp -> .ID  | Comma, stm -> .compound_stm  | -float3-, primary_exp -> .String  | LeftShift, jump_stm -> .-continue-  | -fixed3-, postfix_exp -> .postfix_exp LParen RParen  | GE, stm -> .selection_stm  | -float4-, postfix_exp -> .primary_exp  | OR, iteration_stm -> .while LParen exp RParen stm  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | while, unary_exp -> .postfix_exp  | RightShift, stm -> .iteration_stm  | Minus, iteration_stm -> .while LParen exp RParen stm  | -float2-, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_exp -> .Increment unary_exp  | Divide, exp_stm -> .Semicolon  | ID, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed2-, jump_stm -> .-goto- ID  | -struct-, primary_exp -> .Number  | AND, jump_stm -> .-continue-  | -return-, jump_stm -> .break  | Minus, iteration_stm -> .while LParen exp RParen stm  | Plus, selection_stm -> .if LParen exp RParen stm  | -do-, compound_stm -> .LBrace RBrace  | if, jump_stm -> .break  | -void-, stm -> .jump_stm  | -continue-, iteration_stm -> .while LParen exp RParen stm  | -float-, stm -> .selection_stm  | Plus, compound_stm -> .LBrace RBrace  | NOT, exp_stm -> .Semicolon  | Decrement, selection_stm -> .if LParen exp RParen stm  | Number, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | if, exp_stm -> .Semicolon  | -float2-, iteration_stm -> .while LParen exp RParen stm  | Number, jump_stm -> .-return- exp Semicolon  | -long-, unary_op -> .Tilde  | Plus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | NOT, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, exp_stm -> .exp Semicolon  | Decrement, stm -> .compound_stm  | -sampler2D-, stm -> .selection_stm  | LParen, stm -> .iteration_stm  | LParen, selection_stm -> .if LParen exp RParen stm else stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | LBrace, selection_stm -> .if LParen exp RParen stm  | -long-, binary_exp -> .unary_exp  | EQ, unary_exp -> .postfix_exp  | Minus, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half2-, jump_stm -> .-return- exp Semicolon  | Minus, unary_op -> .Tilde  | Tilde, jump_stm -> .break  | ID, jump_stm -> .-continue-  | -void-, postfix_exp -> .postfix_exp Decrement  | Decrement, jump_stm -> .-goto- ID  | Semicolon, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half3-, stm -> .exp_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -return-, unary_exp -> .Decrement unary_exp  | Divide, stm -> .iteration_stm  | Tilde, compound_stm -> .LBrace block_item_list RBrace  | LBrace, postfix_exp -> .postfix_exp Increment  | Semicolon, jump_stm -> .break  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | -fixed3-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, stm -> .selection_stm  | -struct-, stm -> .exp_stm  | -return-, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, stm -> .exp_stm  | -char-, postfix_exp -> .postfix_exp Decrement  | Ampersand, exp_stm -> .exp Semicolon  | -double-, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -long-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, iteration_stm -> .while LParen exp RParen stm  | for, compound_stm -> .LBrace RBrace  | -half2-, jump_stm -> .-goto- ID  | -do-, stm -> .selection_stm  | if, stm -> .compound_stm  | -uniform-, compound_stm -> .LBrace RBrace  | -int-, exp_stm -> .exp Semicolon  | -float-, stm -> .jump_stm  | -float-, jump_stm -> .-continue-  | RBrace, unary_exp -> .unary_op unary_exp  | VerticalBar, jump_stm -> .-return- exp Semicolon  | -float4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | RBrace, unary_exp -> .Increment unary_exp  | Times, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -fixed2-, stm -> .exp_stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, stm -> .exp_stm  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -long-, primary_exp -> .LParen exp RParen  | Percent, selection_stm -> .if LParen exp RParen stm  | Plus, jump_stm -> .-return- exp Semicolon  | -fixed4-, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | if, exp_stm -> .exp Semicolon  | -char-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -void-, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Comma, compound_stm -> .LBrace block_item_list RBrace  | -float2-, primary_exp -> .String  | Semicolon, stm -> .compound_stm  | -float-, jump_stm -> .-continue-  | -fixed2-, primary_exp -> .Number  | LeftShift, exp_stm -> .exp Semicolon  | Tilde, stm -> .compound_stm  | LBrace, iteration_stm -> .while LParen exp RParen stm  | LParen, exp_stm -> .exp Semicolon  | while, jump_stm -> .break  | LParen, compound_stm -> .LBrace RBrace  | LBrace, jump_stm -> .-goto- ID  | -float-, exp_stm -> .exp Semicolon  | LBrace, jump_stm -> .-continue-  | -short-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, binary_exp -> .binary_exp binary_op unary_exp  | EQ, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -return-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -double-, postfix_exp -> .postfix_exp Decrement  | Percent, jump_stm -> .-continue-  | -double-, compound_stm -> .LBrace block_item_list RBrace  | -void-, stm -> .exp_stm  | -fixed2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, selection_stm -> .if LParen exp RParen stm  | -fixed2-, primary_exp -> .LParen exp RParen  | Times, stm -> .selection_stm  | ID, selection_stm -> .if LParen exp RParen stm  | -double-, exp_stm -> .Semicolon  | LParen, postfix_exp -> .primary_exp  | Percent, primary_exp -> .String  | Comma, jump_stm -> .break  | -goto-, stm -> .iteration_stm  | -fixed2-, jump_stm -> .-return- exp Semicolon  | -struct-, binary_exp -> .binary_exp binary_op unary_exp  | Question, stm -> .exp_stm  | Minus, exp_stm -> .exp Semicolon  | -uniform-, exp_stm -> .Semicolon  | -char-, primary_exp -> .Number  | RightShift, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | while, stm -> .exp_stm  | -half2-, primary_exp -> .ID  | OR, binary_exp -> .unary_exp  | Question, selection_stm -> .if LParen exp RParen stm  | -goto-, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, binary_exp -> .binary_exp binary_op unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | GT, stm -> .jump_stm  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | GT, iteration_stm -> .while LParen exp RParen stm  | Semicolon, primary_exp -> .Number  | Times, jump_stm -> .-return- exp Semicolon  | Increment, binary_exp -> .binary_exp binary_op unary_exp  | Times, exp_stm -> .Semicolon  | -half4-, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, jump_stm -> .break  | -struct-, jump_stm -> .-return- exp Semicolon  | Tilde, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, primary_exp -> .ID  | Minus, selection_stm -> .if LParen exp RParen stm  | -continue-, unary_exp -> .unary_op unary_exp  | Question, stm -> .selection_stm  | -half3-, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, unary_op -> .Plus  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -sampler2D-, selection_stm -> .if LParen exp RParen stm else stm  | -double-, unary_exp -> .unary_op unary_exp  | Times, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | NOT, jump_stm -> .-return- exp Semicolon  | break, stm -> .jump_stm  | -double-, jump_stm -> .break  | NOT, exp_stm -> .exp Semicolon  | Plus, jump_stm -> .-continue-  | -float2-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .String  | Question, jump_stm -> .-continue-  | -char-, primary_exp -> .Number  | Decrement, iteration_stm -> .while LParen exp RParen stm  | while, selection_stm -> .if LParen exp RParen stm  | break, jump_stm -> .-return- exp Semicolon  | -half4-, unary_op -> .NOT  | Minus, selection_stm -> .if LParen exp RParen stm  | -float4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, primary_exp -> .ID  | Divide, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, binary_exp -> .unary_exp  | LT, compound_stm -> .LBrace RBrace  | Minus, stm -> .selection_stm  | -char-, compound_stm -> .LBrace block_item_list RBrace  | ID, binary_exp -> .unary_exp  | LE, stm -> .exp_stm  | String, stm -> .exp_stm  | -float-, unary_exp -> .Increment unary_exp  | GT, jump_stm -> .break  | -double-, postfix_exp -> .postfix_exp LParen RParen  | OR, compound_stm -> .LBrace block_item_list RBrace  | -sampler2D-, exp_stm -> .exp Semicolon  | -return-, primary_exp -> .LParen exp RParen  | GE, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | Minus, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | LeftShift, selection_stm -> .if LParen exp RParen stm else stm  | -uniform-, compound_stm -> .LBrace RBrace  | -continue-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | Plus, stm -> .iteration_stm  | for, postfix_exp -> .postfix_exp Increment  | RightShift, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | NEQ, selection_stm -> .if LParen exp RParen stm  | -uniform-, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .primary_exp  | Caret, compound_stm -> .LBrace block_item_list RBrace  | break, exp_stm -> .Semicolon  | -double-, selection_stm -> .if LParen exp RParen stm  | -float3-, jump_stm -> .-continue-  | -sampler2D-, stm -> .selection_stm  | -short-, iteration_stm -> .while LParen exp RParen stm  | -int-, jump_stm -> .-goto- ID  | Tilde, stm -> .compound_stm  | Increment, stm -> .compound_stm  | -float2-, jump_stm -> .-goto- ID  | Number, postfix_exp -> .primary_exp  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | for, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | NOT, exp_stm -> .Semicolon  | -int-, binary_exp -> .binary_exp binary_op unary_exp  | Minus, jump_stm -> .-goto- ID  | Decrement, unary_op -> .Minus  | Decrement, primary_exp -> .LParen exp RParen  | OR, primary_exp -> .Number  | GT, postfix_exp -> .primary_exp  | Question, jump_stm -> .-goto- ID  | -uniform-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, jump_stm -> .break  | -fixed4-, compound_stm -> .LBrace RBrace  | -uniform-, unary_exp -> .unary_op unary_exp  | GT, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -half3-, compound_stm -> .LBrace block_item_list RBrace  | -short-, stm -> .compound_stm  | -int-, jump_stm -> .-continue-  | -long-, selection_stm -> .if LParen exp RParen stm  | -return-, stm -> .compound_stm  | -half2-, exp_stm -> .Semicolon  | -return-, selection_stm -> .if LParen exp RParen stm  | LBrace, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, stm -> .iteration_stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_op -> .Minus  | Plus, jump_stm -> .-continue-  | LParen, selection_stm -> .if LParen exp RParen stm  | Tilde, postfix_exp -> .postfix_exp Increment  | LeftShift, selection_stm -> .if LParen exp RParen stm else stm  | -fixed3-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, stm -> .compound_stm  | while, unary_exp -> .postfix_exp  | Caret, stm -> .jump_stm  | Increment, stm -> .exp_stm  | -sampler2D-, primary_exp -> .ID  | LT, stm -> .selection_stm  | NOT, postfix_exp -> .postfix_exp Dot ID  | Caret, iteration_stm -> .while LParen exp RParen stm  | NOT, stm -> .iteration_stm  | -fixed4-, binary_exp -> .unary_exp  | Caret, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, primary_exp -> .LParen exp RParen  | Assign, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -return-, unary_op -> .Minus  | Number, primary_exp -> .Number  | Percent, jump_stm -> .-continue-  | LBrace, stm -> .jump_stm  | -fixed4-, iteration_stm -> .while LParen exp RParen stm  | -return-, primary_exp -> .LParen exp RParen  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -double-, primary_exp -> .Number  | Assign, jump_stm -> .-return- exp Semicolon  | for, postfix_exp -> .postfix_exp Decrement  | NEQ, jump_stm -> .break  | -float-, unary_exp -> .Increment unary_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float-, jump_stm -> .-goto- ID  | -goto-, stm -> .exp_stm  | -continue-, unary_exp -> .Increment unary_exp  | Question, binary_exp -> .unary_exp  | AND, primary_exp -> .String  | Decrement, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, selection_stm -> .if LParen exp RParen stm  | -fixed4-, exp_stm -> .Semicolon  | -uniform-, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, stm -> .exp_stm  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Minus, postfix_exp -> .postfix_exp Dot ID  | Plus, stm -> .selection_stm  | -half2-, exp_stm -> .exp Semicolon  | -half2-, jump_stm -> .-continue-  | -float3-, exp_stm -> .exp Semicolon  | break, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, iteration_stm -> .while LParen exp RParen stm  | -fixed2-, stm -> .selection_stm  | -float-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -do-, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, unary_exp -> .postfix_exp  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Tilde, primary_exp -> .ID  | GE, compound_stm -> .LBrace block_item_list RBrace  | -goto-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, stm -> .compound_stm  | -fixed3-, primary_exp -> .String  | LParen, postfix_exp -> .postfix_exp Increment  | Minus, binary_exp -> .unary_exp  | LeftShift, iteration_stm -> .while LParen exp RParen stm  | -double-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -sampler2D-, jump_stm -> .-goto- ID  | LBrace, primary_exp -> .ID  | RightShift, jump_stm -> .-return- exp Semicolon  | -fixed2-, selection_stm -> .if LParen exp RParen stm else stm  | -char-, stm -> .iteration_stm  | -long-, iteration_stm -> .while LParen exp RParen stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, stm -> .exp_stm  | break, primary_exp -> .ID  | EQ, postfix_exp -> .postfix_exp Dot ID  | RightShift, stm -> .compound_stm  | Number, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, stm -> .compound_stm  | for, unary_exp -> .unary_op unary_exp  | Minus, unary_exp -> .unary_op unary_exp  | RightShift, compound_stm -> .LBrace RBrace  | -short-, stm -> .compound_stm  | Semicolon, stm -> .selection_stm  | break, stm -> .compound_stm  | -do-, primary_exp -> .LParen exp RParen  | LE, binary_exp -> .binary_exp binary_op unary_exp  | AND, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, stm -> .compound_stm  | -half4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Decrement, unary_exp -> .postfix_exp  | Divide, unary_exp -> .unary_op unary_exp  | NEQ, jump_stm -> .-goto- ID  | -char-, stm -> .selection_stm  | -double-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -double-, unary_exp -> .postfix_exp  | GE, selection_stm -> .if LParen exp RParen stm  | for, selection_stm -> .if LParen exp RParen stm  | ID, jump_stm -> .-goto- ID  | Minus, jump_stm -> .break  | while, postfix_exp -> .postfix_exp LParen RParen  | LE, selection_stm -> .if LParen exp RParen stm  | -int-, selection_stm -> .if LParen exp RParen stm  | -half3-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Divide, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float2-, stm -> .jump_stm  | RBrace, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, compound_stm -> .LBrace RBrace  | -goto-, postfix_exp -> .postfix_exp LParen RParen  | Divide, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | RBrace, stm -> .jump_stm  | -uniform-, stm -> .exp_stm  | -float3-, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -uniform-, exp_stm -> .Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | for, unary_exp -> .Increment unary_exp  | Assign, jump_stm -> .-goto- ID  | -return-, postfix_exp -> .postfix_exp Increment  | Assign, jump_stm -> .break  | Tilde, selection_stm -> .if LParen exp RParen stm else stm  | -float3-, postfix_exp -> .postfix_exp LParen RParen  | Times, jump_stm -> .-goto- ID  | -fixed3-, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | LT, stm -> .selection_stm  | -sampler2D-, jump_stm -> .-continue-  | -half3-, primary_exp -> .Number  | Minus, stm -> .iteration_stm  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -half4-, stm -> .jump_stm  | LParen, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -fixed4-, iteration_stm -> .while LParen exp RParen stm  | Decrement, unary_exp -> .Decrement unary_exp  | AND, jump_stm -> .-goto- ID  | for, jump_stm -> .-goto- ID  | if, compound_stm -> .LBrace RBrace  | LParen, exp_stm -> .Semicolon  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, stm -> .jump_stm  | -long-, selection_stm -> .if LParen exp RParen stm else stm  | -struct-, unary_exp -> .Decrement unary_exp  | Times, primary_exp -> .Number  | OR, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | ID, stm -> .exp_stm  | -fixed4-, jump_stm -> .-goto- ID  | -float3-, postfix_exp -> .primary_exp  | GT, exp_stm -> .Semicolon  | -void-, stm -> .selection_stm  | -do-, postfix_exp -> .postfix_exp Decrement  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, stm -> .selection_stm  | String, postfix_exp -> .primary_exp  | VerticalBar, primary_exp -> .ID  | AND, postfix_exp -> .postfix_exp LParen RParen  | Dot, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | String, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, exp_stm -> .Semicolon  | NOT, primary_exp -> .String  | Ampersand, stm -> .jump_stm  | -short-, exp_stm -> .exp Semicolon  | -fixed3-, primary_exp -> .ID  | Percent, jump_stm -> .-continue-  | Semicolon, stm -> .iteration_stm  | -goto-, selection_stm -> .if LParen exp RParen stm else stm  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | Percent, exp_stm -> .exp Semicolon  | for, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Decrement  | LBrack, primary_exp -> .ID  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | RightShift, jump_stm -> .-goto- ID  | RBrace, stm -> .exp_stm  | RBrace, unary_exp -> .Increment unary_exp  | Semicolon, stm -> .exp_stm  | Decrement, stm -> .selection_stm  | -fixed2-, compound_stm -> .LBrace RBrace  | RBrace, primary_exp -> .LParen exp RParen  | Dot, primary_exp -> .Number  | Divide, stm -> .selection_stm  | -long-, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, jump_stm -> .-continue-  | Plus, primary_exp -> .Number  | Semicolon, unary_op -> .Minus  | NOT, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, jump_stm -> .break  | -short-, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -goto-, exp_stm -> .exp Semicolon  | -fixed4-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | ID, selection_stm -> .if LParen exp RParen stm else stm  | ID, stm -> .jump_stm  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .String  | Times, jump_stm -> .-goto- ID  | -continue-, exp_stm -> .Semicolon  | String, jump_stm -> .break  | -int-, jump_stm -> .-goto- ID  | -half3-, stm -> .iteration_stm  | while, primary_exp -> .Number  | Increment, stm -> .iteration_stm  | -struct-, jump_stm -> .break  | Semicolon, conditional_exp -> .binary_exp  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Increment, iteration_stm -> .while LParen exp RParen stm  | -float4-, exp_stm -> .Semicolon  | RBrace, postfix_exp -> .postfix_exp Dot ID  | Minus, exp_stm -> .Semicolon  | -half3-, unary_exp -> .Decrement unary_exp  | Plus, primary_exp -> .LParen exp RParen  | Plus, jump_stm -> .-continue-  | -half2-, stm -> .compound_stm  | -struct-, unary_exp -> .Increment unary_exp  | RightShift, jump_stm -> .-return- exp Semicolon  | -float2-, postfix_exp -> .postfix_exp Dot ID  | LParen, compound_stm -> .LBrace RBrace  | -float-, unary_exp -> .unary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, jump_stm -> .-return- exp Semicolon  | -float3-, iteration_stm -> .while LParen exp RParen stm  | -struct-, stm -> .iteration_stm  | -sampler2D-, postfix_exp -> .postfix_exp Increment  | Dot, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | RBrace, exp_stm -> .Semicolon  | Tilde, jump_stm -> .-goto- ID  | NOT, jump_stm -> .-continue-  | Decrement, stm -> .compound_stm  | break, selection_stm -> .if LParen exp RParen stm else stm  | -half4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, stm -> .jump_stm  | for, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Number, unary_op -> .Plus  | Tilde, selection_stm -> .if LParen exp RParen stm else stm  | Semicolon, iteration_stm -> .while LParen exp RParen stm  | -char-, postfix_exp -> .postfix_exp Increment  | Divide, stm -> .selection_stm  | -float2-, stm -> .jump_stm  | -return-, primary_exp -> .ID  | Increment, iteration_stm -> .while LParen exp RParen stm  | ID, jump_stm -> .-goto- ID  | -fixed2-, unary_exp -> .Increment unary_exp  | LE, unary_exp -> .postfix_exp  | OR, jump_stm -> .-return- exp Semicolon  | -uniform-, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .NOT  | String, jump_stm -> .-goto- ID  | break, stm -> .iteration_stm  | -double-, postfix_exp -> .postfix_exp Decrement  | LE, binary_exp -> .unary_exp  | RightShift, exp_stm -> .Semicolon  | Number, stm -> .iteration_stm  | -return-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, unary_op -> .Tilde  | ID, exp_stm -> .exp Semicolon  | Semicolon, exp_stm -> .Semicolon  | break, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .primary_exp  | Divide, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, compound_stm -> .LBrace block_item_list RBrace  | -struct-, stm -> .iteration_stm  | if, jump_stm -> .-return- exp Semicolon  | -sampler2D-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, stm -> .iteration_stm  | NOT, jump_stm -> .break  | -float2-, primary_exp -> .Number  | LParen, exp_stm -> .exp Semicolon  | ID, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Comma, compound_stm -> .LBrace RBrace  | for, jump_stm -> .break  | -half3-, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, selection_stm -> .if LParen exp RParen stm  | -char-, stm -> .jump_stm  | -fixed3-, postfix_exp -> .postfix_exp Decrement  | LParen, stm -> .compound_stm  | Minus, primary_exp -> .LParen exp RParen  | Minus, compound_stm -> .LBrace block_item_list RBrace  | -do-, jump_stm -> .-return- exp Semicolon  | LBrace, stm -> .selection_stm  | Semicolon, postfix_exp -> .postfix_exp Decrement  | OR, exp_stm -> .exp Semicolon  | Number, postfix_exp -> .postfix_exp LParen RParen  | Question, stm -> .jump_stm  | -half4-, postfix_exp -> .postfix_exp Increment  | EQ, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, jump_stm -> .-goto- ID  | -sampler2D-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -long-, exp_stm -> .exp Semicolon  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, selection_stm -> .if LParen exp RParen stm else stm  | Number, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | ID, unary_exp -> .postfix_exp  | Percent, stm -> .jump_stm  | -int-, compound_stm -> .LBrace RBrace  | -fixed3-, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .Increment unary_exp  | VerticalBar, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -float4-, unary_exp -> .postfix_exp  | LeftShift, )
584 <- (558, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -float4-, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -fixed2-, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, unary_op -> .Plus  | Decrement, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | else, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, unary_exp -> .unary_op unary_exp  | Divide, unary_exp -> .postfix_exp  | RParen, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -float2-, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_exp -> .Increment unary_exp  | Divide, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .Increment unary_exp  | Ampersand, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -char-, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | GE, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -int-, unary_exp -> .Decrement unary_exp  | Divide, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -half2-, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | LBrace, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | RParen, primary_exp -> .String  | LeftShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | RParen, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | break, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, binary_exp -> .unary_exp  | LE, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, unary_exp -> .postfix_exp  | LE, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Question, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | ID, unary_op -> .Minus  | Number, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -void-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -fixed4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .String  | Comma, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -long-, postfix_exp -> .primary_exp  | LE, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -float-, exp -> .assignment_exp  | RParen, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -float3-, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | LParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -sampler2D-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, postfix_exp -> .primary_exp  | Minus, unary_exp -> .unary_op unary_exp  | VerticalBar, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -uniform-, primary_exp -> .LParen exp RParen  | GT, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .Number  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | NOT, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | Percent, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -return-, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -continue-, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | RParen, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -half4-, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .String  | Question, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | for, postfix_exp -> .postfix_exp Dot ID  | LT, assignment_exp -> .conditional_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, primary_exp -> .LParen exp RParen  | GE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | Minus, unary_op -> .NOT  | Minus, unary_exp -> .Increment unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | Decrement, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, exp -> .exp Comma assignment_exp  | RParen, conditional_exp -> .binary_exp  | Comma, unary_op -> .Tilde  | Minus, unary_op -> .NOT  | Number, unary_exp -> .Decrement unary_exp  | NEQ, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | Increment, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -do-, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | while, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -goto-, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -double-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -fixed3-, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, unary_op -> .Minus  | Tilde, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | Plus, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Assign, unary_op -> .Plus  | String, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | String, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, primary_exp -> .ID  | LeftShift, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | Tilde, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | if, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -short-, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -half3-, unary_exp -> .unary_op unary_exp  | AND, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .Number  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, unary_exp -> .unary_op unary_exp  | Percent, unary_exp -> .postfix_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, binary_exp -> .unary_exp  | LT, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Ampersand, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | RBrace, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | Number, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .unary_op unary_exp  | Assign, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | -struct-, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
585 <- (561, 'Semicolon') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -float2-, unary_exp -> .postfix_exp  | Ampersand, binary_exp -> .binary_exp binary_op unary_exp  | EQ, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -long-, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | Decrement, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, primary_exp -> .ID  | LT, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | String, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -struct-, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -fixed4-, unary_exp -> .postfix_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | Plus, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .postfix_exp  | Semicolon, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, unary_exp -> .unary_op unary_exp  | Percent, unary_exp -> .postfix_exp  | LE, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -float3-, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .String  | Question, primary_exp -> .String  | Dot, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | NOT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -uniform-, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -char-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | Minus, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -int-, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | else, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -half2-, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, binary_exp -> .unary_exp  | LE, primary_exp -> .String  | AND, postfix_exp -> .primary_exp  | Increment, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | Number, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, unary_exp -> .Decrement unary_exp  | Ampersand, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -half3-, unary_op -> .Plus  | Minus, unary_exp -> .Increment unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, primary_exp -> .ID  | Assign, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .primary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | LParen, unary_op -> .Minus  | ID, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -void-, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | RBrace, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .ID  | EQ, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Semicolon, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | Tilde, unary_op -> .Tilde  | Number, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, unary_exp -> .unary_op unary_exp  | Ampersand, unary_op -> .Minus  | Number, primary_exp -> .Number  | Percent, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, unary_exp -> .Increment unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .Number  | Semicolon, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_op -> .NOT  | Number, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -goto-, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_exp -> .unary_op unary_exp  | LE, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | LBrace, postfix_exp -> .postfix_exp Decrement  | Minus, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -double-, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, postfix_exp -> .postfix_exp Increment  | Percent, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, unary_op -> .Minus  | Tilde, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Assign, unary_exp -> .Decrement unary_exp  | AND, primary_exp -> .String  | Assign, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -return-, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .Number  | LBrack, primary_exp -> .LParen exp RParen  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | while, unary_exp -> .unary_op unary_exp  | GT, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -fixed3-, primary_exp -> .Number  | OR, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -sampler2D-, unary_exp -> .Increment unary_exp  | VerticalBar, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -float4-, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -half4-, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Dot, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | Comma, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | Increment, unary_exp -> .Increment unary_exp  | GE, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | Semicolon, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | Comma, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -fixed2-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -short-, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, conditional_exp -> .binary_exp  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .postfix_exp LParen RParen  | EQ, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | for, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -continue-, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | ID, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -do-, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | -float-, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | break, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, unary_exp -> .unary_op unary_exp  | Semicolon, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .Number  | Caret, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | if, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | LE, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
586 <- (562, 'RParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, exp_stm -> .Semicolon  | -half2-, iteration_stm -> .while LParen exp RParen stm  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | -char-, unary_exp -> .postfix_exp  | Assign, exp_stm -> .exp Semicolon  | LParen, stm -> .iteration_stm  | String, compound_stm -> .LBrace RBrace  | Tilde, compound_stm -> .LBrace RBrace  | -float3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -char-, jump_stm -> .break  | -continue-, exp_stm -> .exp Semicolon  | -float4-, unary_exp -> .Increment unary_exp  | Ampersand, selection_stm -> if LParen exp RParen .stm else stm  | -int-, compound_stm -> .LBrace block_item_list RBrace  | -half4-, jump_stm -> .break  | LBrace, stm -> .iteration_stm  | Number, unary_exp -> .postfix_exp  | Ampersand, unary_op -> .Plus  | LParen, compound_stm -> .LBrace RBrace  | -do-, stm -> .jump_stm  | else, selection_stm -> if LParen exp RParen .stm  | -char-, jump_stm -> .-continue-  | Minus, jump_stm -> .-continue-  | String, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, exp_stm -> .Semicolon  | -struct-, exp_stm -> .Semicolon  | Plus, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -long-, postfix_exp -> .postfix_exp LParen RParen  | Percent, stm -> .compound_stm  | else, unary_exp -> .Decrement unary_exp  | Minus, stm -> .selection_stm  | for, jump_stm -> .-goto- ID  | LParen, jump_stm -> .-goto- ID  | -fixed4-, compound_stm -> .LBrace block_item_list RBrace  | Increment, postfix_exp -> .primary_exp  | GE, selection_stm -> if LParen exp RParen .stm  | -float-, stm -> .jump_stm  | Tilde, unary_op -> .Plus  | Number, selection_stm -> if LParen exp RParen .stm else stm  | else, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, stm -> .jump_stm  | -goto-, unary_exp -> .postfix_exp  | GT, compound_stm -> .LBrace RBrace  | ID, unary_exp -> .Decrement unary_exp  | LE, compound_stm -> .LBrace block_item_list RBrace  | -float3-, postfix_exp -> .postfix_exp LParen RParen  | GT, selection_stm -> .if LParen exp RParen stm else stm  | while, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -struct-, postfix_exp -> .postfix_exp Increment  | Caret, unary_exp -> .Decrement unary_exp  | GE, exp_stm -> .Semicolon  | -float3-, unary_exp -> .unary_op unary_exp  | LT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LParen, compound_stm -> .LBrace block_item_list RBrace  | Number, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float4-, compound_stm -> .LBrace RBrace  | -half4-, jump_stm -> .-return- exp Semicolon  | -float-, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Increment  | OR, compound_stm -> .LBrace block_item_list RBrace  | -fixed3-, exp_stm -> .exp Semicolon  | Increment, exp_stm -> .Semicolon  | -long-, iteration_stm -> .while LParen exp RParen stm  | -fixed4-, unary_op -> .NOT  | Tilde, stm -> .selection_stm  | -short-, binary_exp -> .unary_exp  | Divide, selection_stm -> if LParen exp RParen .stm else stm  | -do-, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, unary_op -> .Tilde  | LParen, stm -> .jump_stm  | -fixed2-, stm -> .compound_stm  | -return-, unary_exp -> .Decrement unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | Minus, stm -> .jump_stm  | RBrace, selection_stm -> .if LParen exp RParen stm else stm  | break, exp_stm -> .Semicolon  | Minus, unary_op -> .NOT  | Plus, compound_stm -> .LBrace block_item_list RBrace  | Tilde, compound_stm -> .LBrace block_item_list RBrace  | -goto-, compound_stm -> .LBrace RBrace  | -float2-, exp_stm -> .exp Semicolon  | -do-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -do-, selection_stm -> .if LParen exp RParen stm else stm  | NOT, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, compound_stm -> .LBrace block_item_list RBrace  | else, stm -> .selection_stm  | -continue-, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, iteration_stm -> .while LParen exp RParen stm  | -half2-, jump_stm -> .break  | -half2-, jump_stm -> .-continue-  | Number, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_exp -> .unary_op unary_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | -struct-, postfix_exp -> .postfix_exp Increment  | LE, jump_stm -> .break  | else, primary_exp -> .LParen exp RParen  | VerticalBar, selection_stm -> .if LParen exp RParen stm else stm  | LBrace, jump_stm -> .break  | break, selection_stm -> if LParen exp RParen .stm else stm  | -void-, jump_stm -> .-continue-  | -fixed4-, compound_stm -> .LBrace RBrace  | -double-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, compound_stm -> .LBrace block_item_list RBrace  | -half3-, postfix_exp -> .postfix_exp LParen RParen  | Question, selection_stm -> .if LParen exp RParen stm  | -float-, jump_stm -> .-return- exp Semicolon  | while, stm -> .compound_stm  | Minus, stm -> .jump_stm  | -sampler2D-, iteration_stm -> .while LParen exp RParen stm  | -sampler2D-, exp_stm -> .exp Semicolon  | -float3-, selection_stm -> if LParen exp RParen .stm  | -half2-, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .primary_exp  | LeftShift, primary_exp -> .String  | Semicolon, stm -> .jump_stm  | -long-, stm -> .exp_stm  | -half2-, primary_exp -> .ID  | GT, jump_stm -> .-return- exp Semicolon  | -struct-, compound_stm -> .LBrace block_item_list RBrace  | -double-, selection_stm -> .if LParen exp RParen stm else stm  | else, jump_stm -> .break  | Decrement, stm -> .exp_stm  | -float2-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | break, unary_exp -> .postfix_exp  | Times, stm -> .compound_stm  | -half3-, selection_stm -> .if LParen exp RParen stm  | if, unary_exp -> .postfix_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | -double-, jump_stm -> .-continue-  | if, jump_stm -> .-return- exp Semicolon  | if, compound_stm -> .LBrace block_item_list RBrace  | Decrement, unary_exp -> .postfix_exp  | LE, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Semicolon, exp_stm -> .Semicolon  | -int-, postfix_exp -> .primary_exp  | RightShift, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -void-, selection_stm -> if LParen exp RParen .stm else stm  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | if, binary_exp -> .binary_exp binary_op unary_exp  | AND, compound_stm -> .LBrace block_item_list RBrace  | for, primary_exp -> .Number  | EQ, primary_exp -> .Number  | Question, exp_stm -> .exp Semicolon  | -struct-, jump_stm -> .-goto- ID  | -long-, selection_stm -> .if LParen exp RParen stm  | String, postfix_exp -> .postfix_exp Dot ID  | GE, jump_stm -> .-continue-  | -struct-, jump_stm -> .-return- exp Semicolon  | -int-, selection_stm -> if LParen exp RParen .stm else stm  | ID, selection_stm -> .if LParen exp RParen stm  | -int-, unary_exp -> .postfix_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | LeftShift, binary_exp -> .unary_exp  | Ampersand, stm -> .jump_stm  | String, stm -> .iteration_stm  | -half2-, selection_stm -> if LParen exp RParen .stm  | Decrement, stm -> .exp_stm  | -long-, jump_stm -> .-return- exp Semicolon  | -return-, postfix_exp -> .postfix_exp LParen RParen  | LParen, selection_stm -> .if LParen exp RParen stm  | else, iteration_stm -> .while LParen exp RParen stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Comma, exp_stm -> .Semicolon  | if, selection_stm -> if LParen exp RParen .stm else stm  | Tilde, selection_stm -> if LParen exp RParen .stm  | -float3-, selection_stm -> .if LParen exp RParen stm else stm  | -do-, selection_stm -> if LParen exp RParen .stm else stm  | -half2-, jump_stm -> .-goto- ID  | -fixed2-, stm -> .exp_stm  | Tilde, postfix_exp -> .primary_exp  | LE, exp_stm -> .exp Semicolon  | Semicolon, exp_stm -> .exp Semicolon  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | String, compound_stm -> .LBrace block_item_list RBrace  | -float-, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, selection_stm -> .if LParen exp RParen stm  | -void-, stm -> .exp_stm  | -do-, selection_stm -> if LParen exp RParen .stm  | -float2-, selection_stm -> .if LParen exp RParen stm  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, postfix_exp -> .postfix_exp Increment  | Question, stm -> .compound_stm  | NOT, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Ampersand, iteration_stm -> .while LParen exp RParen stm  | while, stm -> .compound_stm  | -float-, compound_stm -> .LBrace block_item_list RBrace  | Plus, unary_exp -> .Decrement unary_exp  | Assign, iteration_stm -> .while LParen exp RParen stm  | -do-, stm -> .jump_stm  | Decrement, jump_stm -> .-return- exp Semicolon  | Number, primary_exp -> .String  | NEQ, exp_stm -> .Semicolon  | -half4-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -double-, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, iteration_stm -> .while LParen exp RParen stm  | Tilde, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .primary_exp  | Semicolon, selection_stm -> if LParen exp RParen .stm else stm  | -float3-, exp_stm -> .Semicolon  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | -uniform-, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Decrement, selection_stm -> if LParen exp RParen .stm  | -short-, exp_stm -> .exp Semicolon  | -continue-, selection_stm -> .if LParen exp RParen stm else stm  | Plus, postfix_exp -> .primary_exp  | Times, stm -> .iteration_stm  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, selection_stm -> if LParen exp RParen .stm  | -uniform-, postfix_exp -> .primary_exp  | EQ, jump_stm -> .-continue-  | break, iteration_stm -> .while LParen exp RParen stm  | Minus, selection_stm -> if LParen exp RParen .stm  | -long-, selection_stm -> if LParen exp RParen .stm else stm  | -float-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Tilde, postfix_exp -> .postfix_exp LParen RParen  | LBrack, selection_stm -> if LParen exp RParen .stm  | Tilde, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | -float4-, selection_stm -> .if LParen exp RParen stm  | -sampler2D-, selection_stm -> if LParen exp RParen .stm else stm  | -long-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, selection_stm -> if LParen exp RParen .stm else stm  | -sampler2D-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -short-, jump_stm -> .-continue-  | -void-, compound_stm -> .LBrace block_item_list RBrace  | -return-, jump_stm -> .break  | RBrace, selection_stm -> .if LParen exp RParen stm  | -float2-, compound_stm -> .LBrace block_item_list RBrace  | -half2-, jump_stm -> .-return- exp Semicolon  | -double-, primary_exp -> .LParen exp RParen  | GT, stm -> .iteration_stm  | LBrace, postfix_exp -> .primary_exp  | Increment, jump_stm -> .-return- exp Semicolon  | else, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | NEQ, compound_stm -> .LBrace block_item_list RBrace  | LParen, jump_stm -> .break  | Number, stm -> .jump_stm  | -do-, postfix_exp -> .postfix_exp Decrement  | Plus, exp_stm -> .exp Semicolon  | -half4-, selection_stm -> if LParen exp RParen .stm  | for, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, primary_exp -> .ID  | OR, stm -> .jump_stm  | break, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed3-, selection_stm -> .if LParen exp RParen stm else stm  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float-, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, jump_stm -> .-return- exp Semicolon  | NOT, postfix_exp -> .postfix_exp Increment  | Times, selection_stm -> .if LParen exp RParen stm else stm  | Decrement, stm -> .selection_stm  | -fixed3-, jump_stm -> .-goto- ID  | String, stm -> .compound_stm  | -double-, stm -> .exp_stm  | if, jump_stm -> .break  | String, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, binary_exp -> .unary_exp  | GE, selection_stm -> .if LParen exp RParen stm  | Minus, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, selection_stm -> .if LParen exp RParen stm  | RBrace, postfix_exp -> .postfix_exp Decrement  | LeftShift, selection_stm -> .if LParen exp RParen stm else stm  | Tilde, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, stm -> .selection_stm  | Number, stm -> .iteration_stm  | Minus, selection_stm -> if LParen exp RParen .stm  | break, jump_stm -> .-goto- ID  | -short-, selection_stm -> if LParen exp RParen .stm  | else, stm -> .selection_stm  | -uniform-, postfix_exp -> .postfix_exp Increment  | VerticalBar, stm -> .selection_stm  | -do-, selection_stm -> if LParen exp RParen .stm else stm  | RBrace, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, compound_stm -> .LBrace RBrace  | while, stm -> .exp_stm  | -float-, unary_exp -> .Increment unary_exp  | Minus, binary_exp -> .unary_exp  | VerticalBar, stm -> .iteration_stm  | Plus, exp_stm -> .Semicolon  | Increment, jump_stm -> .break  | Plus, stm -> .exp_stm  | -double-, stm -> .selection_stm  | Minus, jump_stm -> .-continue-  | -return-, stm -> .exp_stm  | -struct-, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Semicolon, unary_op -> .Tilde  | Number, unary_exp -> .Increment unary_exp  | RightShift, exp_stm -> .exp Semicolon  | -goto-, stm -> .jump_stm  | while, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, stm -> .iteration_stm  | Semicolon, stm -> .exp_stm  | -float4-, jump_stm -> .break  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | if, postfix_exp -> .postfix_exp Dot ID  | LT, jump_stm -> .-continue-  | for, unary_exp -> .unary_op unary_exp  | Assign, selection_stm -> if LParen exp RParen .stm  | -fixed3-, jump_stm -> .-return- exp Semicolon  | -half2-, jump_stm -> .-return- exp Semicolon  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, stm -> .iteration_stm  | -continue-, selection_stm -> .if LParen exp RParen stm else stm  | -float-, unary_op -> .Plus  | Plus, selection_stm -> .if LParen exp RParen stm  | -half2-, primary_exp -> .ID  | LE, stm -> .exp_stm  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | String, selection_stm -> .if LParen exp RParen stm else stm  | -sampler2D-, unary_op -> .Minus  | LParen, selection_stm -> if LParen exp RParen .stm  | -double-, exp_stm -> .Semicolon  | -float-, selection_stm -> if LParen exp RParen .stm else stm  | -fixed2-, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, selection_stm -> .if LParen exp RParen stm else stm  | String, primary_exp -> .ID  | Semicolon, selection_stm -> if LParen exp RParen .stm else stm  | Number, jump_stm -> .break  | -uniform-, jump_stm -> .-goto- ID  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | String, stm -> .jump_stm  | LBrace, unary_op -> .NOT  | Number, primary_exp -> .ID  | Assign, stm -> .exp_stm  | Number, stm -> .iteration_stm  | -half4-, postfix_exp -> .primary_exp  | AND, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, selection_stm -> if LParen exp RParen .stm else stm  | String, postfix_exp -> .postfix_exp Dot ID  | Comma, jump_stm -> .break  | -float2-, unary_exp -> .Increment unary_exp  | NEQ, stm -> .compound_stm  | String, unary_exp -> .unary_op unary_exp  | LeftShift, primary_exp -> .LParen exp RParen  | Divide, compound_stm -> .LBrace RBrace  | -return-, stm -> .exp_stm  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp LParen RParen  | LE, jump_stm -> .-return- exp Semicolon  | LParen, iteration_stm -> .while LParen exp RParen stm  | if, stm -> .selection_stm  | -float3-, postfix_exp -> .primary_exp  | Plus, stm -> .jump_stm  | -float4-, stm -> .iteration_stm  | for, stm -> .compound_stm  | Tilde, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, iteration_stm -> .while LParen exp RParen stm  | -goto-, stm -> .jump_stm  | NOT, selection_stm -> .if LParen exp RParen stm  | NOT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, selection_stm -> if LParen exp RParen .stm else stm  | -short-, exp_stm -> .Semicolon  | -float4-, stm -> .selection_stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | LE, stm -> .compound_stm  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | AND, stm -> .exp_stm  | -int-, stm -> .iteration_stm  | break, primary_exp -> .Number  | GE, compound_stm -> .LBrace block_item_list RBrace  | -int-, stm -> .selection_stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -half3-, stm -> .iteration_stm  | -double-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -goto-, selection_stm -> if LParen exp RParen .stm  | -half3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | else, binary_exp -> .unary_exp  | NEQ, stm -> .iteration_stm  | -float3-, compound_stm -> .LBrace RBrace  | Number, selection_stm -> .if LParen exp RParen stm  | -half4-, primary_exp -> .String  | Increment, jump_stm -> .-return- exp Semicolon  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -uniform-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float3-, stm -> .compound_stm  | if, primary_exp -> .Number  | Plus, unary_op -> .Plus  | Decrement, jump_stm -> .-return- exp Semicolon  | ID, jump_stm -> .-goto- ID  | -float4-, jump_stm -> .-return- exp Semicolon  | -char-, postfix_exp -> .postfix_exp Decrement  | Assign, selection_stm -> if LParen exp RParen .stm else stm  | if, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed3-, stm -> .jump_stm  | -half3-, primary_exp -> .Number  | Dot, exp_stm -> .Semicolon  | -do-, exp_stm -> .exp Semicolon  | -fixed3-, primary_exp -> .LParen exp RParen  | Ampersand, jump_stm -> .-goto- ID  | -double-, stm -> .jump_stm  | -struct-, selection_stm -> if LParen exp RParen .stm else stm  | Minus, postfix_exp -> .primary_exp  | Comma, primary_exp -> .ID  | LBrack, jump_stm -> .-return- exp Semicolon  | Semicolon, selection_stm -> .if LParen exp RParen stm  | Decrement, primary_exp -> .LParen exp RParen  | LBrack, selection_stm -> if LParen exp RParen .stm else stm  | for, selection_stm -> .if LParen exp RParen stm  | LParen, jump_stm -> .-continue-  | -int-, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, jump_stm -> .break  | -fixed2-, exp_stm -> .exp Semicolon  | -short-, primary_exp -> .String  | Assign, compound_stm -> .LBrace RBrace  | Plus, unary_exp -> .unary_op unary_exp  | EQ, stm -> .exp_stm  | for, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, exp_stm -> .Semicolon  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | String, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, stm -> .selection_stm  | -half4-, primary_exp -> .LParen exp RParen  | Semicolon, compound_stm -> .LBrace RBrace  | break, selection_stm -> .if LParen exp RParen stm else stm  | -int-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, selection_stm -> .if LParen exp RParen stm else stm  | if, stm -> .iteration_stm  | -uniform-, stm -> .selection_stm  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | -continue-, jump_stm -> .-goto- ID  | -void-, compound_stm -> .LBrace block_item_list RBrace  | -fixed2-, exp_stm -> .Semicolon  | Tilde, compound_stm -> .LBrace block_item_list RBrace  | NOT, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, compound_stm -> .LBrace RBrace  | -char-, postfix_exp -> .postfix_exp Decrement  | Comma, primary_exp -> .String  | LT, compound_stm -> .LBrace RBrace  | -sampler2D-, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, postfix_exp -> .postfix_exp Increment  | AND, selection_stm -> .if LParen exp RParen stm  | Semicolon, primary_exp -> .LParen exp RParen  | LParen, stm -> .compound_stm  | -void-, stm -> .jump_stm  | -float2-, stm -> .jump_stm  | Number, unary_exp -> .unary_op unary_exp  | Ampersand, exp_stm -> .exp Semicolon  | RBrace, exp_stm -> .exp Semicolon  | -int-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half4-, jump_stm -> .break  | -do-, stm -> .iteration_stm  | -fixed3-, stm -> .jump_stm  | Plus, selection_stm -> if LParen exp RParen .stm  | -int-, compound_stm -> .LBrace RBrace  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Number, postfix_exp -> .primary_exp  | Assign, iteration_stm -> .while LParen exp RParen stm  | LParen, stm -> .iteration_stm  | -float2-, exp_stm -> .Semicolon  | LBrace, exp_stm -> .exp Semicolon  | -void-, jump_stm -> .-continue-  | else, stm -> .exp_stm  | -half4-, primary_exp -> .ID  | Times, compound_stm -> .LBrace RBrace  | -fixed2-, stm -> .selection_stm  | -return-, exp_stm -> .Semicolon  | -continue-, unary_op -> .Tilde  | Increment, postfix_exp -> .postfix_exp Decrement  | Increment, stm -> .iteration_stm  | -fixed4-, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, stm -> .selection_stm  | Decrement, selection_stm -> if LParen exp RParen .stm  | -void-, exp_stm -> .exp Semicolon  | if, postfix_exp -> .primary_exp  | LT, unary_exp -> .Decrement unary_exp  | LeftShift, stm -> .exp_stm  | Increment, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | for, stm -> .compound_stm  | ID, selection_stm -> .if LParen exp RParen stm  | while, stm -> .exp_stm  | LBrace, jump_stm -> .-continue-  | -half4-, iteration_stm -> .while LParen exp RParen stm  | -continue-, stm -> .jump_stm  | -float3-, jump_stm -> .break  | for, postfix_exp -> .primary_exp  | LBrack, jump_stm -> .-continue-  | -half2-, primary_exp -> .Number  | Increment, compound_stm -> .LBrace RBrace  | -void-, selection_stm -> if LParen exp RParen .stm else stm  | Decrement, exp_stm -> .Semicolon  | -fixed2-, selection_stm -> .if LParen exp RParen stm else stm  | -void-, jump_stm -> .-continue-  | while, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Plus, exp_stm -> .Semicolon  | -goto-, iteration_stm -> .while LParen exp RParen stm  | -void-, jump_stm -> .break  | -float3-, stm -> .iteration_stm  | -char-, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, jump_stm -> .break  | -float4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | NOT, stm -> .jump_stm  | -void-, primary_exp -> .Number  | VerticalBar, primary_exp -> .String  | Plus, selection_stm -> if LParen exp RParen .stm else stm  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | LT, jump_stm -> .-return- exp Semicolon  | -void-, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, jump_stm -> .break  | -return-, compound_stm -> .LBrace RBrace  | -fixed4-, postfix_exp -> .postfix_exp Dot ID  | Question, selection_stm -> if LParen exp RParen .stm else stm  | Plus, exp_stm -> .exp Semicolon  | -sampler2D-, exp_stm -> .exp Semicolon  | -fixed4-, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, stm -> .exp_stm  | break, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float3-, stm -> .exp_stm  | -void-, unary_op -> .Minus  | ID, stm -> .jump_stm  | Minus, primary_exp -> .String  | EQ, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | ID, jump_stm -> .-continue-  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -float3-, primary_exp -> .ID  | Divide, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed4-, selection_stm -> if LParen exp RParen .stm  | ID, stm -> .exp_stm  | -goto-, jump_stm -> .-continue-  | Tilde, stm -> .compound_stm  | Decrement, jump_stm -> .-goto- ID  | ID, jump_stm -> .break  | Increment, selection_stm -> .if LParen exp RParen stm else stm  | -fixed2-, stm -> .exp_stm  | -fixed3-, stm -> .compound_stm  | LParen, unary_op -> .Minus  | String, selection_stm -> if LParen exp RParen .stm  | if, jump_stm -> .break  | if, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half4-, selection_stm -> if LParen exp RParen .stm else stm  | break, unary_exp -> .unary_op unary_exp  | Comma, jump_stm -> .-return- exp Semicolon  | -goto-, stm -> .compound_stm  | RBrace, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Semicolon, stm -> .compound_stm  | -fixed4-, exp_stm -> .exp Semicolon  | -half2-, selection_stm -> .if LParen exp RParen stm else stm  | -return-, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | Minus, iteration_stm -> .while LParen exp RParen stm  | break, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -int-, jump_stm -> .-continue-  | -continue-, jump_stm -> .-return- exp Semicolon  | -do-, selection_stm -> if LParen exp RParen .stm else stm  | -float2-, stm -> .compound_stm  | -short-, jump_stm -> .-goto- ID  | -float2-, selection_stm -> if LParen exp RParen .stm  | LBrace, stm -> .selection_stm  | Tilde, postfix_exp -> .postfix_exp Increment  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -float2-, stm -> .exp_stm  | -fixed4-, jump_stm -> .break  | -char-, binary_exp -> .unary_exp  | OR, stm -> .compound_stm  | -long-, stm -> .compound_stm  | -fixed2-, binary_exp -> .unary_exp  | Caret, postfix_exp -> .postfix_exp Decrement  | Dot, jump_stm -> .-goto- ID  | Increment, selection_stm -> .if LParen exp RParen stm else stm  | LParen, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | LBrack, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LBrace, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, stm -> .iteration_stm  | -half3-, stm -> .compound_stm  | -char-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | break, compound_stm -> .LBrace RBrace  | -long-, jump_stm -> .break  | -long-, jump_stm -> .-continue-  | -uniform-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LBrace, stm -> .compound_stm  | -goto-, selection_stm -> .if LParen exp RParen stm  | -short-, postfix_exp -> .primary_exp  | LParen, stm -> .selection_stm  | LBrace, stm -> .compound_stm  | -float4-, postfix_exp -> .postfix_exp LParen RParen  | Assign, compound_stm -> .LBrace RBrace  | -half3-, selection_stm -> .if LParen exp RParen stm else stm  | -fixed4-, jump_stm -> .break  | -half4-, unary_op -> .NOT  | Decrement, iteration_stm -> .while LParen exp RParen stm  | -uniform-, jump_stm -> .-continue-  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -short-, postfix_exp -> .postfix_exp LParen RParen  | NEQ, stm -> .iteration_stm  | -float-, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, jump_stm -> .-return- exp Semicolon  | -half3-, primary_exp -> .LParen exp RParen  | NEQ, compound_stm -> .LBrace RBrace  | Increment, stm -> .compound_stm  | -continue-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, stm -> .exp_stm  | Plus, postfix_exp -> .postfix_exp Decrement  | Minus, postfix_exp -> .postfix_exp Dot ID  | Percent, stm -> .selection_stm  | -goto-, selection_stm -> if LParen exp RParen .stm  | -half4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, selection_stm -> if LParen exp RParen .stm  | while, postfix_exp -> .postfix_exp Decrement  | Times, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -int-, unary_op -> .NOT  | LParen, stm -> .iteration_stm  | ID, stm -> .compound_stm  | Plus, exp_stm -> .exp Semicolon  | String, compound_stm -> .LBrace block_item_list RBrace  | RBrace, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, selection_stm -> if LParen exp RParen .stm  | Plus, primary_exp -> .String  | Dot, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Increment, exp_stm -> .exp Semicolon  | -long-, jump_stm -> .-return- exp Semicolon  | -short-, compound_stm -> .LBrace RBrace  | String, stm -> .exp_stm  | while, selection_stm -> if LParen exp RParen .stm else stm  | -fixed4-, stm -> .selection_stm  | -void-, unary_exp -> .unary_op unary_exp  | Plus, exp_stm -> .Semicolon  | while, primary_exp -> .ID  | Comma, stm -> .compound_stm  | -float3-, primary_exp -> .String  | LeftShift, jump_stm -> .-continue-  | -fixed3-, selection_stm -> .if LParen exp RParen stm else stm  | Increment, postfix_exp -> .postfix_exp LParen RParen  | GE, stm -> .selection_stm  | -float4-, postfix_exp -> .primary_exp  | OR, iteration_stm -> .while LParen exp RParen stm  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | while, unary_exp -> .postfix_exp  | RightShift, compound_stm -> .LBrace block_item_list RBrace  | -fixed4-, iteration_stm -> .while LParen exp RParen stm  | -float2-, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_exp -> .Increment unary_exp  | Divide, exp_stm -> .Semicolon  | ID, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed2-, jump_stm -> .-goto- ID  | -struct-, primary_exp -> .Number  | AND, exp_stm -> .exp Semicolon  | -half3-, jump_stm -> .break  | Minus, iteration_stm -> .while LParen exp RParen stm  | Plus, postfix_exp -> .postfix_exp Dot ID  | Minus, compound_stm -> .LBrace RBrace  | if, jump_stm -> .break  | -void-, jump_stm -> .-goto- ID  | -float3-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, iteration_stm -> .while LParen exp RParen stm  | -float-, stm -> .selection_stm  | Plus, compound_stm -> .LBrace RBrace  | NOT, exp_stm -> .Semicolon  | Decrement, selection_stm -> .if LParen exp RParen stm  | Number, selection_stm -> if LParen exp RParen .stm else stm  | LBrace, exp_stm -> .Semicolon  | -float2-, iteration_stm -> .while LParen exp RParen stm  | Number, jump_stm -> .-return- exp Semicolon  | -long-, unary_op -> .Tilde  | Plus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | NOT, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .String  | Caret, exp_stm -> .exp Semicolon  | Decrement, stm -> .compound_stm  | -sampler2D-, stm -> .selection_stm  | LParen, jump_stm -> .-goto- ID  | else, stm -> .iteration_stm  | LParen, stm -> .jump_stm  | -half2-, iteration_stm -> .while LParen exp RParen stm  | LBrace, selection_stm -> .if LParen exp RParen stm  | -long-, binary_exp -> .unary_exp  | EQ, unary_exp -> .postfix_exp  | Minus, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half2-, unary_op -> .Tilde  | Tilde, jump_stm -> .break  | ID, exp_stm -> .Semicolon  | -fixed3-, stm -> .compound_stm  | -struct-, jump_stm -> .-goto- ID  | Semicolon, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half3-, stm -> .exp_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -return-, unary_exp -> .Decrement unary_exp  | Divide, stm -> .iteration_stm  | Tilde, compound_stm -> .LBrace block_item_list RBrace  | LBrace, selection_stm -> if LParen exp RParen .stm  | Number, postfix_exp -> .postfix_exp Increment  | Semicolon, jump_stm -> .break  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | -fixed3-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, stm -> .selection_stm  | -struct-, stm -> .exp_stm  | -return-, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, stm -> .exp_stm  | -char-, postfix_exp -> .postfix_exp Decrement  | Ampersand, exp_stm -> .exp Semicolon  | -double-, postfix_exp -> .postfix_exp Increment  | GT, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -long-, selection_stm -> .if LParen exp RParen stm else stm  | RBrace, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, jump_stm -> .-goto- ID  | -int-, compound_stm -> .LBrace RBrace  | -half2-, jump_stm -> .-goto- ID  | -do-, stm -> .selection_stm  | if, stm -> .compound_stm  | -uniform-, exp_stm -> .exp Semicolon  | -float-, stm -> .jump_stm  | -float-, selection_stm -> if LParen exp RParen .stm  | -sampler2D-, compound_stm -> .LBrace RBrace  | -float4-, jump_stm -> .-continue-  | RBrace, binary_exp -> .unary_exp  | LE, jump_stm -> .-return- exp Semicolon  | -float4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | RBrace, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, stm -> .exp_stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, stm -> .exp_stm  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -long-, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Percent, primary_exp -> .ID  | VerticalBar, jump_stm -> .-return- exp Semicolon  | -float3-, jump_stm -> .-return- exp Semicolon  | -fixed4-, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | if, selection_stm -> if LParen exp RParen .stm else stm  | -fixed3-, exp_stm -> .exp Semicolon  | -char-, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Comma, compound_stm -> .LBrace block_item_list RBrace  | -float2-, jump_stm -> .-continue-  | -fixed2-, primary_exp -> .Number  | LeftShift, selection_stm -> if LParen exp RParen .stm  | String, stm -> .compound_stm  | LBrace, jump_stm -> .break  | while, exp_stm -> .exp Semicolon  | while, jump_stm -> .break  | LParen, compound_stm -> .LBrace RBrace  | LBrace, jump_stm -> .-goto- ID  | -float-, exp_stm -> .exp Semicolon  | LBrace, jump_stm -> .-continue-  | -short-, iteration_stm -> .while LParen exp RParen stm  | for, unary_exp -> .Decrement unary_exp  | LT, binary_exp -> .binary_exp binary_op unary_exp  | EQ, exp_stm -> .exp Semicolon  | for, primary_exp -> .LParen exp RParen  | AND, compound_stm -> .LBrace block_item_list RBrace  | -void-, stm -> .exp_stm  | -fixed2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, selection_stm -> .if LParen exp RParen stm  | -fixed2-, primary_exp -> .LParen exp RParen  | Times, stm -> .selection_stm  | ID, selection_stm -> .if LParen exp RParen stm  | -double-, exp_stm -> .Semicolon  | LParen, postfix_exp -> .primary_exp  | Percent, selection_stm -> if LParen exp RParen .stm  | Semicolon, primary_exp -> .String  | Comma, compound_stm -> .LBrace block_item_list RBrace  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, stm -> .iteration_stm  | -fixed2-, selection_stm -> .if LParen exp RParen stm else stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Question, stm -> .exp_stm  | Minus, stm -> .jump_stm  | -fixed3-, exp_stm -> .Semicolon  | -char-, primary_exp -> .Number  | RightShift, jump_stm -> .-continue-  | -goto-, jump_stm -> .-return- exp Semicolon  | LBrace, binary_exp -> .unary_exp  | Question, selection_stm -> if LParen exp RParen .stm  | Minus, selection_stm -> .if LParen exp RParen stm  | -goto-, primary_exp -> .LParen exp RParen  | RightShift, selection_stm -> .if LParen exp RParen stm  | -fixed3-, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, binary_exp -> .binary_exp binary_op unary_exp  | Plus, primary_exp -> .String  | VerticalBar, stm -> .jump_stm  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | for, iteration_stm -> .while LParen exp RParen stm  | Semicolon, primary_exp -> .Number  | Times, jump_stm -> .-return- exp Semicolon  | Increment, binary_exp -> .binary_exp binary_op unary_exp  | Times, selection_stm -> if LParen exp RParen .stm  | -return-, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, selection_stm -> if LParen exp RParen .stm  | -do-, jump_stm -> .-return- exp Semicolon  | Tilde, stm -> .iteration_stm  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -void-, primary_exp -> .ID  | Minus, selection_stm -> .if LParen exp RParen stm  | -continue-, unary_exp -> .unary_op unary_exp  | Question, stm -> .selection_stm  | -half3-, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, unary_op -> .Plus  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -sampler2D-, compound_stm -> .LBrace RBrace  | -fixed3-, unary_exp -> .unary_op unary_exp  | Times, stm -> .iteration_stm  | -int-, jump_stm -> .-return- exp Semicolon  | break, stm -> .jump_stm  | -double-, jump_stm -> .break  | NOT, exp_stm -> .exp Semicolon  | Plus, jump_stm -> .-continue-  | -float2-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .String  | Question, jump_stm -> .-continue-  | -char-, primary_exp -> .Number  | Decrement, unary_exp -> .postfix_exp  | AND, selection_stm -> .if LParen exp RParen stm  | break, postfix_exp -> .postfix_exp LParen RParen  | Comma, selection_stm -> .if LParen exp RParen stm  | -float4-, stm -> .iteration_stm  | -do-, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, unary_exp -> .Decrement unary_exp  | GT, compound_stm -> .LBrace RBrace  | Minus, selection_stm -> if LParen exp RParen .stm else stm  | -continue-, stm -> .selection_stm  | -char-, compound_stm -> .LBrace block_item_list RBrace  | ID, unary_exp -> .unary_op unary_exp  | VerticalBar, stm -> .exp_stm  | String, stm -> .exp_stm  | -float3-, jump_stm -> .-continue-  | -float-, unary_exp -> .Increment unary_exp  | GT, jump_stm -> .break  | -double-, postfix_exp -> .postfix_exp LParen RParen  | OR, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float4-, compound_stm -> .LBrace block_item_list RBrace  | -sampler2D-, exp_stm -> .exp Semicolon  | -return-, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | LeftShift, selection_stm -> .if LParen exp RParen stm else stm  | -uniform-, compound_stm -> .LBrace RBrace  | -continue-, exp_stm -> .exp Semicolon  | Number, primary_exp -> .String  | Minus, iteration_stm -> .while LParen exp RParen stm  | else, postfix_exp -> .postfix_exp Increment  | RightShift, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | NEQ, selection_stm -> .if LParen exp RParen stm  | -uniform-, postfix_exp -> .postfix_exp Increment  | Percent, selection_stm -> if LParen exp RParen .stm else stm  | -return-, postfix_exp -> .primary_exp  | Caret, compound_stm -> .LBrace block_item_list RBrace  | break, exp_stm -> .Semicolon  | -double-, selection_stm -> .if LParen exp RParen stm  | -float3-, jump_stm -> .-continue-  | -sampler2D-, postfix_exp -> .postfix_exp Decrement  | EQ, iteration_stm -> .while LParen exp RParen stm  | -int-, jump_stm -> .-goto- ID  | Tilde, selection_stm -> if LParen exp RParen .stm else stm  | NOT, stm -> .compound_stm  | Increment, exp_stm -> .exp Semicolon  | Tilde, stm -> .compound_stm  | -float2-, jump_stm -> .-goto- ID  | Number, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, postfix_exp -> .primary_exp  | Decrement, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -continue-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -goto-, binary_exp -> .binary_exp binary_op unary_exp  | Minus, jump_stm -> .-goto- ID  | Decrement, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | OR, primary_exp -> .Number  | GT, postfix_exp -> .primary_exp  | Question, jump_stm -> .-goto- ID  | -uniform-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, jump_stm -> .break  | -fixed4-, compound_stm -> .LBrace RBrace  | -uniform-, unary_exp -> .unary_op unary_exp  | GT, iteration_stm -> .while LParen exp RParen stm  | Decrement, stm -> .iteration_stm  | while, postfix_exp -> .postfix_exp Increment  | Increment, selection_stm -> .if LParen exp RParen stm  | -return-, stm -> .compound_stm  | -half2-, exp_stm -> .Semicolon  | -return-, selection_stm -> .if LParen exp RParen stm  | LBrace, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, stm -> .iteration_stm  | -short-, exp_stm -> .exp Semicolon  | else, unary_op -> .Minus  | Plus, jump_stm -> .-continue-  | LParen, selection_stm -> .if LParen exp RParen stm  | Tilde, postfix_exp -> .postfix_exp Increment  | LeftShift, selection_stm -> .if LParen exp RParen stm else stm  | -fixed3-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, stm -> .compound_stm  | while, unary_exp -> .postfix_exp  | Caret, stm -> .jump_stm  | Increment, stm -> .exp_stm  | -half3-, stm -> .exp_stm  | -sampler2D-, primary_exp -> .ID  | LT, jump_stm -> .-goto- ID  | break, postfix_exp -> .postfix_exp Dot ID  | Caret, iteration_stm -> .while LParen exp RParen stm  | NOT, compound_stm -> .LBrace RBrace  | -int-, selection_stm -> if LParen exp RParen .stm else stm  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, selection_stm -> if LParen exp RParen .stm else stm  | -struct-, primary_exp -> .LParen exp RParen  | Assign, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -return-, selection_stm -> .if LParen exp RParen stm  | Plus, primary_exp -> .Number  | Percent, jump_stm -> .-continue-  | LBrace, stm -> .jump_stm  | -fixed4-, iteration_stm -> .while LParen exp RParen stm  | -return-, primary_exp -> .LParen exp RParen  | Question, selection_stm -> if LParen exp RParen .stm  | LParen, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -double-, primary_exp -> .Number  | Assign, jump_stm -> .-return- exp Semicolon  | for, postfix_exp -> .postfix_exp Decrement  | NEQ, jump_stm -> .break  | -float-, unary_exp -> .Increment unary_exp  | Caret, jump_stm -> .break  | -goto-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Increment, compound_stm -> .LBrace block_item_list RBrace  | -short-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed2-, jump_stm -> .-goto- ID  | -goto-, stm -> .exp_stm  | -continue-, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, selection_stm -> .if LParen exp RParen stm  | -fixed4-, exp_stm -> .Semicolon  | -uniform-, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, stm -> .compound_stm  | -int-, jump_stm -> .-goto- ID  | while, selection_stm -> if LParen exp RParen .stm else stm  | while, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Minus, stm -> .iteration_stm  | else, stm -> .selection_stm  | -half2-, postfix_exp -> .postfix_exp Decrement  | Divide, selection_stm -> if LParen exp RParen .stm else stm  | -half3-, exp_stm -> .exp Semicolon  | break, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, iteration_stm -> .while LParen exp RParen stm  | -fixed2-, stm -> .selection_stm  | -float-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -do-, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, stm -> .exp_stm  | ID, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Tilde, stm -> .selection_stm  | Semicolon, primary_exp -> .ID  | GE, jump_stm -> .-continue-  | -long-, primary_exp -> .String  | Divide, stm -> .compound_stm  | -fixed3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | RBrace, postfix_exp -> .postfix_exp Increment  | Minus, binary_exp -> .unary_exp  | LeftShift, iteration_stm -> .while LParen exp RParen stm  | -double-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -sampler2D-, jump_stm -> .-goto- ID  | LBrace, primary_exp -> .ID  | RightShift, selection_stm -> if LParen exp RParen .stm  | RBrace, selection_stm -> .if LParen exp RParen stm else stm  | -char-, stm -> .iteration_stm  | -long-, iteration_stm -> .while LParen exp RParen stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -short-, selection_stm -> if LParen exp RParen .stm  | -fixed2-, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, postfix_exp -> .postfix_exp Dot ID  | RightShift, exp_stm -> .Semicolon  | else, stm -> .compound_stm  | Number, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, stm -> .compound_stm  | for, unary_exp -> .unary_op unary_exp  | Minus, unary_exp -> .unary_op unary_exp  | RightShift, compound_stm -> .LBrace RBrace  | -short-, stm -> .iteration_stm  | Increment, stm -> .selection_stm  | break, stm -> .compound_stm  | -do-, primary_exp -> .LParen exp RParen  | LE, stm -> .jump_stm  | if, primary_exp -> .ID  | Caret, exp_stm -> .Semicolon  | -short-, stm -> .compound_stm  | -half4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Decrement, stm -> .iteration_stm  | if, compound_stm -> .LBrace block_item_list RBrace  | -float4-, unary_exp -> .unary_op unary_exp  | NEQ, jump_stm -> .-goto- ID  | -char-, jump_stm -> .-return- exp Semicolon  | -sampler2D-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half3-, jump_stm -> .-continue-  | -float3-, exp_stm -> .exp Semicolon  | -uniform-, exp_stm -> .exp Semicolon  | Minus, selection_stm -> .if LParen exp RParen stm  | for, selection_stm -> .if LParen exp RParen stm  | ID, jump_stm -> .-goto- ID  | Minus, primary_exp -> .ID  | Question, stm -> .jump_stm  | ID, jump_stm -> .-return- exp Semicolon  | -half4-, selection_stm -> .if LParen exp RParen stm  | -half3-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Divide, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float2-, compound_stm -> .LBrace RBrace  | -struct-, selection_stm -> if LParen exp RParen .stm  | -goto-, jump_stm -> .-goto- ID  | -half4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, jump_stm -> .-continue-  | ID, compound_stm -> .LBrace RBrace  | -goto-, postfix_exp -> .postfix_exp LParen RParen  | Divide, jump_stm -> .-return- exp Semicolon  | Plus, stm -> .jump_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half2-, unary_exp -> .Increment unary_exp  | Comma, selection_stm -> if LParen exp RParen .stm else stm  | -goto-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -uniform-, exp_stm -> .Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | for, unary_exp -> .Increment unary_exp  | Assign, jump_stm -> .-goto- ID  | -return-, postfix_exp -> .postfix_exp Increment  | Assign, jump_stm -> .break  | Tilde, selection_stm -> .if LParen exp RParen stm else stm  | -float3-, postfix_exp -> .postfix_exp LParen RParen  | Times, jump_stm -> .-goto- ID  | -fixed3-, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | LT, stm -> .selection_stm  | -sampler2D-, jump_stm -> .-continue-  | -half3-, primary_exp -> .Number  | Minus, stm -> .iteration_stm  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -half4-, stm -> .jump_stm  | LParen, jump_stm -> .-continue-  | -do-, primary_exp -> .LParen exp RParen  | Increment, jump_stm -> .-return- exp Semicolon  | -fixed2-, jump_stm -> .-goto- ID  | for, jump_stm -> .-goto- ID  | if, compound_stm -> .LBrace RBrace  | LParen, stm -> .jump_stm  | -int-, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, compound_stm -> .LBrace RBrace  | else, selection_stm -> .if LParen exp RParen stm else stm  | -struct-, jump_stm -> .-return- exp Semicolon  | -continue-, stm -> .selection_stm  | -int-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | ID, primary_exp -> .String  | LBrack, assignment_exp -> .conditional_exp  | Comma, postfix_exp -> .primary_exp  | GT, stm -> .selection_stm  | else, exp_stm -> .Semicolon  | -void-, jump_stm -> .-return- exp Semicolon  | Minus, postfix_exp -> .postfix_exp Decrement  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, stm -> .selection_stm  | String, postfix_exp -> .postfix_exp LParen RParen  | Caret, primary_exp -> .ID  | AND, postfix_exp -> .postfix_exp LParen RParen  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Dot, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | String, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, exp_stm -> .Semicolon  | NOT, primary_exp -> .String  | Ampersand, selection_stm -> if LParen exp RParen .stm else stm  | -float4-, stm -> .jump_stm  | -short-, selection_stm -> if LParen exp RParen .stm  | -struct-, jump_stm -> .-continue-  | Semicolon, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -struct-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | Percent, unary_exp -> .Increment unary_exp  | Plus, primary_exp -> .Number  | Ampersand, selection_stm -> .if LParen exp RParen stm  | -char-, primary_exp -> .ID  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, postfix_exp -> .postfix_exp Decrement  | Percent, stm -> .exp_stm  | RBrace, unary_exp -> .Increment unary_exp  | Semicolon, stm -> .exp_stm  | Decrement, postfix_exp -> .postfix_exp Dot ID  | Increment, stm -> .selection_stm  | -fixed2-, compound_stm -> .LBrace RBrace  | RBrace, primary_exp -> .LParen exp RParen  | Dot, primary_exp -> .Number  | Divide, selection_stm -> if LParen exp RParen .stm  | -fixed4-, stm -> .selection_stm  | -long-, selection_stm -> if LParen exp RParen .stm else stm  | -char-, jump_stm -> .-continue-  | Plus, primary_exp -> .Number  | Semicolon, unary_op -> .Minus  | NOT, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, jump_stm -> .break  | -short-, unary_exp -> .Increment unary_exp  | EQ, selection_stm -> if LParen exp RParen .stm else stm  | -double-, selection_stm -> .if LParen exp RParen stm else stm  | -goto-, selection_stm -> if LParen exp RParen .stm else stm  | -uniform-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | ID, stm -> .jump_stm  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | LParen, primary_exp -> .LParen exp RParen  | Comma, jump_stm -> .-goto- ID  | -continue-, exp_stm -> .Semicolon  | String, jump_stm -> .break  | -int-, jump_stm -> .-goto- ID  | -half3-, selection_stm -> if LParen exp RParen .stm  | Increment, stm -> .selection_stm  | RBrace, stm -> .iteration_stm  | RBrace, stm -> .iteration_stm  | -struct-, jump_stm -> .break  | Semicolon, conditional_exp -> .binary_exp  | Semicolon, selection_stm -> if LParen exp RParen .stm  | NOT, unary_exp -> .Increment unary_exp  | LeftShift, exp_stm -> .exp Semicolon  | -float2-, iteration_stm -> .while LParen exp RParen stm  | -float4-, compound_stm -> .LBrace RBrace  | for, exp_stm -> .Semicolon  | RBrace, selection_stm -> .if LParen exp RParen stm  | -do-, primary_exp -> .Number  | OR, unary_exp -> .Decrement unary_exp  | Plus, binary_exp -> .unary_exp  | LT, primary_exp -> .LParen exp RParen  | Plus, selection_stm -> .if LParen exp RParen stm else stm  | -half2-, postfix_exp -> .postfix_exp Decrement  | Decrement, stm -> .selection_stm  | NOT, jump_stm -> .-return- exp Semicolon  | -float2-, compound_stm -> .LBrace block_item_list RBrace  | -continue-, compound_stm -> .LBrace RBrace  | -float-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -continue-, jump_stm -> .break  | -struct-, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, iteration_stm -> .while LParen exp RParen stm  | -struct-, stm -> .iteration_stm  | -sampler2D-, postfix_exp -> .postfix_exp Increment  | Dot, selection_stm -> if LParen exp RParen .stm else stm  | -half4-, postfix_exp -> .postfix_exp Dot ID  | EQ, stm -> .exp_stm  | else, jump_stm -> .-goto- ID  | NOT, jump_stm -> .-continue-  | Decrement, stm -> .compound_stm  | break, selection_stm -> .if LParen exp RParen stm else stm  | -half4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, stm -> .jump_stm  | for, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Number, unary_op -> .Plus  | Tilde, selection_stm -> .if LParen exp RParen stm else stm  | Semicolon, iteration_stm -> .while LParen exp RParen stm  | -char-, postfix_exp -> .postfix_exp Increment  | Divide, stm -> .selection_stm  | -float2-, stm -> .jump_stm  | -return-, iteration_stm -> .while LParen exp RParen stm  | ID, stm -> .iteration_stm  | -void-, unary_exp -> .Increment unary_exp  | LE, unary_exp -> .postfix_exp  | OR, jump_stm -> .-return- exp Semicolon  | -uniform-, binary_exp -> .binary_exp binary_op unary_exp  | OR, jump_stm -> .-goto- ID  | RBrace, unary_exp -> .Decrement unary_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | LE, binary_exp -> .unary_exp  | RightShift, exp_stm -> .Semicolon  | Number, stm -> .iteration_stm  | -return-, binary_exp -> .unary_exp  | AND, selection_stm -> if LParen exp RParen .stm  | -float4-, unary_op -> .Tilde  | ID, compound_stm -> .LBrace RBrace  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | else, exp_stm -> .Semicolon  | break, unary_op -> .Plus  | NOT, selection_stm -> if LParen exp RParen .stm  | -continue-, postfix_exp -> .primary_exp  | Divide, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, compound_stm -> .LBrace block_item_list RBrace  | -struct-, unary_exp -> .postfix_exp  | Divide, stm -> .selection_stm  | -double-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, stm -> .iteration_stm  | NOT, unary_op -> .Minus  | Decrement, primary_exp -> .Number  | LParen, exp_stm -> .exp Semicolon  | ID, primary_exp -> .Number  | NEQ, unary_exp -> .Increment unary_exp  | AND, jump_stm -> .-continue-  | -double-, stm -> .jump_stm  | -continue-, jump_stm -> .break  | -half3-, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, jump_stm -> .-goto- ID  | -half2-, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, primary_exp -> .LParen exp RParen  | Minus, compound_stm -> .LBrace block_item_list RBrace  | -do-, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Decrement  | OR, exp_stm -> .Semicolon  | for, primary_exp -> .ID  | LeftShift, stm -> .jump_stm  | -half4-, postfix_exp -> .postfix_exp Increment  | EQ, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, jump_stm -> .-goto- ID  | -sampler2D-, exp_stm -> .Semicolon  | -half3-, exp_stm -> .exp Semicolon  | NOT, postfix_exp -> .postfix_exp LParen RParen  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, selection_stm -> .if LParen exp RParen stm else stm  | Number, unary_op -> .NOT  | String, unary_exp -> .postfix_exp  | Percent, unary_exp -> .postfix_exp  | LeftShift, unary_exp -> .postfix_exp  | GE, primary_exp -> .ID  | Dot, unary_exp -> .Increment unary_exp  | Question, unary_exp -> .Increment unary_exp  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Plus, jump_stm -> .-continue-  | Increment, )
587 <- (564, 'RParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, exp_stm -> .Semicolon  | -half2-, iteration_stm -> .while LParen exp RParen stm  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | -char-, unary_exp -> .postfix_exp  | Assign, exp_stm -> .exp Semicolon  | LParen, stm -> .iteration_stm  | String, compound_stm -> .LBrace RBrace  | -float3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -char-, stm -> .selection_stm  | -half2-, unary_exp -> .unary_op unary_exp  | Times, jump_stm -> .break  | -continue-, exp_stm -> .exp Semicolon  | -float4-, unary_exp -> .Increment unary_exp  | Ampersand, compound_stm -> .LBrace block_item_list RBrace  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | -half4-, jump_stm -> .break  | LBrace, stm -> .iteration_stm  | Number, unary_exp -> .postfix_exp  | Ampersand, unary_op -> .Plus  | LParen, compound_stm -> .LBrace RBrace  | -do-, stm -> .jump_stm  | else, jump_stm -> .-continue-  | Minus, jump_stm -> .-continue-  | String, unary_op -> .Minus  | Minus, jump_stm -> .-goto- ID  | -half3-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Plus, exp_stm -> .Semicolon  | -struct-, exp_stm -> .Semicolon  | Plus, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -long-, postfix_exp -> .postfix_exp LParen RParen  | Percent, stm -> .compound_stm  | else, unary_exp -> .Decrement unary_exp  | Minus, stm -> .selection_stm  | for, jump_stm -> .-goto- ID  | LParen, jump_stm -> .-goto- ID  | -fixed4-, compound_stm -> .LBrace block_item_list RBrace  | Increment, primary_exp -> .Number  | GE, stm -> .jump_stm  | Tilde, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, stm -> .jump_stm  | -goto-, unary_exp -> .postfix_exp  | GT, compound_stm -> .LBrace RBrace  | ID, jump_stm -> .-goto- ID  | -float4-, compound_stm -> .LBrace block_item_list RBrace  | -float3-, postfix_exp -> .postfix_exp LParen RParen  | GT, selection_stm -> .if LParen exp RParen stm else stm  | while, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -struct-, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | GE, exp_stm -> .Semicolon  | -float3-, unary_exp -> .unary_op unary_exp  | LT, jump_stm -> .break  | Plus, compound_stm -> .LBrace block_item_list RBrace  | Number, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float4-, compound_stm -> .LBrace RBrace  | -half4-, jump_stm -> .-return- exp Semicolon  | -float-, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Increment  | OR, exp_stm -> .exp Semicolon  | Increment, exp_stm -> .Semicolon  | -long-, iteration_stm -> .while LParen exp RParen stm  | -fixed4-, unary_op -> .NOT  | Tilde, stm -> .selection_stm  | -short-, binary_exp -> .unary_exp  | Divide, jump_stm -> .-return- exp Semicolon  | -char-, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, unary_op -> .Tilde  | LParen, primary_exp -> .String  | LBrack, stm -> .jump_stm  | -fixed2-, stm -> .compound_stm  | -return-, unary_exp -> .Decrement unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | Minus, postfix_exp -> .primary_exp  | LT, selection_stm -> .if LParen exp RParen stm else stm  | break, compound_stm -> .LBrace RBrace  | Decrement, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, compound_stm -> .LBrace RBrace  | -float2-, exp_stm -> .exp Semicolon  | -do-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -do-, exp_stm -> .exp Semicolon  | Minus, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, compound_stm -> .LBrace block_item_list RBrace  | else, stm -> .selection_stm  | -continue-, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_op -> .Minus  | NOT, selection_stm -> .if LParen exp RParen stm else stm  | -return-, jump_stm -> .-continue-  | Number, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_exp -> .unary_op unary_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | -struct-, postfix_exp -> .postfix_exp Increment  | LE, exp_stm -> .exp Semicolon  | -half2-, jump_stm -> .break  | else, primary_exp -> .LParen exp RParen  | VerticalBar, jump_stm -> .-return- exp Semicolon  | Plus, selection_stm -> .if LParen exp RParen stm else stm  | LBrace, jump_stm -> .break  | break, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, jump_stm -> .-continue-  | -fixed4-, compound_stm -> .LBrace RBrace  | -double-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, exp_stm -> .Semicolon  | while, compound_stm -> .LBrace block_item_list RBrace  | -half3-, stm -> .exp_stm  | -float3-, selection_stm -> .if LParen exp RParen stm  | -float-, jump_stm -> .-return- exp Semicolon  | while, stm -> .compound_stm  | Minus, stm -> .jump_stm  | -sampler2D-, iteration_stm -> .while LParen exp RParen stm  | -sampler2D-, jump_stm -> .break  | String, exp_stm -> .exp Semicolon  | -float3-, iteration_stm -> while LParen exp RParen .stm  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .primary_exp  | LeftShift, primary_exp -> .String  | Semicolon, primary_exp -> .String  | EQ, stm -> .jump_stm  | -long-, stm -> .exp_stm  | -half2-, primary_exp -> .ID  | GT, jump_stm -> .-return- exp Semicolon  | -struct-, compound_stm -> .LBrace block_item_list RBrace  | -double-, primary_exp -> .LParen exp RParen  | Increment, jump_stm -> .break  | Decrement, stm -> .exp_stm  | -float2-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | break, unary_exp -> .postfix_exp  | Times, iteration_stm -> while LParen exp RParen .stm  | -short-, stm -> .compound_stm  | -half3-, selection_stm -> .if LParen exp RParen stm  | if, unary_exp -> .postfix_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | -double-, jump_stm -> .-continue-  | if, jump_stm -> .-return- exp Semicolon  | if, compound_stm -> .LBrace block_item_list RBrace  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -goto-, postfix_exp -> .primary_exp  | RightShift, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -void-, postfix_exp -> .postfix_exp Increment  | LeftShift, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | if, compound_stm -> .LBrace block_item_list RBrace  | for, primary_exp -> .Number  | Question, exp_stm -> .exp Semicolon  | -struct-, selection_stm -> .if LParen exp RParen stm  | Increment, jump_stm -> .-goto- ID  | -long-, selection_stm -> .if LParen exp RParen stm  | String, jump_stm -> .break  | NOT, jump_stm -> .-continue-  | -struct-, jump_stm -> .-return- exp Semicolon  | -int-, selection_stm -> .if LParen exp RParen stm  | -int-, unary_exp -> .postfix_exp  | Question, iteration_stm -> while LParen exp RParen .stm  | -goto-, binary_exp -> .unary_exp  | Ampersand, stm -> .jump_stm  | String, stm -> .iteration_stm  | -half2-, compound_stm -> .LBrace RBrace  | -float4-, stm -> .exp_stm  | -long-, jump_stm -> .-return- exp Semicolon  | -return-, postfix_exp -> .postfix_exp LParen RParen  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -fixed2-, selection_stm -> .if LParen exp RParen stm  | else, iteration_stm -> .while LParen exp RParen stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Comma, exp_stm -> .Semicolon  | if, iteration_stm -> while LParen exp RParen .stm  | -float2-, selection_stm -> .if LParen exp RParen stm else stm  | -do-, exp_stm -> .Semicolon  | -short-, jump_stm -> .-goto- ID  | -fixed2-, stm -> .exp_stm  | Tilde, postfix_exp -> .primary_exp  | LE, compound_stm -> .LBrace block_item_list RBrace  | LParen, exp_stm -> .exp Semicolon  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | String, compound_stm -> .LBrace block_item_list RBrace  | -float-, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, selection_stm -> .if LParen exp RParen stm  | -void-, stm -> .exp_stm  | -do-, jump_stm -> .-continue-  | Increment, jump_stm -> .-return- exp Semicolon  | -do-, postfix_exp -> .postfix_exp Increment  | Question, iteration_stm -> while LParen exp RParen .stm  | String, stm -> .compound_stm  | NOT, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Ampersand, iteration_stm -> .while LParen exp RParen stm  | while, stm -> .compound_stm  | -float-, compound_stm -> .LBrace block_item_list RBrace  | Plus, unary_exp -> .Decrement unary_exp  | Assign, iteration_stm -> .while LParen exp RParen stm  | -do-, stm -> .jump_stm  | Decrement, primary_exp -> .String  | NEQ, jump_stm -> .-return- exp Semicolon  | String, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, iteration_stm -> .while LParen exp RParen stm  | Tilde, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .primary_exp  | Semicolon, jump_stm -> .-goto- ID  | -int-, exp_stm -> .Semicolon  | Semicolon, iteration_stm -> while LParen exp RParen .stm  | -uniform-, compound_stm -> .LBrace block_item_list RBrace  | -uniform-, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, exp_stm -> .exp Semicolon  | -continue-, selection_stm -> .if LParen exp RParen stm else stm  | Plus, postfix_exp -> .primary_exp  | Times, jump_stm -> .-goto- ID  | if, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, primary_exp -> .LParen exp RParen  | AND, binary_exp -> .unary_exp  | NEQ, jump_stm -> .-continue-  | break, iteration_stm -> .while LParen exp RParen stm  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Tilde, postfix_exp -> .postfix_exp LParen RParen  | LBrack, iteration_stm -> while LParen exp RParen .stm  | -struct-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | -float4-, selection_stm -> .if LParen exp RParen stm  | -sampler2D-, iteration_stm -> while LParen exp RParen .stm  | RBrace, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -short-, jump_stm -> .-continue-  | -void-, selection_stm -> .if LParen exp RParen stm  | RBrace, jump_stm -> .break  | RBrace, selection_stm -> .if LParen exp RParen stm  | -float2-, compound_stm -> .LBrace block_item_list RBrace  | -half2-, jump_stm -> .-return- exp Semicolon  | -double-, primary_exp -> .LParen exp RParen  | GT, stm -> .iteration_stm  | LBrace, jump_stm -> .break  | -fixed3-, jump_stm -> .-goto- ID  | while, jump_stm -> .-continue-  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | NEQ, compound_stm -> .LBrace block_item_list RBrace  | -float4-, stm -> .jump_stm  | -do-, postfix_exp -> .postfix_exp Decrement  | Plus, exp_stm -> .exp Semicolon  | -half4-, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, primary_exp -> .ID  | OR, stm -> .jump_stm  | break, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed3-, selection_stm -> .if LParen exp RParen stm else stm  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float-, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, jump_stm -> .-return- exp Semicolon  | NOT, postfix_exp -> .postfix_exp Increment  | Times, selection_stm -> .if LParen exp RParen stm else stm  | Decrement, stm -> .selection_stm  | -fixed3-, jump_stm -> .-goto- ID  | String, stm -> .compound_stm  | -double-, stm -> .exp_stm  | if, jump_stm -> .break  | -do-, iteration_stm -> while LParen exp RParen .stm  | -double-, postfix_exp -> .postfix_exp Dot ID  | LBrack, selection_stm -> .if LParen exp RParen stm  | Minus, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, iteration_stm -> while LParen exp RParen .stm  | -float4-, postfix_exp -> .postfix_exp Decrement  | LeftShift, selection_stm -> .if LParen exp RParen stm else stm  | Tilde, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, stm -> .selection_stm  | Number, stm -> .iteration_stm  | Minus, compound_stm -> .LBrace RBrace  | -char-, iteration_stm -> while LParen exp RParen .stm  | Decrement, jump_stm -> .-goto- ID  | -short-, unary_op -> .Minus  | ID, stm -> .selection_stm  | -uniform-, stm -> .selection_stm  | -do-, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, compound_stm -> .LBrace RBrace  | while, stm -> .exp_stm  | -float-, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .primary_exp  | Decrement, stm -> .iteration_stm  | Plus, exp_stm -> .Semicolon  | Increment, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LParen, stm -> .exp_stm  | -double-, stm -> .selection_stm  | Minus, exp_stm -> .exp Semicolon  | -half3-, stm -> .exp_stm  | -struct-, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Semicolon, unary_op -> .Tilde  | Number, unary_exp -> .Increment unary_exp  | RightShift, exp_stm -> .exp Semicolon  | -goto-, stm -> .jump_stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | Percent, stm -> .iteration_stm  | Semicolon, stm -> .exp_stm  | -float4-, iteration_stm -> while LParen exp RParen .stm  | LParen, postfix_exp -> .primary_exp  | Increment, compound_stm -> .LBrace block_item_list RBrace  | if, postfix_exp -> .postfix_exp Dot ID  | LT, jump_stm -> .-continue-  | for, unary_exp -> .unary_op unary_exp  | Assign, jump_stm -> .-return- exp Semicolon  | -half2-, jump_stm -> .-return- exp Semicolon  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, stm -> .iteration_stm  | -continue-, selection_stm -> .if LParen exp RParen stm else stm  | -float-, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, stm -> .exp_stm  | Semicolon, binary_exp -> .unary_exp  | EQ, binary_exp -> .unary_exp  | RightShift, selection_stm -> .if LParen exp RParen stm else stm  | -sampler2D-, unary_op -> .Minus  | LParen, exp_stm -> .Semicolon  | -float-, unary_op -> .NOT  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | String, primary_exp -> .Number  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float4-, jump_stm -> .break  | -uniform-, jump_stm -> .-goto- ID  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | String, stm -> .jump_stm  | LBrace, unary_op -> .NOT  | Number, primary_exp -> .ID  | Assign, stm -> .iteration_stm  | -half4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Dot ID  | Comma, iteration_stm -> while LParen exp RParen .stm  | Tilde, unary_exp -> .Increment unary_exp  | NEQ, stm -> .compound_stm  | String, compound_stm -> .LBrace RBrace  | -return-, stm -> .exp_stm  | NOT, jump_stm -> .break  | Number, stm -> .iteration_stm  | Increment, jump_stm -> .-return- exp Semicolon  | LParen, iteration_stm -> .while LParen exp RParen stm  | if, stm -> .selection_stm  | -float3-, postfix_exp -> .primary_exp  | Plus, stm -> .jump_stm  | -float4-, stm -> .iteration_stm  | for, stm -> .compound_stm  | Tilde, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .Number  | OR, iteration_stm -> while LParen exp RParen .stm  | -int-, iteration_stm -> .while LParen exp RParen stm  | -goto-, stm -> .jump_stm  | NOT, selection_stm -> .if LParen exp RParen stm  | NOT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, exp_stm -> .Semicolon  | -float4-, stm -> .selection_stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | LE, stm -> .compound_stm  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | AND, stm -> .exp_stm  | -int-, stm -> .iteration_stm  | break, iteration_stm -> while LParen exp RParen .stm  | Minus, compound_stm -> .LBrace block_item_list RBrace  | -int-, stm -> .selection_stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -half3-, compound_stm -> .LBrace block_item_list RBrace  | Tilde, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -goto-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -struct-, stm -> .iteration_stm  | -float3-, compound_stm -> .LBrace RBrace  | Number, selection_stm -> .if LParen exp RParen stm  | -half4-, primary_exp -> .String  | Increment, jump_stm -> .-return- exp Semicolon  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -uniform-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float3-, stm -> .compound_stm  | if, primary_exp -> .Number  | Plus, jump_stm -> .-return- exp Semicolon  | ID, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp Decrement  | Assign, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed3-, stm -> .jump_stm  | -half3-, primary_exp -> .Number  | Dot, exp_stm -> .Semicolon  | -do-, exp_stm -> .exp Semicolon  | -fixed3-, primary_exp -> .LParen exp RParen  | Ampersand, jump_stm -> .-goto- ID  | -double-, stm -> .jump_stm  | -struct-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, binary_exp -> .unary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Comma, primary_exp -> .ID  | LBrack, jump_stm -> .-return- exp Semicolon  | Semicolon, selection_stm -> .if LParen exp RParen stm  | Decrement, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, selection_stm -> .if LParen exp RParen stm  | LParen, jump_stm -> .-continue-  | -int-, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, jump_stm -> .break  | -fixed2-, exp_stm -> .exp Semicolon  | -short-, primary_exp -> .String  | Assign, compound_stm -> .LBrace RBrace  | Plus, unary_exp -> .unary_op unary_exp  | EQ, stm -> .exp_stm  | for, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, exp_stm -> .Semicolon  | -sampler2D-, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, stm -> .selection_stm  | -half4-, primary_exp -> .LParen exp RParen  | Semicolon, compound_stm -> .LBrace RBrace  | break, postfix_exp -> .postfix_exp LParen RParen  | Caret, selection_stm -> .if LParen exp RParen stm else stm  | -int-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, selection_stm -> .if LParen exp RParen stm else stm  | if, stm -> .iteration_stm  | -uniform-, stm -> .selection_stm  | -fixed4-, jump_stm -> .-goto- ID  | -void-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | NOT, exp_stm -> .Semicolon  | Tilde, compound_stm -> .LBrace block_item_list RBrace  | NOT, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .String  | LT, stm -> .exp_stm  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, unary_exp -> .postfix_exp  | NEQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp Increment  | AND, selection_stm -> .if LParen exp RParen stm  | Semicolon, primary_exp -> .LParen exp RParen  | LParen, stm -> .compound_stm  | -void-, stm -> .jump_stm  | -float2-, stm -> .jump_stm  | Number, unary_exp -> .unary_op unary_exp  | Ampersand, exp_stm -> .exp Semicolon  | RBrace, stm -> .selection_stm  | -return-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half4-, iteration_stm -> .while LParen exp RParen stm  | -half2-, stm -> .iteration_stm  | -fixed3-, stm -> .jump_stm  | Plus, compound_stm -> .LBrace RBrace  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Number, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | VerticalBar, stm -> .iteration_stm  | -float2-, exp_stm -> .Semicolon  | LBrace, exp_stm -> .exp Semicolon  | -void-, jump_stm -> .-continue-  | else, stm -> .exp_stm  | -half4-, primary_exp -> .ID  | Times, primary_exp -> .ID  | Semicolon, iteration_stm -> while LParen exp RParen .stm  | -half2-, exp_stm -> .exp Semicolon  | -int-, exp_stm -> .Semicolon  | -continue-, unary_op -> .Tilde  | Increment, selection_stm -> .if LParen exp RParen stm  | while, postfix_exp -> .postfix_exp Decrement  | Increment, stm -> .iteration_stm  | -fixed4-, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, stm -> .selection_stm  | Decrement, exp_stm -> .Semicolon  | String, jump_stm -> .-continue-  | -do-, exp_stm -> .exp Semicolon  | if, unary_exp -> .Decrement unary_exp  | LeftShift, stm -> .exp_stm  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -continue-, stm -> .compound_stm  | ID, jump_stm -> .-continue-  | Tilde, stm -> .exp_stm  | LBrace, jump_stm -> .-goto- ID  | -sampler2D-, iteration_stm -> .while LParen exp RParen stm  | -continue-, stm -> .jump_stm  | -float3-, iteration_stm -> while LParen exp RParen .stm  | -half4-, jump_stm -> .break  | for, postfix_exp -> .primary_exp  | LBrack, jump_stm -> .-continue-  | -half2-, primary_exp -> .Number  | Increment, compound_stm -> .LBrace RBrace  | -void-, exp_stm -> .Semicolon  | -fixed2-, selection_stm -> .if LParen exp RParen stm else stm  | -void-, jump_stm -> .-continue-  | while, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Plus, exp_stm -> .Semicolon  | -fixed4-, exp_stm -> .Semicolon  | -goto-, jump_stm -> .break  | -float3-, stm -> .iteration_stm  | -char-, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, jump_stm -> .break  | -float4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, stm -> .jump_stm  | -half2-, iteration_stm -> .while LParen exp RParen stm  | LBrace, primary_exp -> .Number  | VerticalBar, primary_exp -> .String  | Plus, unary_op -> .NOT  | Decrement, postfix_exp -> .primary_exp  | Ampersand, unary_exp -> .Increment unary_exp  | LT, jump_stm -> .-return- exp Semicolon  | -void-, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, compound_stm -> .LBrace RBrace  | -fixed4-, postfix_exp -> .postfix_exp Dot ID  | Question, exp_stm -> .exp Semicolon  | -sampler2D-, iteration_stm -> while LParen exp RParen .stm  | while, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, iteration_stm -> while LParen exp RParen .stm  | Increment, stm -> .exp_stm  | break, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float3-, stm -> .exp_stm  | -void-, selection_stm -> .if LParen exp RParen stm  | -half2-, stm -> .jump_stm  | Minus, iteration_stm -> while LParen exp RParen .stm  | -do-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | ID, iteration_stm -> while LParen exp RParen .stm  | NOT, jump_stm -> .-continue-  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -float3-, primary_exp -> .ID  | Divide, stm -> .exp_stm  | -goto-, postfix_exp -> .postfix_exp Dot ID  | Dot, selection_stm -> .if LParen exp RParen stm else stm  | -uniform-, stm -> .compound_stm  | Decrement, jump_stm -> .-goto- ID  | ID, jump_stm -> .break  | Increment, selection_stm -> .if LParen exp RParen stm else stm  | -fixed2-, stm -> .exp_stm  | -fixed3-, unary_exp -> .postfix_exp  | Comma, stm -> .compound_stm  | LParen, unary_op -> .Minus  | String, jump_stm -> .break  | if, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half4-, jump_stm -> .-continue-  | -half4-, unary_exp -> .unary_op unary_exp  | Comma, jump_stm -> .-return- exp Semicolon  | -goto-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float-, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Semicolon, iteration_stm -> while LParen exp RParen .stm  | for, iteration_stm -> while LParen exp RParen .stm  | else, iteration_stm -> while LParen exp RParen .stm  | -fixed2-, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | Minus, stm -> .exp_stm  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -int-, jump_stm -> .-continue-  | -continue-, stm -> .compound_stm  | for, stm -> .jump_stm  | if, stm -> .compound_stm  | -short-, jump_stm -> .-goto- ID  | -float2-, primary_exp -> .ID  | Question, stm -> .selection_stm  | Tilde, postfix_exp -> .postfix_exp Increment  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -float2-, jump_stm -> .break  | -char-, binary_exp -> .unary_exp  | OR, stm -> .compound_stm  | -long-, stm -> .compound_stm  | -fixed2-, compound_stm -> .LBrace block_item_list RBrace  | Minus, postfix_exp -> .postfix_exp Decrement  | Dot, jump_stm -> .-goto- ID  | Increment, selection_stm -> .if LParen exp RParen stm else stm  | LParen, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | Assign, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, primary_exp -> .Number  | LBrack, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LBrace, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, stm -> .iteration_stm  | -half3-, stm -> .compound_stm  | -char-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | break, compound_stm -> .LBrace RBrace  | -long-, jump_stm -> .break  | -long-, jump_stm -> .-continue-  | -uniform-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LBrace, stm -> .compound_stm  | -goto-, selection_stm -> .if LParen exp RParen stm  | -short-, postfix_exp -> .primary_exp  | LParen, stm -> .selection_stm  | LBrace, stm -> .compound_stm  | -float4-, postfix_exp -> .postfix_exp LParen RParen  | Assign, compound_stm -> .LBrace RBrace  | -half3-, selection_stm -> .if LParen exp RParen stm else stm  | -fixed4-, jump_stm -> .break  | -half4-, iteration_stm -> .while LParen exp RParen stm  | -uniform-, jump_stm -> .-continue-  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -short-, postfix_exp -> .postfix_exp LParen RParen  | NEQ, stm -> .iteration_stm  | -float-, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, jump_stm -> .-return- exp Semicolon  | -half3-, primary_exp -> .LParen exp RParen  | NEQ, compound_stm -> .LBrace RBrace  | Increment, stm -> .compound_stm  | -continue-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Plus, postfix_exp -> .postfix_exp Decrement  | Minus, stm -> .selection_stm  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, postfix_exp -> .postfix_exp Decrement  | Times, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -int-, unary_op -> .NOT  | LParen, stm -> .iteration_stm  | ID, stm -> .compound_stm  | Plus, exp_stm -> .exp Semicolon  | String, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Increment, postfix_exp -> .primary_exp  | AND, jump_stm -> .-return- exp Semicolon  | -short-, compound_stm -> .LBrace RBrace  | String, stm -> .exp_stm  | while, iteration_stm -> .while LParen exp RParen stm  | -void-, compound_stm -> .LBrace RBrace  | -struct-, stm -> .selection_stm  | -void-, unary_exp -> .unary_op unary_exp  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Increment, stm -> .compound_stm  | -float3-, primary_exp -> .String  | LeftShift, jump_stm -> .-continue-  | -fixed3-, postfix_exp -> .postfix_exp LParen RParen  | GE, stm -> .selection_stm  | -float4-, postfix_exp -> .primary_exp  | OR, stm -> .exp_stm  | RBrace, iteration_stm -> .while LParen exp RParen stm  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | while, unary_exp -> .postfix_exp  | RightShift, compound_stm -> .LBrace block_item_list RBrace  | -fixed4-, iteration_stm -> .while LParen exp RParen stm  | -float2-, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_exp -> .Increment unary_exp  | Divide, exp_stm -> .Semicolon  | ID, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, iteration_stm -> while LParen exp RParen .stm  | -continue-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed2-, jump_stm -> .-goto- ID  | -struct-, jump_stm -> .-continue-  | -return-, jump_stm -> .break  | Minus, iteration_stm -> .while LParen exp RParen stm  | Plus, postfix_exp -> .postfix_exp Dot ID  | Minus, compound_stm -> .LBrace RBrace  | if, jump_stm -> .break  | -void-, jump_stm -> .-goto- ID  | -float3-, iteration_stm -> while LParen exp RParen .stm  | -float-, iteration_stm -> .while LParen exp RParen stm  | -float-, stm -> .selection_stm  | Plus, compound_stm -> .LBrace RBrace  | NOT, exp_stm -> .Semicolon  | Decrement, stm -> .exp_stm  | -sampler2D-, postfix_exp -> .postfix_exp LParen RParen  | Comma, unary_exp -> .Decrement unary_exp  | Plus, exp_stm -> .Semicolon  | -float2-, iteration_stm -> .while LParen exp RParen stm  | Number, unary_op -> .Tilde  | Plus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -continue-, primary_exp -> .String  | Caret, exp_stm -> .exp Semicolon  | Decrement, stm -> .compound_stm  | -sampler2D-, stm -> .selection_stm  | LParen, jump_stm -> .-goto- ID  | else, stm -> .iteration_stm  | LParen, selection_stm -> .if LParen exp RParen stm else stm  | Increment, stm -> .jump_stm  | -void-, selection_stm -> .if LParen exp RParen stm  | -long-, iteration_stm -> while LParen exp RParen .stm  | if, unary_exp -> .postfix_exp  | Minus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, binary_exp -> .binary_exp binary_op unary_exp  | Caret, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half2-, unary_op -> .Tilde  | Tilde, jump_stm -> .break  | ID, iteration_stm -> while LParen exp RParen .stm  | -float3-, exp_stm -> .Semicolon  | -fixed3-, postfix_exp -> .postfix_exp Decrement  | Decrement, jump_stm -> .-goto- ID  | Semicolon, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | else, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half3-, stm -> .exp_stm  | -uniform-, iteration_stm -> while LParen exp RParen .stm  | -sampler2D-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -return-, unary_exp -> .Decrement unary_exp  | Divide, stm -> .iteration_stm  | Tilde, postfix_exp -> .postfix_exp Dot ID  | Ampersand, compound_stm -> .LBrace block_item_list RBrace  | LBrace, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .postfix_exp Increment  | Semicolon, jump_stm -> .break  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | -fixed3-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, stm -> .selection_stm  | -struct-, stm -> .exp_stm  | -return-, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, stm -> .exp_stm  | -char-, postfix_exp -> .postfix_exp Decrement  | Ampersand, exp_stm -> .exp Semicolon  | -double-, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -long-, selection_stm -> .if LParen exp RParen stm else stm  | RBrace, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LParen, iteration_stm -> while LParen exp RParen .stm  | -fixed4-, iteration_stm -> .while LParen exp RParen stm  | for, compound_stm -> .LBrace RBrace  | -half2-, jump_stm -> .-goto- ID  | -do-, iteration_stm -> while LParen exp RParen .stm  | ID, stm -> .selection_stm  | if, stm -> .compound_stm  | -uniform-, exp_stm -> .exp Semicolon  | -float-, stm -> .jump_stm  | -float-, postfix_exp -> .postfix_exp LParen RParen  | LE, jump_stm -> .-continue-  | RBrace, unary_exp -> .unary_op unary_exp  | VerticalBar, jump_stm -> .-return- exp Semicolon  | -float4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | RBrace, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, stm -> .exp_stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, selection_stm -> .if LParen exp RParen stm  | -half3-, stm -> .exp_stm  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -long-, primary_exp -> .LParen exp RParen  | Percent, unary_op -> .Minus  | Number, compound_stm -> .LBrace RBrace  | -fixed2-, jump_stm -> .-return- exp Semicolon  | -fixed4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | if, exp_stm -> .exp Semicolon  | -char-, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Comma, compound_stm -> .LBrace block_item_list RBrace  | -float2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, jump_stm -> .-continue-  | -fixed2-, primary_exp -> .Number  | LeftShift, exp_stm -> .exp Semicolon  | Tilde, stm -> .compound_stm  | LBrace, jump_stm -> .break  | while, exp_stm -> .exp Semicolon  | while, jump_stm -> .break  | LParen, compound_stm -> .LBrace RBrace  | LBrace, jump_stm -> .-goto- ID  | -float-, exp_stm -> .exp Semicolon  | LBrace, jump_stm -> .-continue-  | -short-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, binary_exp -> .binary_exp binary_op unary_exp  | EQ, jump_stm -> .-return- exp Semicolon  | else, exp_stm -> .exp Semicolon  | for, postfix_exp -> .postfix_exp Decrement  | Percent, compound_stm -> .LBrace block_item_list RBrace  | -void-, stm -> .exp_stm  | -fixed2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, selection_stm -> .if LParen exp RParen stm  | -fixed2-, primary_exp -> .LParen exp RParen  | Times, stm -> .selection_stm  | ID, selection_stm -> .if LParen exp RParen stm  | -double-, exp_stm -> .Semicolon  | LParen, postfix_exp -> .primary_exp  | Percent, primary_exp -> .String  | Comma, selection_stm -> .if LParen exp RParen stm else stm  | -goto-, jump_stm -> .break  | -goto-, stm -> .iteration_stm  | -fixed2-, selection_stm -> .if LParen exp RParen stm else stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Question, stm -> .exp_stm  | Minus, exp_stm -> .exp Semicolon  | -uniform-, exp_stm -> .Semicolon  | -char-, primary_exp -> .Number  | RightShift, jump_stm -> .-return- exp Semicolon  | LBrace, binary_exp -> .unary_exp  | Question, selection_stm -> .if LParen exp RParen stm else stm  | else, selection_stm -> .if LParen exp RParen stm  | -goto-, primary_exp -> .LParen exp RParen  | RightShift, selection_stm -> .if LParen exp RParen stm  | -fixed3-, jump_stm -> .-continue-  | -goto-, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, binary_exp -> .binary_exp binary_op unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | GT, stm -> .jump_stm  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | for, iteration_stm -> .while LParen exp RParen stm  | Semicolon, primary_exp -> .Number  | Times, jump_stm -> .-return- exp Semicolon  | Increment, binary_exp -> .binary_exp binary_op unary_exp  | Times, exp_stm -> .Semicolon  | -half4-, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, jump_stm -> .break  | -struct-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, primary_exp -> .ID  | Minus, selection_stm -> .if LParen exp RParen stm  | -continue-, unary_exp -> .unary_op unary_exp  | Question, stm -> .selection_stm  | -half3-, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, unary_op -> .Plus  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -sampler2D-, compound_stm -> .LBrace RBrace  | -fixed3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed4-, stm -> .iteration_stm  | -int-, jump_stm -> .-return- exp Semicolon  | break, stm -> .jump_stm  | -double-, iteration_stm -> while LParen exp RParen .stm  | -void-, exp_stm -> .exp Semicolon  | Plus, jump_stm -> .-continue-  | -float2-, iteration_stm -> while LParen exp RParen .stm  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .String  | Question, exp_stm -> .exp Semicolon  | else, primary_exp -> .Number  | Decrement, unary_exp -> .postfix_exp  | AND, selection_stm -> .if LParen exp RParen stm  | break, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, selection_stm -> .if LParen exp RParen stm  | -float4-, stm -> .iteration_stm  | -do-, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, unary_exp -> .Decrement unary_exp  | GT, compound_stm -> .LBrace RBrace  | Minus, stm -> .selection_stm  | -char-, compound_stm -> .LBrace block_item_list RBrace  | ID, binary_exp -> .unary_exp  | LE, stm -> .exp_stm  | String, jump_stm -> .-continue-  | -float-, unary_exp -> .Increment unary_exp  | GT, jump_stm -> .break  | -double-, postfix_exp -> .postfix_exp LParen RParen  | OR, compound_stm -> .LBrace block_item_list RBrace  | -sampler2D-, exp_stm -> .exp Semicolon  | -return-, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | LeftShift, jump_stm -> .-return- exp Semicolon  | Number, compound_stm -> .LBrace RBrace  | -continue-, exp_stm -> .exp Semicolon  | Number, primary_exp -> .String  | Minus, iteration_stm -> .while LParen exp RParen stm  | else, postfix_exp -> .postfix_exp Increment  | RightShift, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | NEQ, selection_stm -> .if LParen exp RParen stm  | -uniform-, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .primary_exp  | Caret, compound_stm -> .LBrace block_item_list RBrace  | break, exp_stm -> .Semicolon  | -double-, selection_stm -> .if LParen exp RParen stm  | -float3-, jump_stm -> .-continue-  | -sampler2D-, postfix_exp -> .postfix_exp Decrement  | EQ, iteration_stm -> .while LParen exp RParen stm  | -int-, jump_stm -> .-goto- ID  | Tilde, stm -> .compound_stm  | Increment, stm -> .compound_stm  | -float2-, jump_stm -> .-goto- ID  | Number, postfix_exp -> .postfix_exp Increment  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | for, exp_stm -> .Semicolon  | -int-, binary_exp -> .binary_exp binary_op unary_exp  | Minus, jump_stm -> .-goto- ID  | Decrement, unary_op -> .Minus  | Decrement, primary_exp -> .LParen exp RParen  | OR, primary_exp -> .Number  | GT, postfix_exp -> .primary_exp  | Question, jump_stm -> .-goto- ID  | -uniform-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, stm -> .exp_stm  | Number, jump_stm -> .break  | -fixed4-, compound_stm -> .LBrace RBrace  | -uniform-, unary_exp -> .unary_op unary_exp  | GT, compound_stm -> .LBrace block_item_list RBrace  | -short-, stm -> .iteration_stm  | while, stm -> .compound_stm  | -int-, jump_stm -> .-continue-  | -long-, selection_stm -> .if LParen exp RParen stm  | -return-, stm -> .compound_stm  | -half2-, exp_stm -> .Semicolon  | -return-, selection_stm -> .if LParen exp RParen stm  | LBrace, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, stm -> .iteration_stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_op -> .Minus  | Plus, jump_stm -> .-continue-  | LParen, selection_stm -> .if LParen exp RParen stm  | Tilde, stm -> .iteration_stm  | -goto-, selection_stm -> .if LParen exp RParen stm else stm  | -fixed3-, postfix_exp -> .postfix_exp Decrement  | Comma, stm -> .compound_stm  | while, unary_exp -> .postfix_exp  | Caret, stm -> .jump_stm  | Increment, selection_stm -> .if LParen exp RParen stm  | Number, primary_exp -> .ID  | LT, jump_stm -> .-goto- ID  | RBrace, postfix_exp -> .postfix_exp LParen RParen  | LT, iteration_stm -> .while LParen exp RParen stm  | NOT, compound_stm -> .LBrace RBrace  | -int-, binary_exp -> .unary_exp  | Caret, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, primary_exp -> .LParen exp RParen  | Assign, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -return-, primary_exp -> .ID  | VerticalBar, primary_exp -> .Number  | Percent, jump_stm -> .-continue-  | LBrace, stm -> .jump_stm  | -fixed4-, iteration_stm -> .while LParen exp RParen stm  | -return-, primary_exp -> .LParen exp RParen  | Question, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -double-, primary_exp -> .Number  | Assign, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp Decrement  | NEQ, jump_stm -> .break  | -float-, unary_exp -> .Increment unary_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Increment, stm -> .compound_stm  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | String, jump_stm -> .-goto- ID  | -goto-, stm -> .exp_stm  | -continue-, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, selection_stm -> .if LParen exp RParen stm  | -fixed4-, exp_stm -> .Semicolon  | -uniform-, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, stm -> .jump_stm  | -fixed3-, stm -> .compound_stm  | -fixed4-, stm -> .exp_stm  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -void-, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, jump_stm -> .-continue-  | -float3-, exp_stm -> .exp Semicolon  | break, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, iteration_stm -> .while LParen exp RParen stm  | -fixed2-, stm -> .selection_stm  | -float-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -do-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, stm -> .exp_stm  | ID, jump_stm -> .break  | -half2-, primary_exp -> .ID  | GE, compound_stm -> .LBrace block_item_list RBrace  | -goto-, jump_stm -> .-return- exp Semicolon  | -long-, stm -> .compound_stm  | -fixed3-, iteration_stm -> .while LParen exp RParen stm  | break, postfix_exp -> .postfix_exp Increment  | Minus, binary_exp -> .unary_exp  | LeftShift, iteration_stm -> .while LParen exp RParen stm  | -double-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -sampler2D-, jump_stm -> .-goto- ID  | LBrace, primary_exp -> .ID  | RightShift, jump_stm -> .-return- exp Semicolon  | -fixed2-, selection_stm -> .if LParen exp RParen stm else stm  | -char-, stm -> .iteration_stm  | -long-, iteration_stm -> .while LParen exp RParen stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -short-, exp_stm -> .exp Semicolon  | -long-, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, postfix_exp -> .postfix_exp Dot ID  | RightShift, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Tilde, stm -> .compound_stm  | Number, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, iteration_stm -> while LParen exp RParen .stm  | -fixed3-, unary_exp -> .unary_op unary_exp  | Minus, unary_exp -> .unary_op unary_exp  | RightShift, compound_stm -> .LBrace RBrace  | -short-, exp_stm -> .Semicolon  | -half3-, stm -> .selection_stm  | break, stm -> .compound_stm  | -do-, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp Dot ID  | GE, binary_exp -> .binary_exp binary_op unary_exp  | AND, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, stm -> .compound_stm  | -half4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Decrement, stm -> .iteration_stm  | if, unary_exp -> .unary_op unary_exp  | NEQ, jump_stm -> .-goto- ID  | -char-, jump_stm -> .-return- exp Semicolon  | -sampler2D-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -double-, unary_exp -> .postfix_exp  | GE, selection_stm -> .if LParen exp RParen stm  | for, selection_stm -> .if LParen exp RParen stm  | ID, jump_stm -> .-goto- ID  | Minus, stm -> .jump_stm  | ID, jump_stm -> .-return- exp Semicolon  | -half4-, selection_stm -> .if LParen exp RParen stm else stm  | -continue-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Divide, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float2-, stm -> .jump_stm  | RBrace, jump_stm -> .-goto- ID  | -half4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, jump_stm -> .-continue-  | ID, compound_stm -> .LBrace RBrace  | -goto-, postfix_exp -> .postfix_exp LParen RParen  | Divide, jump_stm -> .-continue-  | -char-, stm -> .jump_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half2-, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -uniform-, primary_exp -> .ID  | Comma, selection_stm -> .if LParen exp RParen stm else stm  | for, unary_exp -> .Increment unary_exp  | Assign, jump_stm -> .-goto- ID  | -return-, postfix_exp -> .postfix_exp Increment  | Assign, jump_stm -> .break  | Tilde, selection_stm -> .if LParen exp RParen stm else stm  | -float3-, jump_stm -> .-goto- ID  | -fixed3-, unary_exp -> .Decrement unary_exp  | VerticalBar, unary_exp -> .Increment unary_exp  | OR, binary_exp -> .binary_exp binary_op unary_exp  | LT, stm -> .selection_stm  | -sampler2D-, jump_stm -> .-continue-  | -half3-, primary_exp -> .Number  | Minus, stm -> .iteration_stm  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -half4-, stm -> .jump_stm  | LParen, iteration_stm -> while LParen exp RParen .stm  | LBrace, iteration_stm -> .while LParen exp RParen stm  | Decrement, unary_exp -> .Decrement unary_exp  | AND, jump_stm -> .-goto- ID  | for, stm -> .iteration_stm  | Decrement, compound_stm -> .LBrace RBrace  | LParen, exp_stm -> .Semicolon  | Minus, jump_stm -> .-return- exp Semicolon  | -uniform-, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, compound_stm -> .LBrace RBrace  | else, selection_stm -> .if LParen exp RParen stm else stm  | -struct-, jump_stm -> .-return- exp Semicolon  | -continue-, stm -> .selection_stm  | -int-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | ID, stm -> .exp_stm  | -fixed4-, assignment_exp -> .conditional_exp  | Comma, postfix_exp -> .primary_exp  | GT, stm -> .selection_stm  | else, exp_stm -> .Semicolon  | -void-, jump_stm -> .-return- exp Semicolon  | Minus, postfix_exp -> .postfix_exp Decrement  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, stm -> .selection_stm  | String, unary_op -> .Tilde  | NOT, primary_exp -> .ID  | AND, primary_exp -> .ID  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | Dot, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | String, unary_op -> .Plus  | Decrement, exp_stm -> .Semicolon  | NOT, primary_exp -> .String  | Ampersand, stm -> .jump_stm  | -short-, jump_stm -> .-return- exp Semicolon  | Tilde, jump_stm -> .-continue-  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | else, selection_stm -> .if LParen exp RParen stm else stm  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -char-, unary_exp -> .Increment unary_exp  | Plus, primary_exp -> .Number  | Ampersand, postfix_exp -> .postfix_exp Decrement  | LBrack, primary_exp -> .ID  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | RightShift, selection_stm -> .if LParen exp RParen stm  | Plus, unary_exp -> .Increment unary_exp  | Semicolon, compound_stm -> .LBrace RBrace  | -sampler2D-, stm -> .selection_stm  | -fixed2-, compound_stm -> .LBrace RBrace  | RBrace, primary_exp -> .LParen exp RParen  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, iteration_stm -> while LParen exp RParen .stm  | -half3-, stm -> .selection_stm  | -long-, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, binary_exp -> .unary_exp  | Percent, exp_stm -> .Semicolon  | else, primary_exp -> .Number  | AND, unary_exp -> .Increment unary_exp  | GE, iteration_stm -> while LParen exp RParen .stm  | -return-, unary_op -> .NOT  | NOT, jump_stm -> .break  | -short-, unary_exp -> .Increment unary_exp  | EQ, compound_stm -> .LBrace RBrace  | Tilde, iteration_stm -> while LParen exp RParen .stm  | break, exp_stm -> .exp Semicolon  | -fixed4-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | ID, stm -> .jump_stm  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | LParen, primary_exp -> .String  | Times, jump_stm -> .-goto- ID  | -continue-, stm -> .iteration_stm  | else, jump_stm -> .break  | -int-, primary_exp -> .LParen exp RParen  | Divide, stm -> .selection_stm  | RBrace, stm -> .iteration_stm  | RBrace, stm -> .iteration_stm  | -struct-, compound_stm -> .LBrace block_item_list RBrace  | -return-, jump_stm -> .break  | Semicolon, conditional_exp -> .binary_exp  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | RBrace, exp_stm -> .exp Semicolon  | -float2-, iteration_stm -> .while LParen exp RParen stm  | -float4-, compound_stm -> .LBrace RBrace  | for, exp_stm -> .Semicolon  | RBrace, selection_stm -> .if LParen exp RParen stm  | -do-, stm -> .jump_stm  | -continue-, primary_exp -> .String  | Divide, primary_exp -> .LParen exp RParen  | Plus, selection_stm -> .if LParen exp RParen stm else stm  | -half2-, stm -> .compound_stm  | -struct-, stm -> .selection_stm  | NOT, iteration_stm -> while LParen exp RParen .stm  | -long-, jump_stm -> .-return- exp Semicolon  | -float2-, compound_stm -> .LBrace block_item_list RBrace  | -continue-, compound_stm -> .LBrace RBrace  | -float-, unary_exp -> .unary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, jump_stm -> .-return- exp Semicolon  | -float3-, stm -> .iteration_stm  | -sampler2D-, iteration_stm -> .while LParen exp RParen stm  | -struct-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed2-, postfix_exp -> .postfix_exp Increment  | Dot, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | RBrace, postfix_exp -> .postfix_exp Dot ID  | EQ, stm -> .exp_stm  | else, jump_stm -> .-goto- ID  | NOT, jump_stm -> .-continue-  | Decrement, stm -> .compound_stm  | break, selection_stm -> .if LParen exp RParen stm else stm  | -half4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, stm -> .jump_stm  | for, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Number, unary_op -> .Plus  | Tilde, selection_stm -> .if LParen exp RParen stm else stm  | Semicolon, iteration_stm -> while LParen exp RParen .stm  | -char-, iteration_stm -> .while LParen exp RParen stm  | -char-, postfix_exp -> .postfix_exp Increment  | Divide, stm -> .selection_stm  | -float2-, stm -> .jump_stm  | -return-, iteration_stm -> .while LParen exp RParen stm  | ID, stm -> .iteration_stm  | -void-, unary_exp -> .Increment unary_exp  | LE, unary_exp -> .postfix_exp  | OR, iteration_stm -> while LParen exp RParen .stm  | Number, binary_exp -> .binary_exp binary_op unary_exp  | OR, jump_stm -> .-goto- ID  | break, stm -> .iteration_stm  | -double-, unary_exp -> .Decrement unary_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | LE, exp_stm -> .Semicolon  | Number, stm -> .iteration_stm  | -return-, binary_exp -> .unary_exp  | AND, jump_stm -> .-return- exp Semicolon  | for, unary_op -> .Tilde  | ID, exp_stm -> .exp Semicolon  | Semicolon, exp_stm -> .Semicolon  | break, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .primary_exp  | Divide, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, compound_stm -> .LBrace block_item_list RBrace  | -struct-, unary_exp -> .postfix_exp  | Divide, stm -> .selection_stm  | -double-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, stm -> .iteration_stm  | NOT, jump_stm -> .break  | -float2-, primary_exp -> .Number  | LParen, exp_stm -> .exp Semicolon  | ID, primary_exp -> .Number  | NEQ, jump_stm -> .break  | -return-, jump_stm -> .-continue-  | -double-, jump_stm -> .break  | -half3-, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, selection_stm -> .if LParen exp RParen stm  | -char-, jump_stm -> .-goto- ID  | -half2-, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, primary_exp -> .LParen exp RParen  | Minus, compound_stm -> .LBrace block_item_list RBrace  | -do-, stm -> .selection_stm  | Semicolon, postfix_exp -> .postfix_exp Decrement  | OR, exp_stm -> .Semicolon  | for, postfix_exp -> .postfix_exp LParen RParen  | Question, stm -> .jump_stm  | -half4-, postfix_exp -> .postfix_exp Increment  | EQ, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Times, exp_stm -> .exp Semicolon  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, selection_stm -> .if LParen exp RParen stm else stm  | Number, unary_op -> .NOT  | String, unary_exp -> .postfix_exp  | Percent, stm -> .jump_stm  | -int-, primary_exp -> .ID  | Dot, iteration_stm -> .while LParen exp RParen stm  | LParen, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .postfix_exp  | LeftShift, )
588 <- (569, 'RBrack') (postfix_exp -> postfix_exp LBrack exp RBrack.  | NEQ, postfix_exp -> postfix_exp LBrack exp RBrack.  | Plus, postfix_exp -> postfix_exp LBrack exp RBrack.  | Question, postfix_exp -> postfix_exp LBrack exp RBrack.  | LT, postfix_exp -> postfix_exp LBrack exp RBrack.  | LParen, postfix_exp -> postfix_exp LBrack exp RBrack.  | VerticalBar, postfix_exp -> postfix_exp LBrack exp RBrack.  | AND, postfix_exp -> postfix_exp LBrack exp RBrack.  | EQ, postfix_exp -> postfix_exp LBrack exp RBrack.  | Times, postfix_exp -> postfix_exp LBrack exp RBrack.  | LBrack, postfix_exp -> postfix_exp LBrack exp RBrack.  | Increment, postfix_exp -> postfix_exp LBrack exp RBrack.  | OR, postfix_exp -> postfix_exp LBrack exp RBrack.  | Caret, postfix_exp -> postfix_exp LBrack exp RBrack.  | Dot, postfix_exp -> postfix_exp LBrack exp RBrack.  | RBrack, postfix_exp -> postfix_exp LBrack exp RBrack.  | RightShift, postfix_exp -> postfix_exp LBrack exp RBrack.  | Percent, postfix_exp -> postfix_exp LBrack exp RBrack.  | Ampersand, postfix_exp -> postfix_exp LBrack exp RBrack.  | GT, postfix_exp -> postfix_exp LBrack exp RBrack.  | GE, postfix_exp -> postfix_exp LBrack exp RBrack.  | Minus, postfix_exp -> postfix_exp LBrack exp RBrack.  | Comma, postfix_exp -> postfix_exp LBrack exp RBrack.  | LeftShift, postfix_exp -> postfix_exp LBrack exp RBrack.  | Divide, postfix_exp -> postfix_exp LBrack exp RBrack.  | LE, postfix_exp -> postfix_exp LBrack exp RBrack.  | Decrement, )
589 <- (571, 'RParen') (postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Comma, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Increment, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Decrement, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | OR, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LeftShift, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | RBrack, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | VerticalBar, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | EQ, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | RightShift, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Minus, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Caret, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Question, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LT, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Plus, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | GT, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Ampersand, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Dot, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LParen, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Percent, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Times, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | NEQ, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LBrack, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | AND, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | Divide, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | GE, postfix_exp -> postfix_exp LParen argument_exp_list RParen.  | LE, )
590 <- (573, 'RParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, stm -> .exp_stm  | while, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, selection_stm -> .if LParen exp RParen stm else stm  | while, stm -> .compound_stm  | while, compound_stm -> .LBrace block_item_list RBrace  | while, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, unary_exp -> .unary_op unary_exp  | Semicolon, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, exp_stm -> .Semicolon  | while, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, jump_stm -> .-return- exp Semicolon  | while, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, postfix_exp -> .primary_exp  | Increment, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, unary_exp -> .postfix_exp  | Semicolon, binary_exp -> .unary_exp  | LE, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, jump_stm -> .break  | while, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, binary_exp -> .unary_exp  | Ampersand, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | while, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Question, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, iteration_stm -> .while LParen exp RParen stm  | while, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .String  | AND, unary_exp -> .unary_op unary_exp  | Ampersand, jump_stm -> .-goto- ID  | while, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, compound_stm -> .LBrace RBrace  | while, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, stm -> .jump_stm  | while, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .Number  | Semicolon, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, stm -> .selection_stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, postfix_exp -> .postfix_exp Increment  | Percent, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, exp_stm -> .exp Semicolon  | while, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .Decrement unary_exp  | AND, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Dot, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | Comma, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, jump_stm -> .-continue-  | while, conditional_exp -> .binary_exp  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .primary_exp  | LE, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | Dot, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, stm -> .iteration_stm  | while, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, unary_exp -> .Increment unary_exp  | Question, unary_exp -> .postfix_exp  | LeftShift, )
591 <- (574, 'LParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | else, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .Increment unary_exp  | Ampersand, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, postfix_exp -> .primary_exp  | LT, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, conditional_exp -> .binary_exp  | Comma, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .primary_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, binary_exp -> .unary_exp  | LE, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, assignment_exp -> .conditional_exp  | RParen, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, binary_exp -> .unary_exp  | Ampersand, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, exp -> .assignment_exp  | RParen, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | GT, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | RParen, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Increment, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .unary_op unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, primary_exp -> .Number  | RParen, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, binary_exp -> .unary_exp  | AND, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, exp -> .exp Comma assignment_exp  | RParen, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, iteration_stm -> -do- stm while LParen .exp RParen Semicolon  | while, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, primary_exp -> .Number  | Dot, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | RParen, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, binary_exp -> .binary_exp binary_op unary_exp  | RParen, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .postfix_exp  | RParen, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .Number  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | Assign, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, binary_exp -> .unary_exp  | LT, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .primary_exp  | Ampersand, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .String  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, unary_exp -> .Increment unary_exp  | Question, unary_exp -> .postfix_exp  | LeftShift, )
592 <- (577, 'Semicolon') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp Decrement  | OR, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, primary_exp -> .ID  | LT, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, unary_exp -> .postfix_exp  | Semicolon, binary_exp -> .unary_exp  | LE, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Question, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | else, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, binary_exp -> .unary_exp  | LT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .Number  | Semicolon, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Semicolon, unary_op -> .Tilde  | Number, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, postfix_exp -> .postfix_exp Dot ID  | LBrack, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_op -> .NOT  | Number, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp Decrement  | Assign, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, iteration_stm -> for LParen exp Semicolon .exp Semicolon exp RParen stm  | while, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp LParen RParen  | Caret, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | Comma, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, conditional_exp -> .binary_exp  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .primary_exp  | LE, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, unary_exp -> .unary_op unary_exp  | Semicolon, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .String  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
593 <- (578, 'RParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, stm -> .jump_stm  | else, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, unary_exp -> .unary_op unary_exp  | LT, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, stm -> .exp_stm  | while, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, exp_stm -> .Semicolon  | while, unary_op -> .Plus  | Number, selection_stm -> if LParen exp RParen .stm else stm  | else, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, selection_stm -> .if LParen exp RParen stm else stm  | while, binary_exp -> .unary_exp  | Percent, compound_stm -> .LBrace block_item_list RBrace  | while, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_exp -> .Decrement unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, jump_stm -> .-goto- ID  | else, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, compound_stm -> .LBrace block_item_list RBrace  | else, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, unary_exp -> .unary_op unary_exp  | Semicolon, unary_exp -> .unary_op unary_exp  | LE, jump_stm -> .break  | else, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, jump_stm -> .-return- exp Semicolon  | while, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, selection_stm -> .if LParen exp RParen stm else stm  | else, primary_exp -> .String  | VerticalBar, postfix_exp -> .primary_exp  | EQ, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, unary_exp -> .postfix_exp  | Semicolon, binary_exp -> .unary_exp  | LE, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, unary_exp -> .postfix_exp  | LE, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp LParen RParen  | Percent, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, jump_stm -> .break  | while, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, binary_exp -> .unary_exp  | Ampersand, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, selection_stm -> .if LParen exp RParen stm  | else, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Question, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, stm -> .compound_stm  | else, postfix_exp -> .postfix_exp Increment  | GT, stm -> .iteration_stm  | else, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, unary_exp -> .unary_op unary_exp  | Times, primary_exp -> .LParen exp RParen  | Dot, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, exp_stm -> .exp Semicolon  | else, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, iteration_stm -> .while LParen exp RParen stm  | while, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, primary_exp -> .LParen exp RParen  | LT, unary_exp -> .unary_op unary_exp  | VerticalBar, selection_stm -> if LParen exp RParen .stm  | while, primary_exp -> .String  | AND, unary_exp -> .unary_op unary_exp  | Ampersand, jump_stm -> .-return- exp Semicolon  | else, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, iteration_stm -> .while LParen exp RParen stm  | else, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, unary_op -> .Tilde  | Number, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .primary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, selection_stm -> if LParen exp RParen .stm  | else, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, compound_stm -> .LBrace RBrace  | while, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | EQ, postfix_exp -> .postfix_exp Decrement  | Comma, stm -> .compound_stm  | while, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | LT, stm -> .jump_stm  | while, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .primary_exp  | Increment, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Minus  | Number, primary_exp -> .Number  | Percent, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .Number  | Semicolon, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, jump_stm -> .-goto- ID  | while, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, selection_stm -> if LParen exp RParen .stm else stm  | while, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, compound_stm -> .LBrace RBrace  | else, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, exp_stm -> .Semicolon  | else, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, stm -> .selection_stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp Decrement  | Assign, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, exp_stm -> .exp Semicolon  | while, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Assign, unary_exp -> .Decrement unary_exp  | AND, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .primary_exp  | GT, stm -> .selection_stm  | else, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .postfix_exp  | NEQ, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | else, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, unary_exp -> .Increment unary_exp  | Plus, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, jump_stm -> .-continue-  | else, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | Comma, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, unary_exp -> .Increment unary_exp  | GE, postfix_exp -> .primary_exp  | Decrement, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | Comma, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, stm -> .iteration_stm  | while, primary_exp -> .Number  | Increment, binary_exp -> .binary_exp binary_op unary_exp  | Plus, jump_stm -> .-continue-  | while, conditional_exp -> .binary_exp  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, unary_op -> .NOT  | NOT, postfix_exp -> .postfix_exp LParen RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | LT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, stm -> .exp_stm  | else, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .primary_exp  | LE, unary_exp -> .unary_op unary_exp  | Comma, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | else, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | Dot, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, unary_exp -> .Increment unary_exp  | Question, unary_exp -> .postfix_exp  | LeftShift, )
594 <- (580, 'RParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, stm -> .jump_stm  | else, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, stm -> .compound_stm  | else, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, stm -> .exp_stm  | while, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, exp_stm -> .Semicolon  | while, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, selection_stm -> .if LParen exp RParen stm else stm  | while, binary_exp -> .unary_exp  | Percent, compound_stm -> .LBrace block_item_list RBrace  | while, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, jump_stm -> .-goto- ID  | else, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, compound_stm -> .LBrace block_item_list RBrace  | else, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, unary_exp -> .unary_op unary_exp  | Semicolon, unary_exp -> .unary_op unary_exp  | LE, jump_stm -> .break  | else, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, jump_stm -> .-return- exp Semicolon  | while, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, selection_stm -> .if LParen exp RParen stm else stm  | else, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Semicolon, primary_exp -> .Number  | Percent, primary_exp -> .Number  | AND, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, unary_exp -> .postfix_exp  | LE, stm -> .iteration_stm  | while, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, jump_stm -> .break  | while, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | Percent, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, selection_stm -> .if LParen exp RParen stm  | else, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Plus, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, stm -> .iteration_stm  | else, iteration_stm -> .while LParen exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, iteration_stm -> while LParen exp RParen .stm  | else, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, unary_exp -> .Increment unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, primary_exp -> .LParen exp RParen  | LT, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Increment, jump_stm -> .-return- exp Semicolon  | else, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, iteration_stm -> .while LParen exp RParen stm  | else, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | Question, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, unary_op -> .Minus  | Tilde, jump_stm -> .-continue-  | while, postfix_exp -> .primary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, compound_stm -> .LBrace RBrace  | while, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp Increment  | EQ, primary_exp -> .ID  | EQ, postfix_exp -> .postfix_exp Decrement  | Comma, stm -> .compound_stm  | while, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .Tilde  | Number, stm -> .jump_stm  | while, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, unary_exp -> .unary_op unary_exp  | Ampersand, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, unary_exp -> .Increment unary_exp  | Question, binary_exp -> .unary_exp  | AND, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, primary_exp -> .ID  | Question, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, jump_stm -> .-goto- ID  | while, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, unary_exp -> .postfix_exp  | Comma, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, compound_stm -> .LBrace RBrace  | else, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, unary_exp -> .Decrement unary_exp  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, exp_stm -> .Semicolon  | else, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, stm -> .selection_stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, postfix_exp -> .postfix_exp Increment  | Percent, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, exp_stm -> .exp Semicolon  | while, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, unary_exp -> .postfix_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Assign, unary_exp -> .Decrement unary_exp  | AND, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .primary_exp  | GT, stm -> .selection_stm  | else, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, primary_exp -> .String  | Ampersand, unary_exp -> .Decrement unary_exp  | EQ, unary_exp -> .unary_op unary_exp  | AND, binary_exp -> .unary_exp  | VerticalBar, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | else, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, unary_exp -> .Increment unary_exp  | Plus, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, jump_stm -> .-continue-  | else, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | Comma, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | OR, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, postfix_exp -> .postfix_exp Increment  | LT, conditional_exp -> .binary_exp  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | LT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, iteration_stm -> while LParen exp RParen .stm  | while, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, stm -> .exp_stm  | else, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, exp_stm -> .exp Semicolon  | else, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | else, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | Dot, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .String  | Decrement, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
595 <- (583, 'stm') (iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | Number, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -fixed3-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | for, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | LBrace, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -struct-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -float4-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -float-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | Increment, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -void-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -float2-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -int-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -float3-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | LParen, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | break, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -half2-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | NOT, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -return-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | Decrement, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -long-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | RBrace, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | Tilde, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | ID, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | while, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | if, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -short-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -half3-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -char-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -half4-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -do-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | Plus, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -uniform-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | Minus, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | String, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -continue-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -fixed2-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -sampler2D-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -double-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | Semicolon, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -goto-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -fixed4-, )
596 <- (584, 'exp') (iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -return-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -float4-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | Minus, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -sampler2D-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -float3-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -half2-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | LParen, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -struct-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -void-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | else, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -int-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | Plus, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | Tilde, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -long-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | ID, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -float-, exp -> exp .Comma assignment_exp  | RParen, exp -> exp .Comma assignment_exp  | Comma, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | NOT, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -goto-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -half3-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | for, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -double-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | String, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -char-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -fixed2-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | Semicolon, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | break, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | Number, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | RBrace, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | while, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -continue-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -uniform-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | Decrement, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -float2-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -fixed4-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -do-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -fixed3-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -short-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | LBrace, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | -half4-, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | Increment, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | if, )
597 <- (585, 'exp') (iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -double-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -continue-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | Minus, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | RBrace, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | Number, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -fixed2-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -half4-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | Decrement, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -float2-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | Tilde, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -fixed3-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -sampler2D-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -goto-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -int-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | NOT, exp -> exp .Comma assignment_exp  | Comma, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | else, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | Plus, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -void-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -return-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -long-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | ID, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -float4-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | String, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -float3-, exp -> exp .Comma assignment_exp  | Semicolon, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | LParen, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -half3-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -fixed4-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -do-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | while, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -half2-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | if, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -uniform-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -float-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -short-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | Semicolon, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | LBrace, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | break, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -char-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | -struct-, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | for, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | Increment, )
598 <- (586, 'stm') (selection_stm -> if LParen exp RParen stm.  | -short-, selection_stm -> if LParen exp RParen stm.  | -long-, selection_stm -> if LParen exp RParen stm.  | -continue-, selection_stm -> if LParen exp RParen stm .else stm  | Semicolon, selection_stm -> if LParen exp RParen stm .else stm  | -struct-, selection_stm -> if LParen exp RParen stm .else stm  | -float-, selection_stm -> if LParen exp RParen stm.  | ID, selection_stm -> if LParen exp RParen stm.  | while, selection_stm -> if LParen exp RParen stm .else stm  | -half3-, selection_stm -> if LParen exp RParen stm.  | Minus, selection_stm -> if LParen exp RParen stm .else stm  | -return-, selection_stm -> if LParen exp RParen stm .else stm  | -sampler2D-, selection_stm -> if LParen exp RParen stm .else stm  | String, selection_stm -> if LParen exp RParen stm .else stm  | ID, selection_stm -> if LParen exp RParen stm.  | -float-, selection_stm -> if LParen exp RParen stm.  | -float4-, selection_stm -> if LParen exp RParen stm.  | -half4-, selection_stm -> if LParen exp RParen stm .else stm  | -short-, selection_stm -> if LParen exp RParen stm.  | LParen, selection_stm -> if LParen exp RParen stm.  | -half2-, selection_stm -> if LParen exp RParen stm.  | RBrace, selection_stm -> if LParen exp RParen stm .else stm  | -do-, selection_stm -> if LParen exp RParen stm .else stm  | -long-, selection_stm -> if LParen exp RParen stm.  | -void-, selection_stm -> if LParen exp RParen stm.  | -uniform-, selection_stm -> if LParen exp RParen stm.  | break, selection_stm -> if LParen exp RParen stm.  | -goto-, selection_stm -> if LParen exp RParen stm .else stm  | break, selection_stm -> if LParen exp RParen stm .else stm  | Plus, selection_stm -> if LParen exp RParen stm.  | for, selection_stm -> if LParen exp RParen stm .else stm  | -float4-, selection_stm -> if LParen exp RParen stm .else stm  | -half4-, selection_stm -> if LParen exp RParen stm.  | -fixed4-, selection_stm -> if LParen exp RParen stm.  | Tilde, selection_stm -> if LParen exp RParen stm.  | Decrement, selection_stm -> if LParen exp RParen stm .else stm  | LParen, selection_stm -> if LParen exp RParen stm .else stm  | LBrace, selection_stm -> if LParen exp RParen stm .else stm  | -fixed4-, selection_stm -> if LParen exp RParen stm.  | if, selection_stm -> if LParen exp RParen stm.  | -int-, selection_stm -> if LParen exp RParen stm .else stm  | -float2-, selection_stm -> if LParen exp RParen stm .else stm  | Minus, selection_stm -> if LParen exp RParen stm .else stm  | -uniform-, selection_stm -> if LParen exp RParen stm .else stm  | -int-, selection_stm -> if LParen exp RParen stm .else stm  | while, selection_stm -> if LParen exp RParen stm .else stm  | if, selection_stm -> if LParen exp RParen stm .else stm  | -fixed2-, selection_stm -> if LParen exp RParen stm .else stm  | Increment, selection_stm -> if LParen exp RParen stm.  | String, selection_stm -> if LParen exp RParen stm.  | else, selection_stm -> if LParen exp RParen stm .else stm  | RBrace, selection_stm -> if LParen exp RParen stm.  | -return-, selection_stm -> if LParen exp RParen stm .else stm  | Tilde, selection_stm -> if LParen exp RParen stm.  | -fixed2-, selection_stm -> if LParen exp RParen stm.  | -double-, selection_stm -> if LParen exp RParen stm.  | -float2-, selection_stm -> if LParen exp RParen stm.  | Semicolon, selection_stm -> if LParen exp RParen stm .else stm  | for, selection_stm -> if LParen exp RParen stm.  | -char-, selection_stm -> if LParen exp RParen stm.  | -struct-, selection_stm -> if LParen exp RParen stm.  | -half3-, selection_stm -> if LParen exp RParen stm .else stm  | else, selection_stm -> if LParen exp RParen stm.  | Plus, selection_stm -> if LParen exp RParen stm.  | LBrace, selection_stm -> if LParen exp RParen stm.  | -float3-, selection_stm -> if LParen exp RParen stm .else stm  | Number, selection_stm -> if LParen exp RParen stm .else stm  | -double-, selection_stm -> if LParen exp RParen stm .else stm  | -char-, selection_stm -> if LParen exp RParen stm .else stm  | -float3-, selection_stm -> if LParen exp RParen stm.  | Number, selection_stm -> if LParen exp RParen stm.  | -do-, selection_stm -> if LParen exp RParen stm.  | -fixed3-, selection_stm -> if LParen exp RParen stm.  | NOT, selection_stm -> if LParen exp RParen stm.  | Increment, selection_stm -> if LParen exp RParen stm .else stm  | -fixed3-, selection_stm -> if LParen exp RParen stm .else stm  | -void-, selection_stm -> if LParen exp RParen stm .else stm  | NOT, selection_stm -> if LParen exp RParen stm .else stm  | -continue-, selection_stm -> if LParen exp RParen stm.  | -sampler2D-, selection_stm -> if LParen exp RParen stm .else stm  | Decrement, selection_stm -> if LParen exp RParen stm .else stm  | -goto-, selection_stm -> if LParen exp RParen stm .else stm  | -half2-, )
599 <- (587, 'stm') (iteration_stm -> while LParen exp RParen stm.  | for, iteration_stm -> while LParen exp RParen stm.  | -int-, iteration_stm -> while LParen exp RParen stm.  | Number, iteration_stm -> while LParen exp RParen stm.  | Increment, iteration_stm -> while LParen exp RParen stm.  | -return-, iteration_stm -> while LParen exp RParen stm.  | RBrace, iteration_stm -> while LParen exp RParen stm.  | NOT, iteration_stm -> while LParen exp RParen stm.  | -do-, iteration_stm -> while LParen exp RParen stm.  | break, iteration_stm -> while LParen exp RParen stm.  | -sampler2D-, iteration_stm -> while LParen exp RParen stm.  | -continue-, iteration_stm -> while LParen exp RParen stm.  | -half4-, iteration_stm -> while LParen exp RParen stm.  | -void-, iteration_stm -> while LParen exp RParen stm.  | ID, iteration_stm -> while LParen exp RParen stm.  | Semicolon, iteration_stm -> while LParen exp RParen stm.  | while, iteration_stm -> while LParen exp RParen stm.  | Plus, iteration_stm -> while LParen exp RParen stm.  | -uniform-, iteration_stm -> while LParen exp RParen stm.  | -goto-, iteration_stm -> while LParen exp RParen stm.  | -struct-, iteration_stm -> while LParen exp RParen stm.  | -fixed3-, iteration_stm -> while LParen exp RParen stm.  | String, iteration_stm -> while LParen exp RParen stm.  | Decrement, iteration_stm -> while LParen exp RParen stm.  | -float-, iteration_stm -> while LParen exp RParen stm.  | -float2-, iteration_stm -> while LParen exp RParen stm.  | if, iteration_stm -> while LParen exp RParen stm.  | -float4-, iteration_stm -> while LParen exp RParen stm.  | -half2-, iteration_stm -> while LParen exp RParen stm.  | -fixed2-, iteration_stm -> while LParen exp RParen stm.  | -double-, iteration_stm -> while LParen exp RParen stm.  | -short-, iteration_stm -> while LParen exp RParen stm.  | -char-, iteration_stm -> while LParen exp RParen stm.  | else, iteration_stm -> while LParen exp RParen stm.  | LParen, iteration_stm -> while LParen exp RParen stm.  | -float3-, iteration_stm -> while LParen exp RParen stm.  | -fixed4-, iteration_stm -> while LParen exp RParen stm.  | Minus, iteration_stm -> while LParen exp RParen stm.  | -half3-, iteration_stm -> while LParen exp RParen stm.  | Tilde, iteration_stm -> while LParen exp RParen stm.  | LBrace, iteration_stm -> while LParen exp RParen stm.  | -long-, )
600 <- (590, 'stm') (iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | while, )
601 <- (591, 'exp') (exp -> exp .Comma assignment_exp  | Comma, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | while, iteration_stm -> -do- stm while LParen exp .RParen Semicolon  | else, exp -> exp .Comma assignment_exp  | RParen, )
602 <- (592, 'exp') (exp -> exp .Comma assignment_exp  | Comma, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | else, exp -> exp .Comma assignment_exp  | Semicolon, iteration_stm -> for LParen exp Semicolon exp .Semicolon exp RParen stm  | while, )
603 <- (593, 'stm') (selection_stm -> if LParen exp RParen stm .else stm  | while, selection_stm -> if LParen exp RParen stm.  | while, selection_stm -> if LParen exp RParen stm.  | else, selection_stm -> if LParen exp RParen stm .else stm  | else, )
604 <- (594, 'stm') (iteration_stm -> while LParen exp RParen stm.  | while, iteration_stm -> while LParen exp RParen stm.  | else, )
605 <- (596, 'RParen') (iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | Minus, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | Plus, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -fixed4-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -double-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | else, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -struct-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | for, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | ID, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | Increment, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -half2-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | Decrement, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | break, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | String, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -float4-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -long-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | while, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | Number, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | RBrace, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -char-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -uniform-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -short-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -half3-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | if, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | Tilde, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -fixed3-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | LBrace, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -do-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -float2-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -continue-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -fixed2-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | NOT, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -float3-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -goto-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -sampler2D-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | Semicolon, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -return-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -void-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -int-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -float-, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | LParen, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | -half4-, )
606 <- (597, 'Semicolon') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -float4-, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | LParen, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -fixed3-, binary_exp -> .unary_exp  | RParen, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -float2-, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, unary_op -> .Plus  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -void-, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, unary_exp -> .postfix_exp  | RParen, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | RParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .Increment unary_exp  | Ampersand, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | RightShift, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, postfix_exp -> .primary_exp  | LT, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | Number, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | Increment, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | String, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, unary_exp -> .unary_op unary_exp  | LE, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -short-, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -char-, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -uniform-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | RParen, primary_exp -> .String  | LeftShift, postfix_exp -> .postfix_exp Increment  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, postfix_exp -> .postfix_exp Dot ID  | LParen, primary_exp -> .String  | LE, postfix_exp -> .primary_exp  | Comma, postfix_exp -> .postfix_exp Decrement  | Ampersand, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | LT, binary_exp -> .unary_exp  | LE, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, unary_exp -> .Increment unary_exp  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, postfix_exp -> .postfix_exp Increment  | LeftShift, assignment_exp -> .conditional_exp  | RParen, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | LBrace, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | Plus, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | break, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -continue-, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .LParen exp RParen  | Question, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -half2-, postfix_exp -> .primary_exp  | LE, exp -> .assignment_exp  | RParen, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | RBrace, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -sampler2D-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, postfix_exp -> .postfix_exp Dot ID  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Times, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .String  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | for, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | Minus, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | while, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, postfix_exp -> .primary_exp  | Minus, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | GT, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | GE, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -do-, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -double-, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, binary_exp -> .binary_exp binary_op unary_exp  | RParen, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -struct-, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .primary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | else, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | Tilde, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | LParen, primary_exp -> .ID  | EQ, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Increment, unary_op -> .Minus  | Number, primary_exp -> .Number  | Percent, unary_exp -> .unary_op unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, primary_exp -> .Number  | RParen, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | ID, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -float3-, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, exp -> .exp Comma assignment_exp  | RParen, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_op -> .NOT  | Number, primary_exp -> .ID  | Assign, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -long-, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -int-, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | NOT, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | if, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, primary_exp -> .Number  | Dot, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -return-, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Decrement  | RParen, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -fixed2-, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, primary_exp -> .String  | Assign, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -fixed4-, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, unary_exp -> .Decrement unary_exp  | Assign, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | Decrement, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .Number  | Plus, unary_op -> .NOT  | Plus, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -half4-, primary_exp -> .String  | Caret, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -float-, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .ID  | NEQ, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -goto-, postfix_exp -> .postfix_exp LParen RParen  | OR, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, primary_exp -> .LParen exp RParen  | NEQ, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .String  | Dot, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | LT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, primary_exp -> .String  | Comma, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | -half3-, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
607 <- (598, 'else') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, exp_stm -> .Semicolon  | -half2-, iteration_stm -> .while LParen exp RParen stm  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | -char-, exp_stm -> .Semicolon  | Plus, exp_stm -> .exp Semicolon  | LParen, stm -> .iteration_stm  | String, compound_stm -> .LBrace RBrace  | -float3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -char-, unary_exp -> .unary_op unary_exp  | Times, jump_stm -> .break  | -continue-, exp_stm -> .exp Semicolon  | -float4-, unary_exp -> .Increment unary_exp  | Ampersand, compound_stm -> .LBrace block_item_list RBrace  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | -half4-, jump_stm -> .break  | LBrace, stm -> .iteration_stm  | Number, unary_exp -> .postfix_exp  | Ampersand, selection_stm -> .if LParen exp RParen stm  | -fixed3-, compound_stm -> .LBrace RBrace  | -do-, stm -> .jump_stm  | else, jump_stm -> .-continue-  | Minus, jump_stm -> .-continue-  | String, unary_op -> .Minus  | Minus, jump_stm -> .-goto- ID  | -half3-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Plus, exp_stm -> .Semicolon  | -struct-, unary_exp -> .postfix_exp  | Assign, unary_op -> .Tilde  | String, primary_exp -> .String  | OR, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -long-, postfix_exp -> .postfix_exp LParen RParen  | Percent, stm -> .compound_stm  | else, selection_stm -> if LParen exp RParen stm else .stm  | Tilde, stm -> .selection_stm  | for, jump_stm -> .-goto- ID  | LParen, jump_stm -> .-goto- ID  | -fixed4-, compound_stm -> .LBrace block_item_list RBrace  | Increment, selection_stm -> if LParen exp RParen stm else .stm  | Plus, primary_exp -> .Number  | GE, stm -> .jump_stm  | Tilde, stm -> .jump_stm  | -half2-, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, stm -> .jump_stm  | -goto-, unary_exp -> .postfix_exp  | GT, selection_stm -> if LParen exp RParen stm else .stm  | -void-, unary_exp -> .Decrement unary_exp  | LE, compound_stm -> .LBrace block_item_list RBrace  | -float3-, postfix_exp -> .postfix_exp LParen RParen  | GT, selection_stm -> .if LParen exp RParen stm else stm  | while, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -struct-, unary_exp -> .Decrement unary_exp  | GE, exp_stm -> .Semicolon  | -float3-, unary_exp -> .unary_op unary_exp  | LT, jump_stm -> .break  | Plus, compound_stm -> .LBrace block_item_list RBrace  | Number, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float4-, jump_stm -> .-return- exp Semicolon  | -float-, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Increment  | OR, jump_stm -> .-return- exp Semicolon  | -do-, exp_stm -> .exp Semicolon  | Increment, exp_stm -> .Semicolon  | -long-, iteration_stm -> .while LParen exp RParen stm  | -fixed4-, unary_op -> .NOT  | Tilde, stm -> .selection_stm  | -short-, binary_exp -> .unary_exp  | Divide, jump_stm -> .-return- exp Semicolon  | -char-, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, unary_op -> .Tilde  | LParen, selection_stm -> if LParen exp RParen stm else .stm  | -int-, stm -> .jump_stm  | -fixed2-, stm -> .jump_stm  | RBrace, stm -> .compound_stm  | -return-, unary_exp -> .Decrement unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | Minus, postfix_exp -> .primary_exp  | LT, selection_stm -> .if LParen exp RParen stm else stm  | break, compound_stm -> .LBrace RBrace  | Decrement, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, compound_stm -> .LBrace RBrace  | -float2-, exp_stm -> .exp Semicolon  | -do-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -do-, selection_stm -> if LParen exp RParen stm else .stm  | -do-, exp_stm -> .exp Semicolon  | Minus, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, compound_stm -> .LBrace block_item_list RBrace  | else, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, jump_stm -> .break  | -half2-, jump_stm -> .-continue-  | Number, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_exp -> .unary_op unary_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | -struct-, postfix_exp -> .postfix_exp Increment  | LE, jump_stm -> .break  | else, primary_exp -> .LParen exp RParen  | VerticalBar, selection_stm -> .if LParen exp RParen stm else stm  | LBrace, jump_stm -> .break  | break, unary_exp -> .Decrement unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | Plus, jump_stm -> .-continue-  | -fixed4-, compound_stm -> .LBrace RBrace  | -double-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, compound_stm -> .LBrace block_item_list RBrace  | -half3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half2-, selection_stm -> .if LParen exp RParen stm  | -float-, jump_stm -> .-return- exp Semicolon  | while, stm -> .jump_stm  | -sampler2D-, iteration_stm -> .while LParen exp RParen stm  | -sampler2D-, jump_stm -> .break  | String, selection_stm -> if LParen exp RParen stm else .stm  | for, exp_stm -> .exp Semicolon  | -float3-, jump_stm -> .-continue-  | Semicolon, jump_stm -> .-goto- ID  | -sampler2D-, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .primary_exp  | LeftShift, primary_exp -> .String  | Semicolon, stm -> .jump_stm  | -long-, stm -> .exp_stm  | -half2-, primary_exp -> .ID  | GT, selection_stm -> .if LParen exp RParen stm else stm  | -long-, compound_stm -> .LBrace block_item_list RBrace  | -double-, primary_exp -> .LParen exp RParen  | Increment, jump_stm -> .break  | Decrement, stm -> .exp_stm  | -float2-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | break, unary_exp -> .postfix_exp  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, stm -> .compound_stm  | -half3-, selection_stm -> .if LParen exp RParen stm  | if, selection_stm -> .if LParen exp RParen stm  | Decrement, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed3-, jump_stm -> .-continue-  | if, jump_stm -> .-return- exp Semicolon  | if, compound_stm -> .LBrace block_item_list RBrace  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -goto-, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | if, compound_stm -> .LBrace block_item_list RBrace  | for, primary_exp -> .Number  | Question, selection_stm -> .if LParen exp RParen stm  | -int-, exp_stm -> .exp Semicolon  | -struct-, jump_stm -> .-goto- ID  | -long-, selection_stm -> .if LParen exp RParen stm  | String, postfix_exp -> .postfix_exp Dot ID  | GE, jump_stm -> .-continue-  | -struct-, jump_stm -> .-return- exp Semicolon  | -int-, compound_stm -> .LBrace block_item_list RBrace  | -continue-, unary_exp -> .postfix_exp  | Question, unary_exp -> .Decrement unary_exp  | Minus, binary_exp -> .unary_exp  | Ampersand, stm -> .jump_stm  | String, stm -> .iteration_stm  | -half2-, postfix_exp -> .primary_exp  | AND, stm -> .exp_stm  | ID, stm -> .exp_stm  | -long-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, selection_stm -> .if LParen exp RParen stm  | else, iteration_stm -> .while LParen exp RParen stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Comma, exp_stm -> .Semicolon  | if, selection_stm -> .if LParen exp RParen stm else stm  | -do-, primary_exp -> .LParen exp RParen  | Question, iteration_stm -> .while LParen exp RParen stm  | Minus, jump_stm -> .-goto- ID  | -fixed2-, stm -> .exp_stm  | Tilde, postfix_exp -> .primary_exp  | LE, compound_stm -> .LBrace block_item_list RBrace  | LParen, exp_stm -> .exp Semicolon  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | String, compound_stm -> .LBrace block_item_list RBrace  | -float-, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, selection_stm -> .if LParen exp RParen stm  | -void-, stm -> .exp_stm  | -do-, jump_stm -> .-continue-  | Increment, stm -> .exp_stm  | while, postfix_exp -> .postfix_exp Increment  | Question, stm -> .compound_stm  | NOT, unary_exp -> .Decrement unary_exp  | Ampersand, unary_exp -> .postfix_exp  | AND, compound_stm -> .LBrace block_item_list RBrace  | Plus, unary_exp -> .Decrement unary_exp  | Assign, iteration_stm -> .while LParen exp RParen stm  | -do-, stm -> .jump_stm  | Decrement, primary_exp -> .String  | NEQ, jump_stm -> .-return- exp Semicolon  | String, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, stm -> .selection_stm  | -continue-, iteration_stm -> .while LParen exp RParen stm  | Tilde, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .primary_exp  | Semicolon, jump_stm -> .-goto- ID  | -int-, exp_stm -> .Semicolon  | Semicolon, assignment_exp -> .conditional_exp  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | -uniform-, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, exp_stm -> .exp Semicolon  | -continue-, selection_stm -> .if LParen exp RParen stm else stm  | Plus, postfix_exp -> .primary_exp  | Times, stm -> .iteration_stm  | Decrement, stm -> .iteration_stm  | -do-, primary_exp -> .LParen exp RParen  | AND, binary_exp -> .unary_exp  | NEQ, selection_stm -> if LParen exp RParen stm else .stm  | Increment, jump_stm -> .-continue-  | break, exp_stm -> .Semicolon  | -short-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Tilde, postfix_exp -> .postfix_exp LParen RParen  | LBrack, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | -float4-, selection_stm -> .if LParen exp RParen stm  | -sampler2D-, selection_stm -> if LParen exp RParen stm else .stm  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, exp_stm -> .Semicolon  | -fixed3-, postfix_exp -> .postfix_exp Decrement  | NEQ, selection_stm -> .if LParen exp RParen stm else stm  | -short-, selection_stm -> .if LParen exp RParen stm  | RBrace, jump_stm -> .break  | RBrace, selection_stm -> .if LParen exp RParen stm  | -float2-, compound_stm -> .LBrace block_item_list RBrace  | -half2-, jump_stm -> .-return- exp Semicolon  | -double-, primary_exp -> .LParen exp RParen  | GT, stm -> .iteration_stm  | LBrace, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .primary_exp  | Increment, jump_stm -> .-goto- ID  | while, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, selection_stm -> if LParen exp RParen stm else .stm  | else, postfix_exp -> .postfix_exp Dot ID  | NEQ, jump_stm -> .break  | Number, stm -> .jump_stm  | -do-, postfix_exp -> .postfix_exp Decrement  | Plus, exp_stm -> .exp Semicolon  | -half4-, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, stm -> .selection_stm  | -int-, stm -> .jump_stm  | break, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float-, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, jump_stm -> .-return- exp Semicolon  | NOT, postfix_exp -> .postfix_exp Increment  | Times, selection_stm -> .if LParen exp RParen stm else stm  | Decrement, stm -> .selection_stm  | -fixed3-, jump_stm -> .-goto- ID  | String, stm -> .compound_stm  | -double-, stm -> .exp_stm  | if, jump_stm -> .break  | -do-, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, selection_stm -> .if LParen exp RParen stm  | Minus, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, compound_stm -> .LBrace block_item_list RBrace  | -return-, postfix_exp -> .postfix_exp Decrement  | LeftShift, selection_stm -> .if LParen exp RParen stm else stm  | Tilde, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, stm -> .selection_stm  | Number, stm -> .iteration_stm  | Minus, compound_stm -> .LBrace RBrace  | -char-, jump_stm -> .-goto- ID  | -short-, exp_stm -> .Semicolon  | -int-, unary_op -> .Minus  | ID, stm -> .selection_stm  | -uniform-, postfix_exp -> .postfix_exp Decrement  | Divide, compound_stm -> .LBrace block_item_list RBrace  | -void-, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, compound_stm -> .LBrace RBrace  | while, stm -> .exp_stm  | -float-, unary_exp -> .Increment unary_exp  | Minus, stm -> .exp_stm  | -fixed2-, postfix_exp -> .primary_exp  | Decrement, stm -> .iteration_stm  | Plus, stm -> .selection_stm  | -void-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LParen, stm -> .exp_stm  | -double-, stm -> .selection_stm  | Minus, exp_stm -> .exp Semicolon  | -half3-, stm -> .exp_stm  | -struct-, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Semicolon, unary_op -> .Tilde  | Number, unary_exp -> .Increment unary_exp  | RightShift, exp_stm -> .exp Semicolon  | -goto-, stm -> .jump_stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | Percent, stm -> .iteration_stm  | Semicolon, stm -> .exp_stm  | -float4-, jump_stm -> .break  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | if, postfix_exp -> .postfix_exp Dot ID  | LT, jump_stm -> .-continue-  | for, unary_exp -> .unary_op unary_exp  | Assign, jump_stm -> .-return- exp Semicolon  | -half2-, jump_stm -> .-return- exp Semicolon  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, stm -> .iteration_stm  | -continue-, selection_stm -> .if LParen exp RParen stm else stm  | -float-, unary_op -> .Plus  | Plus, jump_stm -> .-goto- ID  | -half2-, primary_exp -> .ID  | LE, selection_stm -> if LParen exp RParen stm else .stm  | -sampler2D-, stm -> .exp_stm  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | String, selection_stm -> .if LParen exp RParen stm else stm  | -sampler2D-, unary_op -> .Minus  | LParen, exp_stm -> .Semicolon  | -float-, unary_op -> .NOT  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | String, primary_exp -> .ID  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float4-, jump_stm -> .break  | -uniform-, jump_stm -> .-goto- ID  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | String, stm -> .jump_stm  | LBrace, unary_op -> .NOT  | Number, primary_exp -> .ID  | Assign, selection_stm -> .if LParen exp RParen stm else stm  | Minus, stm -> .exp_stm  | Number, stm -> .iteration_stm  | -half4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Dot ID  | Comma, unary_exp -> .Increment unary_exp  | NEQ, stm -> .compound_stm  | String, compound_stm -> .LBrace RBrace  | -return-, stm -> .exp_stm  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, selection_stm -> if LParen exp RParen stm else .stm  | -return-, primary_exp -> .ID  | Percent, stm -> .iteration_stm  | Increment, jump_stm -> .-return- exp Semicolon  | LParen, iteration_stm -> .while LParen exp RParen stm  | if, stm -> .selection_stm  | -float3-, postfix_exp -> .primary_exp  | Plus, stm -> .jump_stm  | -float4-, primary_exp -> .String  | Minus, stm -> .compound_stm  | Tilde, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .Number  | OR, iteration_stm -> .while LParen exp RParen stm  | -goto-, stm -> .jump_stm  | NOT, selection_stm -> .if LParen exp RParen stm  | NOT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, exp_stm -> .Semicolon  | -float4-, stm -> .selection_stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | AND, stm -> .exp_stm  | -int-, stm -> .iteration_stm  | break, compound_stm -> .LBrace block_item_list RBrace  | -int-, stm -> .selection_stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -half3-, compound_stm -> .LBrace block_item_list RBrace  | Tilde, stm -> .iteration_stm  | -double-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -short-, iteration_stm -> .while LParen exp RParen stm  | -float4-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | else, stm -> .iteration_stm  | -float3-, compound_stm -> .LBrace RBrace  | Number, selection_stm -> .if LParen exp RParen stm  | -half4-, primary_exp -> .String  | Increment, selection_stm -> if LParen exp RParen stm else .stm  | -half3-, unary_exp -> .postfix_exp  | Percent, jump_stm -> .-return- exp Semicolon  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -uniform-, selection_stm -> if LParen exp RParen stm else .stm  | Semicolon, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float3-, stm -> .compound_stm  | if, primary_exp -> .Number  | Plus, jump_stm -> .-return- exp Semicolon  | ID, jump_stm -> .-goto- ID  | -float4-, selection_stm -> if LParen exp RParen stm else .stm  | ID, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed3-, stm -> .jump_stm  | -half3-, primary_exp -> .Number  | Dot, exp_stm -> .Semicolon  | -do-, exp_stm -> .Semicolon  | for, primary_exp -> .LParen exp RParen  | Ampersand, jump_stm -> .-goto- ID  | -double-, stm -> .jump_stm  | -struct-, postfix_exp -> .primary_exp  | Comma, primary_exp -> .ID  | LBrack, jump_stm -> .-return- exp Semicolon  | Semicolon, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, selection_stm -> .if LParen exp RParen stm  | LParen, jump_stm -> .-continue-  | -int-, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, jump_stm -> .break  | -fixed2-, exp_stm -> .exp Semicolon  | -short-, primary_exp -> .String  | Assign, compound_stm -> .LBrace RBrace  | Plus, unary_exp -> .unary_op unary_exp  | EQ, stm -> .exp_stm  | for, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, exp_stm -> .Semicolon  | -sampler2D-, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, stm -> .selection_stm  | -half4-, primary_exp -> .LParen exp RParen  | Semicolon, compound_stm -> .LBrace RBrace  | break, selection_stm -> .if LParen exp RParen stm else stm  | -int-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, selection_stm -> .if LParen exp RParen stm else stm  | if, stm -> .iteration_stm  | -uniform-, stm -> .selection_stm  | -fixed4-, jump_stm -> .-goto- ID  | -void-, stm -> .exp_stm  | -half4-, exp_stm -> .Semicolon  | Tilde, compound_stm -> .LBrace block_item_list RBrace  | NOT, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp Decrement  | Comma, primary_exp -> .String  | LT, compound_stm -> .LBrace RBrace  | -sampler2D-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, unary_exp -> .postfix_exp  | NEQ, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp Increment  | AND, selection_stm -> .if LParen exp RParen stm  | Semicolon, primary_exp -> .LParen exp RParen  | LParen, stm -> .compound_stm  | -void-, stm -> .jump_stm  | -float2-, stm -> .jump_stm  | Number, exp_stm -> .exp Semicolon  | RBrace, stm -> .selection_stm  | -return-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half4-, iteration_stm -> .while LParen exp RParen stm  | -half2-, stm -> .iteration_stm  | -fixed3-, stm -> .jump_stm  | Plus, compound_stm -> .LBrace RBrace  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Number, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | VerticalBar, stm -> .iteration_stm  | -float2-, exp_stm -> .Semicolon  | LBrace, exp_stm -> .exp Semicolon  | -void-, jump_stm -> .-continue-  | else, compound_stm -> .LBrace block_item_list RBrace  | -fixed2-, primary_exp -> .String  | Caret, compound_stm -> .LBrace RBrace  | -fixed2-, exp_stm -> .exp Semicolon  | -long-, exp_stm -> .exp Semicolon  | -int-, exp_stm -> .Semicolon  | -continue-, unary_op -> .Tilde  | Increment, stm -> .iteration_stm  | -fixed4-, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, stm -> .selection_stm  | Decrement, exp_stm -> .Semicolon  | String, jump_stm -> .-continue-  | -do-, exp_stm -> .exp Semicolon  | if, unary_exp -> .Decrement unary_exp  | LeftShift, stm -> .exp_stm  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -continue-, stm -> .compound_stm  | ID, jump_stm -> .-continue-  | Tilde, stm -> .exp_stm  | LBrace, jump_stm -> .-continue-  | -half4-, iteration_stm -> .while LParen exp RParen stm  | -continue-, binary_exp -> .binary_exp binary_op unary_exp  | OR, stm -> .jump_stm  | -float3-, postfix_exp -> .postfix_exp LParen RParen  | OR, jump_stm -> .break  | for, postfix_exp -> .primary_exp  | LBrack, jump_stm -> .-continue-  | -half2-, primary_exp -> .Number  | Increment, compound_stm -> .LBrace RBrace  | -void-, exp_stm -> .Semicolon  | -fixed2-, selection_stm -> .if LParen exp RParen stm else stm  | -void-, jump_stm -> .-continue-  | while, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Plus, selection_stm -> if LParen exp RParen stm else .stm  | -struct-, exp_stm -> .Semicolon  | -fixed4-, exp_stm -> .Semicolon  | -goto-, iteration_stm -> .while LParen exp RParen stm  | -float2-, stm -> .iteration_stm  | -char-, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, jump_stm -> .break  | -float4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | NOT, iteration_stm -> .while LParen exp RParen stm  | LBrace, primary_exp -> .Number  | VerticalBar, primary_exp -> .String  | Plus, compound_stm -> .LBrace RBrace  | Tilde, postfix_exp -> .primary_exp  | Ampersand, unary_exp -> .Increment unary_exp  | LT, jump_stm -> .-return- exp Semicolon  | -void-, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, compound_stm -> .LBrace RBrace  | -fixed4-, postfix_exp -> .postfix_exp Dot ID  | Question, selection_stm -> if LParen exp RParen stm else .stm  | -float3-, exp_stm -> .exp Semicolon  | -sampler2D-, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float3-, selection_stm -> .if LParen exp RParen stm  | -goto-, selection_stm -> .if LParen exp RParen stm  | -half2-, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .String  | EQ, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | ID, jump_stm -> .-continue-  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -float3-, primary_exp -> .ID  | Divide, stm -> .exp_stm  | -goto-, postfix_exp -> .postfix_exp Dot ID  | Dot, selection_stm -> .if LParen exp RParen stm  | while, stm -> .compound_stm  | Decrement, jump_stm -> .-goto- ID  | ID, jump_stm -> .break  | Increment, selection_stm -> .if LParen exp RParen stm else stm  | -fixed2-, stm -> .exp_stm  | -fixed3-, unary_exp -> .postfix_exp  | Comma, stm -> .compound_stm  | LParen, unary_op -> .Minus  | String, jump_stm -> .break  | if, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half4-, unary_exp -> .unary_op unary_exp  | Comma, jump_stm -> .-return- exp Semicolon  | -goto-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float-, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .LParen exp RParen  | Comma, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Semicolon, stm -> .compound_stm  | -fixed4-, binary_exp -> .unary_exp  | GE, selection_stm -> .if LParen exp RParen stm else stm  | -return-, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | -goto-, iteration_stm -> .while LParen exp RParen stm  | break, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -int-, jump_stm -> .-continue-  | -continue-, stm -> .compound_stm  | for, stm -> .jump_stm  | if, stm -> .compound_stm  | -short-, jump_stm -> .-goto- ID  | -float2-, primary_exp -> .ID  | Question, stm -> .selection_stm  | Tilde, postfix_exp -> .postfix_exp Increment  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -float2-, jump_stm -> .break  | -char-, binary_exp -> .unary_exp  | OR, stm -> .compound_stm  | -long-, stm -> .compound_stm  | -fixed2-, binary_exp -> .unary_exp  | Caret, jump_stm -> .-goto- ID  | Increment, selection_stm -> .if LParen exp RParen stm else stm  | LParen, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | LBrack, stm -> .selection_stm  | RBrace, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, selection_stm -> if LParen exp RParen stm else .stm  | RBrace, stm -> .compound_stm  | -char-, jump_stm -> .break  | NOT, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | break, compound_stm -> .LBrace RBrace  | -long-, jump_stm -> .break  | -long-, jump_stm -> .-continue-  | -uniform-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LBrace, stm -> .compound_stm  | -goto-, selection_stm -> .if LParen exp RParen stm  | -short-, postfix_exp -> .primary_exp  | LParen, stm -> .selection_stm  | LBrace, stm -> .compound_stm  | -float4-, postfix_exp -> .postfix_exp LParen RParen  | Assign, compound_stm -> .LBrace RBrace  | -half3-, selection_stm -> .if LParen exp RParen stm  | LBrace, jump_stm -> .break  | -half4-, stm -> .selection_stm  | -do-, iteration_stm -> .while LParen exp RParen stm  | -uniform-, jump_stm -> .-continue-  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -short-, postfix_exp -> .postfix_exp LParen RParen  | NEQ, stm -> .iteration_stm  | -float-, unary_exp -> .postfix_exp  | LT, selection_stm -> if LParen exp RParen stm else .stm  | NOT, postfix_exp -> .postfix_exp Dot ID  | Times, jump_stm -> .-return- exp Semicolon  | -half3-, primary_exp -> .LParen exp RParen  | NEQ, compound_stm -> .LBrace RBrace  | Increment, stm -> .compound_stm  | -continue-, stm -> .exp_stm  | Plus, postfix_exp -> .postfix_exp Decrement  | Minus, stm -> .selection_stm  | -goto-, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, postfix_exp -> .postfix_exp Decrement  | Times, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -int-, unary_op -> .NOT  | LParen, stm -> .iteration_stm  | ID, stm -> .compound_stm  | Plus, exp_stm -> .exp Semicolon  | String, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Increment, stm -> .jump_stm  | LParen, jump_stm -> .-return- exp Semicolon  | -short-, compound_stm -> .LBrace RBrace  | String, selection_stm -> .if LParen exp RParen stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -void-, exp_stm -> .Semicolon  | Increment, unary_exp -> .unary_op unary_exp  | Plus, exp_stm -> .Semicolon  | while, stm -> .compound_stm  | -float3-, primary_exp -> .String  | LeftShift, jump_stm -> .-continue-  | -fixed3-, postfix_exp -> .postfix_exp LParen RParen  | GE, stm -> .selection_stm  | -float4-, postfix_exp -> .primary_exp  | OR, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LBrace, iteration_stm -> .while LParen exp RParen stm  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | while, unary_exp -> .postfix_exp  | RightShift, compound_stm -> .LBrace block_item_list RBrace  | -fixed4-, selection_stm -> if LParen exp RParen stm else .stm  | -continue-, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_exp -> .Increment unary_exp  | Divide, exp_stm -> .Semicolon  | ID, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed2-, jump_stm -> .-goto- ID  | -struct-, jump_stm -> .-continue-  | -return-, jump_stm -> .break  | Minus, iteration_stm -> .while LParen exp RParen stm  | Plus, selection_stm -> .if LParen exp RParen stm  | -do-, compound_stm -> .LBrace RBrace  | if, jump_stm -> .break  | -void-, selection_stm -> if LParen exp RParen stm else .stm  | -float2-, iteration_stm -> .while LParen exp RParen stm  | -float-, stm -> .selection_stm  | Plus, compound_stm -> .LBrace RBrace  | NOT, exp_stm -> .Semicolon  | Decrement, selection_stm -> .if LParen exp RParen stm  | Number, postfix_exp -> .postfix_exp LParen RParen  | Comma, unary_exp -> .Decrement unary_exp  | Plus, primary_exp -> .String  | Ampersand, exp_stm -> .Semicolon  | -float2-, selection_stm -> if LParen exp RParen stm else .stm  | -float4-, iteration_stm -> .while LParen exp RParen stm  | Number, unary_op -> .Tilde  | Plus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -continue-, primary_exp -> .ID  | Times, exp_stm -> .exp Semicolon  | Decrement, stm -> .compound_stm  | -sampler2D-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Minus, stm -> .selection_stm  | LParen, jump_stm -> .-goto- ID  | else, selection_stm -> if LParen exp RParen stm else .stm  | -fixed2-, stm -> .iteration_stm  | LParen, selection_stm -> .if LParen exp RParen stm else stm  | Increment, stm -> .jump_stm  | -void-, selection_stm -> .if LParen exp RParen stm  | -long-, binary_exp -> .unary_exp  | EQ, unary_exp -> .postfix_exp  | Minus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, binary_exp -> .binary_exp binary_op unary_exp  | Caret, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half2-, unary_op -> .Tilde  | Tilde, jump_stm -> .break  | ID, jump_stm -> .-continue-  | -void-, postfix_exp -> .postfix_exp Decrement  | Decrement, jump_stm -> .-goto- ID  | Semicolon, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, stm -> .selection_stm  | -struct-, stm -> .exp_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -return-, unary_exp -> .Decrement unary_exp  | Divide, stm -> .iteration_stm  | Tilde, postfix_exp -> .postfix_exp Dot ID  | Ampersand, compound_stm -> .LBrace block_item_list RBrace  | LBrace, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .postfix_exp Increment  | Semicolon, jump_stm -> .break  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | -fixed3-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half3-, stm -> .exp_stm  | -return-, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, stm -> .exp_stm  | -char-, postfix_exp -> .postfix_exp Decrement  | Ampersand, exp_stm -> .exp Semicolon  | -double-, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -long-, selection_stm -> .if LParen exp RParen stm else stm  | RBrace, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, iteration_stm -> .while LParen exp RParen stm  | for, compound_stm -> .LBrace RBrace  | -half2-, jump_stm -> .-goto- ID  | -do-, stm -> .selection_stm  | if, stm -> .compound_stm  | -uniform-, exp_stm -> .exp Semicolon  | -float-, stm -> .jump_stm  | -float-, postfix_exp -> .postfix_exp LParen RParen  | LE, selection_stm -> if LParen exp RParen stm else .stm  | while, jump_stm -> .-continue-  | RBrace, unary_exp -> .unary_op unary_exp  | VerticalBar, jump_stm -> .-return- exp Semicolon  | -float4-, stm -> .selection_stm  | -sampler2D-, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, stm -> .exp_stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, selection_stm -> .if LParen exp RParen stm  | -half3-, unary_op -> .Minus  | Decrement, compound_stm -> .LBrace block_item_list RBrace  | -long-, primary_exp -> .LParen exp RParen  | Percent, selection_stm -> .if LParen exp RParen stm  | Plus, jump_stm -> .-return- exp Semicolon  | -fixed4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | if, exp_stm -> .exp Semicolon  | -char-, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Comma, compound_stm -> .LBrace block_item_list RBrace  | -float2-, jump_stm -> .-continue-  | -fixed2-, primary_exp -> .Number  | LeftShift, exp_stm -> .exp Semicolon  | Tilde, stm -> .compound_stm  | LBrace, iteration_stm -> .while LParen exp RParen stm  | LParen, exp_stm -> .exp Semicolon  | while, jump_stm -> .break  | LParen, compound_stm -> .LBrace RBrace  | LBrace, jump_stm -> .-goto- ID  | -float-, exp_stm -> .exp Semicolon  | LBrace, jump_stm -> .-continue-  | -short-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, binary_exp -> .binary_exp binary_op unary_exp  | EQ, jump_stm -> .-return- exp Semicolon  | else, exp_stm -> .exp Semicolon  | for, postfix_exp -> .postfix_exp Decrement  | Percent, jump_stm -> .-continue-  | -double-, postfix_exp -> .postfix_exp Decrement  | LE, compound_stm -> .LBrace RBrace  | ID, selection_stm -> .if LParen exp RParen stm else stm  | -goto-, selection_stm -> .if LParen exp RParen stm  | -fixed2-, primary_exp -> .LParen exp RParen  | Times, stm -> .selection_stm  | ID, selection_stm -> .if LParen exp RParen stm  | -double-, exp_stm -> .Semicolon  | LParen, postfix_exp -> .primary_exp  | Percent, primary_exp -> .String  | Comma, compound_stm -> .LBrace block_item_list RBrace  | Minus, jump_stm -> .break  | -goto-, stm -> .iteration_stm  | -fixed2-, jump_stm -> .-return- exp Semicolon  | -struct-, binary_exp -> .binary_exp binary_op unary_exp  | Question, stm -> .exp_stm  | Minus, exp_stm -> .exp Semicolon  | -uniform-, exp_stm -> .Semicolon  | -char-, primary_exp -> .Number  | RightShift, jump_stm -> .-return- exp Semicolon  | LBrace, selection_stm -> .if LParen exp RParen stm else stm  | else, stm -> .exp_stm  | -void-, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, jump_stm -> .-continue-  | -goto-, unary_exp -> .Decrement unary_exp  | Question, unary_exp -> .Increment unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | GT, stm -> .jump_stm  | Semicolon, selection_stm -> if LParen exp RParen stm else .stm  | Decrement, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | for, iteration_stm -> .while LParen exp RParen stm  | Semicolon, primary_exp -> .Number  | Times, jump_stm -> .-return- exp Semicolon  | Increment, binary_exp -> .binary_exp binary_op unary_exp  | Times, exp_stm -> .Semicolon  | -half4-, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, jump_stm -> .break  | -struct-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -void-, primary_exp -> .ID  | Minus, selection_stm -> .if LParen exp RParen stm  | -continue-, unary_exp -> .unary_op unary_exp  | Question, selection_stm -> .if LParen exp RParen stm else stm  | -half4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, unary_op -> .Plus  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -sampler2D-, selection_stm -> .if LParen exp RParen stm else stm  | -double-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed4-, stm -> .iteration_stm  | -int-, stm -> .jump_stm  | -double-, binary_exp -> .unary_exp  | Question, exp_stm -> .exp Semicolon  | Plus, jump_stm -> .-continue-  | -float2-, compound_stm -> .LBrace RBrace  | -float4-, primary_exp -> .String  | Question, jump_stm -> .-continue-  | -char-, primary_exp -> .Number  | Decrement, iteration_stm -> .while LParen exp RParen stm  | while, selection_stm -> .if LParen exp RParen stm  | break, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, selection_stm -> .if LParen exp RParen stm  | -float4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, unary_exp -> .Decrement unary_exp  | GT, compound_stm -> .LBrace RBrace  | Minus, stm -> .selection_stm  | -char-, compound_stm -> .LBrace block_item_list RBrace  | ID, binary_exp -> .unary_exp  | LE, stm -> .exp_stm  | String, jump_stm -> .-continue-  | -float-, selection_stm -> if LParen exp RParen stm else .stm  | -char-, jump_stm -> .break  | -double-, unary_exp -> .unary_op unary_exp  | Ampersand, compound_stm -> .LBrace block_item_list RBrace  | -sampler2D-, exp_stm -> .exp Semicolon  | -return-, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, unary_exp -> .postfix_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LeftShift, jump_stm -> .-return- exp Semicolon  | Number, compound_stm -> .LBrace RBrace  | -continue-, exp_stm -> .exp Semicolon  | Number, stm -> .iteration_stm  | for, iteration_stm -> .while LParen exp RParen stm  | else, postfix_exp -> .postfix_exp Increment  | RightShift, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | NEQ, selection_stm -> .if LParen exp RParen stm  | -uniform-, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .primary_exp  | Caret, compound_stm -> .LBrace block_item_list RBrace  | break, exp_stm -> .Semicolon  | -double-, selection_stm -> .if LParen exp RParen stm  | -float3-, jump_stm -> .-continue-  | -sampler2D-, postfix_exp -> .postfix_exp Decrement  | EQ, iteration_stm -> .while LParen exp RParen stm  | -int-, selection_stm -> if LParen exp RParen stm else .stm  | break, jump_stm -> .-goto- ID  | Tilde, stm -> .compound_stm  | Increment, selection_stm -> if LParen exp RParen stm else .stm  | Number, stm -> .compound_stm  | -float2-, jump_stm -> .-goto- ID  | Number, postfix_exp -> .postfix_exp Increment  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | for, postfix_exp -> .postfix_exp Decrement  | Increment, binary_exp -> .binary_exp binary_op unary_exp  | Minus, jump_stm -> .-goto- ID  | Decrement, stm -> .exp_stm  | LParen, primary_exp -> .LParen exp RParen  | OR, primary_exp -> .Number  | GT, postfix_exp -> .primary_exp  | Question, jump_stm -> .-goto- ID  | -uniform-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, jump_stm -> .break  | -fixed4-, compound_stm -> .LBrace RBrace  | -uniform-, unary_exp -> .unary_op unary_exp  | GT, compound_stm -> .LBrace block_item_list RBrace  | -short-, stm -> .iteration_stm  | while, postfix_exp -> .postfix_exp Increment  | Increment, selection_stm -> .if LParen exp RParen stm  | -return-, stm -> .compound_stm  | -half2-, exp_stm -> .Semicolon  | -return-, selection_stm -> .if LParen exp RParen stm else stm  | -fixed4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, stm -> .iteration_stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_op -> .Minus  | Plus, jump_stm -> .-continue-  | LParen, selection_stm -> .if LParen exp RParen stm  | Tilde, stm -> .iteration_stm  | -goto-, selection_stm -> .if LParen exp RParen stm else stm  | -fixed3-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, stm -> .compound_stm  | while, unary_exp -> .postfix_exp  | Caret, stm -> .jump_stm  | Increment, stm -> .exp_stm  | -sampler2D-, primary_exp -> .ID  | LT, jump_stm -> .-goto- ID  | RBrace, postfix_exp -> .postfix_exp LParen RParen  | LT, iteration_stm -> .while LParen exp RParen stm  | NOT, compound_stm -> .LBrace RBrace  | -int-, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp Decrement  | Question, stm -> .jump_stm  | Minus, primary_exp -> .LParen exp RParen  | Assign, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -return-, primary_exp -> .ID  | VerticalBar, primary_exp -> .Number  | Percent, jump_stm -> .-continue-  | LBrace, stm -> .jump_stm  | -fixed4-, iteration_stm -> .while LParen exp RParen stm  | -return-, jump_stm -> .-return- exp Semicolon  | break, selection_stm -> if LParen exp RParen stm else .stm  | -fixed4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -double-, primary_exp -> .Number  | Assign, jump_stm -> .-return- exp Semicolon  | for, jump_stm -> .-goto- ID  | -float3-, jump_stm -> .break  | -float-, unary_exp -> .Increment unary_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, stm -> .compound_stm  | RBrace, selection_stm -> if LParen exp RParen stm else .stm  | -uniform-, jump_stm -> .-goto- ID  | -goto-, stm -> .exp_stm  | -continue-, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .String  | Decrement, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, selection_stm -> .if LParen exp RParen stm  | -fixed4-, exp_stm -> .Semicolon  | -uniform-, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, stm -> .compound_stm  | -int-, stm -> .exp_stm  | -half3-, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, stm -> .iteration_stm  | else, stm -> .selection_stm  | -half2-, exp_stm -> .exp Semicolon  | -half2-, selection_stm -> if LParen exp RParen stm else .stm  | -half2-, jump_stm -> .-continue-  | -float3-, exp_stm -> .exp Semicolon  | break, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, iteration_stm -> .while LParen exp RParen stm  | -fixed2-, stm -> .selection_stm  | -float-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -do-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, unary_exp -> .postfix_exp  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Tilde, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, jump_stm -> .-return- exp Semicolon  | -long-, stm -> .compound_stm  | -fixed3-, primary_exp -> .String  | LParen, postfix_exp -> .postfix_exp Increment  | Minus, binary_exp -> .unary_exp  | LeftShift, iteration_stm -> .while LParen exp RParen stm  | -double-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -sampler2D-, jump_stm -> .-goto- ID  | LBrace, primary_exp -> .ID  | RightShift, jump_stm -> .-return- exp Semicolon  | -fixed2-, selection_stm -> .if LParen exp RParen stm else stm  | -char-, jump_stm -> .-return- exp Semicolon  | -continue-, iteration_stm -> .while LParen exp RParen stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -short-, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, stm -> .exp_stm  | break, primary_exp -> .ID  | EQ, postfix_exp -> .postfix_exp Dot ID  | RightShift, exp_stm -> .Semicolon  | else, stm -> .compound_stm  | Number, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, unary_exp -> .unary_op unary_exp  | Minus, unary_exp -> .unary_op unary_exp  | RightShift, compound_stm -> .LBrace RBrace  | -short-, exp_stm -> .Semicolon  | -half3-, stm -> .selection_stm  | break, stm -> .compound_stm  | -do-, primary_exp -> .LParen exp RParen  | LE, compound_stm -> .LBrace block_item_list RBrace  | -struct-, jump_stm -> .-continue-  | -long-, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, stm -> .compound_stm  | -half4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Decrement, stm -> .iteration_stm  | if, compound_stm -> .LBrace block_item_list RBrace  | -float4-, unary_exp -> .unary_op unary_exp  | NEQ, jump_stm -> .-goto- ID  | -char-, stm -> .selection_stm  | -double-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -double-, unary_exp -> .postfix_exp  | GE, selection_stm -> .if LParen exp RParen stm  | for, selection_stm -> .if LParen exp RParen stm  | ID, jump_stm -> .-goto- ID  | Minus, jump_stm -> .break  | while, stm -> .jump_stm  | ID, jump_stm -> .-return- exp Semicolon  | -half4-, selection_stm -> .if LParen exp RParen stm else stm  | -continue-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Divide, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float2-, compound_stm -> .LBrace RBrace  | -struct-, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, jump_stm -> .-continue-  | ID, compound_stm -> .LBrace RBrace  | -goto-, postfix_exp -> .postfix_exp LParen RParen  | Divide, jump_stm -> .-return- exp Semicolon  | Plus, stm -> .jump_stm  | -uniform-, stm -> .exp_stm  | -float3-, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -uniform-, primary_exp -> .ID  | Comma, selection_stm -> .if LParen exp RParen stm else stm  | for, unary_exp -> .Increment unary_exp  | Assign, jump_stm -> .-goto- ID  | -return-, postfix_exp -> .postfix_exp Increment  | Assign, jump_stm -> .break  | Tilde, selection_stm -> .if LParen exp RParen stm else stm  | -float3-, jump_stm -> .-goto- ID  | -fixed3-, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | LT, jump_stm -> .-continue-  | -half3-, primary_exp -> .Number  | Minus, stm -> .iteration_stm  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -half4-, stm -> .selection_stm  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | Decrement, jump_stm -> .-goto- ID  | for, jump_stm -> .-goto- ID  | if, compound_stm -> .LBrace RBrace  | LParen, exp_stm -> .Semicolon  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, compound_stm -> .LBrace RBrace  | else, selection_stm -> .if LParen exp RParen stm else stm  | -struct-, stm -> .iteration_stm  | -long-, primary_exp -> .ID  | OR, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | ID, stm -> .exp_stm  | -fixed4-, assignment_exp -> .conditional_exp  | Comma, postfix_exp -> .primary_exp  | GT, stm -> .selection_stm  | else, exp_stm -> .Semicolon  | -void-, jump_stm -> .-return- exp Semicolon  | Minus, postfix_exp -> .postfix_exp Decrement  | VerticalBar, selection_stm -> if LParen exp RParen stm else .stm  | LBrace, selection_stm -> .if LParen exp RParen stm else stm  | -uniform-, postfix_exp -> .postfix_exp Decrement  | GT, stm -> .selection_stm  | String, unary_op -> .Tilde  | NOT, primary_exp -> .ID  | AND, postfix_exp -> .postfix_exp LParen RParen  | Dot, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | String, unary_op -> .Plus  | Decrement, exp_stm -> .Semicolon  | NOT, stm -> .selection_stm  | -half3-, stm -> .jump_stm  | -short-, exp_stm -> .exp Semicolon  | -fixed3-, jump_stm -> .-return- exp Semicolon  | Tilde, binary_exp -> .unary_exp  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -struct-, selection_stm -> .if LParen exp RParen stm else stm  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -char-, unary_exp -> .Increment unary_exp  | Plus, primary_exp -> .Number  | Ampersand, selection_stm -> .if LParen exp RParen stm  | -char-, primary_exp -> .ID  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | RightShift, selection_stm -> if LParen exp RParen stm else .stm  | -float-, stm -> .exp_stm  | RBrace, unary_exp -> .Increment unary_exp  | Semicolon, stm -> .exp_stm  | Decrement, unary_op -> .Tilde  | ID, compound_stm -> .LBrace RBrace  | RBrace, primary_exp -> .LParen exp RParen  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, stm -> .selection_stm  | -long-, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, jump_stm -> .-continue-  | Plus, primary_exp -> .Number  | Semicolon, unary_op -> .Minus  | NOT, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, jump_stm -> .break  | -short-, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, jump_stm -> .break  | -float3-, exp_stm -> .exp Semicolon  | -fixed4-, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | ID, stm -> .jump_stm  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .String  | Times, jump_stm -> .-goto- ID  | -continue-, stm -> .selection_stm  | Semicolon, jump_stm -> .break  | -int-, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Assign, stm -> .iteration_stm  | RBrace, stm -> .iteration_stm  | -struct-, selection_stm -> if LParen exp RParen stm else .stm  | if, jump_stm -> .break  | Semicolon, conditional_exp -> .binary_exp  | Semicolon, selection_stm -> if LParen exp RParen stm else .stm  | Minus, compound_stm -> .LBrace block_item_list RBrace  | RBrace, exp_stm -> .exp Semicolon  | -float2-, stm -> .compound_stm  | -float-, exp_stm -> .Semicolon  | RBrace, stm -> .iteration_stm  | -half3-, postfix_exp -> .postfix_exp Dot ID  | Minus, stm -> .jump_stm  | -continue-, primary_exp -> .String  | Divide, binary_exp -> .unary_exp  | LT, primary_exp -> .LParen exp RParen  | Plus, selection_stm -> .if LParen exp RParen stm else stm  | -half2-, stm -> .compound_stm  | -struct-, selection_stm -> if LParen exp RParen stm else .stm  | -fixed3-, stm -> .selection_stm  | NOT, jump_stm -> .-return- exp Semicolon  | -float2-, postfix_exp -> .postfix_exp Dot ID  | LParen, compound_stm -> .LBrace RBrace  | -float-, selection_stm -> if LParen exp RParen stm else .stm  | -double-, unary_exp -> .unary_op unary_exp  | LeftShift, selection_stm -> if LParen exp RParen stm else .stm  | -short-, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, jump_stm -> .-return- exp Semicolon  | -float3-, postfix_exp -> .postfix_exp LParen RParen  | Question, stm -> .iteration_stm  | -sampler2D-, exp_stm -> .exp Semicolon  | Semicolon, iteration_stm -> .while LParen exp RParen stm  | -struct-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed2-, postfix_exp -> .postfix_exp Increment  | Dot, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | RBrace, postfix_exp -> .postfix_exp Dot ID  | EQ, stm -> .exp_stm  | else, jump_stm -> .-goto- ID  | NOT, jump_stm -> .-continue-  | Decrement, stm -> .compound_stm  | break, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, stm -> .jump_stm  | for, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Number, unary_op -> .Plus  | Tilde, selection_stm -> .if LParen exp RParen stm else stm  | Semicolon, selection_stm -> if LParen exp RParen stm else .stm  | -long-, iteration_stm -> .while LParen exp RParen stm  | -char-, postfix_exp -> .postfix_exp Increment  | Divide, stm -> .selection_stm  | -float2-, stm -> .jump_stm  | -return-, selection_stm -> if LParen exp RParen stm else .stm  | -half4-, iteration_stm -> .while LParen exp RParen stm  | ID, stm -> .iteration_stm  | -void-, unary_exp -> .Increment unary_exp  | LE, unary_exp -> .postfix_exp  | OR, jump_stm -> .-return- exp Semicolon  | -uniform-, exp_stm -> .exp Semicolon  | else, stm -> .jump_stm  | -half4-, jump_stm -> .-goto- ID  | break, selection_stm -> if LParen exp RParen stm else .stm  | LParen, compound_stm -> .LBrace RBrace  | -half4-, binary_exp -> .unary_exp  | RightShift, exp_stm -> .Semicolon  | Number, stm -> .iteration_stm  | -return-, binary_exp -> .unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | else, exp_stm -> .Semicolon  | break, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .primary_exp  | Divide, primary_exp -> .LParen exp RParen  | Decrement, stm -> .compound_stm  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | AND, primary_exp -> .ID  | Dot, jump_stm -> .-return- exp Semicolon  | -sampler2D-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, stm -> .iteration_stm  | NOT, jump_stm -> .break  | -float2-, primary_exp -> .Number  | LParen, exp_stm -> .exp Semicolon  | ID, primary_exp -> .Number  | NEQ, jump_stm -> .break  | -return-, compound_stm -> .LBrace RBrace  | for, selection_stm -> if LParen exp RParen stm else .stm  | String, jump_stm -> .break  | -half3-, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, stm -> .jump_stm  | -fixed3-, postfix_exp -> .postfix_exp Decrement  | LParen, stm -> .compound_stm  | Minus, primary_exp -> .LParen exp RParen  | Minus, compound_stm -> .LBrace block_item_list RBrace  | -do-, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Decrement  | OR, jump_stm -> .-return- exp Semicolon  | -return-, primary_exp -> .ID  | LeftShift, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | RBrace, postfix_exp -> .postfix_exp Increment  | EQ, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Times, exp_stm -> .exp Semicolon  | NOT, jump_stm -> .-goto- ID  | -half4-, selection_stm -> .if LParen exp RParen stm else stm  | Number, unary_op -> .NOT  | String, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -void-, unary_exp -> .postfix_exp  | LeftShift, stm -> .jump_stm  | -int-, compound_stm -> .LBrace RBrace  | -fixed3-, postfix_exp -> .postfix_exp Decrement  | Dot, unary_exp -> .Increment unary_exp  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Plus, )
608 <- (601, 'RParen') (iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | while, iteration_stm -> -do- stm while LParen exp RParen .Semicolon  | else, )
609 <- (602, 'Semicolon') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, binary_exp -> .unary_exp  | RParen, primary_exp -> .LParen exp RParen  | RightShift, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, binary_exp -> .binary_exp binary_op unary_exp  | Plus, unary_exp -> .Decrement unary_exp  | Minus, postfix_exp -> .primary_exp  | AND, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | GE, unary_exp -> .unary_op unary_exp  | Plus, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RParen, postfix_exp -> .primary_exp  | OR, unary_exp -> .postfix_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | GE, postfix_exp -> .postfix_exp LParen RParen  | RParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_exp -> .Increment unary_exp  | Ampersand, exp -> .exp Comma assignment_exp  | Comma, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_exp -> .Decrement unary_exp  | RParen, unary_op -> .Tilde  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, unary_exp -> .Increment unary_exp  | LT, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, assignment_exp -> .unary_exp assignment_op assignment_exp  | RParen, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, postfix_exp -> .postfix_exp Increment  | LE, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen RParen  | Plus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, postfix_exp -> .postfix_exp Dot ID  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Decrement  | RParen, postfix_exp -> .postfix_exp Dot ID  | Increment, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Increment  | RParen, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, conditional_exp -> .binary_exp  | RParen, primary_exp -> .String  | VerticalBar, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | RParen, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, binary_exp -> .unary_exp  | LE, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .ID  | VerticalBar, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RParen, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, primary_exp -> .ID  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Comma, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, primary_exp -> .ID  | Question, primary_exp -> .String  | Comma, postfix_exp -> .primary_exp  | LE, exp -> .assignment_exp  | RParen, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp Dot ID  | Ampersand, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, postfix_exp -> .postfix_exp Increment  | GT, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | RParen, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, unary_exp -> .postfix_exp  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | while, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, postfix_exp -> .primary_exp  | Minus, unary_exp -> .unary_op unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, unary_exp -> .unary_op unary_exp  | Ampersand, primary_exp -> .Number  | RParen, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .primary_exp  | LParen, primary_exp -> .String  | Minus, postfix_exp -> .postfix_exp Decrement  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Increment  | Caret, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, primary_exp -> .ID  | Assign, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, postfix_exp -> .primary_exp  | GT, postfix_exp -> .postfix_exp Increment  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | LeftShift, iteration_stm -> for LParen exp Semicolon exp Semicolon .exp RParen stm  | else, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, unary_exp -> .Decrement unary_exp  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, primary_exp -> .ID  | LParen, postfix_exp -> .postfix_exp Increment  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, binary_exp -> .binary_exp binary_op unary_exp  | Percent, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .primary_exp  | Ampersand, postfix_exp -> .primary_exp  | Increment, primary_exp -> .String  | Question, postfix_exp -> .postfix_exp Dot ID  | LT, assignment_exp -> .conditional_exp  | RParen, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, primary_exp -> .ID  | LE, primary_exp -> .LParen exp RParen  | GE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, unary_exp -> .Increment unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, exp -> .exp Comma assignment_exp  | RParen, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_op -> .NOT  | Number, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, primary_exp -> .String  | RParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .primary_exp  | RParen, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, unary_op -> .Plus  | Increment, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | RParen, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, binary_exp -> .unary_exp  | VerticalBar, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, binary_exp -> .binary_exp binary_op unary_exp  | RParen, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Decrement  | EQ, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_exp -> .Decrement unary_exp  | Comma, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .String  | LT, postfix_exp -> .postfix_exp Decrement  | GT, unary_op -> .Minus  | Tilde, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .Number  | Plus, unary_op -> .NOT  | Plus, unary_op -> .Minus  | NOT, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, primary_exp -> .String  | Caret, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .NOT  | String, primary_exp -> .LParen exp RParen  | RParen, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | EQ, binary_exp -> .binary_exp binary_op unary_exp  | GT, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, binary_exp -> .unary_exp  | LT, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_op -> .NOT  | Decrement, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .unary_op unary_exp  | Assign, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Question, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Percent, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, unary_op -> .Minus  | Number, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, primary_exp -> .String  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
610 <- (603, 'else') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, stm -> .jump_stm  | else, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, stm -> .compound_stm  | else, unary_exp -> .Decrement unary_exp  | Minus, primary_exp -> .ID  | EQ, stm -> .exp_stm  | while, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, selection_stm -> .if LParen exp RParen stm else stm  | while, binary_exp -> .unary_exp  | Percent, compound_stm -> .LBrace block_item_list RBrace  | while, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_op -> .Minus  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, jump_stm -> .-goto- ID  | else, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, compound_stm -> .LBrace block_item_list RBrace  | else, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, unary_exp -> .unary_op unary_exp  | Semicolon, unary_exp -> .unary_op unary_exp  | LE, jump_stm -> .break  | else, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, exp_stm -> .Semicolon  | while, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, jump_stm -> .-return- exp Semicolon  | while, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, postfix_exp -> .primary_exp  | Increment, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | LT, selection_stm -> if LParen exp RParen stm else .stm  | while, unary_exp -> .postfix_exp  | Semicolon, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, unary_exp -> .postfix_exp  | LE, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, primary_exp -> .LParen exp RParen  | Question, primary_exp -> .String  | Question, primary_exp -> .String  | Dot, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, jump_stm -> .break  | while, unary_exp -> .postfix_exp  | Question, primary_exp -> .Number  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | Percent, binary_exp -> .unary_exp  | Ampersand, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_exp -> .Increment unary_exp  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Plus, primary_exp -> .String  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Question, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, selection_stm -> .if LParen exp RParen stm else stm  | else, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, stm -> .iteration_stm  | else, iteration_stm -> .while LParen exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, primary_exp -> .LParen exp RParen  | LT, binary_exp -> .unary_exp  | LE, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp LParen RParen  | OR, jump_stm -> .-return- exp Semicolon  | else, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, iteration_stm -> .while LParen exp RParen stm  | else, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .Number  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, binary_exp -> .unary_exp  | LeftShift, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, postfix_exp -> .primary_exp  | Decrement, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .primary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, compound_stm -> .LBrace RBrace  | while, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, stm -> .compound_stm  | while, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_op -> .Tilde  | Number, stm -> .jump_stm  | while, binary_exp -> .unary_exp  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, unary_exp -> .unary_op unary_exp  | Ampersand, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Minus  | Number, primary_exp -> .Number  | Percent, unary_exp -> .unary_op unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Caret, postfix_exp -> .postfix_exp Decrement  | LE, unary_op -> .Plus  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | Decrement, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, jump_stm -> .-goto- ID  | while, selection_stm -> if LParen exp RParen stm else .stm  | else, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, compound_stm -> .LBrace RBrace  | else, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, unary_exp -> .Decrement unary_exp  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, exp_stm -> .Semicolon  | else, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, stm -> .selection_stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, primary_exp -> .LParen exp RParen  | Minus, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, primary_exp -> .LParen exp RParen  | Ampersand, exp_stm -> .exp Semicolon  | while, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, primary_exp -> .Number  | AND, primary_exp -> .LParen exp RParen  | LBrack, postfix_exp -> .postfix_exp Increment  | Assign, unary_exp -> .Decrement unary_exp  | AND, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .ID  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, postfix_exp -> .primary_exp  | GT, stm -> .selection_stm  | else, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, binary_exp -> .unary_exp  | VerticalBar, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | else, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, unary_op -> .Minus  | NOT, selection_stm -> .if LParen exp RParen stm  | else, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, jump_stm -> .-continue-  | else, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | Comma, primary_exp -> .LParen exp RParen  | Dot, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, unary_exp -> .unary_op unary_exp  | Percent, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .ID  | NEQ, binary_exp -> .binary_exp binary_op unary_exp  | OR, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, jump_stm -> .-continue-  | while, conditional_exp -> .binary_exp  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | LT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, stm -> .exp_stm  | else, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, unary_exp -> .postfix_exp  | OR, unary_exp -> .unary_op unary_exp  | Minus, exp_stm -> .exp Semicolon  | else, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .primary_exp  | LE, unary_exp -> .unary_op unary_exp  | Comma, unary_exp -> .postfix_exp  | Percent, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | else, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, primary_exp -> .ID  | Question, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, postfix_exp -> .postfix_exp Decrement  | Dot, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, stm -> .iteration_stm  | while, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, unary_exp -> .Increment unary_exp  | Question, unary_exp -> .postfix_exp  | LeftShift, )
611 <- (605, 'Semicolon') (iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | ID, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -half3-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | Tilde, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -float3-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | for, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -return-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -struct-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -sampler2D-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -int-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -goto-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -do-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | if, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -half4-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -short-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -fixed4-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -double-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | String, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -fixed2-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -void-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -long-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | Minus, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | LBrace, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | while, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -char-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -uniform-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -fixed3-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | NOT, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | Semicolon, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -float2-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | else, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -continue-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -float-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | break, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -half2-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | RBrace, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | LParen, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | -float4-, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | Decrement, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | Increment, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | Plus, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | Number, )
612 <- (606, 'exp') (iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -struct-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -float2-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | RBrace, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -short-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | else, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | LParen, exp -> exp .Comma assignment_exp  | RParen, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -return-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -float-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | Minus, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -do-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -fixed3-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -continue-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -char-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | for, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | while, exp -> exp .Comma assignment_exp  | Comma, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -float4-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -double-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | break, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | Number, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -long-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | if, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -half3-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -float3-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | Increment, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -fixed4-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | NOT, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -half2-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | Plus, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -int-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | Tilde, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | String, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | LBrace, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | ID, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -sampler2D-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | Semicolon, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -uniform-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -fixed2-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -void-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -goto-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | Decrement, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | -half4-, )
613 <- (607, 'stm') (selection_stm -> if LParen exp RParen stm else stm.  | -return-, selection_stm -> if LParen exp RParen stm else stm.  | -float3-, selection_stm -> if LParen exp RParen stm else stm.  | Plus, selection_stm -> if LParen exp RParen stm else stm.  | -fixed2-, selection_stm -> if LParen exp RParen stm else stm.  | -continue-, selection_stm -> if LParen exp RParen stm else stm.  | for, selection_stm -> if LParen exp RParen stm else stm.  | Tilde, selection_stm -> if LParen exp RParen stm else stm.  | -float4-, selection_stm -> if LParen exp RParen stm else stm.  | -fixed3-, selection_stm -> if LParen exp RParen stm else stm.  | -do-, selection_stm -> if LParen exp RParen stm else stm.  | Decrement, selection_stm -> if LParen exp RParen stm else stm.  | -half2-, selection_stm -> if LParen exp RParen stm else stm.  | LBrace, selection_stm -> if LParen exp RParen stm else stm.  | -half3-, selection_stm -> if LParen exp RParen stm else stm.  | else, selection_stm -> if LParen exp RParen stm else stm.  | -struct-, selection_stm -> if LParen exp RParen stm else stm.  | while, selection_stm -> if LParen exp RParen stm else stm.  | String, selection_stm -> if LParen exp RParen stm else stm.  | NOT, selection_stm -> if LParen exp RParen stm else stm.  | break, selection_stm -> if LParen exp RParen stm else stm.  | Number, selection_stm -> if LParen exp RParen stm else stm.  | -half4-, selection_stm -> if LParen exp RParen stm else stm.  | -double-, selection_stm -> if LParen exp RParen stm else stm.  | Minus, selection_stm -> if LParen exp RParen stm else stm.  | LParen, selection_stm -> if LParen exp RParen stm else stm.  | RBrace, selection_stm -> if LParen exp RParen stm else stm.  | Increment, selection_stm -> if LParen exp RParen stm else stm.  | if, selection_stm -> if LParen exp RParen stm else stm.  | -sampler2D-, selection_stm -> if LParen exp RParen stm else stm.  | -short-, selection_stm -> if LParen exp RParen stm else stm.  | -uniform-, selection_stm -> if LParen exp RParen stm else stm.  | -fixed4-, selection_stm -> if LParen exp RParen stm else stm.  | -int-, selection_stm -> if LParen exp RParen stm else stm.  | -float-, selection_stm -> if LParen exp RParen stm else stm.  | -char-, selection_stm -> if LParen exp RParen stm else stm.  | Semicolon, selection_stm -> if LParen exp RParen stm else stm.  | -void-, selection_stm -> if LParen exp RParen stm else stm.  | -float2-, selection_stm -> if LParen exp RParen stm else stm.  | -long-, selection_stm -> if LParen exp RParen stm else stm.  | -goto-, selection_stm -> if LParen exp RParen stm else stm.  | ID, )
614 <- (608, 'Semicolon') (iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | while, iteration_stm -> -do- stm while LParen exp RParen Semicolon.  | else, )
615 <- (609, 'exp') (iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | while, iteration_stm -> for LParen exp Semicolon exp Semicolon exp .RParen stm  | else, exp -> exp .Comma assignment_exp  | Comma, exp -> exp .Comma assignment_exp  | RParen, )
616 <- (610, 'stm') (selection_stm -> if LParen exp RParen stm else stm.  | else, selection_stm -> if LParen exp RParen stm else stm.  | while, )
617 <- (612, 'RParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, exp_stm -> .Semicolon  | -half2-, iteration_stm -> .while LParen exp RParen stm  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | -char-, unary_exp -> .postfix_exp  | Assign, exp_stm -> .exp Semicolon  | LParen, stm -> .iteration_stm  | String, selection_stm -> .if LParen exp RParen stm  | ID, compound_stm -> .LBrace RBrace  | -float3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -char-, stm -> .selection_stm  | -half2-, unary_exp -> .unary_op unary_exp  | Times, jump_stm -> .break  | -continue-, exp_stm -> .exp Semicolon  | -float4-, unary_exp -> .Increment unary_exp  | Ampersand, compound_stm -> .LBrace block_item_list RBrace  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | -half4-, jump_stm -> .break  | LBrace, stm -> .iteration_stm  | Number, unary_exp -> .postfix_exp  | Ampersand, unary_op -> .Plus  | LParen, compound_stm -> .LBrace RBrace  | -do-, stm -> .jump_stm  | else, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | Semicolon, jump_stm -> .-continue-  | Minus, jump_stm -> .-continue-  | String, unary_op -> .Minus  | Minus, jump_stm -> .-goto- ID  | -half3-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, exp_stm -> .Semicolon  | -struct-, exp_stm -> .Semicolon  | Plus, unary_op -> .Tilde  | String, primary_exp -> .String  | OR, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -long-, postfix_exp -> .postfix_exp LParen RParen  | Percent, stm -> .compound_stm  | NOT, unary_exp -> .Decrement unary_exp  | Minus, stm -> .selection_stm  | for, jump_stm -> .-goto- ID  | LParen, jump_stm -> .-goto- ID  | -fixed4-, compound_stm -> .LBrace block_item_list RBrace  | Increment, postfix_exp -> .postfix_exp Increment  | GT, stm -> .jump_stm  | Tilde, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -float-, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, stm -> .jump_stm  | -goto-, unary_exp -> .postfix_exp  | GT, compound_stm -> .LBrace RBrace  | ID, unary_exp -> .Decrement unary_exp  | LE, compound_stm -> .LBrace block_item_list RBrace  | -float3-, postfix_exp -> .postfix_exp LParen RParen  | GT, selection_stm -> .if LParen exp RParen stm else stm  | while, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -struct-, unary_exp -> .Decrement unary_exp  | GE, jump_stm -> .-return- exp Semicolon  | -half3-, jump_stm -> .break  | Plus, compound_stm -> .LBrace block_item_list RBrace  | Number, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float4-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | LParen, jump_stm -> .-return- exp Semicolon  | -float-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -int-, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Increment  | OR, jump_stm -> .-return- exp Semicolon  | -do-, exp_stm -> .exp Semicolon  | Increment, exp_stm -> .Semicolon  | -long-, iteration_stm -> .while LParen exp RParen stm  | -fixed4-, unary_op -> .NOT  | Tilde, stm -> .selection_stm  | -short-, binary_exp -> .unary_exp  | Divide, jump_stm -> .-return- exp Semicolon  | -char-, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, unary_op -> .Tilde  | LParen, stm -> .jump_stm  | -fixed2-, stm -> .compound_stm  | -return-, unary_exp -> .Decrement unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | Minus, postfix_exp -> .primary_exp  | LT, selection_stm -> .if LParen exp RParen stm else stm  | break, compound_stm -> .LBrace RBrace  | Decrement, exp_stm -> .Semicolon  | Minus, unary_op -> .NOT  | Plus, postfix_exp -> .primary_exp  | GE, compound_stm -> .LBrace block_item_list RBrace  | -goto-, compound_stm -> .LBrace RBrace  | -float2-, exp_stm -> .exp Semicolon  | -do-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -do-, exp_stm -> .exp Semicolon  | Minus, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp Decrement  | GE, compound_stm -> .LBrace block_item_list RBrace  | else, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_op -> .Minus  | NOT, jump_stm -> .break  | -half2-, jump_stm -> .-continue-  | Number, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_exp -> .unary_op unary_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | -struct-, postfix_exp -> .postfix_exp Increment  | LE, jump_stm -> .break  | else, primary_exp -> .LParen exp RParen  | VerticalBar, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | RBrace, selection_stm -> .if LParen exp RParen stm else stm  | LBrace, jump_stm -> .break  | break, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, jump_stm -> .-continue-  | -fixed4-, compound_stm -> .LBrace RBrace  | -double-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | Decrement, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, compound_stm -> .LBrace block_item_list RBrace  | -half3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half2-, selection_stm -> .if LParen exp RParen stm  | -float-, jump_stm -> .-return- exp Semicolon  | while, stm -> .compound_stm  | Minus, stm -> .jump_stm  | -sampler2D-, iteration_stm -> .while LParen exp RParen stm  | -sampler2D-, jump_stm -> .break  | String, exp_stm -> .exp Semicolon  | -float3-, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .primary_exp  | LeftShift, primary_exp -> .String  | Semicolon, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -half4-, stm -> .exp_stm  | -half2-, stm -> .iteration_stm  | ID, jump_stm -> .-return- exp Semicolon  | -struct-, compound_stm -> .LBrace block_item_list RBrace  | -double-, primary_exp -> .LParen exp RParen  | Increment, jump_stm -> .break  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | break, unary_exp -> .postfix_exp  | Times, stm -> .compound_stm  | -half3-, selection_stm -> .if LParen exp RParen stm  | if, unary_exp -> .postfix_exp  | Semicolon, jump_stm -> .-continue-  | if, jump_stm -> .-return- exp Semicolon  | if, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -half2-, compound_stm -> .LBrace block_item_list RBrace  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -goto-, postfix_exp -> .primary_exp  | RightShift, stm -> .iteration_stm  | -int-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | if, jump_stm -> .-continue-  | -int-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | Number, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -sampler2D-, primary_exp -> .Number  | Question, selection_stm -> .if LParen exp RParen stm  | -int-, exp_stm -> .exp Semicolon  | -struct-, jump_stm -> .-goto- ID  | -long-, selection_stm -> .if LParen exp RParen stm  | String, postfix_exp -> .postfix_exp Dot ID  | GE, jump_stm -> .-continue-  | -struct-, jump_stm -> .-return- exp Semicolon  | -int-, compound_stm -> .LBrace block_item_list RBrace  | -continue-, unary_exp -> .postfix_exp  | Question, stm -> .jump_stm  | String, stm -> .iteration_stm  | -half2-, compound_stm -> .LBrace RBrace  | -float4-, stm -> .exp_stm  | -long-, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LParen, unary_exp -> .Increment unary_exp  | Plus, iteration_stm -> .while LParen exp RParen stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Comma, exp_stm -> .Semicolon  | if, jump_stm -> .-goto- ID  | -half4-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | LBrace, selection_stm -> .if LParen exp RParen stm else stm  | -do-, primary_exp -> .LParen exp RParen  | Question, iteration_stm -> .while LParen exp RParen stm  | Minus, jump_stm -> .-goto- ID  | -fixed2-, stm -> .exp_stm  | Tilde, postfix_exp -> .primary_exp  | LE, compound_stm -> .LBrace block_item_list RBrace  | LParen, exp_stm -> .exp Semicolon  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | String, compound_stm -> .LBrace block_item_list RBrace  | -float-, postfix_exp -> .postfix_exp Increment  | LBrack, binary_exp -> .unary_exp  | Comma, selection_stm -> .if LParen exp RParen stm  | -void-, stm -> .exp_stm  | -do-, jump_stm -> .-continue-  | Increment, selection_stm -> .if LParen exp RParen stm  | Increment, postfix_exp -> .postfix_exp Increment  | Question, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | else, stm -> .compound_stm  | else, unary_exp -> .Decrement unary_exp  | Ampersand, iteration_stm -> .while LParen exp RParen stm  | while, compound_stm -> .LBrace block_item_list RBrace  | Plus, unary_exp -> .Decrement unary_exp  | Assign, iteration_stm -> .while LParen exp RParen stm  | -do-, stm -> .jump_stm  | Decrement, primary_exp -> .String  | NEQ, jump_stm -> .-return- exp Semicolon  | String, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, stm -> .selection_stm  | -continue-, iteration_stm -> .while LParen exp RParen stm  | Tilde, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .primary_exp  | Semicolon, jump_stm -> .-goto- ID  | -int-, exp_stm -> .Semicolon  | Semicolon, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -continue-, compound_stm -> .LBrace block_item_list RBrace  | -uniform-, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp LParen RParen  | Decrement, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, exp_stm -> .exp Semicolon  | -continue-, selection_stm -> .if LParen exp RParen stm else stm  | Plus, postfix_exp -> .primary_exp  | Times, stm -> .iteration_stm  | Decrement, stm -> .iteration_stm  | -do-, primary_exp -> .LParen exp RParen  | AND, jump_stm -> .-return- exp Semicolon  | -return-, jump_stm -> .-continue-  | break, exp_stm -> .Semicolon  | -short-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Tilde, postfix_exp -> .postfix_exp LParen RParen  | LBrack, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Minus, selection_stm -> .if LParen exp RParen stm else stm  | -float4-, selection_stm -> .if LParen exp RParen stm  | -sampler2D-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed3-, selection_stm -> .if LParen exp RParen stm else stm  | -short-, jump_stm -> .-continue-  | -void-, compound_stm -> .LBrace block_item_list RBrace  | -return-, jump_stm -> .break  | RBrace, selection_stm -> .if LParen exp RParen stm  | -float2-, compound_stm -> .LBrace block_item_list RBrace  | -half2-, jump_stm -> .-return- exp Semicolon  | -double-, primary_exp -> .LParen exp RParen  | GT, stm -> .iteration_stm  | LBrace, postfix_exp -> .primary_exp  | Increment, jump_stm -> .-return- exp Semicolon  | else, stm -> .jump_stm  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | NEQ, compound_stm -> .LBrace block_item_list RBrace  | -float4-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | for, postfix_exp -> .postfix_exp Decrement  | Plus, exp_stm -> .exp Semicolon  | -half4-, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, stm -> .selection_stm  | -int-, stm -> .jump_stm  | break, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -half3-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float-, unary_exp -> .Decrement unary_exp  | AND, unary_op -> .Plus  | String, jump_stm -> .-return- exp Semicolon  | NOT, postfix_exp -> .postfix_exp Increment  | Times, selection_stm -> .if LParen exp RParen stm else stm  | Decrement, stm -> .selection_stm  | -fixed3-, jump_stm -> .-goto- ID  | String, stm -> .compound_stm  | -double-, stm -> .exp_stm  | if, jump_stm -> .break  | -do-, unary_exp -> .Increment unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LBrack, selection_stm -> .if LParen exp RParen stm  | Minus, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, selection_stm -> .if LParen exp RParen stm  | RBrace, postfix_exp -> .postfix_exp Decrement  | LeftShift, selection_stm -> .if LParen exp RParen stm else stm  | Tilde, unary_exp -> .Decrement unary_exp  | OR, primary_exp -> .ID  | Decrement, stm -> .selection_stm  | Number, stm -> .iteration_stm  | Minus, compound_stm -> .LBrace RBrace  | -char-, jump_stm -> .-goto- ID  | -short-, exp_stm -> .Semicolon  | -int-, unary_op -> .Minus  | ID, stm -> .selection_stm  | -uniform-, postfix_exp -> .postfix_exp Decrement  | Divide, compound_stm -> .LBrace block_item_list RBrace  | -void-, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, compound_stm -> .LBrace RBrace  | while, jump_stm -> .-continue-  | -float-, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .primary_exp  | Decrement, stm -> .iteration_stm  | Plus, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -void-, stm -> .selection_stm  | -void-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LParen, stm -> .exp_stm  | -double-, stm -> .selection_stm  | Minus, exp_stm -> .exp Semicolon  | -half3-, stm -> .exp_stm  | -struct-, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Semicolon, unary_op -> .Tilde  | Number, unary_exp -> .Increment unary_exp  | RightShift, exp_stm -> .exp Semicolon  | -goto-, stm -> .jump_stm  | while, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, stm -> .iteration_stm  | Semicolon, unary_exp -> .Decrement unary_exp  | Times, stm -> .exp_stm  | -float4-, jump_stm -> .break  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | if, postfix_exp -> .postfix_exp Dot ID  | LT, jump_stm -> .-continue-  | for, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -fixed3-, unary_exp -> .unary_op unary_exp  | Assign, jump_stm -> .-return- exp Semicolon  | -half2-, jump_stm -> .-return- exp Semicolon  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, stm -> .iteration_stm  | -continue-, selection_stm -> .if LParen exp RParen stm else stm  | -float-, unary_op -> .Plus  | Plus, primary_exp -> .ID  | LE, stm -> .exp_stm  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | String, selection_stm -> .if LParen exp RParen stm else stm  | -sampler2D-, unary_op -> .Minus  | LParen, exp_stm -> .Semicolon  | -float-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -uniform-, selection_stm -> .if LParen exp RParen stm else stm  | String, primary_exp -> .ID  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float4-, jump_stm -> .break  | -uniform-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | Plus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | String, stm -> .jump_stm  | LBrace, exp -> .exp Comma assignment_exp  | Comma, primary_exp -> .ID  | Assign, stm -> .exp_stm  | Number, stm -> .iteration_stm  | -half4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Dot ID  | Comma, stm -> .jump_stm  | Number, stm -> .compound_stm  | String, compound_stm -> .LBrace RBrace  | -return-, stm -> .exp_stm  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, jump_stm -> .break  | Number, stm -> .iteration_stm  | Increment, jump_stm -> .-return- exp Semicolon  | LParen, iteration_stm -> .while LParen exp RParen stm  | if, stm -> .selection_stm  | -float3-, postfix_exp -> .primary_exp  | Plus, stm -> .jump_stm  | -float4-, stm -> .jump_stm  | -do-, stm -> .compound_stm  | Tilde, stm -> .exp_stm  | -float2-, unary_op -> .Plus  | Increment, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -do-, iteration_stm -> .while LParen exp RParen stm  | -goto-, stm -> .jump_stm  | NOT, selection_stm -> .if LParen exp RParen stm  | NOT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, exp_stm -> .Semicolon  | -float4-, stm -> .selection_stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, unary_exp -> .unary_op unary_exp  | AND, stm -> .exp_stm  | -int-, stm -> .iteration_stm  | break, selection_stm -> .if LParen exp RParen stm else stm  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | -int-, stm -> .selection_stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -half3-, compound_stm -> .LBrace block_item_list RBrace  | Tilde, jump_stm -> .-continue-  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | -half2-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -goto-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | else, stm -> .iteration_stm  | -float3-, compound_stm -> .LBrace RBrace  | Number, selection_stm -> .if LParen exp RParen stm  | -half4-, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | Percent, jump_stm -> .-return- exp Semicolon  | Decrement, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -uniform-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float3-, stm -> .compound_stm  | if, primary_exp -> .Number  | Plus, jump_stm -> .-return- exp Semicolon  | ID, jump_stm -> .-goto- ID  | -float4-, postfix_exp -> .postfix_exp Decrement  | Assign, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed3-, stm -> .jump_stm  | -half3-, primary_exp -> .Number  | Dot, exp_stm -> .Semicolon  | -do-, exp_stm -> .Semicolon  | for, primary_exp -> .LParen exp RParen  | Ampersand, jump_stm -> .-goto- ID  | -double-, stm -> .jump_stm  | -struct-, postfix_exp -> .primary_exp  | Comma, primary_exp -> .ID  | LBrack, jump_stm -> .-return- exp Semicolon  | Semicolon, selection_stm -> .if LParen exp RParen stm  | Decrement, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, selection_stm -> .if LParen exp RParen stm  | LParen, compound_stm -> .LBrace block_item_list RBrace  | for, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, jump_stm -> .break  | -fixed2-, exp_stm -> .exp Semicolon  | -short-, primary_exp -> .String  | Assign, compound_stm -> .LBrace RBrace  | Plus, unary_exp -> .unary_op unary_exp  | EQ, stm -> .exp_stm  | for, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | break, exp_stm -> .Semicolon  | -sampler2D-, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, stm -> .selection_stm  | -half4-, primary_exp -> .LParen exp RParen  | Semicolon, compound_stm -> .LBrace RBrace  | break, selection_stm -> .if LParen exp RParen stm else stm  | -int-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, selection_stm -> .if LParen exp RParen stm else stm  | if, stm -> .iteration_stm  | -uniform-, stm -> .selection_stm  | -fixed4-, jump_stm -> .-goto- ID  | -void-, stm -> .exp_stm  | -half4-, exp_stm -> .Semicolon  | Tilde, compound_stm -> .LBrace block_item_list RBrace  | NOT, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .LParen exp RParen  | LT, postfix_exp -> .postfix_exp Dot ID  | LeftShift, postfix_exp -> .postfix_exp Decrement  | Comma, primary_exp -> .String  | LT, compound_stm -> .LBrace RBrace  | -sampler2D-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, primary_exp -> .String  | Minus, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, postfix_exp -> .postfix_exp Increment  | AND, selection_stm -> .if LParen exp RParen stm  | Semicolon, primary_exp -> .LParen exp RParen  | LParen, stm -> .compound_stm  | -void-, stm -> .jump_stm  | -float2-, unary_exp -> .Increment unary_exp  | NEQ, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -float3-, exp_stm -> .exp Semicolon  | RBrace, stm -> .selection_stm  | -return-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half4-, iteration_stm -> .while LParen exp RParen stm  | -half2-, stm -> .iteration_stm  | -fixed3-, stm -> .jump_stm  | Plus, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | Tilde, compound_stm -> .LBrace RBrace  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Number, postfix_exp -> .primary_exp  | Assign, primary_exp -> .String  | VerticalBar, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -struct-, stm -> .iteration_stm  | -float2-, exp_stm -> .Semicolon  | LBrace, exp_stm -> .exp Semicolon  | -void-, jump_stm -> .-continue-  | else, compound_stm -> .LBrace block_item_list RBrace  | -fixed2-, primary_exp -> .String  | Caret, compound_stm -> .LBrace RBrace  | -fixed2-, exp_stm -> .exp Semicolon  | -long-, exp_stm -> .exp Semicolon  | -int-, exp_stm -> .Semicolon  | -continue-, unary_op -> .Tilde  | Increment, stm -> .iteration_stm  | -fixed4-, unary_exp -> .unary_op unary_exp  | Percent, postfix_exp -> .postfix_exp LParen RParen  | EQ, stm -> .selection_stm  | Decrement, jump_stm -> .-continue-  | -do-, exp_stm -> .exp Semicolon  | if, assignment_exp -> .conditional_exp  | Comma, unary_exp -> .Decrement unary_exp  | LeftShift, stm -> .exp_stm  | Increment, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -goto-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -continue-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | String, jump_stm -> .-continue-  | Tilde, stm -> .exp_stm  | LBrace, jump_stm -> .-continue-  | -half4-, iteration_stm -> .while LParen exp RParen stm  | -continue-, compound_stm -> .LBrace RBrace  | -fixed3-, compound_stm -> .LBrace block_item_list RBrace  | Minus, postfix_exp -> .postfix_exp LParen RParen  | OR, jump_stm -> .break  | for, postfix_exp -> .primary_exp  | LBrack, jump_stm -> .break  | -return-, primary_exp -> .Number  | Increment, compound_stm -> .LBrace RBrace  | -void-, binary_exp -> .binary_exp binary_op unary_exp  | Plus, exp_stm -> .Semicolon  | -fixed2-, selection_stm -> .if LParen exp RParen stm else stm  | -void-, jump_stm -> .-continue-  | while, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Plus, primary_exp -> .Number  | Minus, exp_stm -> .Semicolon  | -goto-, iteration_stm -> .while LParen exp RParen stm  | -void-, iteration_stm -> .while LParen exp RParen stm  | -float2-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -short-, stm -> .iteration_stm  | -char-, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp LParen RParen  | AND, jump_stm -> .break  | -float4-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -char-, iteration_stm -> .while LParen exp RParen stm  | LBrace, unary_exp -> .Increment unary_exp  | EQ, primary_exp -> .Number  | VerticalBar, primary_exp -> .String  | Plus, unary_op -> .NOT  | Decrement, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | LT, jump_stm -> .-return- exp Semicolon  | -void-, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, compound_stm -> .LBrace RBrace  | -fixed4-, postfix_exp -> .postfix_exp Dot ID  | Question, exp_stm -> .exp Semicolon  | -sampler2D-, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, stm -> .exp_stm  | break, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float3-, stm -> .exp_stm  | -void-, stm -> .jump_stm  | Minus, primary_exp -> .String  | EQ, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, jump_stm -> .-continue-  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -float3-, stm -> .compound_stm  | ID, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed4-, postfix_exp -> .postfix_exp Dot ID  | Dot, selection_stm -> .if LParen exp RParen stm else stm  | -uniform-, stm -> .compound_stm  | Decrement, jump_stm -> .-goto- ID  | ID, jump_stm -> .break  | Increment, selection_stm -> .if LParen exp RParen stm else stm  | -fixed2-, stm -> .exp_stm  | -fixed3-, unary_exp -> .postfix_exp  | Comma, stm -> .compound_stm  | LParen, unary_op -> .Minus  | String, jump_stm -> .break  | if, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half4-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -return-, unary_exp -> .unary_op unary_exp  | Comma, jump_stm -> .-return- exp Semicolon  | -goto-, stm -> .compound_stm  | RBrace, postfix_exp -> .postfix_exp Dot ID  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Semicolon, stm -> .compound_stm  | -fixed4-, exp_stm -> .exp Semicolon  | -half2-, selection_stm -> .if LParen exp RParen stm else stm  | -return-, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm else stm  | Minus, iteration_stm -> .while LParen exp RParen stm  | break, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -int-, jump_stm -> .-continue-  | -continue-, stm -> .compound_stm  | for, stm -> .jump_stm  | if, stm -> .compound_stm  | -short-, jump_stm -> .-goto- ID  | -float2-, primary_exp -> .ID  | Question, stm -> .selection_stm  | Tilde, postfix_exp -> .postfix_exp Increment  | Decrement, selection_stm -> .if LParen exp RParen stm else stm  | -float2-, jump_stm -> .break  | -char-, binary_exp -> .unary_exp  | OR, stm -> .compound_stm  | -long-, stm -> .compound_stm  | -fixed2-, stm -> .jump_stm  | -float3-, postfix_exp -> .postfix_exp Decrement  | Dot, jump_stm -> .-goto- ID  | Increment, selection_stm -> .if LParen exp RParen stm else stm  | LParen, unary_exp -> .unary_op unary_exp  | OR, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -float2-, postfix_exp -> .postfix_exp Dot ID  | Assign, primary_exp -> .Number  | LBrack, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LBrace, primary_exp -> .Number  | Caret, unary_exp -> .unary_op unary_exp  | LE, stm -> .iteration_stm  | -half3-, stm -> .compound_stm  | -char-, jump_stm -> .break  | NOT, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | break, compound_stm -> .LBrace RBrace  | -long-, jump_stm -> .break  | -long-, jump_stm -> .-continue-  | -uniform-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | LBrace, stm -> .compound_stm  | -goto-, selection_stm -> .if LParen exp RParen stm  | -short-, postfix_exp -> .primary_exp  | LParen, stm -> .selection_stm  | LBrace, stm -> .compound_stm  | -float4-, postfix_exp -> .postfix_exp LParen RParen  | Assign, compound_stm -> .LBrace RBrace  | -half3-, selection_stm -> .if LParen exp RParen stm  | LBrace, jump_stm -> .break  | -half4-, stm -> .iteration_stm  | -long-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -fixed2-, iteration_stm -> .while LParen exp RParen stm  | -uniform-, jump_stm -> .-continue-  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -short-, postfix_exp -> .postfix_exp LParen RParen  | NEQ, stm -> .iteration_stm  | -float-, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, exp_stm -> .Semicolon  | -float3-, primary_exp -> .LParen exp RParen  | NEQ, compound_stm -> .LBrace RBrace  | Increment, stm -> .compound_stm  | -continue-, stm -> .exp_stm  | Plus, postfix_exp -> .postfix_exp Decrement  | Minus, stm -> .selection_stm  | -goto-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, postfix_exp -> .postfix_exp Decrement  | Times, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -int-, unary_op -> .NOT  | LParen, primary_exp -> .ID  | GT, stm -> .compound_stm  | Plus, exp_stm -> .exp Semicolon  | String, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, primary_exp -> .String  | Dot, exp_stm -> .exp Semicolon  | -float2-, postfix_exp -> .primary_exp  | AND, jump_stm -> .-return- exp Semicolon  | -short-, compound_stm -> .LBrace RBrace  | String, stm -> .exp_stm  | while, iteration_stm -> .while LParen exp RParen stm  | -float4-, compound_stm -> .LBrace RBrace  | -struct-, exp_stm -> .Semicolon  | Increment, unary_exp -> .unary_op unary_exp  | Plus, exp_stm -> .Semicolon  | while, primary_exp -> .ID  | Comma, stm -> .compound_stm  | -float3-, primary_exp -> .String  | LeftShift, jump_stm -> .-continue-  | -fixed3-, selection_stm -> .if LParen exp RParen stm else stm  | Increment, postfix_exp -> .postfix_exp LParen RParen  | GE, stm -> .selection_stm  | -float4-, postfix_exp -> .primary_exp  | OR, iteration_stm -> .while LParen exp RParen stm  | RBrace, compound_stm -> .LBrace block_item_list RBrace  | while, unary_exp -> .postfix_exp  | RightShift, compound_stm -> .LBrace block_item_list RBrace  | -fixed4-, jump_stm -> .break  | -float3-, postfix_exp -> .postfix_exp Increment  | GE, primary_exp -> .ID  | LParen, unary_exp -> .Increment unary_exp  | Divide, exp_stm -> .Semicolon  | ID, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -fixed2-, jump_stm -> .-goto- ID  | -struct-, jump_stm -> .-continue-  | -return-, jump_stm -> .break  | Minus, iteration_stm -> .while LParen exp RParen stm  | Plus, postfix_exp -> .postfix_exp Dot ID  | Minus, compound_stm -> .LBrace RBrace  | if, jump_stm -> .break  | -void-, stm -> .jump_stm  | -continue-, iteration_stm -> .while LParen exp RParen stm  | -float-, stm -> .selection_stm  | Plus, compound_stm -> .LBrace RBrace  | NOT, exp_stm -> .Semicolon  | Decrement, stm -> .exp_stm  | -sampler2D-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | if, exp_stm -> .Semicolon  | -float2-, iteration_stm -> .while LParen exp RParen stm  | Number, jump_stm -> .-return- exp Semicolon  | -long-, unary_op -> .Tilde  | Plus, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -continue-, primary_exp -> .ID  | Times, exp_stm -> .exp Semicolon  | Decrement, stm -> .compound_stm  | -sampler2D-, stm -> .selection_stm  | LParen, jump_stm -> .-goto- ID  | else, stm -> .iteration_stm  | LParen, stm -> .jump_stm  | -half2-, stm -> .jump_stm  | -void-, selection_stm -> .if LParen exp RParen stm  | -long-, binary_exp -> .unary_exp  | EQ, unary_exp -> .postfix_exp  | Minus, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half2-, unary_op -> .Tilde  | Tilde, jump_stm -> .break  | ID, exp_stm -> .Semicolon  | -fixed3-, stm -> .compound_stm  | -struct-, jump_stm -> .-goto- ID  | Semicolon, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | else, stm -> .selection_stm  | -struct-, stm -> .exp_stm  | -uniform-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -return-, unary_exp -> .Decrement unary_exp  | Divide, stm -> .iteration_stm  | Tilde, postfix_exp -> .postfix_exp Dot ID  | Ampersand, compound_stm -> .LBrace block_item_list RBrace  | LBrace, postfix_exp -> .postfix_exp Increment  | Semicolon, jump_stm -> .break  | -sampler2D-, jump_stm -> .-return- exp Semicolon  | -fixed3-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | Increment, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -half3-, stm -> .exp_stm  | -return-, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, stm -> .exp_stm  | -char-, postfix_exp -> .postfix_exp Decrement  | Ampersand, exp_stm -> .exp Semicolon  | -double-, unary_op -> .NOT  | ID, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -long-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, iteration_stm -> .while LParen exp RParen stm  | for, compound_stm -> .LBrace RBrace  | -half2-, jump_stm -> .-goto- ID  | -do-, stm -> .selection_stm  | if, stm -> .compound_stm  | -uniform-, exp_stm -> .exp Semicolon  | -float-, stm -> .jump_stm  | -float-, jump_stm -> .-continue-  | RBrace, unary_exp -> .unary_op unary_exp  | VerticalBar, jump_stm -> .-return- exp Semicolon  | -float4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | RBrace, unary_exp -> .Increment unary_exp  | Times, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -fixed2-, stm -> .exp_stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, selection_stm -> .if LParen exp RParen stm  | -half3-, unary_exp -> .Increment unary_exp  | Assign, stm -> .exp_stm  | LParen, compound_stm -> .LBrace block_item_list RBrace  | -long-, primary_exp -> .String  | Times, primary_exp -> .LParen exp RParen  | Percent, selection_stm -> .if LParen exp RParen stm  | Plus, jump_stm -> .-return- exp Semicolon  | -fixed4-, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | if, exp_stm -> .exp Semicolon  | -char-, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Comma, compound_stm -> .LBrace block_item_list RBrace  | -float2-, jump_stm -> .-continue-  | -fixed2-, primary_exp -> .Number  | LeftShift, exp_stm -> .exp Semicolon  | Tilde, stm -> .compound_stm  | LBrace, iteration_stm -> .while LParen exp RParen stm  | LParen, exp_stm -> .exp Semicolon  | while, jump_stm -> .break  | LParen, compound_stm -> .LBrace RBrace  | LBrace, jump_stm -> .-goto- ID  | -float-, exp_stm -> .exp Semicolon  | LBrace, jump_stm -> .-continue-  | -short-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -do-, binary_exp -> .binary_exp binary_op unary_exp  | EQ, stm -> .jump_stm  | -long-, exp_stm -> .exp Semicolon  | for, postfix_exp -> .postfix_exp Decrement  | Percent, jump_stm -> .-continue-  | -double-, postfix_exp -> .postfix_exp Decrement  | LE, stm -> .exp_stm  | -fixed2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, selection_stm -> .if LParen exp RParen stm  | -fixed2-, primary_exp -> .LParen exp RParen  | Times, stm -> .selection_stm  | ID, selection_stm -> .if LParen exp RParen stm  | -double-, exp_stm -> .Semicolon  | LParen, postfix_exp -> .primary_exp  | Percent, primary_exp -> .String  | Comma, jump_stm -> .break  | -goto-, stm -> .iteration_stm  | -fixed2-, selection_stm -> .if LParen exp RParen stm else stm  | -long-, binary_exp -> .binary_exp binary_op unary_exp  | Question, stm -> .exp_stm  | Minus, stm -> .jump_stm  | -fixed3-, exp_stm -> .Semicolon  | -char-, primary_exp -> .Number  | RightShift, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | while, jump_stm -> .-return- exp Semicolon  | LBrace, primary_exp -> .ID  | OR, selection_stm -> .if LParen exp RParen stm else stm  | else, selection_stm -> .if LParen exp RParen stm  | -goto-, primary_exp -> .LParen exp RParen  | RightShift, selection_stm -> .if LParen exp RParen stm  | -fixed3-, jump_stm -> .-continue-  | -goto-, unary_exp -> .Decrement unary_exp  | Question, unary_exp -> .Increment unary_exp  | Percent, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, stm -> .jump_stm  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | for, iteration_stm -> .while LParen exp RParen stm  | Semicolon, primary_exp -> .Number  | Times, jump_stm -> .-return- exp Semicolon  | Increment, binary_exp -> .binary_exp binary_op unary_exp  | Times, exp_stm -> .Semicolon  | -half4-, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, jump_stm -> .break  | -struct-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -void-, primary_exp -> .ID  | Minus, selection_stm -> .if LParen exp RParen stm  | -continue-, unary_exp -> .unary_op unary_exp  | Question, stm -> .selection_stm  | -half3-, unary_exp -> .postfix_exp  | Plus, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, unary_op -> .Plus  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -sampler2D-, selection_stm -> .if LParen exp RParen stm else stm  | -double-, selection_stm -> .if LParen exp RParen stm  | -half2-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | NOT, stm -> .jump_stm  | -double-, binary_exp -> .unary_exp  | Question, exp_stm -> .exp Semicolon  | Plus, jump_stm -> .-continue-  | -float2-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, primary_exp -> .String  | Question, jump_stm -> .-continue-  | -char-, primary_exp -> .Number  | Decrement, unary_exp -> .postfix_exp  | AND, selection_stm -> .if LParen exp RParen stm  | break, unary_op -> .NOT  | Minus, selection_stm -> .if LParen exp RParen stm  | -float4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, primary_exp -> .ID  | Divide, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float2-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, unary_exp -> .Decrement unary_exp  | GT, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -double-, stm -> .selection_stm  | -char-, compound_stm -> .LBrace block_item_list RBrace  | ID, binary_exp -> .unary_exp  | LE, stm -> .exp_stm  | String, stm -> .exp_stm  | -float-, unary_exp -> .Increment unary_exp  | GT, jump_stm -> .break  | -double-, unary_exp -> .unary_op unary_exp  | Ampersand, compound_stm -> .LBrace block_item_list RBrace  | -sampler2D-, exp_stm -> .exp Semicolon  | -return-, primary_exp -> .LParen exp RParen  | GE, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | Minus, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | LeftShift, jump_stm -> .-return- exp Semicolon  | Number, compound_stm -> .LBrace RBrace  | -continue-, jump_stm -> .-goto- ID  | Plus, stm -> .iteration_stm  | for, iteration_stm -> .while LParen exp RParen stm  | else, postfix_exp -> .postfix_exp Increment  | RightShift, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | NEQ, selection_stm -> .if LParen exp RParen stm  | -uniform-, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .primary_exp  | Caret, compound_stm -> .LBrace block_item_list RBrace  | break, exp_stm -> .Semicolon  | -double-, selection_stm -> .if LParen exp RParen stm  | -float3-, jump_stm -> .-continue-  | -sampler2D-, postfix_exp -> .postfix_exp Decrement  | EQ, iteration_stm -> .while LParen exp RParen stm  | -int-, jump_stm -> .-goto- ID  | Tilde, stm -> .compound_stm  | Increment, jump_stm -> .-goto- ID  | Number, postfix_exp -> .postfix_exp Increment  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | for, postfix_exp -> .postfix_exp Decrement  | Increment, binary_exp -> .binary_exp binary_op unary_exp  | Minus, jump_stm -> .-goto- ID  | Decrement, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .LParen exp RParen  | OR, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp Increment  | LeftShift, postfix_exp -> .primary_exp  | Question, jump_stm -> .-goto- ID  | -uniform-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, jump_stm -> .break  | -fixed4-, compound_stm -> .LBrace RBrace  | -uniform-, unary_exp -> .unary_op unary_exp  | GT, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -half3-, compound_stm -> .LBrace block_item_list RBrace  | -short-, stm -> .iteration_stm  | while, postfix_exp -> .postfix_exp Increment  | Increment, selection_stm -> .if LParen exp RParen stm  | -return-, stm -> .compound_stm  | -half2-, exp_stm -> .Semicolon  | -return-, selection_stm -> .if LParen exp RParen stm else stm  | -fixed4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, stm -> .iteration_stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_op -> .Minus  | Plus, jump_stm -> .-continue-  | LParen, selection_stm -> .if LParen exp RParen stm  | Tilde, stm -> .iteration_stm  | -goto-, selection_stm -> .if LParen exp RParen stm else stm  | -fixed3-, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, stm -> .compound_stm  | while, unary_exp -> .postfix_exp  | Caret, stm -> .jump_stm  | Increment, selection_stm -> .if LParen exp RParen stm  | Number, primary_exp -> .ID  | LT, jump_stm -> .-goto- ID  | RBrace, postfix_exp -> .postfix_exp Dot ID  | Caret, iteration_stm -> .while LParen exp RParen stm  | NOT, compound_stm -> .LBrace RBrace  | -int-, binary_exp -> .unary_exp  | Caret, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Minus, stm -> .selection_stm  | -do-, primary_exp -> .LParen exp RParen  | Assign, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -return-, primary_exp -> .ID  | VerticalBar, primary_exp -> .Number  | Percent, jump_stm -> .-continue-  | LBrace, stm -> .jump_stm  | -fixed4-, iteration_stm -> .while LParen exp RParen stm  | -return-, jump_stm -> .-return- exp Semicolon  | break, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -double-, primary_exp -> .Number  | Assign, jump_stm -> .-return- exp Semicolon  | for, postfix_exp -> .postfix_exp Decrement  | NEQ, jump_stm -> .break  | -float-, unary_exp -> .Increment unary_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | Increment, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -float-, exp_stm -> .exp Semicolon  | else, jump_stm -> .-goto- ID  | -goto-, stm -> .exp_stm  | -continue-, unary_exp -> .Increment unary_exp  | Question, primary_exp -> .String  | AND, unary_exp -> .Decrement unary_exp  | Caret, selection_stm -> .if LParen exp RParen stm  | -fixed4-, exp_stm -> .Semicolon  | -uniform-, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .unary_op unary_exp  | Caret, stm -> .compound_stm  | -int-, jump_stm -> .-goto- ID  | while, stm -> .exp_stm  | -half3-, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, stm -> .iteration_stm  | else, postfix_exp -> .postfix_exp Dot ID  | Percent, binary_exp -> .unary_exp  | GE, jump_stm -> .-continue-  | -float3-, exp_stm -> .exp Semicolon  | break, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, iteration_stm -> .while LParen exp RParen stm  | -fixed2-, stm -> .selection_stm  | -float-, stm -> .exp_stm  | ID, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp Increment  | Plus, unary_exp -> .postfix_exp  | EQ, unary_exp -> .postfix_exp  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Tilde, stm -> .selection_stm  | Semicolon, primary_exp -> .ID  | GE, primary_exp -> .ID  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, stm -> .compound_stm  | -fixed3-, primary_exp -> .String  | LParen, postfix_exp -> .postfix_exp Increment  | Minus, binary_exp -> .unary_exp  | LeftShift, iteration_stm -> .while LParen exp RParen stm  | -double-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -sampler2D-, jump_stm -> .-goto- ID  | LBrace, primary_exp -> .ID  | RightShift, jump_stm -> .-return- exp Semicolon  | -fixed2-, selection_stm -> .if LParen exp RParen stm else stm  | -char-, jump_stm -> .-return- exp Semicolon  | -continue-, iteration_stm -> .while LParen exp RParen stm  | Increment, iteration_stm -> .while LParen exp RParen stm  | -short-, primary_exp -> .ID  | Percent, primary_exp -> .ID  | EQ, postfix_exp -> .postfix_exp Dot ID  | RightShift, exp_stm -> .Semicolon  | else, stm -> .compound_stm  | Number, primary_exp -> .Number  | Comma, primary_exp -> .ID  | NEQ, unary_exp -> .unary_op unary_exp  | Minus, unary_exp -> .unary_op unary_exp  | RightShift, compound_stm -> .LBrace RBrace  | -short-, unary_exp -> .Decrement unary_exp  | Percent, stm -> .selection_stm  | break, stm -> .compound_stm  | -do-, primary_exp -> .LParen exp RParen  | LE, compound_stm -> .LBrace block_item_list RBrace  | -struct-, jump_stm -> .-continue-  | -long-, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, stm -> .compound_stm  | -half4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Decrement, stm -> .iteration_stm  | if, unary_exp -> .unary_op unary_exp  | NEQ, jump_stm -> .-goto- ID  | -char-, jump_stm -> .-return- exp Semicolon  | -sampler2D-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -half3-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -double-, unary_exp -> .postfix_exp  | GE, selection_stm -> .if LParen exp RParen stm  | for, stm -> .compound_stm  | -float2-, jump_stm -> .-goto- ID  | Minus, jump_stm -> .break  | while, postfix_exp -> .postfix_exp LParen RParen  | LE, jump_stm -> .-return- exp Semicolon  | -half4-, selection_stm -> .if LParen exp RParen stm else stm  | -continue-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | Divide, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -float2-, stm -> .jump_stm  | RBrace, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, jump_stm -> .-continue-  | ID, compound_stm -> .LBrace RBrace  | -goto-, postfix_exp -> .postfix_exp LParen RParen  | Divide, jump_stm -> .-return- exp Semicolon  | Plus, stm -> .jump_stm  | -uniform-, stm -> .exp_stm  | -float3-, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -uniform-, exp_stm -> .Semicolon  | -fixed4-, selection_stm -> .if LParen exp RParen stm else stm  | for, selection_stm -> .if LParen exp RParen stm  | while, jump_stm -> .-goto- ID  | -return-, postfix_exp -> .postfix_exp Increment  | Assign, jump_stm -> .break  | Tilde, selection_stm -> .if LParen exp RParen stm else stm  | -float3-, postfix_exp -> .postfix_exp LParen RParen  | Times, jump_stm -> .-goto- ID  | -fixed3-, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | LT, stm -> .selection_stm  | -sampler2D-, jump_stm -> .-continue-  | -half3-, selection_stm -> .if LParen exp RParen stm else stm  | RBrace, stm -> .iteration_stm  | -float4-, iteration_stm -> .while LParen exp RParen stm  | -half4-, stm -> .jump_stm  | LParen, iteration_stm -> .while LParen exp RParen stm  | Decrement, jump_stm -> .-goto- ID  | for, jump_stm -> .-goto- ID  | if, compound_stm -> .LBrace RBrace  | LParen, unary_op -> .Minus  | Decrement, jump_stm -> .-return- exp Semicolon  | -uniform-, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, compound_stm -> .LBrace RBrace  | else, selection_stm -> .if LParen exp RParen stm else stm  | -struct-, stm -> .exp_stm  | -goto-, primary_exp -> .Number  | OR, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | ID, stm -> .exp_stm  | -fixed4-, jump_stm -> .-goto- ID  | -float3-, postfix_exp -> .primary_exp  | GT, stm -> .selection_stm  | else, exp_stm -> .Semicolon  | -void-, jump_stm -> .-return- exp Semicolon  | Minus, postfix_exp -> .postfix_exp Decrement  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, stm -> .selection_stm  | String, postfix_exp -> .postfix_exp LParen RParen  | Caret, primary_exp -> .ID  | AND, postfix_exp -> .postfix_exp LParen RParen  | Dot, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | String, unary_op -> .Plus  | Decrement, exp_stm -> .Semicolon  | NOT, primary_exp -> .String  | Ampersand, stm -> .jump_stm  | -short-, exp_stm -> .exp Semicolon  | -fixed3-, jump_stm -> .-return- exp Semicolon  | Tilde, binary_exp -> .unary_exp  | VerticalBar, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -struct-, selection_stm -> .if LParen exp RParen stm else stm  | NOT, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | Percent, selection_stm -> .if LParen exp RParen stm  | else, primary_exp -> .Number  | Ampersand, selection_stm -> .if LParen exp RParen stm  | -char-, primary_exp -> .ID  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | RightShift, stm -> .exp_stm  | RBrace, unary_exp -> .Increment unary_exp  | Semicolon, stm -> .exp_stm  | Decrement, stm -> .selection_stm  | -fixed2-, compound_stm -> .LBrace RBrace  | RBrace, primary_exp -> .LParen exp RParen  | Dot, primary_exp -> .Number  | Divide, stm -> .selection_stm  | -long-, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, jump_stm -> .-continue-  | Plus, primary_exp -> .Number  | Semicolon, primary_exp -> .Number  | AND, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, jump_stm -> .break  | -short-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | NOT, compound_stm -> .LBrace RBrace  | Tilde, selection_stm -> .if LParen exp RParen stm else stm  | -goto-, exp_stm -> .exp Semicolon  | -fixed4-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | ID, selection_stm -> .if LParen exp RParen stm else stm  | ID, stm -> .jump_stm  | -char-, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | Comma, jump_stm -> .-goto- ID  | -continue-, exp_stm -> .Semicolon  | String, jump_stm -> .break  | -int-, primary_exp -> .LParen exp RParen  | Divide, stm -> .selection_stm  | RBrace, stm -> .iteration_stm  | RBrace, stm -> .iteration_stm  | -struct-, jump_stm -> .break  | Semicolon, conditional_exp -> .binary_exp  | Semicolon, compound_stm -> .LBrace block_item_list RBrace  | RBrace, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Increment, stm -> .compound_stm  | -float-, exp_stm -> .Semicolon  | RBrace, selection_stm -> .if LParen exp RParen stm  | -do-, exp_stm -> .Semicolon  | -half3-, unary_exp -> .Decrement unary_exp  | Plus, binary_exp -> .unary_exp  | LT, primary_exp -> .LParen exp RParen  | Plus, jump_stm -> .-continue-  | -half2-, postfix_exp -> .postfix_exp Decrement  | Decrement, stm -> .selection_stm  | NOT, jump_stm -> .-return- exp Semicolon  | -float2-, postfix_exp -> .postfix_exp Dot ID  | LParen, compound_stm -> .LBrace RBrace  | -float-, unary_exp -> .unary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Decrement  | Question, jump_stm -> .-return- exp Semicolon  | -float3-, postfix_exp -> .postfix_exp LParen RParen  | Question, exp_stm -> .exp Semicolon  | Semicolon, iteration_stm -> .while LParen exp RParen stm  | -struct-, stm -> .iteration_stm  | -sampler2D-, postfix_exp -> .postfix_exp Increment  | Dot, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | RBrace, postfix_exp -> .postfix_exp Dot ID  | EQ, stm -> .exp_stm  | else, jump_stm -> .-goto- ID  | NOT, jump_stm -> .-continue-  | Decrement, stm -> .compound_stm  | break, selection_stm -> .if LParen exp RParen stm else stm  | -half4-, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, stm -> .jump_stm  | for, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Number, unary_op -> .Plus  | Tilde, compound_stm -> .LBrace RBrace  | Minus, iteration_stm -> .while LParen exp RParen stm  | -char-, postfix_exp -> .postfix_exp Increment  | Divide, stm -> .selection_stm  | -float2-, stm -> .jump_stm  | -return-, primary_exp -> .ID  | Increment, iteration_stm -> .while LParen exp RParen stm  | ID, stm -> .iteration_stm  | -void-, unary_exp -> .Increment unary_exp  | LE, unary_exp -> .postfix_exp  | OR, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -fixed4-, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .NOT  | String, jump_stm -> .-goto- ID  | break, stm -> .iteration_stm  | -double-, compound_stm -> .LBrace RBrace  | -half4-, binary_exp -> .unary_exp  | RightShift, exp_stm -> .Semicolon  | Number, stm -> .iteration_stm  | -return-, binary_exp -> .unary_exp  | AND, unary_op -> .Tilde  | ID, exp_stm -> .exp Semicolon  | -uniform-, exp_stm -> .Semicolon  | break, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .primary_exp  | Divide, primary_exp -> .LParen exp RParen  | Decrement, stm -> .compound_stm  | Semicolon, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, stm -> .selection_stm  | -double-, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | -short-, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, stm -> .iteration_stm  | NOT, jump_stm -> .break  | -float2-, primary_exp -> .Number  | LParen, exp_stm -> .exp Semicolon  | ID, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | Comma, compound_stm -> .LBrace RBrace  | for, jump_stm -> .break  | -half3-, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, jump_stm -> .-goto- ID  | -half2-, postfix_exp -> .postfix_exp Decrement  | LParen, primary_exp -> .String  | Decrement, primary_exp -> .LParen exp RParen  | Minus, compound_stm -> .LBrace block_item_list RBrace  | -do-, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Decrement  | OR, exp_stm -> .exp Semicolon  | Number, primary_exp -> .ID  | LeftShift, stm -> .jump_stm  | -half4-, postfix_exp -> .postfix_exp Increment  | EQ, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, jump_stm -> .-goto- ID  | -sampler2D-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -long-, exp_stm -> .exp Semicolon  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, selection_stm -> .if LParen exp RParen stm else stm  | Number, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | ID, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | -void-, unary_exp -> .postfix_exp  | LeftShift, stm -> .jump_stm  | -int-, primary_exp -> .ID  | Dot, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .Increment unary_exp  | VerticalBar, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | -float4-, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | Plus, )
618 <- (615, 'RParen') (postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Ampersand, postfix_exp -> .postfix_exp LBrack exp RBrack  | Times, postfix_exp -> .postfix_exp LParen RParen  | NEQ, unary_exp -> .postfix_exp  | Assign, unary_exp -> .postfix_exp  | LT, postfix_exp -> .postfix_exp Dot ID  | Times, primary_exp -> .LParen exp RParen  | NEQ, unary_exp -> .Increment unary_exp  | Ampersand, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Plus, binary_exp -> .unary_exp  | Comma, postfix_exp -> .postfix_exp Increment  | Question, postfix_exp -> .postfix_exp Decrement  | Minus, unary_exp -> .postfix_exp  | Ampersand, stm -> .jump_stm  | else, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Increment, postfix_exp -> .postfix_exp LParen RParen  | Plus, unary_op -> .Minus  | Minus, postfix_exp -> .postfix_exp Decrement  | Times, unary_op -> .NOT  | LParen, primary_exp -> .String  | Semicolon, primary_exp -> .ID  | GT, unary_exp -> .Increment unary_exp  | Percent, primary_exp -> .String  | OR, postfix_exp -> .postfix_exp LBrack exp RBrack  | Percent, primary_exp -> .Number  | EQ, postfix_exp -> .postfix_exp LParen RParen  | Percent, stm -> .compound_stm  | else, unary_exp -> .Decrement unary_exp  | Minus, primary_exp -> .ID  | EQ, stm -> .exp_stm  | while, postfix_exp -> .postfix_exp Increment  | GT, unary_exp -> .unary_op unary_exp  | Plus, exp_stm -> .Semicolon  | while, unary_op -> .Plus  | Number, postfix_exp -> .primary_exp  | EQ, primary_exp -> .String  | LeftShift, primary_exp -> .Number  | LT, postfix_exp -> .postfix_exp Increment  | LParen, postfix_exp -> .postfix_exp Increment  | Plus, postfix_exp -> .postfix_exp LParen RParen  | GE, unary_exp -> .postfix_exp  | GT, postfix_exp -> .primary_exp  | LParen, postfix_exp -> .primary_exp  | OR, selection_stm -> .if LParen exp RParen stm else stm  | while, stm -> .compound_stm  | while, compound_stm -> .LBrace block_item_list RBrace  | while, unary_exp -> .postfix_exp  | RightShift, unary_exp -> .Decrement unary_exp  | GE, primary_exp -> .ID  | LParen, unary_op -> .Tilde  | Decrement, unary_op -> .NOT  | Increment, unary_op -> .NOT  | Number, postfix_exp -> .postfix_exp LBrack exp RBrack  | Dot, postfix_exp -> .postfix_exp Decrement  | RightShift, postfix_exp -> .postfix_exp Increment  | OR, unary_op -> .NOT  | Tilde, binary_exp -> .unary_exp  | Divide, postfix_exp -> .postfix_exp Decrement  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LeftShift, primary_exp -> .String  | NEQ, unary_op -> .Tilde  | LParen, unary_exp -> .Decrement unary_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | Minus, primary_exp -> .Number  | Dot, primary_exp -> .LParen exp RParen  | AND, unary_op -> .Tilde  | Plus, unary_op -> .NOT  | Plus, postfix_exp -> .postfix_exp Dot ID  | Dot, primary_exp -> .ID  | Times, jump_stm -> .-goto- ID  | else, unary_op -> .Plus  | ID, primary_exp -> .Number  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LBrack, compound_stm -> .LBrace block_item_list RBrace  | else, binary_exp -> .binary_exp binary_op unary_exp  | Ampersand, primary_exp -> .String  | GE, exp -> .assignment_exp  | Comma, unary_exp -> .postfix_exp  | Minus, binary_exp -> .unary_exp  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Caret, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GE, postfix_exp -> .postfix_exp Dot ID  | Divide, unary_op -> .Tilde  | Tilde, postfix_exp -> .postfix_exp Decrement  | Dot, unary_exp -> .unary_op unary_exp  | LE, jump_stm -> .break  | else, primary_exp -> .LParen exp RParen  | VerticalBar, postfix_exp -> .postfix_exp Increment  | Ampersand, primary_exp -> .String  | GT, binary_exp -> .unary_exp  | GT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | RightShift, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | Increment, unary_exp -> .Decrement unary_exp  | Divide, unary_exp -> .Increment unary_exp  | Divide, jump_stm -> .-return- exp Semicolon  | while, postfix_exp -> .postfix_exp Dot ID  | Ampersand, postfix_exp -> .postfix_exp Increment  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LE, postfix_exp -> .primary_exp  | Dot, primary_exp -> .String  | LE, postfix_exp -> .postfix_exp Dot ID  | Increment, exp -> .assignment_exp  | Semicolon, binary_exp -> .unary_exp  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Caret, postfix_exp -> .primary_exp  | LeftShift, postfix_exp -> .postfix_exp LBrack exp RBrack  | Plus, primary_exp -> .ID  | Plus, postfix_exp -> .postfix_exp Decrement  | Ampersand, primary_exp -> .Number  | RightShift, selection_stm -> .if LParen exp RParen stm else stm  | else, primary_exp -> .String  | VerticalBar, unary_exp -> .postfix_exp  | Times, primary_exp -> .Number  | Percent, primary_exp -> .Number  | AND, unary_exp -> .unary_op unary_exp  | VerticalBar, unary_op -> .NOT  | ID, unary_exp -> .Increment unary_exp  | Times, primary_exp -> .ID  | Increment, unary_exp -> .Decrement unary_exp  | RightShift, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Assign, postfix_exp -> .postfix_exp Increment  | Assign, stm -> .iteration_stm  | while, postfix_exp -> .postfix_exp Decrement  | Increment, unary_op -> .Minus  | Decrement, postfix_exp -> .primary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | LeftShift, unary_exp -> .unary_op unary_exp  | Assign, primary_exp -> .String  | Question, primary_exp -> .String  | Dot, primary_exp -> .Number  | Question, postfix_exp -> .postfix_exp Increment  | Comma, postfix_exp -> .postfix_exp LParen RParen  | OR, unary_exp -> .unary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Dot ID  | GE, primary_exp -> .Number  | LeftShift, unary_exp -> .unary_op unary_exp  | NEQ, jump_stm -> .break  | while, unary_exp -> .postfix_exp  | Question, exp_stm -> .exp Semicolon  | while, binary_exp -> .binary_exp binary_op unary_exp  | Percent, primary_exp -> .Number  | LBrack, postfix_exp -> .postfix_exp LBrack exp RBrack  | Divide, unary_exp -> .Decrement unary_exp  | LT, postfix_exp -> .postfix_exp LBrack exp RBrack  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LParen, binary_exp -> .binary_exp binary_op unary_exp  | EQ, unary_exp -> .Increment unary_exp  | Plus, postfix_exp -> .postfix_exp Decrement  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LParen, primary_exp -> .LParen exp RParen  | Times, postfix_exp -> .primary_exp  | Percent, unary_op -> .Plus  | Plus, binary_exp -> .binary_exp binary_op unary_exp  | Plus, primary_exp -> .String  | Comma, binary_exp -> .binary_exp binary_op unary_exp  | Question, primary_exp -> .Number  | NEQ, postfix_exp -> .postfix_exp Increment  | LBrack, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | while, primary_exp -> .LParen exp RParen  | Increment, primary_exp -> .LParen exp RParen  | RightShift, unary_op -> .Plus  | LParen, postfix_exp -> .postfix_exp LBrack exp RBrack  | GE, unary_exp -> .Decrement unary_exp  | Question, unary_op -> .Tilde  | String, unary_exp -> .unary_op unary_exp  | LT, primary_exp -> .Number  | GE, stm -> .iteration_stm  | else, iteration_stm -> .while LParen exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | GT, primary_exp -> .Number  | Times, unary_exp -> .Decrement unary_exp  | Assign, binary_exp -> .binary_exp binary_op unary_exp  | Times, primary_exp -> .String  | RightShift, binary_exp -> .binary_exp binary_op unary_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | EQ, primary_exp -> .LParen exp RParen  | EQ, postfix_exp -> .postfix_exp Decrement  | Semicolon, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Semicolon, exp -> .exp Comma assignment_exp  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Ampersand, postfix_exp -> .postfix_exp LParen RParen  | Comma, primary_exp -> .ID  | Minus, unary_exp -> .unary_op unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | LBrack, primary_exp -> .LParen exp RParen  | OR, postfix_exp -> .postfix_exp Dot ID  | VerticalBar, unary_exp -> .unary_op unary_exp  | Times, primary_exp -> .LParen exp RParen  | Dot, postfix_exp -> .primary_exp  | Times, binary_exp -> .unary_exp  | NEQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | OR, exp_stm -> .exp Semicolon  | else, primary_exp -> .Number  | Decrement, postfix_exp -> .postfix_exp LParen RParen  | LBrack, unary_exp -> .postfix_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | LT, postfix_exp -> .postfix_exp LParen RParen  | VerticalBar, postfix_exp -> .primary_exp  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Question, unary_op -> .Minus  | Increment, postfix_exp -> .postfix_exp LBrack exp RBrack  | Minus, postfix_exp -> .postfix_exp Decrement  | NEQ, unary_exp -> .Decrement unary_exp  | GT, primary_exp -> .LParen exp RParen  | LT, binary_exp -> .unary_exp  | LE, primary_exp -> .String  | AND, postfix_exp -> .primary_exp  | Increment, jump_stm -> .-return- exp Semicolon  | else, primary_exp -> .LParen exp RParen  | GE, conditional_exp -> .binary_exp  | Comma, primary_exp -> .LParen exp RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | NEQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | OR, postfix_exp -> .postfix_exp Decrement  | Plus, iteration_stm -> .while LParen exp RParen stm  | else, binary_exp -> .binary_exp binary_op unary_exp  | RightShift, postfix_exp -> .postfix_exp Increment  | RightShift, primary_exp -> .ID  | OR, postfix_exp -> .postfix_exp Increment  | NEQ, postfix_exp -> .postfix_exp Increment  | Percent, postfix_exp -> .postfix_exp Dot ID  | Caret, postfix_exp -> .primary_exp  | Caret, binary_exp -> .unary_exp  | LT, unary_op -> .Plus  | String, postfix_exp -> .postfix_exp Decrement  | EQ, unary_op -> .Plus  | Minus, postfix_exp -> .postfix_exp LBrack exp RBrack  | Caret, postfix_exp -> .postfix_exp Increment  | AND, primary_exp -> .ID  | Ampersand, unary_exp -> .Decrement unary_exp  | NEQ, unary_exp -> .Increment unary_exp  | OR, primary_exp -> .LParen exp RParen  | GT, postfix_exp -> .primary_exp  | Decrement, unary_op -> .Minus  | Tilde, postfix_exp -> .postfix_exp Increment  | LT, postfix_exp -> .primary_exp  | AND, binary_exp -> .binary_exp binary_op unary_exp  | Minus, postfix_exp -> .postfix_exp Decrement  | LeftShift, primary_exp -> .String  | Plus, postfix_exp -> .primary_exp  | Ampersand, primary_exp -> .ID  | LeftShift, postfix_exp -> .primary_exp  | Question, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | AND, unary_exp -> .postfix_exp  | OR, unary_exp -> .Decrement unary_exp  | Ampersand, unary_op -> .Minus  | ID, postfix_exp -> .postfix_exp Increment  | GE, unary_exp -> .unary_op unary_exp  | OR, postfix_exp -> .postfix_exp Dot ID  | LE, postfix_exp -> .primary_exp  | NEQ, compound_stm -> .LBrace RBrace  | while, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | GT, unary_exp -> .Increment unary_exp  | Minus, postfix_exp -> .postfix_exp LParen RParen  | Divide, postfix_exp -> .postfix_exp Decrement  | Comma, binary_exp -> .unary_exp  | Percent, unary_exp -> .postfix_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | VerticalBar, primary_exp -> .ID  | LT, unary_exp -> .unary_op unary_exp  | Percent, unary_op -> .Tilde  | Number, stm -> .jump_stm  | while, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | while, postfix_exp -> .postfix_exp LParen RParen  | Semicolon, postfix_exp -> .postfix_exp LBrack exp RBrack  | AND, unary_exp -> .unary_op unary_exp  | Ampersand, unary_exp -> .Decrement unary_exp  | OR, unary_op -> .Minus  | Number, postfix_exp -> .postfix_exp Dot ID  | LT, primary_exp -> .LParen exp RParen  | Question, binary_exp -> .binary_exp binary_op unary_exp  | LT, primary_exp -> .Number  | Assign, postfix_exp -> .postfix_exp Decrement  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | NEQ, postfix_exp -> .primary_exp  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | LE, unary_exp -> .Increment unary_exp  | Caret, postfix_exp -> .postfix_exp LBrack exp RBrack  | Semicolon, primary_exp -> .ID  | LE, binary_exp -> .unary_exp  | RightShift, unary_op -> .Minus  | LParen, unary_op -> .NOT  | Minus, unary_exp -> .Increment unary_exp  | Question, postfix_exp -> .postfix_exp LBrack exp RBrack  | Ampersand, primary_exp -> .String  | Decrement, primary_exp -> .Number  | Semicolon, unary_exp -> .Decrement unary_exp  | Caret, unary_exp -> .unary_op unary_exp  | Divide, unary_op -> .Tilde  | Minus, exp -> .exp Comma assignment_exp  | Comma, primary_exp -> .ID  | Question, primary_exp -> .ID  | Assign, unary_exp -> .unary_op unary_exp  | Caret, postfix_exp -> .postfix_exp Increment  | Increment, jump_stm -> .-goto- ID  | while, postfix_exp -> .postfix_exp LBrack exp RBrack  | LeftShift, postfix_exp -> .postfix_exp Decrement  | Question, postfix_exp -> .postfix_exp Dot ID  | Plus, postfix_exp -> .postfix_exp Dot ID  | Percent, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Decrement, postfix_exp -> .postfix_exp Decrement  | LT, assignment_exp -> .unary_exp assignment_op assignment_exp  | Comma, unary_exp -> .unary_op unary_exp  | GE, unary_exp -> .postfix_exp  | VerticalBar, postfix_exp -> .postfix_exp LBrack exp RBrack  | Increment, binary_exp -> .unary_exp  | LeftShift, unary_exp -> .postfix_exp  | EQ, compound_stm -> .LBrace RBrace  | else, primary_exp -> .ID  | Caret, unary_exp -> .postfix_exp  | Comma, postfix_exp -> .postfix_exp LParen RParen  | LE, postfix_exp -> .postfix_exp Increment  | Minus, postfix_exp -> .primary_exp  | Plus, primary_exp -> .ID  | RightShift, unary_exp -> .Decrement unary_exp  | Times, postfix_exp -> .postfix_exp Decrement  | VerticalBar, primary_exp -> .ID  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | NEQ, exp_stm -> .Semicolon  | else, primary_exp -> .Number  | Comma, primary_exp -> .String  | Times, stm -> .selection_stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Dot, primary_exp -> .LParen exp RParen  | LE, binary_exp -> .unary_exp  | VerticalBar, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen .stm  | else, primary_exp -> .LParen exp RParen  | Minus, postfix_exp -> .primary_exp  | GT, primary_exp -> .String  | Increment, unary_exp -> .postfix_exp  | GE, postfix_exp -> .postfix_exp LBrack exp RBrack  | Assign, binary_exp -> .unary_exp  | Question, unary_op -> .Plus  | Decrement, unary_exp -> .Decrement unary_exp  | LE, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Percent, postfix_exp -> .postfix_exp LBrack exp RBrack  | LE, postfix_exp -> .primary_exp  | LT, unary_op -> .Minus  | NOT, primary_exp -> .String  | LBrack, postfix_exp -> .postfix_exp Decrement  | GE, primary_exp -> .LParen exp RParen  | Ampersand, primary_exp -> .Number  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Question, unary_exp -> .Increment unary_exp  | Comma, unary_exp -> .Increment unary_exp  | AND, postfix_exp -> .primary_exp  | Comma, primary_exp -> .LParen exp RParen  | Assign, primary_exp -> .ID  | LBrack, unary_exp -> .Increment unary_exp  | Assign, unary_exp -> .postfix_exp  | Semicolon, primary_exp -> .LParen exp RParen  | LBrack, unary_exp -> .postfix_exp  | LE, unary_exp -> .Decrement unary_exp  | AND, primary_exp -> .String  | Assign, unary_exp -> .unary_op unary_exp  | EQ, primary_exp -> .Number  | Minus, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Divide, postfix_exp -> .postfix_exp Dot ID  | AND, postfix_exp -> .postfix_exp Increment  | Caret, postfix_exp -> .postfix_exp LParen RParen  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | Semicolon, primary_exp -> .LParen exp RParen  | Semicolon, postfix_exp -> .postfix_exp LParen RParen  | Caret, binary_exp -> .binary_exp binary_op unary_exp  | GE, primary_exp -> .String  | Percent, unary_exp -> .unary_op unary_exp  | GT, primary_exp -> .Number  | OR, unary_exp -> .Increment unary_exp  | VerticalBar, unary_op -> .Minus  | Plus, stm -> .selection_stm  | else, postfix_exp -> .postfix_exp Dot ID  | LeftShift, primary_exp -> .ID  | VerticalBar, unary_op -> .Plus  | Increment, primary_exp -> .String  | LT, assignment_exp -> .conditional_exp  | Semicolon, postfix_exp -> .postfix_exp Decrement  | GT, primary_exp -> .String  | Minus, primary_exp -> .ID  | GE, unary_exp -> .postfix_exp  | NEQ, postfix_exp -> .postfix_exp LParen RParen  | LT, primary_exp -> .ID  | AND, primary_exp -> .LParen exp RParen  | LParen, postfix_exp -> .postfix_exp LParen RParen  | Dot, unary_exp -> .Increment unary_exp  | NEQ, primary_exp -> .String  | Ampersand, unary_exp -> .unary_op unary_exp  | AND, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Minus, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | else, primary_exp -> .Number  | Plus, unary_op -> .Tilde  | ID, postfix_exp -> .primary_exp  | Assign, selection_stm -> .if LParen exp RParen stm  | else, primary_exp -> .Number  | Ampersand, postfix_exp -> .primary_exp  | GE, jump_stm -> .-continue-  | else, unary_exp -> .Increment unary_exp  | Semicolon, primary_exp -> .String  | Caret, primary_exp -> .ID  | Semicolon, postfix_exp -> .postfix_exp Dot ID  | Comma, postfix_exp -> .postfix_exp Dot ID  | LBrack, unary_op -> .Tilde  | Increment, primary_exp -> .Number  | Divide, postfix_exp -> .postfix_exp LBrack exp RBrack  | NEQ, unary_op -> .NOT  | String, postfix_exp -> .postfix_exp LBrack exp RBrack  | Comma, unary_exp -> .Increment unary_exp  | GE, unary_op -> .NOT  | NOT, unary_exp -> .Increment unary_exp  | EQ, unary_op -> .NOT  | Decrement, binary_exp -> .binary_exp binary_op unary_exp  | Comma, conditional_exp -> .binary_exp Question exp Colon conditional_exp  | Semicolon, selection_stm -> .if LParen exp RParen stm  | while, binary_exp -> .binary_exp binary_op unary_exp  | GT, unary_exp -> .Decrement unary_exp  | Semicolon, primary_exp -> .ID  | NEQ, primary_exp -> .LParen exp RParen  | Divide, postfix_exp -> .primary_exp  | LBrack, postfix_exp -> .postfix_exp Decrement  | Assign, primary_exp -> .Number  | Increment, jump_stm -> .-continue-  | while, conditional_exp -> .binary_exp  | Semicolon, unary_exp -> .Increment unary_exp  | LeftShift, postfix_exp -> .postfix_exp LParen RParen  | EQ, postfix_exp -> .postfix_exp Dot ID  | Minus, postfix_exp -> .postfix_exp LParen RParen  | AND, primary_exp -> .String  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | EQ, primary_exp -> .LParen exp RParen  | Plus, primary_exp -> .Number  | VerticalBar, postfix_exp -> .postfix_exp Decrement  | Decrement, unary_exp -> .Increment unary_exp  | RightShift, unary_exp -> .Decrement unary_exp  | LeftShift, postfix_exp -> .postfix_exp Dot ID  | LParen, unary_op -> .Tilde  | NOT, unary_exp -> .Increment unary_exp  | LT, unary_exp -> .unary_op unary_exp  | LeftShift, postfix_exp -> .primary_exp  | Divide, binary_exp -> .binary_exp binary_op unary_exp  | LeftShift, binary_exp -> .unary_exp  | Minus, postfix_exp -> .postfix_exp Dot ID  | OR, postfix_exp -> .postfix_exp Dot ID  | Question, primary_exp -> .ID  | Decrement, binary_exp -> .unary_exp  | Times, postfix_exp -> .postfix_exp LBrack exp RBrack  | GT, primary_exp -> .ID  | Comma, postfix_exp -> .postfix_exp Increment  | Dot, stm -> .exp_stm  | else, primary_exp -> .String  | EQ, postfix_exp -> .postfix_exp Increment  | Times, unary_exp -> .postfix_exp  | Plus, primary_exp -> .ID  | Divide, unary_op -> .Plus  | Tilde, postfix_exp -> .primary_exp  | Semicolon, postfix_exp -> .postfix_exp Increment  | Divide, unary_exp -> .Decrement unary_exp  | Plus, postfix_exp -> .postfix_exp Increment  | VerticalBar, unary_exp -> .Increment unary_exp  | LE, primary_exp -> .Number  | GT, postfix_exp -> .postfix_exp LBrack exp RBrack  | RightShift, unary_exp -> .unary_op unary_exp  | Minus, binary_exp -> .binary_exp binary_op unary_exp  | OR, unary_op -> .Minus  | String, unary_exp -> .Increment unary_exp  | GT, primary_exp -> .LParen exp RParen  | Percent, postfix_exp -> .primary_exp  | LE, unary_exp -> .unary_op unary_exp  | Comma, postfix_exp -> .postfix_exp Dot ID  | GT, binary_exp -> .unary_exp  | AND, primary_exp -> .LParen exp RParen  | Comma, postfix_exp -> .postfix_exp LParen RParen  | RightShift, binary_exp -> .unary_exp  | GE, postfix_exp -> .postfix_exp LParen RParen  | Decrement, assignment_exp -> .unary_exp assignment_op assignment_exp  | Semicolon, iteration_stm -> .-do- stm while LParen exp RParen Semicolon  | else, primary_exp -> .String  | LParen, unary_op -> .Plus  | NOT, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LParen, postfix_exp -> .postfix_exp Dot ID  | RightShift, primary_exp -> .LParen exp RParen  | Decrement, unary_exp -> .Decrement unary_exp  | Percent, binary_exp -> .binary_exp binary_op unary_exp  | AND, unary_exp -> .postfix_exp  | Divide, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | LT, binary_exp -> .binary_exp binary_op unary_exp  | Divide, postfix_exp -> .postfix_exp Increment  | Decrement, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Comma, unary_exp -> .Decrement unary_exp  | VerticalBar, binary_exp -> .unary_exp  | OR, unary_exp -> .unary_op unary_exp  | Semicolon, assignment_exp -> .conditional_exp  | Comma, binary_exp -> .unary_exp  | Caret, unary_exp -> .Decrement unary_exp  | EQ, postfix_exp -> .postfix_exp LBrack exp RBrack  | Question, postfix_exp -> .postfix_exp Decrement  | AND, postfix_exp -> .postfix_exp Decrement  | LBrack, binary_exp -> .unary_exp  | EQ, postfix_exp -> .postfix_exp Decrement  | LParen, postfix_exp -> .postfix_exp Dot ID  | Assign, postfix_exp -> .postfix_exp Decrement  | OR, primary_exp -> .Number  | Caret, postfix_exp -> .postfix_exp Increment  | LE, postfix_exp -> .postfix_exp Increment  | EQ, iteration_stm -> .for LParen exp Semicolon exp Semicolon exp RParen stm  | while, postfix_exp -> .postfix_exp LParen RParen  | Times, postfix_exp -> .postfix_exp Dot ID  | EQ, postfix_exp -> .postfix_exp LParen argument_exp_list RParen  | Times, unary_exp -> .postfix_exp  | Percent, primary_exp -> .ID  | Dot, postfix_exp -> .postfix_exp LParen RParen  | Assign, binary_exp -> .unary_exp  | Ampersand, unary_exp -> .postfix_exp  | LeftShift, )
619 <- (617, 'stm') (iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | Number, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -fixed3-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | for, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | LBrace, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -struct-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -float4-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -float-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | Increment, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -void-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -float2-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -int-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -float3-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | LParen, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | break, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -half2-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | NOT, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -return-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | Decrement, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -long-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | RBrace, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | Tilde, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | ID, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | while, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | if, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -short-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -half3-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -char-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | else, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -do-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | Plus, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -uniform-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | Minus, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -half4-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | String, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -continue-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -fixed2-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -sampler2D-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -double-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | Semicolon, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -goto-, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | -fixed4-, )
620 <- (618, 'stm') (iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | while, iteration_stm -> for LParen exp Semicolon exp Semicolon exp RParen stm.  | else, )
