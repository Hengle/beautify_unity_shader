prog   -> 'CGPROGRAM' cg_prog 'ENDCG'
       -> 'CGINCLUDE' cg_prog 'ENDCG'
//7 cg
cg_prog     -> cg_stms
cg_stms     -> cg_stm cg_stms
            -> 
cg_stm      -> preprocessing_stm
            -> function_definition
            -> dec
            -> 'CBUFFER_START' ( ID ) dec_list 'CBUFFER_END'   // tradeoff
function_definition     -> dec_specifier declarator compound_stm 
                        -> dec_specifier declarator : ID compound_stm 
                        -> [ID(Number)] dec_specifier declarator compound_stm   // hacking for [maxvertexcount(3)]
                        -> [ID(Number)] dec_specifier declarator : ID compound_stm 


//8 预处理当做特殊的stm处理好了，简单点
//  C语言的MARCO可以大致分为两种。一种是不带参数的宏，这个文法近似当做ID处理；另一种是带参数的宏，近似当做函数调用ID(...)处理。
//  这种近似有漏洞吗？有的。比如MARCO展开后末尾有';'号，在源文件中就可以不加分号。这会导致语法识别错误。
//  彻底解决这个问题的方法是把C语言的MARCO机制也模拟出来。BUT！我！不！想！模！拟！它！我！受！够！了！
//题外话，C语言为什么不是context-free语法
//  一个证据是typedef，半个证据是preprocess
preprocessing_stm   -> pp_if_stm 
                    -> pp_cmd
                    -> marco_unfold  // tradeoff
pp_if_stm   -> # 'if' PPTokens
            -> # 'ifdef' ID
            -> # 'ifndef' ID
            -> # 'elif' PPTokens
            -> # 'else'
            -> # 'endif'
pp_cmd      -> # 'include' String
            -> # 'pragma' PPTokens
            -> # 'define' PPTokens
marco_unfold      -> exp ;
dec_list          -> dec
                  -> dec_list dec


//9 expression，C语言的简化版
primary_exp -> ID
            -> String
            -> Number
            -> ( exp )
postfix_exp -> primary_exp
            -> postfix_exp [ exp ]
            -> postfix_exp ( )
            -> postfix_exp ( argument_exp_list )
            -> buildin_type_name ( argument_exp_list )  // tradeoff
            -> postfix_exp . ID
            -> postfix_exp ++
            -> postfix_exp --
argument_exp_list       -> assignment_exp
                        -> argument_exp_list , assignment_exp
unary_exp   -> postfix_exp
            -> ++ unary_exp
            -> -- unary_exp
            -> unary_op unary_exp
unary_op    -> +
            -> -
            -> !
            -> ~
cast_exp    -> unary_exp
            -> ( buildin_type_name ) cast_exp  // tradeoff C语法规则中打破lr1语法的一条，考虑下是否可以在代码中特判下处理。
binary_exp  -> cast_exp
            -> binary_exp binary_op unary_exp
binary_op   -> *
            -> /
            -> %
            -> +
            -> -
            -> <<
            -> >>
            -> <
            -> >
            -> <=
            -> >=
            -> ==
            -> !=
            -> &
            -> ^
            -> |
            -> &&
            -> ||
conditional_exp   -> binary_exp
                  -> binary_exp ? exp : conditional_exp
assignment_exp    -> conditional_exp
                  -> unary_exp assignment_op assignment_exp
assignment_op     -> =
                  -> *=
                  -> /=
                  -> %=
                  -> +=
                  -> -=
                  -> <<=
                  -> >>=
                  -> &=
                  -> ^=
                  -> |=
exp         -> assignment_exp
            -> exp, assignment_exp
// 10 declaration
// 因为typedef的存在，'ID ;'存在两种解释。所以禁用这条，并且把struct_specifier和dec_specifier的关系。
//dec               -> dec_specifier ;
dec               -> struct_specifier ;
                  -> dec_specifier init_dec_list ;
dec_specifier     -> type_specifier
                  -> type_qualifier dec_specifier
                  -> storage_class_specifier dec_specifier
type_specifier    -> buildin_type_name
                  -> typedef_name
buildin_type_name -> 'void'
                  -> 'char'
                  -> 'short'
                  -> 'int'
                  -> 'long'
                  -> 'fixed'
                  -> 'half'
                  -> 'float'
                  -> 'double'
                  -> 'sampler2D'
                  -> 'float2'
                  -> 'float3'
                  -> 'float4'
                  -> 'half2'
                  -> 'half3'
                  -> 'half4'
                  -> 'fixed2'
                  -> 'fixed3'
                  -> 'fixed4'
                  -> 'float3x3'
type_qualifier    -> 'uniform'
                  -> 'inline'
                  -> 'const'
storage_class_specifier -> 'static'
typedef_name      -> ID

struct_specifier  -> 'struct' ID
                  -> 'struct' ID { struct_dec_list }
struct_dec_list   -> struct_dec
                  -> struct_dec_list struct_dec
struct_dec        -> type_specifier struct_declarator_list ;
                  -> ID ;                                   // hacking for V2F_SHADOW_CASTER;
                  -> ID ( Number )                          // hacking for UNITY_FOG_COORDS(1)
                  -> ID ( Number, Number )                  // hacking for LIGHTING_COORDS(3,4)
                  -> pp_if_stm                              // tradeoff，理想的处理方式不是这样子的。理想的处理方式是模拟出分支，而不要破坏语法的完整性。
                  -> 'INTERNAL_DATA'
                  -> 'UNITY_VERTEX_INPUT_INSTANCE_ID'
                  -> 'UNITY_VERTEX_OUTPUT_STEREO'
struct_declarator_list  -> struct_declarator
                        -> struct_declarator_list , struct_declarator
struct_declarator -> declarator
                  -> declarator : ID

declarator        -> ID
// 因为typedef的存在，'ID ('会存在两种解释，所以禁用这条。
//                  -> ( declarator )
                  -> declarator [ exp ]
                  -> declarator ( )
                  -> declarator ( parameter_list )
parameter_list    -> parameter_dec
                  -> parameter_list , parameter_dec
parameter_dec     -> parameter_dec_specifier declarator
                  -> parameter_dec_specifier declarator : ID
parameter_dec_specifier -> dec_specifier
                        -> 'out' dec_specifier
                        -> 'inout' dec_specifier
                        -> 'triangle' dec_specifier
                        -> 'inout' 'TriangleStream' < ID >

init_dec_list     -> init_dec
                  -> init_dec_list , init_dec
init_dec          -> declarator
                  -> declarator = initializer
initializer       -> assignment_exp
                  -> { initializer_list }
                  -> { initializer_list , }
initializer_list  -> initializer
                  -> initializer_list , initializer
// 11 statement
stm               -> exp_stm
                  -> compound_stm
                  -> selection_stm
                  -> iteration_stm
                  -> jump_stm
                  -> pp_if_stm            // tradeoff
                  -> 'UNITY_BRANCH'       // tradeoff 这里可以考虑下是否有更好的策略，MARCO_UNFOLD的一个特征是全大写
                  -> 'UNITY_UNROLL'
                  -> 'TRANSFER_SHADOW_CASTER_NORMALOFFSET' (ID)
                  -> 'SHADOW_CASTER_FRAGMENT' (ID)
                  -> 'SPEEDTREE_COPY_FRAG' (ID, ID)
                  -> 'UNITY_TRANSFER_DITHER_CROSSFADE_HPOS' ( argument_exp_list )
                  -> 'UNITY_APPLY_DITHER_CROSSFADE' (ID)
exp_stm           -> exp ;
                  -> ;
compound_stm      -> { block_item_list }
                  -> { }
block_item_list   -> block_item
                  -> block_item_list block_item
block_item        -> dec
                  -> stm
selection_stm     -> 'if' ( exp ) stm
                  -> 'if' ( exp ) stm 'else' stm
iteration_stm     -> 'while' (exp) stm
                  -> 'do' stm 'while' (exp);
                  -> 'for' (exp; exp; exp) stm 
                  -> 'for' (dec_specifier init_dec_list; exp; exp) stm 
jump_stm          -> 'goto' ID
                  -> 'continue'
                  -> 'break'
                  -> 'return' exp ;
                  -> 'return' ;