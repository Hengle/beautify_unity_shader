/* 为了方便写出可以被 ？？识别的product，做以下约定：
1. 小写字母开头 = 语法Symbol
2. 大写字母开头 = 词法Token
3. 单引号开头 = TokenType.ID( xxx )
4. 标点 = TokenType.XXX
*/
//1
prog        -> 'Shader' String { shader_body }
shader_body -> props subshr 
//2
props       -> 'Properties' { props_body }
            -> 
props_body  -> prop_stm props_body
            -> 
prop_stm    -> ID ( String, ReservedWord ) = prop_init
prop_init   -> Number
            -> String { }
            -> ( Number, Number, Number, Number )
//3
subshr      -> 'SubShader' { subshr_body }
subshr_body -> tags cmds passes
//4
tags        -> 'Tags' { tags_body }
tags_body   -> tag_smt tags_body
            -> 
tag_smt     -> String = String
//5
cmds        -> cmd_stm cmds
            ->
cmd_stm     -> ReservedWord ids
ids         -> ID ids
            ->
//6
passes      -> shr_pass passes
            ->
shr_pass    -> 'Pass' { pass_body }
pass_body   -> 'CGPROGRAM' cg_prog 'ENDCG'
//7 cg
cg_prog     -> cg_stm
cg_stm      -> preprocessing_stm
//8 预处理当做特殊的stm处理好了，简单点
preprocessing_stm   -> pp_if_stm 
                    -> pp_cmd
pp_if_stm   -> # 'if' ID
            -> # 'ifdef' ID
            -> # 'idndef' ID
            -> # 'elif' ID
            -> # 'else'
            -> # 'endif'
pp_cmd      -> # 'include' String


//CGPROGRAM   -> 'CGPROGRAM' cgprog 'ENDCG'
//cgprog      -> 后面就是类似C语言的产生式了
