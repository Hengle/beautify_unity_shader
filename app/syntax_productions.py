from .syntax_nonterminal import Nonterminal
from .syntax_production import Production
from .lex_tokens import TokenType as T
from .syntax_nonterminals import NonterminalType as N
import unittest


productionList = [
    Production("prog ->  'Shader' String { shader_body }",
               'p1',
               N.prog,
               ('Shader', T.String, T.LBrace, N.shader_body, T.RBrace, )),
    Production("shader_body ->  props subshr",
               'p2',
               N.shader_body,
               (N.props, N.subshr, )),
    Production("props ->  'Properties' { props_body }",
               'p3',
               N.props,
               ('Properties', T.LBrace, N.props_body, T.RBrace, )),
    Production("props -> ",
               'p4',
               N.props,
               ()),
    Production("props_body ->  prop_stm props_body",
               'p5',
               N.props_body,
               (N.prop_stm, N.props_body, )),
    Production("props_body -> ",
               'p6',
               N.props_body,
               ()),
    Production("prop_stm ->  ID ( String , ReservedWord ) = prop_init",
               'p7',
               N.prop_stm,
               (T.ID, T.LParen, T.String, T.Comma, T.ReservedWord, T.RParen, T.Assign, N.prop_init, )),
    Production("prop_init ->  Number",
               'p8',
               N.prop_init,
               (T.Number, )),
    Production("prop_init ->  String { }",
               'p9',
               N.prop_init,
               (T.String, T.LBrace, T.RBrace, )),
    Production("prop_init ->  ( Number , Number , Number , Number )",
               'p10',
               N.prop_init,
               (T.LParen, T.Number, T.Comma, T.Number, T.Comma, T.Number, T.Comma, T.Number, T.RParen, )),
    Production("subshr ->  'SubShader' { subshr_body }",
               'p11',
               N.subshr,
               ('SubShader', T.LBrace, N.subshr_body, T.RBrace, )),
    Production("subshr_body ->  tags cmds passes",
               'p12',
               N.subshr_body,
               (N.tags, N.cmds, N.passes, )),
    Production("tags ->  'Tags' { tags_body }",
               'p13',
               N.tags,
               ('Tags', T.LBrace, N.tags_body, T.RBrace, )),
    Production("tags_body ->  tag_smt tags_body",
               'p14',
               N.tags_body,
               (N.tag_smt, N.tags_body, )),
    Production("tags_body -> ",
               'p15',
               N.tags_body,
               ()),
    Production("tag_smt ->  String = String",
               'p16',
               N.tag_smt,
               (T.String, T.Assign, T.String, )),
    Production("cmds ->  cmd_stm cmds",
               'p17',
               N.cmds,
               (N.cmd_stm, N.cmds, )),
    Production("cmds -> ",
               'p18',
               N.cmds,
               ()),
    Production("cmd_stm ->  ReservedWord ids",
               'p19',
               N.cmd_stm,
               (T.ReservedWord, N.ids, )),
    Production("ids ->  ID ids",
               'p20',
               N.ids,
               (T.ID, N.ids, )),
    Production("ids -> ",
               'p21',
               N.ids,
               ()),
    Production("passes ->  shr_pass passes",
               'p22',
               N.passes,
               (N.shr_pass, N.passes, )),
    Production("passes -> ",
               'p23',
               N.passes,
               ()),
    Production("shr_pass ->  'Pass' { pass_body }",
               'p24',
               N.shr_pass,
               ('Pass', T.LBrace, N.pass_body, T.RBrace, )),
    Production("pass_body ->  'CGPROGRAM' cg_prog 'ENDCG'",
               'p25',
               N.pass_body,
               ('CGPROGRAM', N.cg_prog, 'ENDCG', )),
    Production("cg_prog ->  cg_stms",
               'p26',
               N.cg_prog,
               (N.cg_stms, )),
    Production("cg_stms ->  cg_stm cg_stms",
               'p27',
               N.cg_stms,
               (N.cg_stm, N.cg_stms, )),
    Production("cg_stms -> ",
               'p28',
               N.cg_stms,
               ()),
    Production("cg_stm ->  preprocessing_stm",
               'p29',
               N.cg_stm,
               (N.preprocessing_stm, )),
    Production("cg_stm ->  function_definition",
               'p30',
               N.cg_stm,
               (N.function_definition, )),
    Production("cg_stm ->  dec",
               'p31',
               N.cg_stm,
               (N.dec, )),
    Production("function_definition ->  dec_specifier declarator compound_stm",
               'p32',
               N.function_definition,
               (N.dec_specifier, N.declarator, N.compound_stm, )),
    Production("preprocessing_stm ->  pp_if_stm",
               'p33',
               N.preprocessing_stm,
               (N.pp_if_stm, )),
    Production("preprocessing_stm ->  pp_cmd",
               'p34',
               N.preprocessing_stm,
               (N.pp_cmd, )),
    Production("pp_if_stm ->  # 'if' ID",
               'p35',
               N.pp_if_stm,
               (T.Pound, 'if', T.ID, )),
    Production("pp_if_stm ->  # 'ifdef' ID",
               'p36',
               N.pp_if_stm,
               (T.Pound, 'ifdef', T.ID, )),
    Production("pp_if_stm ->  # 'idndef' ID",
               'p37',
               N.pp_if_stm,
               (T.Pound, 'idndef', T.ID, )),
    Production("pp_if_stm ->  # 'elif' ID",
               'p38',
               N.pp_if_stm,
               (T.Pound, 'elif', T.ID, )),
    Production("pp_if_stm ->  # 'else'",
               'p39',
               N.pp_if_stm,
               (T.Pound, 'else', )),
    Production("pp_if_stm ->  # 'endif'",
               'p40',
               N.pp_if_stm,
               (T.Pound, 'endif', )),
    Production("pp_cmd ->  # 'include' String",
               'p41',
               N.pp_cmd,
               (T.Pound, 'include', T.String, )),
    Production("pp_cmd ->  # 'pragma' ids",
               'p42',
               N.pp_cmd,
               (T.Pound, 'pragma', N.ids, )),
    Production("primary_exp ->  ID",
               'p43',
               N.primary_exp,
               (T.ID, )),
    Production("primary_exp ->  String",
               'p44',
               N.primary_exp,
               (T.String, )),
    Production("primary_exp ->  Number",
               'p45',
               N.primary_exp,
               (T.Number, )),
    Production("primary_exp ->  ( exp )",
               'p46',
               N.primary_exp,
               (T.LParen, N.exp, T.RParen, )),
    Production("postfix_exp ->  primary_exp",
               'p47',
               N.postfix_exp,
               (N.primary_exp, )),
    Production("postfix_exp ->  postfix_exp [ exp ]",
               'p48',
               N.postfix_exp,
               (N.postfix_exp, T.LBrack, N.exp, T.RBrack, )),
    Production("postfix_exp ->  postfix_exp ( argument_exp_list )",
               'p49',
               N.postfix_exp,
               (N.postfix_exp, T.LParen, N.argument_exp_list, T.RParen, )),
    Production("postfix_exp ->  postfix_exp . ID",
               'p50',
               N.postfix_exp,
               (N.postfix_exp, T.Dot, T.ID, )),
    Production("postfix_exp ->  postfix_exp + +",
               'p51',
               N.postfix_exp,
               (N.postfix_exp, T.Plus, T.Plus, )),
    Production("postfix_exp ->  postfix_exp - -",
               'p52',
               N.postfix_exp,
               (N.postfix_exp, T.Minus, T.Minus, )),
    Production("argument_exp_list ->  assignment_exp argument_exp_list",
               'p53',
               N.argument_exp_list,
               (N.assignment_exp, N.argument_exp_list, )),
    Production("argument_exp_list -> ",
               'p54',
               N.argument_exp_list,
               ()),
    Production("unary_exp ->  postfix_exp",
               'p55',
               N.unary_exp,
               (N.postfix_exp, )),
    Production("unary_exp ->  + + unary_exp",
               'p56',
               N.unary_exp,
               (T.Plus, T.Plus, N.unary_exp, )),
    Production("unary_exp ->  - - unary_exp",
               'p57',
               N.unary_exp,
               (T.Minus, T.Minus, N.unary_exp, )),
    Production("unary_exp ->  unary_op unary_exp",
               'p58',
               N.unary_exp,
               (N.unary_op, N.unary_exp, )),
    Production("unary_op ->  +",
               'p59',
               N.unary_op,
               (T.Plus, )),
    Production("unary_op ->  -",
               'p60',
               N.unary_op,
               (T.Minus, )),
    Production("unary_op ->  !",
               'p61',
               N.unary_op,
               (T.NOT, )),
    Production("unary_op ->  ~",
               'p62',
               N.unary_op,
               (T.Tilde, )),
    Production("binary_exp ->  unary_exp",
               'p63',
               N.binary_exp,
               (N.unary_exp, )),
    Production("binary_exp ->  binary_exp binary_op unary_exp",
               'p64',
               N.binary_exp,
               (N.binary_exp, N.binary_op, N.unary_exp, )),
    Production("binary_op ->  *",
               'p65',
               N.binary_op,
               (T.Times, )),
    Production("binary_op ->  /",
               'p66',
               N.binary_op,
               (T.Divide, )),
    Production("binary_op ->  %",
               'p67',
               N.binary_op,
               (T.Percent, )),
    Production("binary_op ->  +",
               'p68',
               N.binary_op,
               (T.Plus, )),
    Production("binary_op ->  -",
               'p69',
               N.binary_op,
               (T.Minus, )),
    Production("binary_op ->  <<",
               'p70',
               N.binary_op,
               (T.LeftShift, )),
    Production("binary_op ->  >>",
               'p71',
               N.binary_op,
               (T.RightShift, )),
    Production("binary_op ->  <",
               'p72',
               N.binary_op,
               (T.LT, )),
    Production("binary_op ->  >",
               'p73',
               N.binary_op,
               (T.GT, )),
    Production("binary_op ->  <=",
               'p74',
               N.binary_op,
               (T.LE, )),
    Production("binary_op ->  >=",
               'p75',
               N.binary_op,
               (T.GE, )),
    Production("binary_op ->  ==",
               'p76',
               N.binary_op,
               (T.EQ, )),
    Production("binary_op ->  !=",
               'p77',
               N.binary_op,
               (T.NEQ, )),
    Production("binary_op ->  &",
               'p78',
               N.binary_op,
               (T.Ampersand, )),
    Production("binary_op ->  ^",
               'p79',
               N.binary_op,
               (T.Caret, )),
    Production("binary_op ->  |",
               'p80',
               N.binary_op,
               (T.VerticalBar, )),
    Production("binary_op ->  &&",
               'p81',
               N.binary_op,
               (T.AND, )),
    Production("binary_op ->  ||",
               'p82',
               N.binary_op,
               (T.OR, )),
    Production("conditional_exp ->  binary_exp",
               'p83',
               N.conditional_exp,
               (N.binary_exp, )),
    Production("conditional_exp ->  binary_exp ? exp : conditional_exp",
               'p84',
               N.conditional_exp,
               (N.binary_exp, T.Question, N.exp, T.Colon, N.conditional_exp, )),
    Production("assignment_exp ->  conditional_exp",
               'p85',
               N.assignment_exp,
               (N.conditional_exp, )),
    Production("assignment_exp ->  unary_exp assignment_op assignment_exp",
               'p86',
               N.assignment_exp,
               (N.unary_exp, N.assignment_op, N.assignment_exp, )),
    Production("assignment_op ->  =",
               'p87',
               N.assignment_op,
               (T.Assign, )),
    Production("assignment_op ->  * =",
               'p88',
               N.assignment_op,
               (T.Times, T.Assign, )),
    Production("assignment_op ->  / =",
               'p89',
               N.assignment_op,
               (T.Divide, T.Assign, )),
    Production("assignment_op ->  %=",
               'p90',
               N.assignment_op,
               (T.ModAssign, )),
    Production("assignment_op ->  + =",
               'p91',
               N.assignment_op,
               (T.Plus, T.Assign, )),
    Production("assignment_op ->  - =",
               'p92',
               N.assignment_op,
               (T.Minus, T.Assign, )),
    Production("assignment_op ->  <<=",
               'p93',
               N.assignment_op,
               (T.LeftShiftAssign, )),
    Production("assignment_op ->  >>=",
               'p94',
               N.assignment_op,
               (T.RightShiftAssign, )),
    Production("assignment_op ->  &=",
               'p95',
               N.assignment_op,
               (T.AndAssign, )),
    Production("assignment_op ->  ^=",
               'p96',
               N.assignment_op,
               (T.XorAssign, )),
    Production("assignment_op ->  |=",
               'p97',
               N.assignment_op,
               (T.OrAssign, )),
    Production("exp ->  assignment_exp",
               'p98',
               N.exp,
               (N.assignment_exp, )),
    Production("exp ->  exp , assignment_exp",
               'p99',
               N.exp,
               (N.exp, T.Comma, N.assignment_exp, )),
    Production("dec ->  dec_specifier init_dec_list ;",
               'p100',
               N.dec,
               (N.dec_specifier, N.init_dec_list, T.Semicolon, )),
    Production("dec_specifier ->  'void'",
               'p101',
               N.dec_specifier,
               ('void', )),
    Production("dec_specifier ->  'char'",
               'p102',
               N.dec_specifier,
               ('char', )),
    Production("dec_specifier ->  'short'",
               'p103',
               N.dec_specifier,
               ('short', )),
    Production("dec_specifier ->  'int'",
               'p104',
               N.dec_specifier,
               ('int', )),
    Production("dec_specifier ->  'long'",
               'p105',
               N.dec_specifier,
               ('long', )),
    Production("dec_specifier ->  'float'",
               'p106',
               N.dec_specifier,
               ('float', )),
    Production("dec_specifier ->  'double'",
               'p107',
               N.dec_specifier,
               ('double', )),
    Production("dec_specifier ->  struct_specifier",
               'p108',
               N.dec_specifier,
               (N.struct_specifier, )),
    Production("struct_specifier ->  'struct' ID",
               'p109',
               N.struct_specifier,
               ('struct', T.ID, )),
    Production("struct_specifier ->  'struct' ID { struct_dec_list }",
               'p110',
               N.struct_specifier,
               ('struct', T.ID, T.LBrace, N.struct_dec_list, T.RBrace, )),
    Production("struct_dec_list ->  struct_dec",
               'p111',
               N.struct_dec_list,
               (N.struct_dec, )),
    Production("struct_dec_list ->  struct_dec_list struct_dec",
               'p112',
               N.struct_dec_list,
               (N.struct_dec_list, N.struct_dec, )),
    Production("struct_dec ->  dec_specifier declarator_list",
               'p113',
               N.struct_dec,
               (N.dec_specifier, N.declarator_list, )),
    Production("declarator_list ->  declarator",
               'p114',
               N.declarator_list,
               (N.declarator, )),
    Production("declarator_list ->  declarator_list , declarator",
               'p115',
               N.declarator_list,
               (N.declarator_list, T.Comma, N.declarator, )),
    Production("declarator ->  ID",
               'p116',
               N.declarator,
               (T.ID, )),
    Production("declarator ->  ( declarator )",
               'p117',
               N.declarator,
               (T.LParen, N.declarator, T.RParen, )),
    Production("declarator ->  declarator [ exp ]",
               'p118',
               N.declarator,
               (N.declarator, T.LBrack, N.exp, T.RBrack, )),
    Production("declarator ->  declarator ( parameter_list )",
               'p119',
               N.declarator,
               (N.declarator, T.LParen, N.parameter_list, T.RParen, )),
    Production("parameter_list ->  parameter_dec",
               'p120',
               N.parameter_list,
               (N.parameter_dec, )),
    Production("parameter_list ->  parameter_list , parameter_dec",
               'p121',
               N.parameter_list,
               (N.parameter_list, T.Comma, N.parameter_dec, )),
    Production("parameter_dec ->  dec_specifier declarator",
               'p122',
               N.parameter_dec,
               (N.dec_specifier, N.declarator, )),
    Production("init_dec_list ->  init_dec",
               'p123',
               N.init_dec_list,
               (N.init_dec, )),
    Production("init_dec_list ->  init_dec_list , init_dec",
               'p124',
               N.init_dec_list,
               (N.init_dec_list, T.Comma, N.init_dec, )),
    Production("init_dec ->  declarator",
               'p125',
               N.init_dec,
               (N.declarator, )),
    Production("init_dec ->  declarator = exp",
               'p126',
               N.init_dec,
               (N.declarator, T.Assign, N.exp, )),
    Production("stm ->  exp_stm",
               'p127',
               N.stm,
               (N.exp_stm, )),
    Production("stm ->  compound_stm",
               'p128',
               N.stm,
               (N.compound_stm, )),
    Production("stm ->  selection_stm",
               'p129',
               N.stm,
               (N.selection_stm, )),
    Production("stm ->  iteration_stm",
               'p130',
               N.stm,
               (N.iteration_stm, )),
    Production("stm ->  jump_stm",
               'p131',
               N.stm,
               (N.jump_stm, )),
    Production("exp_stm ->  exp ;",
               'p132',
               N.exp_stm,
               (N.exp, T.Semicolon, )),
    Production("exp_stm ->  ;",
               'p133',
               N.exp_stm,
               (T.Semicolon, )),
    Production("compound_stm ->  { block_item_list }",
               'p134',
               N.compound_stm,
               (T.LBrace, N.block_item_list, T.RBrace, )),
    Production("compound_stm ->  { }",
               'p135',
               N.compound_stm,
               (T.LBrace, T.RBrace, )),
    Production("block_item_list ->  block_item",
               'p136',
               N.block_item_list,
               (N.block_item, )),
    Production("block_item_list ->  block_item_list block_item",
               'p137',
               N.block_item_list,
               (N.block_item_list, N.block_item, )),
    Production("block_item ->  dec",
               'p138',
               N.block_item,
               (N.dec, )),
    Production("block_item ->  stm",
               'p139',
               N.block_item,
               (N.stm, )),
    Production("selection_stm ->  'if' ( exp ) stm",
               'p140',
               N.selection_stm,
               ('if', T.LParen, N.exp, T.RParen, N.stm, )),
    Production("selection_stm ->  'if' ( exp ) stm 'else' stm",
               'p141',
               N.selection_stm,
               ('if', T.LParen, N.exp, T.RParen, N.stm, 'else', N.stm, )),
    Production("iteration_stm ->  'while' ( exp ) stm",
               'p142',
               N.iteration_stm,
               ('while', T.LParen, N.exp, T.RParen, N.stm, )),
    Production("iteration_stm ->  'do' stm 'while' ( exp ) ;",
               'p143',
               N.iteration_stm,
               ('do', N.stm, 'while', T.LParen, N.exp, T.RParen, T.Semicolon, )),
    Production("iteration_stm ->  'for' ( exp ; exp ; exp ) stm",
               'p144',
               N.iteration_stm,
               ('for', T.LParen, N.exp, T.Semicolon, N.exp, T.Semicolon, N.exp, T.RParen, N.stm, )),
    Production("jump_stm ->  'goto' ID",
               'p145',
               N.jump_stm,
               ('goto', T.ID, )),
    Production("jump_stm ->  'continue'",
               'p146',
               N.jump_stm,
               ('continue', )),
    Production("jump_stm ->  'break'",
               'p147',
               N.jump_stm,
               ('break', )),
    Production("jump_stm ->  'return' exp ;",
               'p148',
               N.jump_stm,
               ('return', N.exp, T.Semicolon, )),
]









class Test(unittest.TestCase):

    def testNonterminals(self):
        self.assertTrue(len(productionList) > 0)
        for production in productionList:
            print(production)
            
            from .lex_token import Token
            argsCount = len(production.right)
            args = []
            for i in range(0, argsCount):
                args.append(Token(i))
            production.LeftNonterminalClass(*args)






def _init():
    for p in productionList:
        # Production <--> Nonterminal
        name1 = p.left
        name2 = name1 + p.name

        cls1 = Nonterminal.getClass(name1)
        if cls1 is None:
            print('error: lack of nonterminal class. production = %s' % p)
        cls1.leadingProductions.append(p)
        cls2 = Nonterminal.getClass(name2) or Nonterminal.getClass(name1)
        cls2.production = p
        p.LeftNonterminalClass = cls2

        # add 'Shader' into TokenType
        stTuple = ()
        for elm in p.right:
            if elm not in T and elm not in N:
                newSt = '-%s-' % elm
                T.add(newSt)
                stTuple += (newSt,)
            else:
                stTuple += (elm,)
        p.right = stTuple


_init()
